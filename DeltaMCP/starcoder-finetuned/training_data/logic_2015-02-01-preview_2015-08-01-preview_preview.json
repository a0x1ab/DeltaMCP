{
  "oasdiff": {
    "extensions": {
      "deleted": [
        "securityDefinitions"
      ],
      "modified": {
        "definitions": [
          {
            "oldValue": null,
            "value": {
              "properties": {
                "ignoreCertificateNameMismatch": {
                  "description": "The value indicating whether to ignore mismatch in certificate name.",
                  "type": "boolean"
                },
                "keepHttpConnectionAlive": {
                  "description": "The value indicating whether to keep the connection alive.",
                  "type": "boolean"
                },
                "supportHttpStatusCodeContinue": {
                  "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                  "type": "boolean"
                },
                "unfoldHttpHeaders": {
                  "description": "The value indicating whether to unfold the HTTP headers.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/AS2AcknowledgementConnectionSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "receiveAgreement": {
                  "properties": {
                    "protocolSettings": {
                      "properties": {
                        "acknowledgementConnectionSettings": {
                          "properties": {
                            "ignoreCertificateNameMismatch": {
                              "description": "The value indicating whether to ignore mismatch in certificate name.",
                              "type": "boolean"
                            },
                            "keepHttpConnectionAlive": {
                              "description": "The value indicating whether to keep the connection alive.",
                              "type": "boolean"
                            },
                            "supportHttpStatusCodeContinue": {
                              "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                              "type": "boolean"
                            },
                            "unfoldHttpHeaders": {
                              "description": "The value indicating whether to unfold the HTTP headers.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "envelopeSettings": {
                          "properties": {
                            "AutogenerateFileName": {
                              "description": "The value indicating whether to auto generate file name.",
                              "type": "boolean"
                            },
                            "SuspendMessageOnFileNameGenerationError": {
                              "description": "The value indicating whether to suspend message on file name generation error.",
                              "type": "boolean"
                            },
                            "fileNameTemplate": {
                              "description": "The template for file name.",
                              "type": "string"
                            },
                            "messageContentType": {
                              "description": "The message content type.",
                              "type": "string"
                            },
                            "transmitFileNameInMimeHeader": {
                              "description": "The value indicating whether to transmit file name in mime header.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "errorSettings": {
                          "properties": {
                            "ResendIfMdnNotReceived": {
                              "description": "The value indicating whether to resend message If MDN is not received.",
                              "type": "boolean"
                            },
                            "SuspendDuplicateMessage": {
                              "description": "The value indicating whether to suspend duplicate message.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "mdnSettings": {
                          "properties": {
                            "dispositionNotificationTo": {
                              "description": "The disposition notification to header value.",
                              "type": "string"
                            },
                            "mdnText": {
                              "description": "The MDN text.",
                              "type": "string"
                            },
                            "micHashingAlgorithm": {
                              "enum": [
                                "NotSpecified",
                                "None",
                                "SHA2256",
                                "SHA2384",
                                "SHA2512"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "HashingAlgorithm"
                              }
                            },
                            "needMdn": {
                              "description": "The value indicating whether to send or request a MDN.",
                              "type": "boolean"
                            },
                            "receiptDeliveryUrl": {
                              "description": "The receipt delivery URL.",
                              "type": "string"
                            },
                            "sendInboundMdnToMessageBox": {
                              "description": "The value indicating whether to send inbound MDN to message box.",
                              "type": "boolean"
                            },
                            "sendMdnAsynchronously": {
                              "description": "The value indicating whether to send the asynchronous MDN.",
                              "type": "boolean"
                            },
                            "signMdn": {
                              "description": "The value indicating whether the MDN needs to be signed or not.",
                              "type": "boolean"
                            },
                            "signOutboundMdnIfOptional": {
                              "description": "The value indicating whether to sign the outbound MDN if optional.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "messageConnectionSettings": {
                          "properties": {
                            "ignoreCertificateNameMismatch": {
                              "description": "The value indicating whether to ignore mismatch in certificate name.",
                              "type": "boolean"
                            },
                            "keepHttpConnectionAlive": {
                              "description": "The value indicating whether to keep the connection alive.",
                              "type": "boolean"
                            },
                            "supportHttpStatusCodeContinue": {
                              "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                              "type": "boolean"
                            },
                            "unfoldHttpHeaders": {
                              "description": "The value indicating whether to unfold the HTTP headers.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "securitySettings": {
                          "properties": {
                            "enableNrrForInboundDecodedMessages": {
                              "description": "The value indicating whether to enable NRR for inbound decoded messages.",
                              "type": "boolean"
                            },
                            "enableNrrForInboundEncodedMessages": {
                              "description": "The value indicating whether to enable NRR for inbound encoded messages.",
                              "type": "boolean"
                            },
                            "enableNrrForInboundMdn": {
                              "description": "The value indicating whether to enable NRR for inbound MDN.",
                              "type": "boolean"
                            },
                            "enableNrrForOutboundDecodedMessages": {
                              "description": "The value indicating whether to enable NRR for outbound decoded messages.",
                              "type": "boolean"
                            },
                            "enableNrrForOutboundEncodedMessages": {
                              "description": "The value indicating whether to enable NRR for outbound encoded messages.",
                              "type": "boolean"
                            },
                            "enableNrrForOutboundMdn": {
                              "description": "The value indicating whether to enable NRR for outbound MDN.",
                              "type": "boolean"
                            },
                            "encryptionCertificateName": {
                              "description": "The name of the encryption certificate.",
                              "type": "string"
                            },
                            "overrideGroupSigningCertificate": {
                              "description": "The value indicating whether to send or request a MDN.",
                              "type": "boolean"
                            },
                            "signingCertificateName": {
                              "description": "The name of the signing certificate.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "validationSettings": {
                          "properties": {
                            "checkCertificateRevocationListOnReceive": {
                              "description": "The value indicating whether to check for certificate revocation list on receive.",
                              "type": "boolean"
                            },
                            "checkCertificateRevocationListOnSend": {
                              "description": "The value indicating whether to check for certificate revocation list on send.",
                              "type": "boolean"
                            },
                            "checkDuplicateMessage": {
                              "description": "The value indicating whether to check for duplicate message.",
                              "type": "boolean"
                            },
                            "compressMessage": {
                              "description": "The value indicating whether the message has to be compressed.",
                              "type": "boolean"
                            },
                            "encryptMessage": {
                              "description": "The value indicating whether the message has to be encrypted.",
                              "type": "boolean"
                            },
                            "encryptionAlgorithm": {
                              "enum": [
                                "NotSpecified",
                                "None",
                                "DES3",
                                "RC2",
                                "AES128",
                                "AES192",
                                "AES256"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "EncryptionAlgorithm"
                              }
                            },
                            "interchangeDuplicatesValidityDays": {
                              "description": "The number of days to look back for duplicate interchange.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "overrideMessageProperties": {
                              "description": "The value indicating whether to override incoming message properties with those in agreement.",
                              "type": "boolean"
                            },
                            "signMessage": {
                              "description": "The value indicating whether the message has to be signed.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "receiverBusinessIdentity": {
                      "properties": {
                        "Qualifier": {
                          "description": "The business identity qualifier.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "The business identity value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "senderBusinessIdentity": {
                      "properties": {
                        "Qualifier": {
                          "description": "The business identity qualifier.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "The business identity value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "sendAgreement": {
                  "properties": {
                    "protocolSettings": {
                      "properties": {
                        "acknowledgementConnectionSettings": {
                          "properties": {
                            "ignoreCertificateNameMismatch": {
                              "description": "The value indicating whether to ignore mismatch in certificate name.",
                              "type": "boolean"
                            },
                            "keepHttpConnectionAlive": {
                              "description": "The value indicating whether to keep the connection alive.",
                              "type": "boolean"
                            },
                            "supportHttpStatusCodeContinue": {
                              "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                              "type": "boolean"
                            },
                            "unfoldHttpHeaders": {
                              "description": "The value indicating whether to unfold the HTTP headers.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "envelopeSettings": {
                          "properties": {
                            "AutogenerateFileName": {
                              "description": "The value indicating whether to auto generate file name.",
                              "type": "boolean"
                            },
                            "SuspendMessageOnFileNameGenerationError": {
                              "description": "The value indicating whether to suspend message on file name generation error.",
                              "type": "boolean"
                            },
                            "fileNameTemplate": {
                              "description": "The template for file name.",
                              "type": "string"
                            },
                            "messageContentType": {
                              "description": "The message content type.",
                              "type": "string"
                            },
                            "transmitFileNameInMimeHeader": {
                              "description": "The value indicating whether to transmit file name in mime header.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "errorSettings": {
                          "properties": {
                            "ResendIfMdnNotReceived": {
                              "description": "The value indicating whether to resend message If MDN is not received.",
                              "type": "boolean"
                            },
                            "SuspendDuplicateMessage": {
                              "description": "The value indicating whether to suspend duplicate message.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "mdnSettings": {
                          "properties": {
                            "dispositionNotificationTo": {
                              "description": "The disposition notification to header value.",
                              "type": "string"
                            },
                            "mdnText": {
                              "description": "The MDN text.",
                              "type": "string"
                            },
                            "micHashingAlgorithm": {
                              "enum": [
                                "NotSpecified",
                                "None",
                                "SHA2256",
                                "SHA2384",
                                "SHA2512"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "HashingAlgorithm"
                              }
                            },
                            "needMdn": {
                              "description": "The value indicating whether to send or request a MDN.",
                              "type": "boolean"
                            },
                            "receiptDeliveryUrl": {
                              "description": "The receipt delivery URL.",
                              "type": "string"
                            },
                            "sendInboundMdnToMessageBox": {
                              "description": "The value indicating whether to send inbound MDN to message box.",
                              "type": "boolean"
                            },
                            "sendMdnAsynchronously": {
                              "description": "The value indicating whether to send the asynchronous MDN.",
                              "type": "boolean"
                            },
                            "signMdn": {
                              "description": "The value indicating whether the MDN needs to be signed or not.",
                              "type": "boolean"
                            },
                            "signOutboundMdnIfOptional": {
                              "description": "The value indicating whether to sign the outbound MDN if optional.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "messageConnectionSettings": {
                          "properties": {
                            "ignoreCertificateNameMismatch": {
                              "description": "The value indicating whether to ignore mismatch in certificate name.",
                              "type": "boolean"
                            },
                            "keepHttpConnectionAlive": {
                              "description": "The value indicating whether to keep the connection alive.",
                              "type": "boolean"
                            },
                            "supportHttpStatusCodeContinue": {
                              "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                              "type": "boolean"
                            },
                            "unfoldHttpHeaders": {
                              "description": "The value indicating whether to unfold the HTTP headers.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "securitySettings": {
                          "properties": {
                            "enableNrrForInboundDecodedMessages": {
                              "description": "The value indicating whether to enable NRR for inbound decoded messages.",
                              "type": "boolean"
                            },
                            "enableNrrForInboundEncodedMessages": {
                              "description": "The value indicating whether to enable NRR for inbound encoded messages.",
                              "type": "boolean"
                            },
                            "enableNrrForInboundMdn": {
                              "description": "The value indicating whether to enable NRR for inbound MDN.",
                              "type": "boolean"
                            },
                            "enableNrrForOutboundDecodedMessages": {
                              "description": "The value indicating whether to enable NRR for outbound decoded messages.",
                              "type": "boolean"
                            },
                            "enableNrrForOutboundEncodedMessages": {
                              "description": "The value indicating whether to enable NRR for outbound encoded messages.",
                              "type": "boolean"
                            },
                            "enableNrrForOutboundMdn": {
                              "description": "The value indicating whether to enable NRR for outbound MDN.",
                              "type": "boolean"
                            },
                            "encryptionCertificateName": {
                              "description": "The name of the encryption certificate.",
                              "type": "string"
                            },
                            "overrideGroupSigningCertificate": {
                              "description": "The value indicating whether to send or request a MDN.",
                              "type": "boolean"
                            },
                            "signingCertificateName": {
                              "description": "The name of the signing certificate.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "validationSettings": {
                          "properties": {
                            "checkCertificateRevocationListOnReceive": {
                              "description": "The value indicating whether to check for certificate revocation list on receive.",
                              "type": "boolean"
                            },
                            "checkCertificateRevocationListOnSend": {
                              "description": "The value indicating whether to check for certificate revocation list on send.",
                              "type": "boolean"
                            },
                            "checkDuplicateMessage": {
                              "description": "The value indicating whether to check for duplicate message.",
                              "type": "boolean"
                            },
                            "compressMessage": {
                              "description": "The value indicating whether the message has to be compressed.",
                              "type": "boolean"
                            },
                            "encryptMessage": {
                              "description": "The value indicating whether the message has to be encrypted.",
                              "type": "boolean"
                            },
                            "encryptionAlgorithm": {
                              "enum": [
                                "NotSpecified",
                                "None",
                                "DES3",
                                "RC2",
                                "AES128",
                                "AES192",
                                "AES256"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "EncryptionAlgorithm"
                              }
                            },
                            "interchangeDuplicatesValidityDays": {
                              "description": "The number of days to look back for duplicate interchange.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "overrideMessageProperties": {
                              "description": "The value indicating whether to override incoming message properties with those in agreement.",
                              "type": "boolean"
                            },
                            "signMessage": {
                              "description": "The value indicating whether the message has to be signed.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "receiverBusinessIdentity": {
                      "properties": {
                        "Qualifier": {
                          "description": "The business identity qualifier.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "The business identity value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "senderBusinessIdentity": {
                      "properties": {
                        "Qualifier": {
                          "description": "The business identity qualifier.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "The business identity value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/AS2AgreementContent"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "AutogenerateFileName": {
                  "description": "The value indicating whether to auto generate file name.",
                  "type": "boolean"
                },
                "SuspendMessageOnFileNameGenerationError": {
                  "description": "The value indicating whether to suspend message on file name generation error.",
                  "type": "boolean"
                },
                "fileNameTemplate": {
                  "description": "The template for file name.",
                  "type": "string"
                },
                "messageContentType": {
                  "description": "The message content type.",
                  "type": "string"
                },
                "transmitFileNameInMimeHeader": {
                  "description": "The value indicating whether to transmit file name in mime header.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/AS2EnvelopeSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "ResendIfMdnNotReceived": {
                  "description": "The value indicating whether to resend message If MDN is not received.",
                  "type": "boolean"
                },
                "SuspendDuplicateMessage": {
                  "description": "The value indicating whether to suspend duplicate message.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/AS2ErrorSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "dispositionNotificationTo": {
                  "description": "The disposition notification to header value.",
                  "type": "string"
                },
                "mdnText": {
                  "description": "The MDN text.",
                  "type": "string"
                },
                "micHashingAlgorithm": {
                  "enum": [
                    "NotSpecified",
                    "None",
                    "SHA2256",
                    "SHA2384",
                    "SHA2512"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "HashingAlgorithm"
                  }
                },
                "needMdn": {
                  "description": "The value indicating whether to send or request a MDN.",
                  "type": "boolean"
                },
                "receiptDeliveryUrl": {
                  "description": "The receipt delivery URL.",
                  "type": "string"
                },
                "sendInboundMdnToMessageBox": {
                  "description": "The value indicating whether to send inbound MDN to message box.",
                  "type": "boolean"
                },
                "sendMdnAsynchronously": {
                  "description": "The value indicating whether to send the asynchronous MDN.",
                  "type": "boolean"
                },
                "signMdn": {
                  "description": "The value indicating whether the MDN needs to be signed or not.",
                  "type": "boolean"
                },
                "signOutboundMdnIfOptional": {
                  "description": "The value indicating whether to sign the outbound MDN if optional.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/AS2MdnSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "ignoreCertificateNameMismatch": {
                  "description": "The value indicating whether to ignore mismatch in certificate name.",
                  "type": "boolean"
                },
                "keepHttpConnectionAlive": {
                  "description": "The value indicating whether to keep the connection alive.",
                  "type": "boolean"
                },
                "supportHttpStatusCodeContinue": {
                  "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                  "type": "boolean"
                },
                "unfoldHttpHeaders": {
                  "description": "The value indicating whether to unfold the HTTP headers.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/AS2MessageConnectionSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "protocolSettings": {
                  "properties": {
                    "acknowledgementConnectionSettings": {
                      "properties": {
                        "ignoreCertificateNameMismatch": {
                          "description": "The value indicating whether to ignore mismatch in certificate name.",
                          "type": "boolean"
                        },
                        "keepHttpConnectionAlive": {
                          "description": "The value indicating whether to keep the connection alive.",
                          "type": "boolean"
                        },
                        "supportHttpStatusCodeContinue": {
                          "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                          "type": "boolean"
                        },
                        "unfoldHttpHeaders": {
                          "description": "The value indicating whether to unfold the HTTP headers.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "envelopeSettings": {
                      "properties": {
                        "AutogenerateFileName": {
                          "description": "The value indicating whether to auto generate file name.",
                          "type": "boolean"
                        },
                        "SuspendMessageOnFileNameGenerationError": {
                          "description": "The value indicating whether to suspend message on file name generation error.",
                          "type": "boolean"
                        },
                        "fileNameTemplate": {
                          "description": "The template for file name.",
                          "type": "string"
                        },
                        "messageContentType": {
                          "description": "The message content type.",
                          "type": "string"
                        },
                        "transmitFileNameInMimeHeader": {
                          "description": "The value indicating whether to transmit file name in mime header.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "errorSettings": {
                      "properties": {
                        "ResendIfMdnNotReceived": {
                          "description": "The value indicating whether to resend message If MDN is not received.",
                          "type": "boolean"
                        },
                        "SuspendDuplicateMessage": {
                          "description": "The value indicating whether to suspend duplicate message.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "mdnSettings": {
                      "properties": {
                        "dispositionNotificationTo": {
                          "description": "The disposition notification to header value.",
                          "type": "string"
                        },
                        "mdnText": {
                          "description": "The MDN text.",
                          "type": "string"
                        },
                        "micHashingAlgorithm": {
                          "enum": [
                            "NotSpecified",
                            "None",
                            "SHA2256",
                            "SHA2384",
                            "SHA2512"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "HashingAlgorithm"
                          }
                        },
                        "needMdn": {
                          "description": "The value indicating whether to send or request a MDN.",
                          "type": "boolean"
                        },
                        "receiptDeliveryUrl": {
                          "description": "The receipt delivery URL.",
                          "type": "string"
                        },
                        "sendInboundMdnToMessageBox": {
                          "description": "The value indicating whether to send inbound MDN to message box.",
                          "type": "boolean"
                        },
                        "sendMdnAsynchronously": {
                          "description": "The value indicating whether to send the asynchronous MDN.",
                          "type": "boolean"
                        },
                        "signMdn": {
                          "description": "The value indicating whether the MDN needs to be signed or not.",
                          "type": "boolean"
                        },
                        "signOutboundMdnIfOptional": {
                          "description": "The value indicating whether to sign the outbound MDN if optional.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "messageConnectionSettings": {
                      "properties": {
                        "ignoreCertificateNameMismatch": {
                          "description": "The value indicating whether to ignore mismatch in certificate name.",
                          "type": "boolean"
                        },
                        "keepHttpConnectionAlive": {
                          "description": "The value indicating whether to keep the connection alive.",
                          "type": "boolean"
                        },
                        "supportHttpStatusCodeContinue": {
                          "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                          "type": "boolean"
                        },
                        "unfoldHttpHeaders": {
                          "description": "The value indicating whether to unfold the HTTP headers.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "securitySettings": {
                      "properties": {
                        "enableNrrForInboundDecodedMessages": {
                          "description": "The value indicating whether to enable NRR for inbound decoded messages.",
                          "type": "boolean"
                        },
                        "enableNrrForInboundEncodedMessages": {
                          "description": "The value indicating whether to enable NRR for inbound encoded messages.",
                          "type": "boolean"
                        },
                        "enableNrrForInboundMdn": {
                          "description": "The value indicating whether to enable NRR for inbound MDN.",
                          "type": "boolean"
                        },
                        "enableNrrForOutboundDecodedMessages": {
                          "description": "The value indicating whether to enable NRR for outbound decoded messages.",
                          "type": "boolean"
                        },
                        "enableNrrForOutboundEncodedMessages": {
                          "description": "The value indicating whether to enable NRR for outbound encoded messages.",
                          "type": "boolean"
                        },
                        "enableNrrForOutboundMdn": {
                          "description": "The value indicating whether to enable NRR for outbound MDN.",
                          "type": "boolean"
                        },
                        "encryptionCertificateName": {
                          "description": "The name of the encryption certificate.",
                          "type": "string"
                        },
                        "overrideGroupSigningCertificate": {
                          "description": "The value indicating whether to send or request a MDN.",
                          "type": "boolean"
                        },
                        "signingCertificateName": {
                          "description": "The name of the signing certificate.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "validationSettings": {
                      "properties": {
                        "checkCertificateRevocationListOnReceive": {
                          "description": "The value indicating whether to check for certificate revocation list on receive.",
                          "type": "boolean"
                        },
                        "checkCertificateRevocationListOnSend": {
                          "description": "The value indicating whether to check for certificate revocation list on send.",
                          "type": "boolean"
                        },
                        "checkDuplicateMessage": {
                          "description": "The value indicating whether to check for duplicate message.",
                          "type": "boolean"
                        },
                        "compressMessage": {
                          "description": "The value indicating whether the message has to be compressed.",
                          "type": "boolean"
                        },
                        "encryptMessage": {
                          "description": "The value indicating whether the message has to be encrypted.",
                          "type": "boolean"
                        },
                        "encryptionAlgorithm": {
                          "enum": [
                            "NotSpecified",
                            "None",
                            "DES3",
                            "RC2",
                            "AES128",
                            "AES192",
                            "AES256"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "EncryptionAlgorithm"
                          }
                        },
                        "interchangeDuplicatesValidityDays": {
                          "description": "The number of days to look back for duplicate interchange.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "overrideMessageProperties": {
                          "description": "The value indicating whether to override incoming message properties with those in agreement.",
                          "type": "boolean"
                        },
                        "signMessage": {
                          "description": "The value indicating whether the message has to be signed.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "receiverBusinessIdentity": {
                  "properties": {
                    "Qualifier": {
                      "description": "The business identity qualifier.",
                      "type": "string"
                    },
                    "Value": {
                      "description": "The business identity value.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "senderBusinessIdentity": {
                  "properties": {
                    "Qualifier": {
                      "description": "The business identity qualifier.",
                      "type": "string"
                    },
                    "Value": {
                      "description": "The business identity value.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/AS2OneWayAgreement"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "acknowledgementConnectionSettings": {
                  "properties": {
                    "ignoreCertificateNameMismatch": {
                      "description": "The value indicating whether to ignore mismatch in certificate name.",
                      "type": "boolean"
                    },
                    "keepHttpConnectionAlive": {
                      "description": "The value indicating whether to keep the connection alive.",
                      "type": "boolean"
                    },
                    "supportHttpStatusCodeContinue": {
                      "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                      "type": "boolean"
                    },
                    "unfoldHttpHeaders": {
                      "description": "The value indicating whether to unfold the HTTP headers.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "envelopeSettings": {
                  "properties": {
                    "AutogenerateFileName": {
                      "description": "The value indicating whether to auto generate file name.",
                      "type": "boolean"
                    },
                    "SuspendMessageOnFileNameGenerationError": {
                      "description": "The value indicating whether to suspend message on file name generation error.",
                      "type": "boolean"
                    },
                    "fileNameTemplate": {
                      "description": "The template for file name.",
                      "type": "string"
                    },
                    "messageContentType": {
                      "description": "The message content type.",
                      "type": "string"
                    },
                    "transmitFileNameInMimeHeader": {
                      "description": "The value indicating whether to transmit file name in mime header.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "errorSettings": {
                  "properties": {
                    "ResendIfMdnNotReceived": {
                      "description": "The value indicating whether to resend message If MDN is not received.",
                      "type": "boolean"
                    },
                    "SuspendDuplicateMessage": {
                      "description": "The value indicating whether to suspend duplicate message.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "mdnSettings": {
                  "properties": {
                    "dispositionNotificationTo": {
                      "description": "The disposition notification to header value.",
                      "type": "string"
                    },
                    "mdnText": {
                      "description": "The MDN text.",
                      "type": "string"
                    },
                    "micHashingAlgorithm": {
                      "enum": [
                        "NotSpecified",
                        "None",
                        "SHA2256",
                        "SHA2384",
                        "SHA2512"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "HashingAlgorithm"
                      }
                    },
                    "needMdn": {
                      "description": "The value indicating whether to send or request a MDN.",
                      "type": "boolean"
                    },
                    "receiptDeliveryUrl": {
                      "description": "The receipt delivery URL.",
                      "type": "string"
                    },
                    "sendInboundMdnToMessageBox": {
                      "description": "The value indicating whether to send inbound MDN to message box.",
                      "type": "boolean"
                    },
                    "sendMdnAsynchronously": {
                      "description": "The value indicating whether to send the asynchronous MDN.",
                      "type": "boolean"
                    },
                    "signMdn": {
                      "description": "The value indicating whether the MDN needs to be signed or not.",
                      "type": "boolean"
                    },
                    "signOutboundMdnIfOptional": {
                      "description": "The value indicating whether to sign the outbound MDN if optional.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "messageConnectionSettings": {
                  "properties": {
                    "ignoreCertificateNameMismatch": {
                      "description": "The value indicating whether to ignore mismatch in certificate name.",
                      "type": "boolean"
                    },
                    "keepHttpConnectionAlive": {
                      "description": "The value indicating whether to keep the connection alive.",
                      "type": "boolean"
                    },
                    "supportHttpStatusCodeContinue": {
                      "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                      "type": "boolean"
                    },
                    "unfoldHttpHeaders": {
                      "description": "The value indicating whether to unfold the HTTP headers.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "securitySettings": {
                  "properties": {
                    "enableNrrForInboundDecodedMessages": {
                      "description": "The value indicating whether to enable NRR for inbound decoded messages.",
                      "type": "boolean"
                    },
                    "enableNrrForInboundEncodedMessages": {
                      "description": "The value indicating whether to enable NRR for inbound encoded messages.",
                      "type": "boolean"
                    },
                    "enableNrrForInboundMdn": {
                      "description": "The value indicating whether to enable NRR for inbound MDN.",
                      "type": "boolean"
                    },
                    "enableNrrForOutboundDecodedMessages": {
                      "description": "The value indicating whether to enable NRR for outbound decoded messages.",
                      "type": "boolean"
                    },
                    "enableNrrForOutboundEncodedMessages": {
                      "description": "The value indicating whether to enable NRR for outbound encoded messages.",
                      "type": "boolean"
                    },
                    "enableNrrForOutboundMdn": {
                      "description": "The value indicating whether to enable NRR for outbound MDN.",
                      "type": "boolean"
                    },
                    "encryptionCertificateName": {
                      "description": "The name of the encryption certificate.",
                      "type": "string"
                    },
                    "overrideGroupSigningCertificate": {
                      "description": "The value indicating whether to send or request a MDN.",
                      "type": "boolean"
                    },
                    "signingCertificateName": {
                      "description": "The name of the signing certificate.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "validationSettings": {
                  "properties": {
                    "checkCertificateRevocationListOnReceive": {
                      "description": "The value indicating whether to check for certificate revocation list on receive.",
                      "type": "boolean"
                    },
                    "checkCertificateRevocationListOnSend": {
                      "description": "The value indicating whether to check for certificate revocation list on send.",
                      "type": "boolean"
                    },
                    "checkDuplicateMessage": {
                      "description": "The value indicating whether to check for duplicate message.",
                      "type": "boolean"
                    },
                    "compressMessage": {
                      "description": "The value indicating whether the message has to be compressed.",
                      "type": "boolean"
                    },
                    "encryptMessage": {
                      "description": "The value indicating whether the message has to be encrypted.",
                      "type": "boolean"
                    },
                    "encryptionAlgorithm": {
                      "enum": [
                        "NotSpecified",
                        "None",
                        "DES3",
                        "RC2",
                        "AES128",
                        "AES192",
                        "AES256"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "EncryptionAlgorithm"
                      }
                    },
                    "interchangeDuplicatesValidityDays": {
                      "description": "The number of days to look back for duplicate interchange.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "overrideMessageProperties": {
                      "description": "The value indicating whether to override incoming message properties with those in agreement.",
                      "type": "boolean"
                    },
                    "signMessage": {
                      "description": "The value indicating whether the message has to be signed.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/AS2ProtocolSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "enableNrrForInboundDecodedMessages": {
                  "description": "The value indicating whether to enable NRR for inbound decoded messages.",
                  "type": "boolean"
                },
                "enableNrrForInboundEncodedMessages": {
                  "description": "The value indicating whether to enable NRR for inbound encoded messages.",
                  "type": "boolean"
                },
                "enableNrrForInboundMdn": {
                  "description": "The value indicating whether to enable NRR for inbound MDN.",
                  "type": "boolean"
                },
                "enableNrrForOutboundDecodedMessages": {
                  "description": "The value indicating whether to enable NRR for outbound decoded messages.",
                  "type": "boolean"
                },
                "enableNrrForOutboundEncodedMessages": {
                  "description": "The value indicating whether to enable NRR for outbound encoded messages.",
                  "type": "boolean"
                },
                "enableNrrForOutboundMdn": {
                  "description": "The value indicating whether to enable NRR for outbound MDN.",
                  "type": "boolean"
                },
                "encryptionCertificateName": {
                  "description": "The name of the encryption certificate.",
                  "type": "string"
                },
                "overrideGroupSigningCertificate": {
                  "description": "The value indicating whether to send or request a MDN.",
                  "type": "boolean"
                },
                "signingCertificateName": {
                  "description": "The name of the signing certificate.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/AS2SecuritySettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "checkCertificateRevocationListOnReceive": {
                  "description": "The value indicating whether to check for certificate revocation list on receive.",
                  "type": "boolean"
                },
                "checkCertificateRevocationListOnSend": {
                  "description": "The value indicating whether to check for certificate revocation list on send.",
                  "type": "boolean"
                },
                "checkDuplicateMessage": {
                  "description": "The value indicating whether to check for duplicate message.",
                  "type": "boolean"
                },
                "compressMessage": {
                  "description": "The value indicating whether the message has to be compressed.",
                  "type": "boolean"
                },
                "encryptMessage": {
                  "description": "The value indicating whether the message has to be encrypted.",
                  "type": "boolean"
                },
                "encryptionAlgorithm": {
                  "enum": [
                    "NotSpecified",
                    "None",
                    "DES3",
                    "RC2",
                    "AES128",
                    "AES192",
                    "AES256"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "EncryptionAlgorithm"
                  }
                },
                "interchangeDuplicatesValidityDays": {
                  "description": "The number of days to look back for duplicate interchange.",
                  "format": "int32",
                  "type": "integer"
                },
                "overrideMessageProperties": {
                  "description": "The value indicating whether to override incoming message properties with those in agreement.",
                  "type": "boolean"
                },
                "signMessage": {
                  "description": "The value indicating whether the message has to be signed.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/AS2ValidationSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "AS2": {
                  "properties": {
                    "receiveAgreement": {
                      "properties": {
                        "protocolSettings": {
                          "properties": {
                            "acknowledgementConnectionSettings": {
                              "properties": {
                                "ignoreCertificateNameMismatch": {
                                  "description": "The value indicating whether to ignore mismatch in certificate name.",
                                  "type": "boolean"
                                },
                                "keepHttpConnectionAlive": {
                                  "description": "The value indicating whether to keep the connection alive.",
                                  "type": "boolean"
                                },
                                "supportHttpStatusCodeContinue": {
                                  "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                  "type": "boolean"
                                },
                                "unfoldHttpHeaders": {
                                  "description": "The value indicating whether to unfold the HTTP headers.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "envelopeSettings": {
                              "properties": {
                                "AutogenerateFileName": {
                                  "description": "The value indicating whether to auto generate file name.",
                                  "type": "boolean"
                                },
                                "SuspendMessageOnFileNameGenerationError": {
                                  "description": "The value indicating whether to suspend message on file name generation error.",
                                  "type": "boolean"
                                },
                                "fileNameTemplate": {
                                  "description": "The template for file name.",
                                  "type": "string"
                                },
                                "messageContentType": {
                                  "description": "The message content type.",
                                  "type": "string"
                                },
                                "transmitFileNameInMimeHeader": {
                                  "description": "The value indicating whether to transmit file name in mime header.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "errorSettings": {
                              "properties": {
                                "ResendIfMdnNotReceived": {
                                  "description": "The value indicating whether to resend message If MDN is not received.",
                                  "type": "boolean"
                                },
                                "SuspendDuplicateMessage": {
                                  "description": "The value indicating whether to suspend duplicate message.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "mdnSettings": {
                              "properties": {
                                "dispositionNotificationTo": {
                                  "description": "The disposition notification to header value.",
                                  "type": "string"
                                },
                                "mdnText": {
                                  "description": "The MDN text.",
                                  "type": "string"
                                },
                                "micHashingAlgorithm": {
                                  "enum": [
                                    "NotSpecified",
                                    "None",
                                    "SHA2256",
                                    "SHA2384",
                                    "SHA2512"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "HashingAlgorithm"
                                  }
                                },
                                "needMdn": {
                                  "description": "The value indicating whether to send or request a MDN.",
                                  "type": "boolean"
                                },
                                "receiptDeliveryUrl": {
                                  "description": "The receipt delivery URL.",
                                  "type": "string"
                                },
                                "sendInboundMdnToMessageBox": {
                                  "description": "The value indicating whether to send inbound MDN to message box.",
                                  "type": "boolean"
                                },
                                "sendMdnAsynchronously": {
                                  "description": "The value indicating whether to send the asynchronous MDN.",
                                  "type": "boolean"
                                },
                                "signMdn": {
                                  "description": "The value indicating whether the MDN needs to be signed or not.",
                                  "type": "boolean"
                                },
                                "signOutboundMdnIfOptional": {
                                  "description": "The value indicating whether to sign the outbound MDN if optional.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "messageConnectionSettings": {
                              "properties": {
                                "ignoreCertificateNameMismatch": {
                                  "description": "The value indicating whether to ignore mismatch in certificate name.",
                                  "type": "boolean"
                                },
                                "keepHttpConnectionAlive": {
                                  "description": "The value indicating whether to keep the connection alive.",
                                  "type": "boolean"
                                },
                                "supportHttpStatusCodeContinue": {
                                  "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                  "type": "boolean"
                                },
                                "unfoldHttpHeaders": {
                                  "description": "The value indicating whether to unfold the HTTP headers.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "securitySettings": {
                              "properties": {
                                "enableNrrForInboundDecodedMessages": {
                                  "description": "The value indicating whether to enable NRR for inbound decoded messages.",
                                  "type": "boolean"
                                },
                                "enableNrrForInboundEncodedMessages": {
                                  "description": "The value indicating whether to enable NRR for inbound encoded messages.",
                                  "type": "boolean"
                                },
                                "enableNrrForInboundMdn": {
                                  "description": "The value indicating whether to enable NRR for inbound MDN.",
                                  "type": "boolean"
                                },
                                "enableNrrForOutboundDecodedMessages": {
                                  "description": "The value indicating whether to enable NRR for outbound decoded messages.",
                                  "type": "boolean"
                                },
                                "enableNrrForOutboundEncodedMessages": {
                                  "description": "The value indicating whether to enable NRR for outbound encoded messages.",
                                  "type": "boolean"
                                },
                                "enableNrrForOutboundMdn": {
                                  "description": "The value indicating whether to enable NRR for outbound MDN.",
                                  "type": "boolean"
                                },
                                "encryptionCertificateName": {
                                  "description": "The name of the encryption certificate.",
                                  "type": "string"
                                },
                                "overrideGroupSigningCertificate": {
                                  "description": "The value indicating whether to send or request a MDN.",
                                  "type": "boolean"
                                },
                                "signingCertificateName": {
                                  "description": "The name of the signing certificate.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "validationSettings": {
                              "properties": {
                                "checkCertificateRevocationListOnReceive": {
                                  "description": "The value indicating whether to check for certificate revocation list on receive.",
                                  "type": "boolean"
                                },
                                "checkCertificateRevocationListOnSend": {
                                  "description": "The value indicating whether to check for certificate revocation list on send.",
                                  "type": "boolean"
                                },
                                "checkDuplicateMessage": {
                                  "description": "The value indicating whether to check for duplicate message.",
                                  "type": "boolean"
                                },
                                "compressMessage": {
                                  "description": "The value indicating whether the message has to be compressed.",
                                  "type": "boolean"
                                },
                                "encryptMessage": {
                                  "description": "The value indicating whether the message has to be encrypted.",
                                  "type": "boolean"
                                },
                                "encryptionAlgorithm": {
                                  "enum": [
                                    "NotSpecified",
                                    "None",
                                    "DES3",
                                    "RC2",
                                    "AES128",
                                    "AES192",
                                    "AES256"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "EncryptionAlgorithm"
                                  }
                                },
                                "interchangeDuplicatesValidityDays": {
                                  "description": "The number of days to look back for duplicate interchange.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "overrideMessageProperties": {
                                  "description": "The value indicating whether to override incoming message properties with those in agreement.",
                                  "type": "boolean"
                                },
                                "signMessage": {
                                  "description": "The value indicating whether the message has to be signed.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "receiverBusinessIdentity": {
                          "properties": {
                            "Qualifier": {
                              "description": "The business identity qualifier.",
                              "type": "string"
                            },
                            "Value": {
                              "description": "The business identity value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "senderBusinessIdentity": {
                          "properties": {
                            "Qualifier": {
                              "description": "The business identity qualifier.",
                              "type": "string"
                            },
                            "Value": {
                              "description": "The business identity value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "sendAgreement": {
                      "properties": {
                        "protocolSettings": {
                          "properties": {
                            "acknowledgementConnectionSettings": {
                              "properties": {
                                "ignoreCertificateNameMismatch": {
                                  "description": "The value indicating whether to ignore mismatch in certificate name.",
                                  "type": "boolean"
                                },
                                "keepHttpConnectionAlive": {
                                  "description": "The value indicating whether to keep the connection alive.",
                                  "type": "boolean"
                                },
                                "supportHttpStatusCodeContinue": {
                                  "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                  "type": "boolean"
                                },
                                "unfoldHttpHeaders": {
                                  "description": "The value indicating whether to unfold the HTTP headers.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "envelopeSettings": {
                              "properties": {
                                "AutogenerateFileName": {
                                  "description": "The value indicating whether to auto generate file name.",
                                  "type": "boolean"
                                },
                                "SuspendMessageOnFileNameGenerationError": {
                                  "description": "The value indicating whether to suspend message on file name generation error.",
                                  "type": "boolean"
                                },
                                "fileNameTemplate": {
                                  "description": "The template for file name.",
                                  "type": "string"
                                },
                                "messageContentType": {
                                  "description": "The message content type.",
                                  "type": "string"
                                },
                                "transmitFileNameInMimeHeader": {
                                  "description": "The value indicating whether to transmit file name in mime header.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "errorSettings": {
                              "properties": {
                                "ResendIfMdnNotReceived": {
                                  "description": "The value indicating whether to resend message If MDN is not received.",
                                  "type": "boolean"
                                },
                                "SuspendDuplicateMessage": {
                                  "description": "The value indicating whether to suspend duplicate message.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "mdnSettings": {
                              "properties": {
                                "dispositionNotificationTo": {
                                  "description": "The disposition notification to header value.",
                                  "type": "string"
                                },
                                "mdnText": {
                                  "description": "The MDN text.",
                                  "type": "string"
                                },
                                "micHashingAlgorithm": {
                                  "enum": [
                                    "NotSpecified",
                                    "None",
                                    "SHA2256",
                                    "SHA2384",
                                    "SHA2512"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "HashingAlgorithm"
                                  }
                                },
                                "needMdn": {
                                  "description": "The value indicating whether to send or request a MDN.",
                                  "type": "boolean"
                                },
                                "receiptDeliveryUrl": {
                                  "description": "The receipt delivery URL.",
                                  "type": "string"
                                },
                                "sendInboundMdnToMessageBox": {
                                  "description": "The value indicating whether to send inbound MDN to message box.",
                                  "type": "boolean"
                                },
                                "sendMdnAsynchronously": {
                                  "description": "The value indicating whether to send the asynchronous MDN.",
                                  "type": "boolean"
                                },
                                "signMdn": {
                                  "description": "The value indicating whether the MDN needs to be signed or not.",
                                  "type": "boolean"
                                },
                                "signOutboundMdnIfOptional": {
                                  "description": "The value indicating whether to sign the outbound MDN if optional.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "messageConnectionSettings": {
                              "properties": {
                                "ignoreCertificateNameMismatch": {
                                  "description": "The value indicating whether to ignore mismatch in certificate name.",
                                  "type": "boolean"
                                },
                                "keepHttpConnectionAlive": {
                                  "description": "The value indicating whether to keep the connection alive.",
                                  "type": "boolean"
                                },
                                "supportHttpStatusCodeContinue": {
                                  "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                  "type": "boolean"
                                },
                                "unfoldHttpHeaders": {
                                  "description": "The value indicating whether to unfold the HTTP headers.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "securitySettings": {
                              "properties": {
                                "enableNrrForInboundDecodedMessages": {
                                  "description": "The value indicating whether to enable NRR for inbound decoded messages.",
                                  "type": "boolean"
                                },
                                "enableNrrForInboundEncodedMessages": {
                                  "description": "The value indicating whether to enable NRR for inbound encoded messages.",
                                  "type": "boolean"
                                },
                                "enableNrrForInboundMdn": {
                                  "description": "The value indicating whether to enable NRR for inbound MDN.",
                                  "type": "boolean"
                                },
                                "enableNrrForOutboundDecodedMessages": {
                                  "description": "The value indicating whether to enable NRR for outbound decoded messages.",
                                  "type": "boolean"
                                },
                                "enableNrrForOutboundEncodedMessages": {
                                  "description": "The value indicating whether to enable NRR for outbound encoded messages.",
                                  "type": "boolean"
                                },
                                "enableNrrForOutboundMdn": {
                                  "description": "The value indicating whether to enable NRR for outbound MDN.",
                                  "type": "boolean"
                                },
                                "encryptionCertificateName": {
                                  "description": "The name of the encryption certificate.",
                                  "type": "string"
                                },
                                "overrideGroupSigningCertificate": {
                                  "description": "The value indicating whether to send or request a MDN.",
                                  "type": "boolean"
                                },
                                "signingCertificateName": {
                                  "description": "The name of the signing certificate.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "validationSettings": {
                              "properties": {
                                "checkCertificateRevocationListOnReceive": {
                                  "description": "The value indicating whether to check for certificate revocation list on receive.",
                                  "type": "boolean"
                                },
                                "checkCertificateRevocationListOnSend": {
                                  "description": "The value indicating whether to check for certificate revocation list on send.",
                                  "type": "boolean"
                                },
                                "checkDuplicateMessage": {
                                  "description": "The value indicating whether to check for duplicate message.",
                                  "type": "boolean"
                                },
                                "compressMessage": {
                                  "description": "The value indicating whether the message has to be compressed.",
                                  "type": "boolean"
                                },
                                "encryptMessage": {
                                  "description": "The value indicating whether the message has to be encrypted.",
                                  "type": "boolean"
                                },
                                "encryptionAlgorithm": {
                                  "enum": [
                                    "NotSpecified",
                                    "None",
                                    "DES3",
                                    "RC2",
                                    "AES128",
                                    "AES192",
                                    "AES256"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "EncryptionAlgorithm"
                                  }
                                },
                                "interchangeDuplicatesValidityDays": {
                                  "description": "The number of days to look back for duplicate interchange.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "overrideMessageProperties": {
                                  "description": "The value indicating whether to override incoming message properties with those in agreement.",
                                  "type": "boolean"
                                },
                                "signMessage": {
                                  "description": "The value indicating whether the message has to be signed.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "receiverBusinessIdentity": {
                          "properties": {
                            "Qualifier": {
                              "description": "The business identity qualifier.",
                              "type": "string"
                            },
                            "Value": {
                              "description": "The business identity value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "senderBusinessIdentity": {
                          "properties": {
                            "Qualifier": {
                              "description": "The business identity qualifier.",
                              "type": "string"
                            },
                            "Value": {
                              "description": "The business identity value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "Edifact": {
                  "properties": {
                    "receiveAgreement": {
                      "properties": {
                        "protocolSettings": {
                          "properties": {
                            "acknowledgementSettings": {
                              "properties": {
                                "acknowledgementControlNumberLowerBound": {
                                  "description": "The acknowledgement control number lower bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "acknowledgementControlNumberPrefix": {
                                  "description": "The acknowledgement control number prefix.",
                                  "type": "string"
                                },
                                "acknowledgementControlNumberSuffix": {
                                  "description": "The acknowledgement control number suffix.",
                                  "type": "string"
                                },
                                "acknowledgementControlNumberUpperBound": {
                                  "description": "The acknowledgement control number upper bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "batchFunctionalAcknowledgements": {
                                  "description": "The value indicating whether to batch functional acknowledgements.",
                                  "type": "boolean"
                                },
                                "batchTechnicalAcknowledgements": {
                                  "description": "The value indicating whether to batch the technical acknowledgements.",
                                  "type": "boolean"
                                },
                                "needFunctionalAcknowledgement": {
                                  "description": "The value indicating whether functional acknowledgement is needed.",
                                  "type": "boolean"
                                },
                                "needLoopForValidMessages": {
                                  "description": "The value indicating whether a loop is needed for valid messages.",
                                  "type": "boolean"
                                },
                                "needTechnicalAcknowledgement": {
                                  "description": "The value indicating whether technical acknowledgement is needed.",
                                  "type": "boolean"
                                },
                                "rolloverAcknowledgementControlNumber": {
                                  "description": "The value indicating whether to rollover acknowledgement control number.",
                                  "type": "boolean"
                                },
                                "sendSynchronousAcknowledgement": {
                                  "description": "The value indicating whether to send synchronous acknowledgement.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "edifactDelimiterOverrides": {
                              "description": "The EDIFACT delimiter override settings.",
                              "items": {
                                "properties": {
                                  "componentSeparator": {
                                    "description": "The component separator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "dataElementSeparator": {
                                    "description": "The data element separator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "decimalPointIndicator": {
                                    "enum": [
                                      "NotSpecified",
                                      "Comma",
                                      "Decimal"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "EdifactDecimalIndicator"
                                    }
                                  },
                                  "messageAssociationAssignedCode": {
                                    "description": "The message association assigned code.",
                                    "type": "string"
                                  },
                                  "messageId": {
                                    "description": "The message id.",
                                    "type": "string"
                                  },
                                  "messageRelease": {
                                    "description": "The message release version.",
                                    "type": "string"
                                  },
                                  "messageVersion": {
                                    "description": "The message version.",
                                    "type": "string"
                                  },
                                  "releaseIndicator": {
                                    "description": "The release indicator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "repetitionSeparator": {
                                    "description": "The repetition separator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "segmentTerminator": {
                                    "description": "The segment terminator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "segmentTerminatorSuffix": {
                                    "enum": [
                                      "NotSpecified",
                                      "None",
                                      "CR",
                                      "LF",
                                      "CRLF"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "SegmentTerminatorSuffix"
                                    }
                                  },
                                  "targetNamespace": {
                                    "description": "The target namespace on which this delimiter settings has to be applied.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "envelopeOverrides": {
                              "description": "The EDIFACT envelope override settings.",
                              "items": {
                                "properties": {
                                  "applicationPassword": {
                                    "description": "The application password.",
                                    "type": "string"
                                  },
                                  "associationAssignedCode": {
                                    "description": "The association assigned code.",
                                    "type": "string"
                                  },
                                  "controllingAgencyCode": {
                                    "description": "The controlling agency code.",
                                    "type": "string"
                                  },
                                  "functionalGroupId": {
                                    "description": "The functional group id.",
                                    "type": "string"
                                  },
                                  "groupHeaderMessageRelease": {
                                    "description": "The group header message release.",
                                    "type": "string"
                                  },
                                  "groupHeaderMessageVersion": {
                                    "description": "The group header message version.",
                                    "type": "string"
                                  },
                                  "messageAssociationAssignedCode": {
                                    "description": "The message association assigned code.",
                                    "type": "string"
                                  },
                                  "messageId": {
                                    "description": "The message id on which this envelope settings has to be applied.",
                                    "type": "string"
                                  },
                                  "messageRelease": {
                                    "description": "The message release version on which this envelope settings has to be applied.",
                                    "type": "string"
                                  },
                                  "messageVersion": {
                                    "description": "The message version on which this envelope settings has to be applied.",
                                    "type": "string"
                                  },
                                  "receiverApplicationId": {
                                    "description": "The receiver application id.",
                                    "type": "string"
                                  },
                                  "receiverApplicationQualifier": {
                                    "description": "The receiver application qualifier.",
                                    "type": "string"
                                  },
                                  "senderApplicationId": {
                                    "description": "The sender application id.",
                                    "type": "string"
                                  },
                                  "senderApplicationQualifier": {
                                    "description": "The sender application qualifier.",
                                    "type": "string"
                                  },
                                  "targetNamespace": {
                                    "description": "The target namespace on which this envelope settings has to be applied.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "envelopeSettings": {
                              "properties": {
                                "applicationReferenceId": {
                                  "description": "The application reference id.",
                                  "type": "string"
                                },
                                "applyDelimiterStringAdvice": {
                                  "description": "The value indicating whether to apply delimiter string advice.",
                                  "type": "boolean"
                                },
                                "communicationAgreementId": {
                                  "description": "The communication agreement id.",
                                  "type": "string"
                                },
                                "createGroupingSegments": {
                                  "description": "The value indicating whether to create grouping segments.",
                                  "type": "boolean"
                                },
                                "enableDefaultGroupHeaders": {
                                  "description": "The value indicating whether to enable default group headers.",
                                  "type": "boolean"
                                },
                                "functionalGroupId": {
                                  "description": "The functional group id.",
                                  "type": "string"
                                },
                                "groupApplicationPassword": {
                                  "description": "The group application password.",
                                  "type": "string"
                                },
                                "groupApplicationReceiverId": {
                                  "description": "The group application receiver id.",
                                  "type": "string"
                                },
                                "groupApplicationReceiverQualifier": {
                                  "description": "The group application receiver qualifier.",
                                  "type": "string"
                                },
                                "groupApplicationSenderId": {
                                  "description": "The group application sender id.",
                                  "type": "string"
                                },
                                "groupApplicationSenderQualifier": {
                                  "description": "The group application sender qualifier.",
                                  "type": "string"
                                },
                                "groupAssociationAssignedCode": {
                                  "description": "The group association assigned code.",
                                  "type": "string"
                                },
                                "groupControlNumberLowerBound": {
                                  "description": "The group control number lower bound.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "groupControlNumberPrefix": {
                                  "description": "The group control number prefix.",
                                  "type": "string"
                                },
                                "groupControlNumberSuffix": {
                                  "description": "The group control number suffix.",
                                  "type": "string"
                                },
                                "groupControlNumberUpperBound": {
                                  "description": "The group control number upper bound.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "groupControllingAgencyCode": {
                                  "description": "The group controlling agency code.",
                                  "type": "string"
                                },
                                "groupMessageRelease": {
                                  "description": "The group message release.",
                                  "type": "string"
                                },
                                "groupMessageVersion": {
                                  "description": "The group message version.",
                                  "type": "string"
                                },
                                "interchangeControlNumberLowerBound": {
                                  "description": "The interchange control number lower bound.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "interchangeControlNumberPrefix": {
                                  "description": "The interchange control number prefix.",
                                  "type": "string"
                                },
                                "interchangeControlNumberSuffix": {
                                  "description": "The interchange control number suffix.",
                                  "type": "string"
                                },
                                "interchangeControlNumberUpperBound": {
                                  "description": "The interchange control number upper bound.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "isTestInterchange": {
                                  "description": "The value indicating whether the message is a test interchange.",
                                  "type": "boolean"
                                },
                                "overwriteExistingTransactionSetControlNumber": {
                                  "description": "The value indicating whether to overwrite existing transaction set control number.",
                                  "type": "boolean"
                                },
                                "processingPriorityCode": {
                                  "description": "The processing priority code.",
                                  "type": "string"
                                },
                                "receiverInternalIdentification": {
                                  "description": "The receiver internal identification.",
                                  "type": "string"
                                },
                                "receiverInternalSubIdentification": {
                                  "description": "The receiver internal sub identification.",
                                  "type": "string"
                                },
                                "receiverReverseRoutingAddress": {
                                  "description": "The receiver reverse routing address.",
                                  "type": "string"
                                },
                                "recipientReferencePasswordQualifier": {
                                  "description": "The recipient reference password qualifier.",
                                  "type": "string"
                                },
                                "recipientReferencePasswordValue": {
                                  "description": "The recipient reference password value.",
                                  "type": "string"
                                },
                                "rolloverGroupControlNumber": {
                                  "description": "The value indicating whether to rollover group control number.",
                                  "type": "boolean"
                                },
                                "rolloverInterchangeControlNumber": {
                                  "description": "The value indicating whether to rollover interchange control number.",
                                  "type": "boolean"
                                },
                                "rolloverTransactionSetControlNumber": {
                                  "description": "The value indicating whether to rollover transaction set control number.",
                                  "type": "boolean"
                                },
                                "senderInternalIdentification": {
                                  "description": "The sender internal identification.",
                                  "type": "string"
                                },
                                "senderInternalSubIdentification": {
                                  "description": "The sender internal sub identification.",
                                  "type": "string"
                                },
                                "senderReverseRoutingAddress": {
                                  "description": "The sender reverse routing address.",
                                  "type": "string"
                                },
                                "transactionSetControlNumberLowerBound": {
                                  "description": "The transaction set control number lower bound.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "transactionSetControlNumberPrefix": {
                                  "description": "The transaction set control number prefix.",
                                  "type": "string"
                                },
                                "transactionSetControlNumberSuffix": {
                                  "description": "The transaction set control number suffix.",
                                  "type": "string"
                                },
                                "transactionSetControlNumberUpperBound": {
                                  "description": "The transaction set control number upper bound.",
                                  "format": "int64",
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "framingSettings": {
                              "properties": {
                                "characterEncoding": {
                                  "description": "The character encoding.",
                                  "type": "string"
                                },
                                "characterSet": {
                                  "enum": [
                                    "NotSpecified",
                                    "UNOB",
                                    "UNOA",
                                    "UNOC",
                                    "UNOD",
                                    "UNOE",
                                    "UNOF",
                                    "UNOG",
                                    "UNOH",
                                    "UNOI",
                                    "UNOJ",
                                    "UNOK",
                                    "UNOX",
                                    "UNOY",
                                    "KECA"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "EdifactCharacterSet"
                                  }
                                },
                                "componentSeparator": {
                                  "description": "The component separator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "dataElementSeparator": {
                                  "description": "The data element separator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "decimalPointIndicator": {
                                  "enum": [
                                    "NotSpecified",
                                    "Comma",
                                    "Decimal"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "EdifactDecimalIndicator"
                                  }
                                },
                                "protocolVersion": {
                                  "description": "The protocol version.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "releaseIndicator": {
                                  "description": "The release indicator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "repetitionSeparator": {
                                  "description": "The repetition separator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "segmentTerminator": {
                                  "description": "The segment terminator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "segmentTerminatorSuffix": {
                                  "enum": [
                                    "NotSpecified",
                                    "None",
                                    "CR",
                                    "LF",
                                    "CRLF"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "SegmentTerminatorSuffix"
                                  }
                                },
                                "serviceCodeListDirectoryVersion": {
                                  "description": "The service code list directory version.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "messageFilter": {
                              "properties": {
                                "messageFilterType": {
                                  "enum": [
                                    "NotSpecified",
                                    "Include",
                                    "Exclude"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "MessageFilterType"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "messageFilterList": {
                              "description": "The EDIFACT message filter list.",
                              "items": {
                                "properties": {
                                  "messageId": {
                                    "description": "The message id on which this envelope settings has to be applied.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "processingSettings": {
                              "properties": {
                                "createEmptyXmlTagsForTrailingSeparators": {
                                  "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                  "type": "boolean"
                                },
                                "maskSecurityInfo": {
                                  "description": "The value indicating whether to mask security information.",
                                  "type": "boolean"
                                },
                                "preserveInterchange": {
                                  "description": "The value indicating whether to preserve interchange.",
                                  "type": "boolean"
                                },
                                "suspendInterchangeOnError": {
                                  "description": "The value indicating whether to suspend interchange on error.",
                                  "type": "boolean"
                                },
                                "useDotAsDecimalSeparator": {
                                  "description": "The value indicating whether to use dot as decimal separator.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "schemaReferences": {
                              "description": "The EDIFACT schema references.",
                              "items": {
                                "properties": {
                                  "associationAssignedCode": {
                                    "description": "The association assigned code.",
                                    "type": "string"
                                  },
                                  "messageId": {
                                    "description": "The message id.",
                                    "type": "string"
                                  },
                                  "messageRelease": {
                                    "description": "The message release version.",
                                    "type": "string"
                                  },
                                  "messageVersion": {
                                    "description": "The message version.",
                                    "type": "string"
                                  },
                                  "schemaName": {
                                    "description": "The schema name.",
                                    "type": "string"
                                  },
                                  "senderApplicationId": {
                                    "description": "The sender application id.",
                                    "type": "string"
                                  },
                                  "senderApplicationQualifier": {
                                    "description": "The sender application qualifier.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "validationOverrides": {
                              "description": "The EDIFACT validation override settings.",
                              "items": {
                                "properties": {
                                  "allowLeadingAndTrailingSpacesAndZeroes": {
                                    "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                    "type": "boolean"
                                  },
                                  "enforceCharacterSet": {
                                    "description": "The value indicating whether to validate character Set.",
                                    "type": "boolean"
                                  },
                                  "messageId": {
                                    "description": "The message id on which the validation settings has to be applied.",
                                    "type": "string"
                                  },
                                  "trailingSeparatorPolicy": {
                                    "enum": [
                                      "NotSpecified",
                                      "NotAllowed",
                                      "Optional",
                                      "Mandatory"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "TrailingSeparatorPolicy"
                                    }
                                  },
                                  "trimLeadingAndTrailingSpacesAndZeroes": {
                                    "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                    "type": "boolean"
                                  },
                                  "validateEDITypes": {
                                    "description": "The value indicating whether to validate EDI types.",
                                    "type": "boolean"
                                  },
                                  "validateXSDTypes": {
                                    "description": "The value indicating whether to validate XSD types.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "validationSettings": {
                              "properties": {
                                "allowLeadingAndTrailingSpacesAndZeroes": {
                                  "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                  "type": "boolean"
                                },
                                "checkDuplicateGroupControlNumber": {
                                  "description": "The value indicating whether to check for duplicate group control number.",
                                  "type": "boolean"
                                },
                                "checkDuplicateInterchangeControlNumber": {
                                  "description": "The value indicating whether to check for duplicate interchange control number.",
                                  "type": "boolean"
                                },
                                "checkDuplicateTransactionSetControlNumber": {
                                  "description": "The value indicating whether to check for duplicate transaction set control number.",
                                  "type": "boolean"
                                },
                                "interchangeControlNumberValidityDays": {
                                  "description": "The validity period of interchange control number.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "trailingSeparatorPolicy": {
                                  "enum": [
                                    "NotSpecified",
                                    "NotAllowed",
                                    "Optional",
                                    "Mandatory"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "TrailingSeparatorPolicy"
                                  }
                                },
                                "trimLeadingAndTrailingSpacesAndZeroes": {
                                  "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                  "type": "boolean"
                                },
                                "validateCharacterSet": {
                                  "description": "The value indicating whether to validate character set in the message.",
                                  "type": "boolean"
                                },
                                "validateEDITypes": {
                                  "description": "The value indicating whether to Whether to validate EDI types.",
                                  "type": "boolean"
                                },
                                "validateXSDTypes": {
                                  "description": "The value indicating whether to Whether to validate XSD types.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "receiverBusinessIdentity": {
                          "properties": {
                            "Qualifier": {
                              "description": "The business identity qualifier.",
                              "type": "string"
                            },
                            "Value": {
                              "description": "The business identity value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "senderBusinessIdentity": {
                          "properties": {
                            "Qualifier": {
                              "description": "The business identity qualifier.",
                              "type": "string"
                            },
                            "Value": {
                              "description": "The business identity value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "sendAgreement": {
                      "properties": {
                        "protocolSettings": {
                          "properties": {
                            "acknowledgementSettings": {
                              "properties": {
                                "acknowledgementControlNumberLowerBound": {
                                  "description": "The acknowledgement control number lower bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "acknowledgementControlNumberPrefix": {
                                  "description": "The acknowledgement control number prefix.",
                                  "type": "string"
                                },
                                "acknowledgementControlNumberSuffix": {
                                  "description": "The acknowledgement control number suffix.",
                                  "type": "string"
                                },
                                "acknowledgementControlNumberUpperBound": {
                                  "description": "The acknowledgement control number upper bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "batchFunctionalAcknowledgements": {
                                  "description": "The value indicating whether to batch functional acknowledgements.",
                                  "type": "boolean"
                                },
                                "batchTechnicalAcknowledgements": {
                                  "description": "The value indicating whether to batch the technical acknowledgements.",
                                  "type": "boolean"
                                },
                                "needFunctionalAcknowledgement": {
                                  "description": "The value indicating whether functional acknowledgement is needed.",
                                  "type": "boolean"
                                },
                                "needLoopForValidMessages": {
                                  "description": "The value indicating whether a loop is needed for valid messages.",
                                  "type": "boolean"
                                },
                                "needTechnicalAcknowledgement": {
                                  "description": "The value indicating whether technical acknowledgement is needed.",
                                  "type": "boolean"
                                },
                                "rolloverAcknowledgementControlNumber": {
                                  "description": "The value indicating whether to rollover acknowledgement control number.",
                                  "type": "boolean"
                                },
                                "sendSynchronousAcknowledgement": {
                                  "description": "The value indicating whether to send synchronous acknowledgement.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "edifactDelimiterOverrides": {
                              "description": "The EDIFACT delimiter override settings.",
                              "items": {
                                "properties": {
                                  "componentSeparator": {
                                    "description": "The component separator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "dataElementSeparator": {
                                    "description": "The data element separator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "decimalPointIndicator": {
                                    "enum": [
                                      "NotSpecified",
                                      "Comma",
                                      "Decimal"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "EdifactDecimalIndicator"
                                    }
                                  },
                                  "messageAssociationAssignedCode": {
                                    "description": "The message association assigned code.",
                                    "type": "string"
                                  },
                                  "messageId": {
                                    "description": "The message id.",
                                    "type": "string"
                                  },
                                  "messageRelease": {
                                    "description": "The message release version.",
                                    "type": "string"
                                  },
                                  "messageVersion": {
                                    "description": "The message version.",
                                    "type": "string"
                                  },
                                  "releaseIndicator": {
                                    "description": "The release indicator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "repetitionSeparator": {
                                    "description": "The repetition separator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "segmentTerminator": {
                                    "description": "The segment terminator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "segmentTerminatorSuffix": {
                                    "enum": [
                                      "NotSpecified",
                                      "None",
                                      "CR",
                                      "LF",
                                      "CRLF"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "SegmentTerminatorSuffix"
                                    }
                                  },
                                  "targetNamespace": {
                                    "description": "The target namespace on which this delimiter settings has to be applied.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "envelopeOverrides": {
                              "description": "The EDIFACT envelope override settings.",
                              "items": {
                                "properties": {
                                  "applicationPassword": {
                                    "description": "The application password.",
                                    "type": "string"
                                  },
                                  "associationAssignedCode": {
                                    "description": "The association assigned code.",
                                    "type": "string"
                                  },
                                  "controllingAgencyCode": {
                                    "description": "The controlling agency code.",
                                    "type": "string"
                                  },
                                  "functionalGroupId": {
                                    "description": "The functional group id.",
                                    "type": "string"
                                  },
                                  "groupHeaderMessageRelease": {
                                    "description": "The group header message release.",
                                    "type": "string"
                                  },
                                  "groupHeaderMessageVersion": {
                                    "description": "The group header message version.",
                                    "type": "string"
                                  },
                                  "messageAssociationAssignedCode": {
                                    "description": "The message association assigned code.",
                                    "type": "string"
                                  },
                                  "messageId": {
                                    "description": "The message id on which this envelope settings has to be applied.",
                                    "type": "string"
                                  },
                                  "messageRelease": {
                                    "description": "The message release version on which this envelope settings has to be applied.",
                                    "type": "string"
                                  },
                                  "messageVersion": {
                                    "description": "The message version on which this envelope settings has to be applied.",
                                    "type": "string"
                                  },
                                  "receiverApplicationId": {
                                    "description": "The receiver application id.",
                                    "type": "string"
                                  },
                                  "receiverApplicationQualifier": {
                                    "description": "The receiver application qualifier.",
                                    "type": "string"
                                  },
                                  "senderApplicationId": {
                                    "description": "The sender application id.",
                                    "type": "string"
                                  },
                                  "senderApplicationQualifier": {
                                    "description": "The sender application qualifier.",
                                    "type": "string"
                                  },
                                  "targetNamespace": {
                                    "description": "The target namespace on which this envelope settings has to be applied.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "envelopeSettings": {
                              "properties": {
                                "applicationReferenceId": {
                                  "description": "The application reference id.",
                                  "type": "string"
                                },
                                "applyDelimiterStringAdvice": {
                                  "description": "The value indicating whether to apply delimiter string advice.",
                                  "type": "boolean"
                                },
                                "communicationAgreementId": {
                                  "description": "The communication agreement id.",
                                  "type": "string"
                                },
                                "createGroupingSegments": {
                                  "description": "The value indicating whether to create grouping segments.",
                                  "type": "boolean"
                                },
                                "enableDefaultGroupHeaders": {
                                  "description": "The value indicating whether to enable default group headers.",
                                  "type": "boolean"
                                },
                                "functionalGroupId": {
                                  "description": "The functional group id.",
                                  "type": "string"
                                },
                                "groupApplicationPassword": {
                                  "description": "The group application password.",
                                  "type": "string"
                                },
                                "groupApplicationReceiverId": {
                                  "description": "The group application receiver id.",
                                  "type": "string"
                                },
                                "groupApplicationReceiverQualifier": {
                                  "description": "The group application receiver qualifier.",
                                  "type": "string"
                                },
                                "groupApplicationSenderId": {
                                  "description": "The group application sender id.",
                                  "type": "string"
                                },
                                "groupApplicationSenderQualifier": {
                                  "description": "The group application sender qualifier.",
                                  "type": "string"
                                },
                                "groupAssociationAssignedCode": {
                                  "description": "The group association assigned code.",
                                  "type": "string"
                                },
                                "groupControlNumberLowerBound": {
                                  "description": "The group control number lower bound.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "groupControlNumberPrefix": {
                                  "description": "The group control number prefix.",
                                  "type": "string"
                                },
                                "groupControlNumberSuffix": {
                                  "description": "The group control number suffix.",
                                  "type": "string"
                                },
                                "groupControlNumberUpperBound": {
                                  "description": "The group control number upper bound.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "groupControllingAgencyCode": {
                                  "description": "The group controlling agency code.",
                                  "type": "string"
                                },
                                "groupMessageRelease": {
                                  "description": "The group message release.",
                                  "type": "string"
                                },
                                "groupMessageVersion": {
                                  "description": "The group message version.",
                                  "type": "string"
                                },
                                "interchangeControlNumberLowerBound": {
                                  "description": "The interchange control number lower bound.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "interchangeControlNumberPrefix": {
                                  "description": "The interchange control number prefix.",
                                  "type": "string"
                                },
                                "interchangeControlNumberSuffix": {
                                  "description": "The interchange control number suffix.",
                                  "type": "string"
                                },
                                "interchangeControlNumberUpperBound": {
                                  "description": "The interchange control number upper bound.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "isTestInterchange": {
                                  "description": "The value indicating whether the message is a test interchange.",
                                  "type": "boolean"
                                },
                                "overwriteExistingTransactionSetControlNumber": {
                                  "description": "The value indicating whether to overwrite existing transaction set control number.",
                                  "type": "boolean"
                                },
                                "processingPriorityCode": {
                                  "description": "The processing priority code.",
                                  "type": "string"
                                },
                                "receiverInternalIdentification": {
                                  "description": "The receiver internal identification.",
                                  "type": "string"
                                },
                                "receiverInternalSubIdentification": {
                                  "description": "The receiver internal sub identification.",
                                  "type": "string"
                                },
                                "receiverReverseRoutingAddress": {
                                  "description": "The receiver reverse routing address.",
                                  "type": "string"
                                },
                                "recipientReferencePasswordQualifier": {
                                  "description": "The recipient reference password qualifier.",
                                  "type": "string"
                                },
                                "recipientReferencePasswordValue": {
                                  "description": "The recipient reference password value.",
                                  "type": "string"
                                },
                                "rolloverGroupControlNumber": {
                                  "description": "The value indicating whether to rollover group control number.",
                                  "type": "boolean"
                                },
                                "rolloverInterchangeControlNumber": {
                                  "description": "The value indicating whether to rollover interchange control number.",
                                  "type": "boolean"
                                },
                                "rolloverTransactionSetControlNumber": {
                                  "description": "The value indicating whether to rollover transaction set control number.",
                                  "type": "boolean"
                                },
                                "senderInternalIdentification": {
                                  "description": "The sender internal identification.",
                                  "type": "string"
                                },
                                "senderInternalSubIdentification": {
                                  "description": "The sender internal sub identification.",
                                  "type": "string"
                                },
                                "senderReverseRoutingAddress": {
                                  "description": "The sender reverse routing address.",
                                  "type": "string"
                                },
                                "transactionSetControlNumberLowerBound": {
                                  "description": "The transaction set control number lower bound.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "transactionSetControlNumberPrefix": {
                                  "description": "The transaction set control number prefix.",
                                  "type": "string"
                                },
                                "transactionSetControlNumberSuffix": {
                                  "description": "The transaction set control number suffix.",
                                  "type": "string"
                                },
                                "transactionSetControlNumberUpperBound": {
                                  "description": "The transaction set control number upper bound.",
                                  "format": "int64",
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "framingSettings": {
                              "properties": {
                                "characterEncoding": {
                                  "description": "The character encoding.",
                                  "type": "string"
                                },
                                "characterSet": {
                                  "enum": [
                                    "NotSpecified",
                                    "UNOB",
                                    "UNOA",
                                    "UNOC",
                                    "UNOD",
                                    "UNOE",
                                    "UNOF",
                                    "UNOG",
                                    "UNOH",
                                    "UNOI",
                                    "UNOJ",
                                    "UNOK",
                                    "UNOX",
                                    "UNOY",
                                    "KECA"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "EdifactCharacterSet"
                                  }
                                },
                                "componentSeparator": {
                                  "description": "The component separator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "dataElementSeparator": {
                                  "description": "The data element separator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "decimalPointIndicator": {
                                  "enum": [
                                    "NotSpecified",
                                    "Comma",
                                    "Decimal"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "EdifactDecimalIndicator"
                                  }
                                },
                                "protocolVersion": {
                                  "description": "The protocol version.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "releaseIndicator": {
                                  "description": "The release indicator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "repetitionSeparator": {
                                  "description": "The repetition separator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "segmentTerminator": {
                                  "description": "The segment terminator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "segmentTerminatorSuffix": {
                                  "enum": [
                                    "NotSpecified",
                                    "None",
                                    "CR",
                                    "LF",
                                    "CRLF"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "SegmentTerminatorSuffix"
                                  }
                                },
                                "serviceCodeListDirectoryVersion": {
                                  "description": "The service code list directory version.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "messageFilter": {
                              "properties": {
                                "messageFilterType": {
                                  "enum": [
                                    "NotSpecified",
                                    "Include",
                                    "Exclude"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "MessageFilterType"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "messageFilterList": {
                              "description": "The EDIFACT message filter list.",
                              "items": {
                                "properties": {
                                  "messageId": {
                                    "description": "The message id on which this envelope settings has to be applied.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "processingSettings": {
                              "properties": {
                                "createEmptyXmlTagsForTrailingSeparators": {
                                  "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                  "type": "boolean"
                                },
                                "maskSecurityInfo": {
                                  "description": "The value indicating whether to mask security information.",
                                  "type": "boolean"
                                },
                                "preserveInterchange": {
                                  "description": "The value indicating whether to preserve interchange.",
                                  "type": "boolean"
                                },
                                "suspendInterchangeOnError": {
                                  "description": "The value indicating whether to suspend interchange on error.",
                                  "type": "boolean"
                                },
                                "useDotAsDecimalSeparator": {
                                  "description": "The value indicating whether to use dot as decimal separator.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "schemaReferences": {
                              "description": "The EDIFACT schema references.",
                              "items": {
                                "properties": {
                                  "associationAssignedCode": {
                                    "description": "The association assigned code.",
                                    "type": "string"
                                  },
                                  "messageId": {
                                    "description": "The message id.",
                                    "type": "string"
                                  },
                                  "messageRelease": {
                                    "description": "The message release version.",
                                    "type": "string"
                                  },
                                  "messageVersion": {
                                    "description": "The message version.",
                                    "type": "string"
                                  },
                                  "schemaName": {
                                    "description": "The schema name.",
                                    "type": "string"
                                  },
                                  "senderApplicationId": {
                                    "description": "The sender application id.",
                                    "type": "string"
                                  },
                                  "senderApplicationQualifier": {
                                    "description": "The sender application qualifier.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "validationOverrides": {
                              "description": "The EDIFACT validation override settings.",
                              "items": {
                                "properties": {
                                  "allowLeadingAndTrailingSpacesAndZeroes": {
                                    "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                    "type": "boolean"
                                  },
                                  "enforceCharacterSet": {
                                    "description": "The value indicating whether to validate character Set.",
                                    "type": "boolean"
                                  },
                                  "messageId": {
                                    "description": "The message id on which the validation settings has to be applied.",
                                    "type": "string"
                                  },
                                  "trailingSeparatorPolicy": {
                                    "enum": [
                                      "NotSpecified",
                                      "NotAllowed",
                                      "Optional",
                                      "Mandatory"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "TrailingSeparatorPolicy"
                                    }
                                  },
                                  "trimLeadingAndTrailingSpacesAndZeroes": {
                                    "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                    "type": "boolean"
                                  },
                                  "validateEDITypes": {
                                    "description": "The value indicating whether to validate EDI types.",
                                    "type": "boolean"
                                  },
                                  "validateXSDTypes": {
                                    "description": "The value indicating whether to validate XSD types.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "validationSettings": {
                              "properties": {
                                "allowLeadingAndTrailingSpacesAndZeroes": {
                                  "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                  "type": "boolean"
                                },
                                "checkDuplicateGroupControlNumber": {
                                  "description": "The value indicating whether to check for duplicate group control number.",
                                  "type": "boolean"
                                },
                                "checkDuplicateInterchangeControlNumber": {
                                  "description": "The value indicating whether to check for duplicate interchange control number.",
                                  "type": "boolean"
                                },
                                "checkDuplicateTransactionSetControlNumber": {
                                  "description": "The value indicating whether to check for duplicate transaction set control number.",
                                  "type": "boolean"
                                },
                                "interchangeControlNumberValidityDays": {
                                  "description": "The validity period of interchange control number.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "trailingSeparatorPolicy": {
                                  "enum": [
                                    "NotSpecified",
                                    "NotAllowed",
                                    "Optional",
                                    "Mandatory"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "TrailingSeparatorPolicy"
                                  }
                                },
                                "trimLeadingAndTrailingSpacesAndZeroes": {
                                  "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                  "type": "boolean"
                                },
                                "validateCharacterSet": {
                                  "description": "The value indicating whether to validate character set in the message.",
                                  "type": "boolean"
                                },
                                "validateEDITypes": {
                                  "description": "The value indicating whether to Whether to validate EDI types.",
                                  "type": "boolean"
                                },
                                "validateXSDTypes": {
                                  "description": "The value indicating whether to Whether to validate XSD types.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "receiverBusinessIdentity": {
                          "properties": {
                            "Qualifier": {
                              "description": "The business identity qualifier.",
                              "type": "string"
                            },
                            "Value": {
                              "description": "The business identity value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "senderBusinessIdentity": {
                          "properties": {
                            "Qualifier": {
                              "description": "The business identity qualifier.",
                              "type": "string"
                            },
                            "Value": {
                              "description": "The business identity value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "X12": {
                  "properties": {
                    "receiveAgreement": {
                      "properties": {
                        "protocolSettings": {
                          "properties": {
                            "acknowledgementSettings": {
                              "properties": {
                                "acknowledgementControlNumberLowerBound": {
                                  "description": "The acknowledgement control number lower bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "acknowledgementControlNumberPrefix": {
                                  "description": "The acknowledgement control number prefix.",
                                  "type": "string"
                                },
                                "acknowledgementControlNumberSuffix": {
                                  "description": "The acknowledgement control number suffix.",
                                  "type": "string"
                                },
                                "acknowledgementControlNumberUpperBound": {
                                  "description": "The acknowledgement control number upper bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "batchFunctionalAcknowledgements": {
                                  "description": "The value indicating whether to batch functional acknowledgements.",
                                  "type": "boolean"
                                },
                                "batchImplementationAcknowledgements": {
                                  "description": "The value indicating whether to batch implementation acknowledgements.",
                                  "type": "boolean"
                                },
                                "batchTechnicalAcknowledgements": {
                                  "description": "The value indicating whether to batch the technical acknowledgements.",
                                  "type": "boolean"
                                },
                                "functionalAcknowledgementVersion": {
                                  "description": "The functional acknowledgement version.",
                                  "type": "string"
                                },
                                "implementationAcknowledgementVersion": {
                                  "description": "The implementation acknowledgement version.",
                                  "type": "string"
                                },
                                "needFunctionalAcknowledgement": {
                                  "description": "The value indicating whether functional acknowledgement is needed.",
                                  "type": "boolean"
                                },
                                "needImplementationAcknowledgement": {
                                  "description": "The value indicating whether implementation acknowledgement is needed.",
                                  "type": "boolean"
                                },
                                "needLoopForValidMessages": {
                                  "description": "The value indicating whether a loop is needed for valid messages.",
                                  "type": "boolean"
                                },
                                "needTechnicalAcknowledgement": {
                                  "description": "The value indicating whether technical acknowledgement is needed.",
                                  "type": "boolean"
                                },
                                "rolloverAcknowledgementControlNumber": {
                                  "description": "The value indicating whether to rollover acknowledgement control number.",
                                  "type": "boolean"
                                },
                                "sendSynchronousAcknowledgement": {
                                  "description": "The value indicating whether to send synchronous acknowledgement.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "envelopeOverrides": {
                              "description": "The X12 envelope override settings.",
                              "items": {
                                "properties": {
                                  "dateFormat": {
                                    "enum": [
                                      "NotSpecified",
                                      "CCYYMMDD",
                                      "YYMMDD"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "X12DateFormat"
                                    }
                                  },
                                  "functionalIdentifierCode": {
                                    "description": "The functional identifier code.",
                                    "type": "string"
                                  },
                                  "headerVersion": {
                                    "description": "The header version.",
                                    "type": "string"
                                  },
                                  "messageId": {
                                    "description": "The message id on which this envelope settings has to be applied.",
                                    "type": "string"
                                  },
                                  "protocolVersion": {
                                    "description": "The protocol version on which this envelope settings has to be applied.",
                                    "type": "string"
                                  },
                                  "receiverApplicationId": {
                                    "description": "The receiver application id.",
                                    "type": "string"
                                  },
                                  "responsibleAgencyCode": {
                                    "description": "The responsible agency code.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "senderApplicationId": {
                                    "description": "The sender application id.",
                                    "type": "string"
                                  },
                                  "targetNamespace": {
                                    "description": "The target namespace on which this envelope settings has to be applied.",
                                    "type": "string"
                                  },
                                  "timeFormat": {
                                    "enum": [
                                      "NotSpecified",
                                      "HHMM",
                                      "HHMMSS",
                                      "HHMMSSdd",
                                      "HHMMSSd"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "X12TimeFormat"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "envelopeSettings": {
                              "properties": {
                                "controlStandardsId": {
                                  "description": "The controls standards id.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "controlVersionNumber": {
                                  "description": "The control version number.",
                                  "type": "string"
                                },
                                "enableDefaultGroupHeaders": {
                                  "description": "The value indicating whether to enable default group headers.",
                                  "type": "boolean"
                                },
                                "functionalGroupId": {
                                  "description": "The functional group id.",
                                  "type": "string"
                                },
                                "groupControlNumberLowerBound": {
                                  "description": "The group control number lower bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "groupControlNumberUpperBound": {
                                  "description": "The group control number upper bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "groupHeaderAgencyCode": {
                                  "description": "The group header agency code.",
                                  "type": "string"
                                },
                                "groupHeaderDateFormat": {
                                  "enum": [
                                    "NotSpecified",
                                    "CCYYMMDD",
                                    "YYMMDD"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "X12DateFormat"
                                  }
                                },
                                "groupHeaderTimeFormat": {
                                  "enum": [
                                    "NotSpecified",
                                    "HHMM",
                                    "HHMMSS",
                                    "HHMMSSdd",
                                    "HHMMSSd"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "X12TimeFormat"
                                  }
                                },
                                "groupHeaderVersion": {
                                  "description": "The group header version.",
                                  "type": "string"
                                },
                                "interchangeControlNumberLowerBound": {
                                  "description": "The interchange  control number lower bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "interchangeControlNumberUpperBound": {
                                  "description": "The interchange  control number upper bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "overwriteExistingTransactionSetControlNumber": {
                                  "description": "The value indicating whether to overwrite existing transaction set control number.",
                                  "type": "boolean"
                                },
                                "receiverApplicationId": {
                                  "description": "The receiver application id.",
                                  "type": "string"
                                },
                                "rolloverGroupControlNumber": {
                                  "description": "The value indicating whether to rollover group control number.",
                                  "type": "boolean"
                                },
                                "rolloverInterchangeControlNumber": {
                                  "description": "The value indicating whether to rollover interchange control number.",
                                  "type": "boolean"
                                },
                                "rolloverTransactionSetControlNumber": {
                                  "description": "The value indicating whether to rollover transaction set control number.",
                                  "type": "boolean"
                                },
                                "senderApplicationId": {
                                  "description": "The sender application id.",
                                  "type": "string"
                                },
                                "transactionSetControlNumberLowerBound": {
                                  "description": "The transaction set control number lower bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "transactionSetControlNumberPrefix": {
                                  "description": "The transaction set control number prefix.",
                                  "type": "string"
                                },
                                "transactionSetControlNumberSuffix": {
                                  "description": "The transaction set control number suffix.",
                                  "type": "string"
                                },
                                "transactionSetControlNumberUpperBound": {
                                  "description": "The transaction set control number upper bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "usageIndicator": {
                                  "enum": [
                                    "NotSpecified",
                                    "Test",
                                    "Information",
                                    "Production"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "UsageIndicator"
                                  }
                                },
                                "useControlStandardsIdAsRepetitionCharacter": {
                                  "description": "The value indicating whether to use control standards id as repetition character.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "framingSettings": {
                              "properties": {
                                "characterSet": {
                                  "enum": [
                                    "NotSpecified",
                                    "Basic",
                                    "Extended",
                                    "UTF8"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "X12CharacterSet"
                                  }
                                },
                                "componentSeparator": {
                                  "description": "The component separator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "dataElementSeparator": {
                                  "description": "The data element separator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "replaceCharacter": {
                                  "description": "The replacement character.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "replaceSeparatorsInPayload": {
                                  "description": "The value indicating whether to replace separators in payload.",
                                  "type": "boolean"
                                },
                                "segmentTerminator": {
                                  "description": "The segment terminator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "segmentTerminatorSuffix": {
                                  "enum": [
                                    "NotSpecified",
                                    "None",
                                    "CR",
                                    "LF",
                                    "CRLF"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "SegmentTerminatorSuffix"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "messageFilter": {
                              "properties": {
                                "messageFilterType": {
                                  "enum": [
                                    "NotSpecified",
                                    "Include",
                                    "Exclude"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "MessageFilterType"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "messageFilterList": {
                              "description": "The X12 message filter list.",
                              "items": {
                                "properties": {
                                  "messageId": {
                                    "description": "The message id.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "processingSettings": {
                              "properties": {
                                "convertImpliedDecimal": {
                                  "description": "The value indicating whether to convert numerical type to implied decimal.",
                                  "type": "boolean"
                                },
                                "createEmptyXmlTagsForTrailingSeparators": {
                                  "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                  "type": "boolean"
                                },
                                "maskSecurityInfo": {
                                  "description": "The value indicating whether to mask security information.",
                                  "type": "boolean"
                                },
                                "preserveInterchange": {
                                  "description": "The value indicating whether to preserve interchange.",
                                  "type": "boolean"
                                },
                                "suspendInterchangeOnError": {
                                  "description": "The value indicating whether to suspend interchange on error.",
                                  "type": "boolean"
                                },
                                "useDotAsDecimalSeparator": {
                                  "description": "The value indicating whether to use dot as decimal separator.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "schemaReferences": {
                              "description": "The X12 schema references.",
                              "items": {
                                "properties": {
                                  "messageId": {
                                    "description": "The message id.",
                                    "type": "string"
                                  },
                                  "schemaName": {
                                    "description": "The schema name.",
                                    "type": "string"
                                  },
                                  "schemaVersion": {
                                    "description": "The schema version.",
                                    "type": "string"
                                  },
                                  "senderApplicationId": {
                                    "description": "The sender application id.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "securitySettings": {
                              "properties": {
                                "authorizationQualifier": {
                                  "description": "The authorization qualifier.",
                                  "type": "string"
                                },
                                "authorizationValue": {
                                  "description": "The authorization value.",
                                  "type": "string"
                                },
                                "passwordValue": {
                                  "description": "The password value.",
                                  "type": "string"
                                },
                                "securityQualifier": {
                                  "description": "The security qualifier.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "validationOverrides": {
                              "description": "The X12 validation override settings.",
                              "items": {
                                "properties": {
                                  "allowLeadingAndTrailingSpacesAndZeroes": {
                                    "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                    "type": "boolean"
                                  },
                                  "messageId": {
                                    "description": "The message id on which the validation settings has to be applied.",
                                    "type": "string"
                                  },
                                  "trailingSeparatorPolicy": {
                                    "enum": [
                                      "NotSpecified",
                                      "NotAllowed",
                                      "Optional",
                                      "Mandatory"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "TrailingSeparatorPolicy"
                                    }
                                  },
                                  "trimLeadingAndTrailingSpacesAndZeroes": {
                                    "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                    "type": "boolean"
                                  },
                                  "validateCharacterSet": {
                                    "description": "The value indicating whether to validate character Set.",
                                    "type": "boolean"
                                  },
                                  "validateEDITypes": {
                                    "description": "The value indicating whether to validate EDI types.",
                                    "type": "boolean"
                                  },
                                  "validateXSDTypes": {
                                    "description": "The value indicating whether to validate XSD types.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "validationSettings": {
                              "properties": {
                                "allowLeadingAndTrailingSpacesAndZeroes": {
                                  "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                  "type": "boolean"
                                },
                                "checkDuplicateGroupControlNumber": {
                                  "description": "The value indicating whether to check for duplicate group control number.",
                                  "type": "boolean"
                                },
                                "checkDuplicateInterchangeControlNumber": {
                                  "description": "The value indicating whether to check for duplicate interchange control number.",
                                  "type": "boolean"
                                },
                                "checkDuplicateTransactionSetControlNumber": {
                                  "description": "The value indicating whether to check for duplicate transaction set control number.",
                                  "type": "boolean"
                                },
                                "interchangeControlNumberValidityDays": {
                                  "description": "The validity period of interchange control number.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "trailingSeparatorPolicy": {
                                  "enum": [
                                    "NotSpecified",
                                    "NotAllowed",
                                    "Optional",
                                    "Mandatory"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "TrailingSeparatorPolicy"
                                  }
                                },
                                "trimLeadingAndTrailingSpacesAndZeroes": {
                                  "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                  "type": "boolean"
                                },
                                "validateCharacterSet": {
                                  "description": "The value indicating whether to validate character set in the message.",
                                  "type": "boolean"
                                },
                                "validateEDITypes": {
                                  "description": "The value indicating whether to Whether to validate EDI types.",
                                  "type": "boolean"
                                },
                                "validateXSDTypes": {
                                  "description": "The value indicating whether to Whether to validate XSD types.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "x12DelimiterOverrides": {
                              "description": "The X12 delimiter override settings.",
                              "items": {
                                "properties": {
                                  "componentSeparator": {
                                    "description": "The component separator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "dataElementSeparator": {
                                    "description": "The data element separator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "messageId": {
                                    "description": "The message id.",
                                    "type": "string"
                                  },
                                  "protocolVersion": {
                                    "description": "The protocol version.",
                                    "type": "string"
                                  },
                                  "replaceCharacter": {
                                    "description": "The replacement character.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "replaceSeparatorsInPayload": {
                                    "description": "The value indicating whether to replace separators in payload.",
                                    "type": "boolean"
                                  },
                                  "segmentTerminator": {
                                    "description": "The segment terminator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "segmentTerminatorSuffix": {
                                    "enum": [
                                      "NotSpecified",
                                      "None",
                                      "CR",
                                      "LF",
                                      "CRLF"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "SegmentTerminatorSuffix"
                                    }
                                  },
                                  "targetNamespace": {
                                    "description": "The target namespace on which this delimiter settings has to be applied.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "receiverBusinessIdentity": {
                          "properties": {
                            "Qualifier": {
                              "description": "The business identity qualifier.",
                              "type": "string"
                            },
                            "Value": {
                              "description": "The business identity value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "senderBusinessIdentity": {
                          "properties": {
                            "Qualifier": {
                              "description": "The business identity qualifier.",
                              "type": "string"
                            },
                            "Value": {
                              "description": "The business identity value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "sendAgreement": {
                      "properties": {
                        "protocolSettings": {
                          "properties": {
                            "acknowledgementSettings": {
                              "properties": {
                                "acknowledgementControlNumberLowerBound": {
                                  "description": "The acknowledgement control number lower bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "acknowledgementControlNumberPrefix": {
                                  "description": "The acknowledgement control number prefix.",
                                  "type": "string"
                                },
                                "acknowledgementControlNumberSuffix": {
                                  "description": "The acknowledgement control number suffix.",
                                  "type": "string"
                                },
                                "acknowledgementControlNumberUpperBound": {
                                  "description": "The acknowledgement control number upper bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "batchFunctionalAcknowledgements": {
                                  "description": "The value indicating whether to batch functional acknowledgements.",
                                  "type": "boolean"
                                },
                                "batchImplementationAcknowledgements": {
                                  "description": "The value indicating whether to batch implementation acknowledgements.",
                                  "type": "boolean"
                                },
                                "batchTechnicalAcknowledgements": {
                                  "description": "The value indicating whether to batch the technical acknowledgements.",
                                  "type": "boolean"
                                },
                                "functionalAcknowledgementVersion": {
                                  "description": "The functional acknowledgement version.",
                                  "type": "string"
                                },
                                "implementationAcknowledgementVersion": {
                                  "description": "The implementation acknowledgement version.",
                                  "type": "string"
                                },
                                "needFunctionalAcknowledgement": {
                                  "description": "The value indicating whether functional acknowledgement is needed.",
                                  "type": "boolean"
                                },
                                "needImplementationAcknowledgement": {
                                  "description": "The value indicating whether implementation acknowledgement is needed.",
                                  "type": "boolean"
                                },
                                "needLoopForValidMessages": {
                                  "description": "The value indicating whether a loop is needed for valid messages.",
                                  "type": "boolean"
                                },
                                "needTechnicalAcknowledgement": {
                                  "description": "The value indicating whether technical acknowledgement is needed.",
                                  "type": "boolean"
                                },
                                "rolloverAcknowledgementControlNumber": {
                                  "description": "The value indicating whether to rollover acknowledgement control number.",
                                  "type": "boolean"
                                },
                                "sendSynchronousAcknowledgement": {
                                  "description": "The value indicating whether to send synchronous acknowledgement.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "envelopeOverrides": {
                              "description": "The X12 envelope override settings.",
                              "items": {
                                "properties": {
                                  "dateFormat": {
                                    "enum": [
                                      "NotSpecified",
                                      "CCYYMMDD",
                                      "YYMMDD"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "X12DateFormat"
                                    }
                                  },
                                  "functionalIdentifierCode": {
                                    "description": "The functional identifier code.",
                                    "type": "string"
                                  },
                                  "headerVersion": {
                                    "description": "The header version.",
                                    "type": "string"
                                  },
                                  "messageId": {
                                    "description": "The message id on which this envelope settings has to be applied.",
                                    "type": "string"
                                  },
                                  "protocolVersion": {
                                    "description": "The protocol version on which this envelope settings has to be applied.",
                                    "type": "string"
                                  },
                                  "receiverApplicationId": {
                                    "description": "The receiver application id.",
                                    "type": "string"
                                  },
                                  "responsibleAgencyCode": {
                                    "description": "The responsible agency code.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "senderApplicationId": {
                                    "description": "The sender application id.",
                                    "type": "string"
                                  },
                                  "targetNamespace": {
                                    "description": "The target namespace on which this envelope settings has to be applied.",
                                    "type": "string"
                                  },
                                  "timeFormat": {
                                    "enum": [
                                      "NotSpecified",
                                      "HHMM",
                                      "HHMMSS",
                                      "HHMMSSdd",
                                      "HHMMSSd"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "X12TimeFormat"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "envelopeSettings": {
                              "properties": {
                                "controlStandardsId": {
                                  "description": "The controls standards id.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "controlVersionNumber": {
                                  "description": "The control version number.",
                                  "type": "string"
                                },
                                "enableDefaultGroupHeaders": {
                                  "description": "The value indicating whether to enable default group headers.",
                                  "type": "boolean"
                                },
                                "functionalGroupId": {
                                  "description": "The functional group id.",
                                  "type": "string"
                                },
                                "groupControlNumberLowerBound": {
                                  "description": "The group control number lower bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "groupControlNumberUpperBound": {
                                  "description": "The group control number upper bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "groupHeaderAgencyCode": {
                                  "description": "The group header agency code.",
                                  "type": "string"
                                },
                                "groupHeaderDateFormat": {
                                  "enum": [
                                    "NotSpecified",
                                    "CCYYMMDD",
                                    "YYMMDD"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "X12DateFormat"
                                  }
                                },
                                "groupHeaderTimeFormat": {
                                  "enum": [
                                    "NotSpecified",
                                    "HHMM",
                                    "HHMMSS",
                                    "HHMMSSdd",
                                    "HHMMSSd"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "X12TimeFormat"
                                  }
                                },
                                "groupHeaderVersion": {
                                  "description": "The group header version.",
                                  "type": "string"
                                },
                                "interchangeControlNumberLowerBound": {
                                  "description": "The interchange  control number lower bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "interchangeControlNumberUpperBound": {
                                  "description": "The interchange  control number upper bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "overwriteExistingTransactionSetControlNumber": {
                                  "description": "The value indicating whether to overwrite existing transaction set control number.",
                                  "type": "boolean"
                                },
                                "receiverApplicationId": {
                                  "description": "The receiver application id.",
                                  "type": "string"
                                },
                                "rolloverGroupControlNumber": {
                                  "description": "The value indicating whether to rollover group control number.",
                                  "type": "boolean"
                                },
                                "rolloverInterchangeControlNumber": {
                                  "description": "The value indicating whether to rollover interchange control number.",
                                  "type": "boolean"
                                },
                                "rolloverTransactionSetControlNumber": {
                                  "description": "The value indicating whether to rollover transaction set control number.",
                                  "type": "boolean"
                                },
                                "senderApplicationId": {
                                  "description": "The sender application id.",
                                  "type": "string"
                                },
                                "transactionSetControlNumberLowerBound": {
                                  "description": "The transaction set control number lower bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "transactionSetControlNumberPrefix": {
                                  "description": "The transaction set control number prefix.",
                                  "type": "string"
                                },
                                "transactionSetControlNumberSuffix": {
                                  "description": "The transaction set control number suffix.",
                                  "type": "string"
                                },
                                "transactionSetControlNumberUpperBound": {
                                  "description": "The transaction set control number upper bound.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "usageIndicator": {
                                  "enum": [
                                    "NotSpecified",
                                    "Test",
                                    "Information",
                                    "Production"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "UsageIndicator"
                                  }
                                },
                                "useControlStandardsIdAsRepetitionCharacter": {
                                  "description": "The value indicating whether to use control standards id as repetition character.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "framingSettings": {
                              "properties": {
                                "characterSet": {
                                  "enum": [
                                    "NotSpecified",
                                    "Basic",
                                    "Extended",
                                    "UTF8"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "X12CharacterSet"
                                  }
                                },
                                "componentSeparator": {
                                  "description": "The component separator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "dataElementSeparator": {
                                  "description": "The data element separator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "replaceCharacter": {
                                  "description": "The replacement character.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "replaceSeparatorsInPayload": {
                                  "description": "The value indicating whether to replace separators in payload.",
                                  "type": "boolean"
                                },
                                "segmentTerminator": {
                                  "description": "The segment terminator.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "segmentTerminatorSuffix": {
                                  "enum": [
                                    "NotSpecified",
                                    "None",
                                    "CR",
                                    "LF",
                                    "CRLF"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "SegmentTerminatorSuffix"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "messageFilter": {
                              "properties": {
                                "messageFilterType": {
                                  "enum": [
                                    "NotSpecified",
                                    "Include",
                                    "Exclude"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "MessageFilterType"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "messageFilterList": {
                              "description": "The X12 message filter list.",
                              "items": {
                                "properties": {
                                  "messageId": {
                                    "description": "The message id.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "processingSettings": {
                              "properties": {
                                "convertImpliedDecimal": {
                                  "description": "The value indicating whether to convert numerical type to implied decimal.",
                                  "type": "boolean"
                                },
                                "createEmptyXmlTagsForTrailingSeparators": {
                                  "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                  "type": "boolean"
                                },
                                "maskSecurityInfo": {
                                  "description": "The value indicating whether to mask security information.",
                                  "type": "boolean"
                                },
                                "preserveInterchange": {
                                  "description": "The value indicating whether to preserve interchange.",
                                  "type": "boolean"
                                },
                                "suspendInterchangeOnError": {
                                  "description": "The value indicating whether to suspend interchange on error.",
                                  "type": "boolean"
                                },
                                "useDotAsDecimalSeparator": {
                                  "description": "The value indicating whether to use dot as decimal separator.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "schemaReferences": {
                              "description": "The X12 schema references.",
                              "items": {
                                "properties": {
                                  "messageId": {
                                    "description": "The message id.",
                                    "type": "string"
                                  },
                                  "schemaName": {
                                    "description": "The schema name.",
                                    "type": "string"
                                  },
                                  "schemaVersion": {
                                    "description": "The schema version.",
                                    "type": "string"
                                  },
                                  "senderApplicationId": {
                                    "description": "The sender application id.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "securitySettings": {
                              "properties": {
                                "authorizationQualifier": {
                                  "description": "The authorization qualifier.",
                                  "type": "string"
                                },
                                "authorizationValue": {
                                  "description": "The authorization value.",
                                  "type": "string"
                                },
                                "passwordValue": {
                                  "description": "The password value.",
                                  "type": "string"
                                },
                                "securityQualifier": {
                                  "description": "The security qualifier.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "validationOverrides": {
                              "description": "The X12 validation override settings.",
                              "items": {
                                "properties": {
                                  "allowLeadingAndTrailingSpacesAndZeroes": {
                                    "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                    "type": "boolean"
                                  },
                                  "messageId": {
                                    "description": "The message id on which the validation settings has to be applied.",
                                    "type": "string"
                                  },
                                  "trailingSeparatorPolicy": {
                                    "enum": [
                                      "NotSpecified",
                                      "NotAllowed",
                                      "Optional",
                                      "Mandatory"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "TrailingSeparatorPolicy"
                                    }
                                  },
                                  "trimLeadingAndTrailingSpacesAndZeroes": {
                                    "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                    "type": "boolean"
                                  },
                                  "validateCharacterSet": {
                                    "description": "The value indicating whether to validate character Set.",
                                    "type": "boolean"
                                  },
                                  "validateEDITypes": {
                                    "description": "The value indicating whether to validate EDI types.",
                                    "type": "boolean"
                                  },
                                  "validateXSDTypes": {
                                    "description": "The value indicating whether to validate XSD types.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "validationSettings": {
                              "properties": {
                                "allowLeadingAndTrailingSpacesAndZeroes": {
                                  "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                  "type": "boolean"
                                },
                                "checkDuplicateGroupControlNumber": {
                                  "description": "The value indicating whether to check for duplicate group control number.",
                                  "type": "boolean"
                                },
                                "checkDuplicateInterchangeControlNumber": {
                                  "description": "The value indicating whether to check for duplicate interchange control number.",
                                  "type": "boolean"
                                },
                                "checkDuplicateTransactionSetControlNumber": {
                                  "description": "The value indicating whether to check for duplicate transaction set control number.",
                                  "type": "boolean"
                                },
                                "interchangeControlNumberValidityDays": {
                                  "description": "The validity period of interchange control number.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "trailingSeparatorPolicy": {
                                  "enum": [
                                    "NotSpecified",
                                    "NotAllowed",
                                    "Optional",
                                    "Mandatory"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "TrailingSeparatorPolicy"
                                  }
                                },
                                "trimLeadingAndTrailingSpacesAndZeroes": {
                                  "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                  "type": "boolean"
                                },
                                "validateCharacterSet": {
                                  "description": "The value indicating whether to validate character set in the message.",
                                  "type": "boolean"
                                },
                                "validateEDITypes": {
                                  "description": "The value indicating whether to Whether to validate EDI types.",
                                  "type": "boolean"
                                },
                                "validateXSDTypes": {
                                  "description": "The value indicating whether to Whether to validate XSD types.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "x12DelimiterOverrides": {
                              "description": "The X12 delimiter override settings.",
                              "items": {
                                "properties": {
                                  "componentSeparator": {
                                    "description": "The component separator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "dataElementSeparator": {
                                    "description": "The data element separator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "messageId": {
                                    "description": "The message id.",
                                    "type": "string"
                                  },
                                  "protocolVersion": {
                                    "description": "The protocol version.",
                                    "type": "string"
                                  },
                                  "replaceCharacter": {
                                    "description": "The replacement character.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "replaceSeparatorsInPayload": {
                                    "description": "The value indicating whether to replace separators in payload.",
                                    "type": "boolean"
                                  },
                                  "segmentTerminator": {
                                    "description": "The segment terminator.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "segmentTerminatorSuffix": {
                                    "enum": [
                                      "NotSpecified",
                                      "None",
                                      "CR",
                                      "LF",
                                      "CRLF"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "SegmentTerminatorSuffix"
                                    }
                                  },
                                  "targetNamespace": {
                                    "description": "The target namespace on which this delimiter settings has to be applied.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "receiverBusinessIdentity": {
                          "properties": {
                            "Qualifier": {
                              "description": "The business identity qualifier.",
                              "type": "string"
                            },
                            "Value": {
                              "description": "The business identity value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "senderBusinessIdentity": {
                          "properties": {
                            "Qualifier": {
                              "description": "The business identity qualifier.",
                              "type": "string"
                            },
                            "Value": {
                              "description": "The business identity value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/AgreementContent"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "AS2",
                "X12",
                "Edifact"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "AgreementType"
              }
            },
            "op": "add",
            "from": "",
            "path": "/AgreementType"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "businessIdentities": {
                  "description": "The list of partner business identities.",
                  "items": {
                    "properties": {
                      "Qualifier": {
                        "description": "The business identity qualifier.",
                        "type": "string"
                      },
                      "Value": {
                        "description": "The business identity value.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/B2BPartnerContent"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "Qualifier": {
                  "description": "The business identity qualifier.",
                  "type": "string"
                },
                "Value": {
                  "description": "The business identity value.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/BusinessIdentity"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "value": {
                  "description": "The URL value.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/CallbackUrl"
          },
          {
            "oldValue": {
              "properties": {
                "algorithm": {
                  "description": "Gets or sets the algorithm.",
                  "type": "string"
                },
                "value": {
                  "description": "Gets or sets the value.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ContentHash"
          },
          {
            "oldValue": {
              "properties": {
                "contentHash": {
                  "properties": {
                    "algorithm": {
                      "description": "Gets or sets the algorithm.",
                      "type": "string"
                    },
                    "value": {
                      "description": "Gets or sets the value.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "contentSize": {
                  "description": "Gets or sets the content size.",
                  "format": "int64",
                  "type": "integer"
                },
                "contentVersion": {
                  "description": "Gets or sets the content version.",
                  "type": "string"
                },
                "metadata": {
                  "properties": {},
                  "type": "object"
                },
                "uri": {
                  "description": "Gets or sets the content link URI.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ContentLink"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "acknowledgementControlNumberLowerBound": {
                  "description": "The acknowledgement control number lower bound.",
                  "format": "int32",
                  "type": "integer"
                },
                "acknowledgementControlNumberPrefix": {
                  "description": "The acknowledgement control number prefix.",
                  "type": "string"
                },
                "acknowledgementControlNumberSuffix": {
                  "description": "The acknowledgement control number suffix.",
                  "type": "string"
                },
                "acknowledgementControlNumberUpperBound": {
                  "description": "The acknowledgement control number upper bound.",
                  "format": "int32",
                  "type": "integer"
                },
                "batchFunctionalAcknowledgements": {
                  "description": "The value indicating whether to batch functional acknowledgements.",
                  "type": "boolean"
                },
                "batchTechnicalAcknowledgements": {
                  "description": "The value indicating whether to batch the technical acknowledgements.",
                  "type": "boolean"
                },
                "needFunctionalAcknowledgement": {
                  "description": "The value indicating whether functional acknowledgement is needed.",
                  "type": "boolean"
                },
                "needLoopForValidMessages": {
                  "description": "The value indicating whether a loop is needed for valid messages.",
                  "type": "boolean"
                },
                "needTechnicalAcknowledgement": {
                  "description": "The value indicating whether technical acknowledgement is needed.",
                  "type": "boolean"
                },
                "rolloverAcknowledgementControlNumber": {
                  "description": "The value indicating whether to rollover acknowledgement control number.",
                  "type": "boolean"
                },
                "sendSynchronousAcknowledgement": {
                  "description": "The value indicating whether to send synchronous acknowledgement.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EdifactAcknowledgementSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "receiveAgreement": {
                  "properties": {
                    "protocolSettings": {
                      "properties": {
                        "acknowledgementSettings": {
                          "properties": {
                            "acknowledgementControlNumberLowerBound": {
                              "description": "The acknowledgement control number lower bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "acknowledgementControlNumberPrefix": {
                              "description": "The acknowledgement control number prefix.",
                              "type": "string"
                            },
                            "acknowledgementControlNumberSuffix": {
                              "description": "The acknowledgement control number suffix.",
                              "type": "string"
                            },
                            "acknowledgementControlNumberUpperBound": {
                              "description": "The acknowledgement control number upper bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "batchFunctionalAcknowledgements": {
                              "description": "The value indicating whether to batch functional acknowledgements.",
                              "type": "boolean"
                            },
                            "batchTechnicalAcknowledgements": {
                              "description": "The value indicating whether to batch the technical acknowledgements.",
                              "type": "boolean"
                            },
                            "needFunctionalAcknowledgement": {
                              "description": "The value indicating whether functional acknowledgement is needed.",
                              "type": "boolean"
                            },
                            "needLoopForValidMessages": {
                              "description": "The value indicating whether a loop is needed for valid messages.",
                              "type": "boolean"
                            },
                            "needTechnicalAcknowledgement": {
                              "description": "The value indicating whether technical acknowledgement is needed.",
                              "type": "boolean"
                            },
                            "rolloverAcknowledgementControlNumber": {
                              "description": "The value indicating whether to rollover acknowledgement control number.",
                              "type": "boolean"
                            },
                            "sendSynchronousAcknowledgement": {
                              "description": "The value indicating whether to send synchronous acknowledgement.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "edifactDelimiterOverrides": {
                          "description": "The EDIFACT delimiter override settings.",
                          "items": {
                            "properties": {
                              "componentSeparator": {
                                "description": "The component separator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "dataElementSeparator": {
                                "description": "The data element separator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "decimalPointIndicator": {
                                "enum": [
                                  "NotSpecified",
                                  "Comma",
                                  "Decimal"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "EdifactDecimalIndicator"
                                }
                              },
                              "messageAssociationAssignedCode": {
                                "description": "The message association assigned code.",
                                "type": "string"
                              },
                              "messageId": {
                                "description": "The message id.",
                                "type": "string"
                              },
                              "messageRelease": {
                                "description": "The message release version.",
                                "type": "string"
                              },
                              "messageVersion": {
                                "description": "The message version.",
                                "type": "string"
                              },
                              "releaseIndicator": {
                                "description": "The release indicator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "repetitionSeparator": {
                                "description": "The repetition separator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "segmentTerminator": {
                                "description": "The segment terminator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "segmentTerminatorSuffix": {
                                "enum": [
                                  "NotSpecified",
                                  "None",
                                  "CR",
                                  "LF",
                                  "CRLF"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "SegmentTerminatorSuffix"
                                }
                              },
                              "targetNamespace": {
                                "description": "The target namespace on which this delimiter settings has to be applied.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "envelopeOverrides": {
                          "description": "The EDIFACT envelope override settings.",
                          "items": {
                            "properties": {
                              "applicationPassword": {
                                "description": "The application password.",
                                "type": "string"
                              },
                              "associationAssignedCode": {
                                "description": "The association assigned code.",
                                "type": "string"
                              },
                              "controllingAgencyCode": {
                                "description": "The controlling agency code.",
                                "type": "string"
                              },
                              "functionalGroupId": {
                                "description": "The functional group id.",
                                "type": "string"
                              },
                              "groupHeaderMessageRelease": {
                                "description": "The group header message release.",
                                "type": "string"
                              },
                              "groupHeaderMessageVersion": {
                                "description": "The group header message version.",
                                "type": "string"
                              },
                              "messageAssociationAssignedCode": {
                                "description": "The message association assigned code.",
                                "type": "string"
                              },
                              "messageId": {
                                "description": "The message id on which this envelope settings has to be applied.",
                                "type": "string"
                              },
                              "messageRelease": {
                                "description": "The message release version on which this envelope settings has to be applied.",
                                "type": "string"
                              },
                              "messageVersion": {
                                "description": "The message version on which this envelope settings has to be applied.",
                                "type": "string"
                              },
                              "receiverApplicationId": {
                                "description": "The receiver application id.",
                                "type": "string"
                              },
                              "receiverApplicationQualifier": {
                                "description": "The receiver application qualifier.",
                                "type": "string"
                              },
                              "senderApplicationId": {
                                "description": "The sender application id.",
                                "type": "string"
                              },
                              "senderApplicationQualifier": {
                                "description": "The sender application qualifier.",
                                "type": "string"
                              },
                              "targetNamespace": {
                                "description": "The target namespace on which this envelope settings has to be applied.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "envelopeSettings": {
                          "properties": {
                            "applicationReferenceId": {
                              "description": "The application reference id.",
                              "type": "string"
                            },
                            "applyDelimiterStringAdvice": {
                              "description": "The value indicating whether to apply delimiter string advice.",
                              "type": "boolean"
                            },
                            "communicationAgreementId": {
                              "description": "The communication agreement id.",
                              "type": "string"
                            },
                            "createGroupingSegments": {
                              "description": "The value indicating whether to create grouping segments.",
                              "type": "boolean"
                            },
                            "enableDefaultGroupHeaders": {
                              "description": "The value indicating whether to enable default group headers.",
                              "type": "boolean"
                            },
                            "functionalGroupId": {
                              "description": "The functional group id.",
                              "type": "string"
                            },
                            "groupApplicationPassword": {
                              "description": "The group application password.",
                              "type": "string"
                            },
                            "groupApplicationReceiverId": {
                              "description": "The group application receiver id.",
                              "type": "string"
                            },
                            "groupApplicationReceiverQualifier": {
                              "description": "The group application receiver qualifier.",
                              "type": "string"
                            },
                            "groupApplicationSenderId": {
                              "description": "The group application sender id.",
                              "type": "string"
                            },
                            "groupApplicationSenderQualifier": {
                              "description": "The group application sender qualifier.",
                              "type": "string"
                            },
                            "groupAssociationAssignedCode": {
                              "description": "The group association assigned code.",
                              "type": "string"
                            },
                            "groupControlNumberLowerBound": {
                              "description": "The group control number lower bound.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "groupControlNumberPrefix": {
                              "description": "The group control number prefix.",
                              "type": "string"
                            },
                            "groupControlNumberSuffix": {
                              "description": "The group control number suffix.",
                              "type": "string"
                            },
                            "groupControlNumberUpperBound": {
                              "description": "The group control number upper bound.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "groupControllingAgencyCode": {
                              "description": "The group controlling agency code.",
                              "type": "string"
                            },
                            "groupMessageRelease": {
                              "description": "The group message release.",
                              "type": "string"
                            },
                            "groupMessageVersion": {
                              "description": "The group message version.",
                              "type": "string"
                            },
                            "interchangeControlNumberLowerBound": {
                              "description": "The interchange control number lower bound.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "interchangeControlNumberPrefix": {
                              "description": "The interchange control number prefix.",
                              "type": "string"
                            },
                            "interchangeControlNumberSuffix": {
                              "description": "The interchange control number suffix.",
                              "type": "string"
                            },
                            "interchangeControlNumberUpperBound": {
                              "description": "The interchange control number upper bound.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "isTestInterchange": {
                              "description": "The value indicating whether the message is a test interchange.",
                              "type": "boolean"
                            },
                            "overwriteExistingTransactionSetControlNumber": {
                              "description": "The value indicating whether to overwrite existing transaction set control number.",
                              "type": "boolean"
                            },
                            "processingPriorityCode": {
                              "description": "The processing priority code.",
                              "type": "string"
                            },
                            "receiverInternalIdentification": {
                              "description": "The receiver internal identification.",
                              "type": "string"
                            },
                            "receiverInternalSubIdentification": {
                              "description": "The receiver internal sub identification.",
                              "type": "string"
                            },
                            "receiverReverseRoutingAddress": {
                              "description": "The receiver reverse routing address.",
                              "type": "string"
                            },
                            "recipientReferencePasswordQualifier": {
                              "description": "The recipient reference password qualifier.",
                              "type": "string"
                            },
                            "recipientReferencePasswordValue": {
                              "description": "The recipient reference password value.",
                              "type": "string"
                            },
                            "rolloverGroupControlNumber": {
                              "description": "The value indicating whether to rollover group control number.",
                              "type": "boolean"
                            },
                            "rolloverInterchangeControlNumber": {
                              "description": "The value indicating whether to rollover interchange control number.",
                              "type": "boolean"
                            },
                            "rolloverTransactionSetControlNumber": {
                              "description": "The value indicating whether to rollover transaction set control number.",
                              "type": "boolean"
                            },
                            "senderInternalIdentification": {
                              "description": "The sender internal identification.",
                              "type": "string"
                            },
                            "senderInternalSubIdentification": {
                              "description": "The sender internal sub identification.",
                              "type": "string"
                            },
                            "senderReverseRoutingAddress": {
                              "description": "The sender reverse routing address.",
                              "type": "string"
                            },
                            "transactionSetControlNumberLowerBound": {
                              "description": "The transaction set control number lower bound.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "transactionSetControlNumberPrefix": {
                              "description": "The transaction set control number prefix.",
                              "type": "string"
                            },
                            "transactionSetControlNumberSuffix": {
                              "description": "The transaction set control number suffix.",
                              "type": "string"
                            },
                            "transactionSetControlNumberUpperBound": {
                              "description": "The transaction set control number upper bound.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "framingSettings": {
                          "properties": {
                            "characterEncoding": {
                              "description": "The character encoding.",
                              "type": "string"
                            },
                            "characterSet": {
                              "enum": [
                                "NotSpecified",
                                "UNOB",
                                "UNOA",
                                "UNOC",
                                "UNOD",
                                "UNOE",
                                "UNOF",
                                "UNOG",
                                "UNOH",
                                "UNOI",
                                "UNOJ",
                                "UNOK",
                                "UNOX",
                                "UNOY",
                                "KECA"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "EdifactCharacterSet"
                              }
                            },
                            "componentSeparator": {
                              "description": "The component separator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "dataElementSeparator": {
                              "description": "The data element separator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "decimalPointIndicator": {
                              "enum": [
                                "NotSpecified",
                                "Comma",
                                "Decimal"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "EdifactDecimalIndicator"
                              }
                            },
                            "protocolVersion": {
                              "description": "The protocol version.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "releaseIndicator": {
                              "description": "The release indicator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "repetitionSeparator": {
                              "description": "The repetition separator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "segmentTerminator": {
                              "description": "The segment terminator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "segmentTerminatorSuffix": {
                              "enum": [
                                "NotSpecified",
                                "None",
                                "CR",
                                "LF",
                                "CRLF"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "SegmentTerminatorSuffix"
                              }
                            },
                            "serviceCodeListDirectoryVersion": {
                              "description": "The service code list directory version.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "messageFilter": {
                          "properties": {
                            "messageFilterType": {
                              "enum": [
                                "NotSpecified",
                                "Include",
                                "Exclude"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "MessageFilterType"
                              }
                            }
                          },
                          "type": "object"
                        },
                        "messageFilterList": {
                          "description": "The EDIFACT message filter list.",
                          "items": {
                            "properties": {
                              "messageId": {
                                "description": "The message id on which this envelope settings has to be applied.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "processingSettings": {
                          "properties": {
                            "createEmptyXmlTagsForTrailingSeparators": {
                              "description": "The value indicating whether to create empty xml tags for trailing separators.",
                              "type": "boolean"
                            },
                            "maskSecurityInfo": {
                              "description": "The value indicating whether to mask security information.",
                              "type": "boolean"
                            },
                            "preserveInterchange": {
                              "description": "The value indicating whether to preserve interchange.",
                              "type": "boolean"
                            },
                            "suspendInterchangeOnError": {
                              "description": "The value indicating whether to suspend interchange on error.",
                              "type": "boolean"
                            },
                            "useDotAsDecimalSeparator": {
                              "description": "The value indicating whether to use dot as decimal separator.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "schemaReferences": {
                          "description": "The EDIFACT schema references.",
                          "items": {
                            "properties": {
                              "associationAssignedCode": {
                                "description": "The association assigned code.",
                                "type": "string"
                              },
                              "messageId": {
                                "description": "The message id.",
                                "type": "string"
                              },
                              "messageRelease": {
                                "description": "The message release version.",
                                "type": "string"
                              },
                              "messageVersion": {
                                "description": "The message version.",
                                "type": "string"
                              },
                              "schemaName": {
                                "description": "The schema name.",
                                "type": "string"
                              },
                              "senderApplicationId": {
                                "description": "The sender application id.",
                                "type": "string"
                              },
                              "senderApplicationQualifier": {
                                "description": "The sender application qualifier.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "validationOverrides": {
                          "description": "The EDIFACT validation override settings.",
                          "items": {
                            "properties": {
                              "allowLeadingAndTrailingSpacesAndZeroes": {
                                "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                "type": "boolean"
                              },
                              "enforceCharacterSet": {
                                "description": "The value indicating whether to validate character Set.",
                                "type": "boolean"
                              },
                              "messageId": {
                                "description": "The message id on which the validation settings has to be applied.",
                                "type": "string"
                              },
                              "trailingSeparatorPolicy": {
                                "enum": [
                                  "NotSpecified",
                                  "NotAllowed",
                                  "Optional",
                                  "Mandatory"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "TrailingSeparatorPolicy"
                                }
                              },
                              "trimLeadingAndTrailingSpacesAndZeroes": {
                                "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                "type": "boolean"
                              },
                              "validateEDITypes": {
                                "description": "The value indicating whether to validate EDI types.",
                                "type": "boolean"
                              },
                              "validateXSDTypes": {
                                "description": "The value indicating whether to validate XSD types.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "validationSettings": {
                          "properties": {
                            "allowLeadingAndTrailingSpacesAndZeroes": {
                              "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                              "type": "boolean"
                            },
                            "checkDuplicateGroupControlNumber": {
                              "description": "The value indicating whether to check for duplicate group control number.",
                              "type": "boolean"
                            },
                            "checkDuplicateInterchangeControlNumber": {
                              "description": "The value indicating whether to check for duplicate interchange control number.",
                              "type": "boolean"
                            },
                            "checkDuplicateTransactionSetControlNumber": {
                              "description": "The value indicating whether to check for duplicate transaction set control number.",
                              "type": "boolean"
                            },
                            "interchangeControlNumberValidityDays": {
                              "description": "The validity period of interchange control number.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "trailingSeparatorPolicy": {
                              "enum": [
                                "NotSpecified",
                                "NotAllowed",
                                "Optional",
                                "Mandatory"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "TrailingSeparatorPolicy"
                              }
                            },
                            "trimLeadingAndTrailingSpacesAndZeroes": {
                              "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                              "type": "boolean"
                            },
                            "validateCharacterSet": {
                              "description": "The value indicating whether to validate character set in the message.",
                              "type": "boolean"
                            },
                            "validateEDITypes": {
                              "description": "The value indicating whether to Whether to validate EDI types.",
                              "type": "boolean"
                            },
                            "validateXSDTypes": {
                              "description": "The value indicating whether to Whether to validate XSD types.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "receiverBusinessIdentity": {
                      "properties": {
                        "Qualifier": {
                          "description": "The business identity qualifier.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "The business identity value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "senderBusinessIdentity": {
                      "properties": {
                        "Qualifier": {
                          "description": "The business identity qualifier.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "The business identity value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "sendAgreement": {
                  "properties": {
                    "protocolSettings": {
                      "properties": {
                        "acknowledgementSettings": {
                          "properties": {
                            "acknowledgementControlNumberLowerBound": {
                              "description": "The acknowledgement control number lower bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "acknowledgementControlNumberPrefix": {
                              "description": "The acknowledgement control number prefix.",
                              "type": "string"
                            },
                            "acknowledgementControlNumberSuffix": {
                              "description": "The acknowledgement control number suffix.",
                              "type": "string"
                            },
                            "acknowledgementControlNumberUpperBound": {
                              "description": "The acknowledgement control number upper bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "batchFunctionalAcknowledgements": {
                              "description": "The value indicating whether to batch functional acknowledgements.",
                              "type": "boolean"
                            },
                            "batchTechnicalAcknowledgements": {
                              "description": "The value indicating whether to batch the technical acknowledgements.",
                              "type": "boolean"
                            },
                            "needFunctionalAcknowledgement": {
                              "description": "The value indicating whether functional acknowledgement is needed.",
                              "type": "boolean"
                            },
                            "needLoopForValidMessages": {
                              "description": "The value indicating whether a loop is needed for valid messages.",
                              "type": "boolean"
                            },
                            "needTechnicalAcknowledgement": {
                              "description": "The value indicating whether technical acknowledgement is needed.",
                              "type": "boolean"
                            },
                            "rolloverAcknowledgementControlNumber": {
                              "description": "The value indicating whether to rollover acknowledgement control number.",
                              "type": "boolean"
                            },
                            "sendSynchronousAcknowledgement": {
                              "description": "The value indicating whether to send synchronous acknowledgement.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "edifactDelimiterOverrides": {
                          "description": "The EDIFACT delimiter override settings.",
                          "items": {
                            "properties": {
                              "componentSeparator": {
                                "description": "The component separator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "dataElementSeparator": {
                                "description": "The data element separator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "decimalPointIndicator": {
                                "enum": [
                                  "NotSpecified",
                                  "Comma",
                                  "Decimal"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "EdifactDecimalIndicator"
                                }
                              },
                              "messageAssociationAssignedCode": {
                                "description": "The message association assigned code.",
                                "type": "string"
                              },
                              "messageId": {
                                "description": "The message id.",
                                "type": "string"
                              },
                              "messageRelease": {
                                "description": "The message release version.",
                                "type": "string"
                              },
                              "messageVersion": {
                                "description": "The message version.",
                                "type": "string"
                              },
                              "releaseIndicator": {
                                "description": "The release indicator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "repetitionSeparator": {
                                "description": "The repetition separator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "segmentTerminator": {
                                "description": "The segment terminator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "segmentTerminatorSuffix": {
                                "enum": [
                                  "NotSpecified",
                                  "None",
                                  "CR",
                                  "LF",
                                  "CRLF"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "SegmentTerminatorSuffix"
                                }
                              },
                              "targetNamespace": {
                                "description": "The target namespace on which this delimiter settings has to be applied.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "envelopeOverrides": {
                          "description": "The EDIFACT envelope override settings.",
                          "items": {
                            "properties": {
                              "applicationPassword": {
                                "description": "The application password.",
                                "type": "string"
                              },
                              "associationAssignedCode": {
                                "description": "The association assigned code.",
                                "type": "string"
                              },
                              "controllingAgencyCode": {
                                "description": "The controlling agency code.",
                                "type": "string"
                              },
                              "functionalGroupId": {
                                "description": "The functional group id.",
                                "type": "string"
                              },
                              "groupHeaderMessageRelease": {
                                "description": "The group header message release.",
                                "type": "string"
                              },
                              "groupHeaderMessageVersion": {
                                "description": "The group header message version.",
                                "type": "string"
                              },
                              "messageAssociationAssignedCode": {
                                "description": "The message association assigned code.",
                                "type": "string"
                              },
                              "messageId": {
                                "description": "The message id on which this envelope settings has to be applied.",
                                "type": "string"
                              },
                              "messageRelease": {
                                "description": "The message release version on which this envelope settings has to be applied.",
                                "type": "string"
                              },
                              "messageVersion": {
                                "description": "The message version on which this envelope settings has to be applied.",
                                "type": "string"
                              },
                              "receiverApplicationId": {
                                "description": "The receiver application id.",
                                "type": "string"
                              },
                              "receiverApplicationQualifier": {
                                "description": "The receiver application qualifier.",
                                "type": "string"
                              },
                              "senderApplicationId": {
                                "description": "The sender application id.",
                                "type": "string"
                              },
                              "senderApplicationQualifier": {
                                "description": "The sender application qualifier.",
                                "type": "string"
                              },
                              "targetNamespace": {
                                "description": "The target namespace on which this envelope settings has to be applied.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "envelopeSettings": {
                          "properties": {
                            "applicationReferenceId": {
                              "description": "The application reference id.",
                              "type": "string"
                            },
                            "applyDelimiterStringAdvice": {
                              "description": "The value indicating whether to apply delimiter string advice.",
                              "type": "boolean"
                            },
                            "communicationAgreementId": {
                              "description": "The communication agreement id.",
                              "type": "string"
                            },
                            "createGroupingSegments": {
                              "description": "The value indicating whether to create grouping segments.",
                              "type": "boolean"
                            },
                            "enableDefaultGroupHeaders": {
                              "description": "The value indicating whether to enable default group headers.",
                              "type": "boolean"
                            },
                            "functionalGroupId": {
                              "description": "The functional group id.",
                              "type": "string"
                            },
                            "groupApplicationPassword": {
                              "description": "The group application password.",
                              "type": "string"
                            },
                            "groupApplicationReceiverId": {
                              "description": "The group application receiver id.",
                              "type": "string"
                            },
                            "groupApplicationReceiverQualifier": {
                              "description": "The group application receiver qualifier.",
                              "type": "string"
                            },
                            "groupApplicationSenderId": {
                              "description": "The group application sender id.",
                              "type": "string"
                            },
                            "groupApplicationSenderQualifier": {
                              "description": "The group application sender qualifier.",
                              "type": "string"
                            },
                            "groupAssociationAssignedCode": {
                              "description": "The group association assigned code.",
                              "type": "string"
                            },
                            "groupControlNumberLowerBound": {
                              "description": "The group control number lower bound.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "groupControlNumberPrefix": {
                              "description": "The group control number prefix.",
                              "type": "string"
                            },
                            "groupControlNumberSuffix": {
                              "description": "The group control number suffix.",
                              "type": "string"
                            },
                            "groupControlNumberUpperBound": {
                              "description": "The group control number upper bound.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "groupControllingAgencyCode": {
                              "description": "The group controlling agency code.",
                              "type": "string"
                            },
                            "groupMessageRelease": {
                              "description": "The group message release.",
                              "type": "string"
                            },
                            "groupMessageVersion": {
                              "description": "The group message version.",
                              "type": "string"
                            },
                            "interchangeControlNumberLowerBound": {
                              "description": "The interchange control number lower bound.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "interchangeControlNumberPrefix": {
                              "description": "The interchange control number prefix.",
                              "type": "string"
                            },
                            "interchangeControlNumberSuffix": {
                              "description": "The interchange control number suffix.",
                              "type": "string"
                            },
                            "interchangeControlNumberUpperBound": {
                              "description": "The interchange control number upper bound.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "isTestInterchange": {
                              "description": "The value indicating whether the message is a test interchange.",
                              "type": "boolean"
                            },
                            "overwriteExistingTransactionSetControlNumber": {
                              "description": "The value indicating whether to overwrite existing transaction set control number.",
                              "type": "boolean"
                            },
                            "processingPriorityCode": {
                              "description": "The processing priority code.",
                              "type": "string"
                            },
                            "receiverInternalIdentification": {
                              "description": "The receiver internal identification.",
                              "type": "string"
                            },
                            "receiverInternalSubIdentification": {
                              "description": "The receiver internal sub identification.",
                              "type": "string"
                            },
                            "receiverReverseRoutingAddress": {
                              "description": "The receiver reverse routing address.",
                              "type": "string"
                            },
                            "recipientReferencePasswordQualifier": {
                              "description": "The recipient reference password qualifier.",
                              "type": "string"
                            },
                            "recipientReferencePasswordValue": {
                              "description": "The recipient reference password value.",
                              "type": "string"
                            },
                            "rolloverGroupControlNumber": {
                              "description": "The value indicating whether to rollover group control number.",
                              "type": "boolean"
                            },
                            "rolloverInterchangeControlNumber": {
                              "description": "The value indicating whether to rollover interchange control number.",
                              "type": "boolean"
                            },
                            "rolloverTransactionSetControlNumber": {
                              "description": "The value indicating whether to rollover transaction set control number.",
                              "type": "boolean"
                            },
                            "senderInternalIdentification": {
                              "description": "The sender internal identification.",
                              "type": "string"
                            },
                            "senderInternalSubIdentification": {
                              "description": "The sender internal sub identification.",
                              "type": "string"
                            },
                            "senderReverseRoutingAddress": {
                              "description": "The sender reverse routing address.",
                              "type": "string"
                            },
                            "transactionSetControlNumberLowerBound": {
                              "description": "The transaction set control number lower bound.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "transactionSetControlNumberPrefix": {
                              "description": "The transaction set control number prefix.",
                              "type": "string"
                            },
                            "transactionSetControlNumberSuffix": {
                              "description": "The transaction set control number suffix.",
                              "type": "string"
                            },
                            "transactionSetControlNumberUpperBound": {
                              "description": "The transaction set control number upper bound.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "framingSettings": {
                          "properties": {
                            "characterEncoding": {
                              "description": "The character encoding.",
                              "type": "string"
                            },
                            "characterSet": {
                              "enum": [
                                "NotSpecified",
                                "UNOB",
                                "UNOA",
                                "UNOC",
                                "UNOD",
                                "UNOE",
                                "UNOF",
                                "UNOG",
                                "UNOH",
                                "UNOI",
                                "UNOJ",
                                "UNOK",
                                "UNOX",
                                "UNOY",
                                "KECA"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "EdifactCharacterSet"
                              }
                            },
                            "componentSeparator": {
                              "description": "The component separator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "dataElementSeparator": {
                              "description": "The data element separator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "decimalPointIndicator": {
                              "enum": [
                                "NotSpecified",
                                "Comma",
                                "Decimal"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "EdifactDecimalIndicator"
                              }
                            },
                            "protocolVersion": {
                              "description": "The protocol version.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "releaseIndicator": {
                              "description": "The release indicator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "repetitionSeparator": {
                              "description": "The repetition separator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "segmentTerminator": {
                              "description": "The segment terminator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "segmentTerminatorSuffix": {
                              "enum": [
                                "NotSpecified",
                                "None",
                                "CR",
                                "LF",
                                "CRLF"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "SegmentTerminatorSuffix"
                              }
                            },
                            "serviceCodeListDirectoryVersion": {
                              "description": "The service code list directory version.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "messageFilter": {
                          "properties": {
                            "messageFilterType": {
                              "enum": [
                                "NotSpecified",
                                "Include",
                                "Exclude"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "MessageFilterType"
                              }
                            }
                          },
                          "type": "object"
                        },
                        "messageFilterList": {
                          "description": "The EDIFACT message filter list.",
                          "items": {
                            "properties": {
                              "messageId": {
                                "description": "The message id on which this envelope settings has to be applied.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "processingSettings": {
                          "properties": {
                            "createEmptyXmlTagsForTrailingSeparators": {
                              "description": "The value indicating whether to create empty xml tags for trailing separators.",
                              "type": "boolean"
                            },
                            "maskSecurityInfo": {
                              "description": "The value indicating whether to mask security information.",
                              "type": "boolean"
                            },
                            "preserveInterchange": {
                              "description": "The value indicating whether to preserve interchange.",
                              "type": "boolean"
                            },
                            "suspendInterchangeOnError": {
                              "description": "The value indicating whether to suspend interchange on error.",
                              "type": "boolean"
                            },
                            "useDotAsDecimalSeparator": {
                              "description": "The value indicating whether to use dot as decimal separator.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "schemaReferences": {
                          "description": "The EDIFACT schema references.",
                          "items": {
                            "properties": {
                              "associationAssignedCode": {
                                "description": "The association assigned code.",
                                "type": "string"
                              },
                              "messageId": {
                                "description": "The message id.",
                                "type": "string"
                              },
                              "messageRelease": {
                                "description": "The message release version.",
                                "type": "string"
                              },
                              "messageVersion": {
                                "description": "The message version.",
                                "type": "string"
                              },
                              "schemaName": {
                                "description": "The schema name.",
                                "type": "string"
                              },
                              "senderApplicationId": {
                                "description": "The sender application id.",
                                "type": "string"
                              },
                              "senderApplicationQualifier": {
                                "description": "The sender application qualifier.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "validationOverrides": {
                          "description": "The EDIFACT validation override settings.",
                          "items": {
                            "properties": {
                              "allowLeadingAndTrailingSpacesAndZeroes": {
                                "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                "type": "boolean"
                              },
                              "enforceCharacterSet": {
                                "description": "The value indicating whether to validate character Set.",
                                "type": "boolean"
                              },
                              "messageId": {
                                "description": "The message id on which the validation settings has to be applied.",
                                "type": "string"
                              },
                              "trailingSeparatorPolicy": {
                                "enum": [
                                  "NotSpecified",
                                  "NotAllowed",
                                  "Optional",
                                  "Mandatory"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "TrailingSeparatorPolicy"
                                }
                              },
                              "trimLeadingAndTrailingSpacesAndZeroes": {
                                "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                "type": "boolean"
                              },
                              "validateEDITypes": {
                                "description": "The value indicating whether to validate EDI types.",
                                "type": "boolean"
                              },
                              "validateXSDTypes": {
                                "description": "The value indicating whether to validate XSD types.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "validationSettings": {
                          "properties": {
                            "allowLeadingAndTrailingSpacesAndZeroes": {
                              "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                              "type": "boolean"
                            },
                            "checkDuplicateGroupControlNumber": {
                              "description": "The value indicating whether to check for duplicate group control number.",
                              "type": "boolean"
                            },
                            "checkDuplicateInterchangeControlNumber": {
                              "description": "The value indicating whether to check for duplicate interchange control number.",
                              "type": "boolean"
                            },
                            "checkDuplicateTransactionSetControlNumber": {
                              "description": "The value indicating whether to check for duplicate transaction set control number.",
                              "type": "boolean"
                            },
                            "interchangeControlNumberValidityDays": {
                              "description": "The validity period of interchange control number.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "trailingSeparatorPolicy": {
                              "enum": [
                                "NotSpecified",
                                "NotAllowed",
                                "Optional",
                                "Mandatory"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "TrailingSeparatorPolicy"
                              }
                            },
                            "trimLeadingAndTrailingSpacesAndZeroes": {
                              "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                              "type": "boolean"
                            },
                            "validateCharacterSet": {
                              "description": "The value indicating whether to validate character set in the message.",
                              "type": "boolean"
                            },
                            "validateEDITypes": {
                              "description": "The value indicating whether to Whether to validate EDI types.",
                              "type": "boolean"
                            },
                            "validateXSDTypes": {
                              "description": "The value indicating whether to Whether to validate XSD types.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "receiverBusinessIdentity": {
                      "properties": {
                        "Qualifier": {
                          "description": "The business identity qualifier.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "The business identity value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "senderBusinessIdentity": {
                      "properties": {
                        "Qualifier": {
                          "description": "The business identity qualifier.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "The business identity value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EdifactAgreementContent"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "UNOB",
                "UNOA",
                "UNOC",
                "UNOD",
                "UNOE",
                "UNOF",
                "UNOG",
                "UNOH",
                "UNOI",
                "UNOJ",
                "UNOK",
                "UNOX",
                "UNOY",
                "KECA"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "EdifactCharacterSet"
              }
            },
            "op": "add",
            "from": "",
            "path": "/EdifactCharacterSet"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "Comma",
                "Decimal"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "EdifactDecimalIndicator"
              }
            },
            "op": "add",
            "from": "",
            "path": "/EdifactDecimalIndicator"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "componentSeparator": {
                  "description": "The component separator.",
                  "format": "int32",
                  "type": "integer"
                },
                "dataElementSeparator": {
                  "description": "The data element separator.",
                  "format": "int32",
                  "type": "integer"
                },
                "decimalPointIndicator": {
                  "enum": [
                    "NotSpecified",
                    "Comma",
                    "Decimal"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "EdifactDecimalIndicator"
                  }
                },
                "messageAssociationAssignedCode": {
                  "description": "The message association assigned code.",
                  "type": "string"
                },
                "messageId": {
                  "description": "The message id.",
                  "type": "string"
                },
                "messageRelease": {
                  "description": "The message release version.",
                  "type": "string"
                },
                "messageVersion": {
                  "description": "The message version.",
                  "type": "string"
                },
                "releaseIndicator": {
                  "description": "The release indicator.",
                  "format": "int32",
                  "type": "integer"
                },
                "repetitionSeparator": {
                  "description": "The repetition separator.",
                  "format": "int32",
                  "type": "integer"
                },
                "segmentTerminator": {
                  "description": "The segment terminator.",
                  "format": "int32",
                  "type": "integer"
                },
                "segmentTerminatorSuffix": {
                  "enum": [
                    "NotSpecified",
                    "None",
                    "CR",
                    "LF",
                    "CRLF"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "SegmentTerminatorSuffix"
                  }
                },
                "targetNamespace": {
                  "description": "The target namespace on which this delimiter settings has to be applied.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EdifactDelimiterOverride"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "applicationPassword": {
                  "description": "The application password.",
                  "type": "string"
                },
                "associationAssignedCode": {
                  "description": "The association assigned code.",
                  "type": "string"
                },
                "controllingAgencyCode": {
                  "description": "The controlling agency code.",
                  "type": "string"
                },
                "functionalGroupId": {
                  "description": "The functional group id.",
                  "type": "string"
                },
                "groupHeaderMessageRelease": {
                  "description": "The group header message release.",
                  "type": "string"
                },
                "groupHeaderMessageVersion": {
                  "description": "The group header message version.",
                  "type": "string"
                },
                "messageAssociationAssignedCode": {
                  "description": "The message association assigned code.",
                  "type": "string"
                },
                "messageId": {
                  "description": "The message id on which this envelope settings has to be applied.",
                  "type": "string"
                },
                "messageRelease": {
                  "description": "The message release version on which this envelope settings has to be applied.",
                  "type": "string"
                },
                "messageVersion": {
                  "description": "The message version on which this envelope settings has to be applied.",
                  "type": "string"
                },
                "receiverApplicationId": {
                  "description": "The receiver application id.",
                  "type": "string"
                },
                "receiverApplicationQualifier": {
                  "description": "The receiver application qualifier.",
                  "type": "string"
                },
                "senderApplicationId": {
                  "description": "The sender application id.",
                  "type": "string"
                },
                "senderApplicationQualifier": {
                  "description": "The sender application qualifier.",
                  "type": "string"
                },
                "targetNamespace": {
                  "description": "The target namespace on which this envelope settings has to be applied.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EdifactEnvelopeOverride"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "applicationReferenceId": {
                  "description": "The application reference id.",
                  "type": "string"
                },
                "applyDelimiterStringAdvice": {
                  "description": "The value indicating whether to apply delimiter string advice.",
                  "type": "boolean"
                },
                "communicationAgreementId": {
                  "description": "The communication agreement id.",
                  "type": "string"
                },
                "createGroupingSegments": {
                  "description": "The value indicating whether to create grouping segments.",
                  "type": "boolean"
                },
                "enableDefaultGroupHeaders": {
                  "description": "The value indicating whether to enable default group headers.",
                  "type": "boolean"
                },
                "functionalGroupId": {
                  "description": "The functional group id.",
                  "type": "string"
                },
                "groupApplicationPassword": {
                  "description": "The group application password.",
                  "type": "string"
                },
                "groupApplicationReceiverId": {
                  "description": "The group application receiver id.",
                  "type": "string"
                },
                "groupApplicationReceiverQualifier": {
                  "description": "The group application receiver qualifier.",
                  "type": "string"
                },
                "groupApplicationSenderId": {
                  "description": "The group application sender id.",
                  "type": "string"
                },
                "groupApplicationSenderQualifier": {
                  "description": "The group application sender qualifier.",
                  "type": "string"
                },
                "groupAssociationAssignedCode": {
                  "description": "The group association assigned code.",
                  "type": "string"
                },
                "groupControlNumberLowerBound": {
                  "description": "The group control number lower bound.",
                  "format": "int64",
                  "type": "integer"
                },
                "groupControlNumberPrefix": {
                  "description": "The group control number prefix.",
                  "type": "string"
                },
                "groupControlNumberSuffix": {
                  "description": "The group control number suffix.",
                  "type": "string"
                },
                "groupControlNumberUpperBound": {
                  "description": "The group control number upper bound.",
                  "format": "int64",
                  "type": "integer"
                },
                "groupControllingAgencyCode": {
                  "description": "The group controlling agency code.",
                  "type": "string"
                },
                "groupMessageRelease": {
                  "description": "The group message release.",
                  "type": "string"
                },
                "groupMessageVersion": {
                  "description": "The group message version.",
                  "type": "string"
                },
                "interchangeControlNumberLowerBound": {
                  "description": "The interchange control number lower bound.",
                  "format": "int64",
                  "type": "integer"
                },
                "interchangeControlNumberPrefix": {
                  "description": "The interchange control number prefix.",
                  "type": "string"
                },
                "interchangeControlNumberSuffix": {
                  "description": "The interchange control number suffix.",
                  "type": "string"
                },
                "interchangeControlNumberUpperBound": {
                  "description": "The interchange control number upper bound.",
                  "format": "int64",
                  "type": "integer"
                },
                "isTestInterchange": {
                  "description": "The value indicating whether the message is a test interchange.",
                  "type": "boolean"
                },
                "overwriteExistingTransactionSetControlNumber": {
                  "description": "The value indicating whether to overwrite existing transaction set control number.",
                  "type": "boolean"
                },
                "processingPriorityCode": {
                  "description": "The processing priority code.",
                  "type": "string"
                },
                "receiverInternalIdentification": {
                  "description": "The receiver internal identification.",
                  "type": "string"
                },
                "receiverInternalSubIdentification": {
                  "description": "The receiver internal sub identification.",
                  "type": "string"
                },
                "receiverReverseRoutingAddress": {
                  "description": "The receiver reverse routing address.",
                  "type": "string"
                },
                "recipientReferencePasswordQualifier": {
                  "description": "The recipient reference password qualifier.",
                  "type": "string"
                },
                "recipientReferencePasswordValue": {
                  "description": "The recipient reference password value.",
                  "type": "string"
                },
                "rolloverGroupControlNumber": {
                  "description": "The value indicating whether to rollover group control number.",
                  "type": "boolean"
                },
                "rolloverInterchangeControlNumber": {
                  "description": "The value indicating whether to rollover interchange control number.",
                  "type": "boolean"
                },
                "rolloverTransactionSetControlNumber": {
                  "description": "The value indicating whether to rollover transaction set control number.",
                  "type": "boolean"
                },
                "senderInternalIdentification": {
                  "description": "The sender internal identification.",
                  "type": "string"
                },
                "senderInternalSubIdentification": {
                  "description": "The sender internal sub identification.",
                  "type": "string"
                },
                "senderReverseRoutingAddress": {
                  "description": "The sender reverse routing address.",
                  "type": "string"
                },
                "transactionSetControlNumberLowerBound": {
                  "description": "The transaction set control number lower bound.",
                  "format": "int64",
                  "type": "integer"
                },
                "transactionSetControlNumberPrefix": {
                  "description": "The transaction set control number prefix.",
                  "type": "string"
                },
                "transactionSetControlNumberSuffix": {
                  "description": "The transaction set control number suffix.",
                  "type": "string"
                },
                "transactionSetControlNumberUpperBound": {
                  "description": "The transaction set control number upper bound.",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EdifactEnvelopeSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "characterEncoding": {
                  "description": "The character encoding.",
                  "type": "string"
                },
                "characterSet": {
                  "enum": [
                    "NotSpecified",
                    "UNOB",
                    "UNOA",
                    "UNOC",
                    "UNOD",
                    "UNOE",
                    "UNOF",
                    "UNOG",
                    "UNOH",
                    "UNOI",
                    "UNOJ",
                    "UNOK",
                    "UNOX",
                    "UNOY",
                    "KECA"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "EdifactCharacterSet"
                  }
                },
                "componentSeparator": {
                  "description": "The component separator.",
                  "format": "int32",
                  "type": "integer"
                },
                "dataElementSeparator": {
                  "description": "The data element separator.",
                  "format": "int32",
                  "type": "integer"
                },
                "decimalPointIndicator": {
                  "enum": [
                    "NotSpecified",
                    "Comma",
                    "Decimal"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "EdifactDecimalIndicator"
                  }
                },
                "protocolVersion": {
                  "description": "The protocol version.",
                  "format": "int32",
                  "type": "integer"
                },
                "releaseIndicator": {
                  "description": "The release indicator.",
                  "format": "int32",
                  "type": "integer"
                },
                "repetitionSeparator": {
                  "description": "The repetition separator.",
                  "format": "int32",
                  "type": "integer"
                },
                "segmentTerminator": {
                  "description": "The segment terminator.",
                  "format": "int32",
                  "type": "integer"
                },
                "segmentTerminatorSuffix": {
                  "enum": [
                    "NotSpecified",
                    "None",
                    "CR",
                    "LF",
                    "CRLF"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "SegmentTerminatorSuffix"
                  }
                },
                "serviceCodeListDirectoryVersion": {
                  "description": "The service code list directory version.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EdifactFramingSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "messageFilterType": {
                  "enum": [
                    "NotSpecified",
                    "Include",
                    "Exclude"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "MessageFilterType"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EdifactMessageFilter"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "messageId": {
                  "description": "The message id on which this envelope settings has to be applied.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EdifactMessageIdentifier"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "protocolSettings": {
                  "properties": {
                    "acknowledgementSettings": {
                      "properties": {
                        "acknowledgementControlNumberLowerBound": {
                          "description": "The acknowledgement control number lower bound.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "acknowledgementControlNumberPrefix": {
                          "description": "The acknowledgement control number prefix.",
                          "type": "string"
                        },
                        "acknowledgementControlNumberSuffix": {
                          "description": "The acknowledgement control number suffix.",
                          "type": "string"
                        },
                        "acknowledgementControlNumberUpperBound": {
                          "description": "The acknowledgement control number upper bound.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "batchFunctionalAcknowledgements": {
                          "description": "The value indicating whether to batch functional acknowledgements.",
                          "type": "boolean"
                        },
                        "batchTechnicalAcknowledgements": {
                          "description": "The value indicating whether to batch the technical acknowledgements.",
                          "type": "boolean"
                        },
                        "needFunctionalAcknowledgement": {
                          "description": "The value indicating whether functional acknowledgement is needed.",
                          "type": "boolean"
                        },
                        "needLoopForValidMessages": {
                          "description": "The value indicating whether a loop is needed for valid messages.",
                          "type": "boolean"
                        },
                        "needTechnicalAcknowledgement": {
                          "description": "The value indicating whether technical acknowledgement is needed.",
                          "type": "boolean"
                        },
                        "rolloverAcknowledgementControlNumber": {
                          "description": "The value indicating whether to rollover acknowledgement control number.",
                          "type": "boolean"
                        },
                        "sendSynchronousAcknowledgement": {
                          "description": "The value indicating whether to send synchronous acknowledgement.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "edifactDelimiterOverrides": {
                      "description": "The EDIFACT delimiter override settings.",
                      "items": {
                        "properties": {
                          "componentSeparator": {
                            "description": "The component separator.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "dataElementSeparator": {
                            "description": "The data element separator.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "decimalPointIndicator": {
                            "enum": [
                              "NotSpecified",
                              "Comma",
                              "Decimal"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "EdifactDecimalIndicator"
                            }
                          },
                          "messageAssociationAssignedCode": {
                            "description": "The message association assigned code.",
                            "type": "string"
                          },
                          "messageId": {
                            "description": "The message id.",
                            "type": "string"
                          },
                          "messageRelease": {
                            "description": "The message release version.",
                            "type": "string"
                          },
                          "messageVersion": {
                            "description": "The message version.",
                            "type": "string"
                          },
                          "releaseIndicator": {
                            "description": "The release indicator.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "repetitionSeparator": {
                            "description": "The repetition separator.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "segmentTerminator": {
                            "description": "The segment terminator.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "segmentTerminatorSuffix": {
                            "enum": [
                              "NotSpecified",
                              "None",
                              "CR",
                              "LF",
                              "CRLF"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "SegmentTerminatorSuffix"
                            }
                          },
                          "targetNamespace": {
                            "description": "The target namespace on which this delimiter settings has to be applied.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "envelopeOverrides": {
                      "description": "The EDIFACT envelope override settings.",
                      "items": {
                        "properties": {
                          "applicationPassword": {
                            "description": "The application password.",
                            "type": "string"
                          },
                          "associationAssignedCode": {
                            "description": "The association assigned code.",
                            "type": "string"
                          },
                          "controllingAgencyCode": {
                            "description": "The controlling agency code.",
                            "type": "string"
                          },
                          "functionalGroupId": {
                            "description": "The functional group id.",
                            "type": "string"
                          },
                          "groupHeaderMessageRelease": {
                            "description": "The group header message release.",
                            "type": "string"
                          },
                          "groupHeaderMessageVersion": {
                            "description": "The group header message version.",
                            "type": "string"
                          },
                          "messageAssociationAssignedCode": {
                            "description": "The message association assigned code.",
                            "type": "string"
                          },
                          "messageId": {
                            "description": "The message id on which this envelope settings has to be applied.",
                            "type": "string"
                          },
                          "messageRelease": {
                            "description": "The message release version on which this envelope settings has to be applied.",
                            "type": "string"
                          },
                          "messageVersion": {
                            "description": "The message version on which this envelope settings has to be applied.",
                            "type": "string"
                          },
                          "receiverApplicationId": {
                            "description": "The receiver application id.",
                            "type": "string"
                          },
                          "receiverApplicationQualifier": {
                            "description": "The receiver application qualifier.",
                            "type": "string"
                          },
                          "senderApplicationId": {
                            "description": "The sender application id.",
                            "type": "string"
                          },
                          "senderApplicationQualifier": {
                            "description": "The sender application qualifier.",
                            "type": "string"
                          },
                          "targetNamespace": {
                            "description": "The target namespace on which this envelope settings has to be applied.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "envelopeSettings": {
                      "properties": {
                        "applicationReferenceId": {
                          "description": "The application reference id.",
                          "type": "string"
                        },
                        "applyDelimiterStringAdvice": {
                          "description": "The value indicating whether to apply delimiter string advice.",
                          "type": "boolean"
                        },
                        "communicationAgreementId": {
                          "description": "The communication agreement id.",
                          "type": "string"
                        },
                        "createGroupingSegments": {
                          "description": "The value indicating whether to create grouping segments.",
                          "type": "boolean"
                        },
                        "enableDefaultGroupHeaders": {
                          "description": "The value indicating whether to enable default group headers.",
                          "type": "boolean"
                        },
                        "functionalGroupId": {
                          "description": "The functional group id.",
                          "type": "string"
                        },
                        "groupApplicationPassword": {
                          "description": "The group application password.",
                          "type": "string"
                        },
                        "groupApplicationReceiverId": {
                          "description": "The group application receiver id.",
                          "type": "string"
                        },
                        "groupApplicationReceiverQualifier": {
                          "description": "The group application receiver qualifier.",
                          "type": "string"
                        },
                        "groupApplicationSenderId": {
                          "description": "The group application sender id.",
                          "type": "string"
                        },
                        "groupApplicationSenderQualifier": {
                          "description": "The group application sender qualifier.",
                          "type": "string"
                        },
                        "groupAssociationAssignedCode": {
                          "description": "The group association assigned code.",
                          "type": "string"
                        },
                        "groupControlNumberLowerBound": {
                          "description": "The group control number lower bound.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "groupControlNumberPrefix": {
                          "description": "The group control number prefix.",
                          "type": "string"
                        },
                        "groupControlNumberSuffix": {
                          "description": "The group control number suffix.",
                          "type": "string"
                        },
                        "groupControlNumberUpperBound": {
                          "description": "The group control number upper bound.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "groupControllingAgencyCode": {
                          "description": "The group controlling agency code.",
                          "type": "string"
                        },
                        "groupMessageRelease": {
                          "description": "The group message release.",
                          "type": "string"
                        },
                        "groupMessageVersion": {
                          "description": "The group message version.",
                          "type": "string"
                        },
                        "interchangeControlNumberLowerBound": {
                          "description": "The interchange control number lower bound.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "interchangeControlNumberPrefix": {
                          "description": "The interchange control number prefix.",
                          "type": "string"
                        },
                        "interchangeControlNumberSuffix": {
                          "description": "The interchange control number suffix.",
                          "type": "string"
                        },
                        "interchangeControlNumberUpperBound": {
                          "description": "The interchange control number upper bound.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "isTestInterchange": {
                          "description": "The value indicating whether the message is a test interchange.",
                          "type": "boolean"
                        },
                        "overwriteExistingTransactionSetControlNumber": {
                          "description": "The value indicating whether to overwrite existing transaction set control number.",
                          "type": "boolean"
                        },
                        "processingPriorityCode": {
                          "description": "The processing priority code.",
                          "type": "string"
                        },
                        "receiverInternalIdentification": {
                          "description": "The receiver internal identification.",
                          "type": "string"
                        },
                        "receiverInternalSubIdentification": {
                          "description": "The receiver internal sub identification.",
                          "type": "string"
                        },
                        "receiverReverseRoutingAddress": {
                          "description": "The receiver reverse routing address.",
                          "type": "string"
                        },
                        "recipientReferencePasswordQualifier": {
                          "description": "The recipient reference password qualifier.",
                          "type": "string"
                        },
                        "recipientReferencePasswordValue": {
                          "description": "The recipient reference password value.",
                          "type": "string"
                        },
                        "rolloverGroupControlNumber": {
                          "description": "The value indicating whether to rollover group control number.",
                          "type": "boolean"
                        },
                        "rolloverInterchangeControlNumber": {
                          "description": "The value indicating whether to rollover interchange control number.",
                          "type": "boolean"
                        },
                        "rolloverTransactionSetControlNumber": {
                          "description": "The value indicating whether to rollover transaction set control number.",
                          "type": "boolean"
                        },
                        "senderInternalIdentification": {
                          "description": "The sender internal identification.",
                          "type": "string"
                        },
                        "senderInternalSubIdentification": {
                          "description": "The sender internal sub identification.",
                          "type": "string"
                        },
                        "senderReverseRoutingAddress": {
                          "description": "The sender reverse routing address.",
                          "type": "string"
                        },
                        "transactionSetControlNumberLowerBound": {
                          "description": "The transaction set control number lower bound.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "transactionSetControlNumberPrefix": {
                          "description": "The transaction set control number prefix.",
                          "type": "string"
                        },
                        "transactionSetControlNumberSuffix": {
                          "description": "The transaction set control number suffix.",
                          "type": "string"
                        },
                        "transactionSetControlNumberUpperBound": {
                          "description": "The transaction set control number upper bound.",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "framingSettings": {
                      "properties": {
                        "characterEncoding": {
                          "description": "The character encoding.",
                          "type": "string"
                        },
                        "characterSet": {
                          "enum": [
                            "NotSpecified",
                            "UNOB",
                            "UNOA",
                            "UNOC",
                            "UNOD",
                            "UNOE",
                            "UNOF",
                            "UNOG",
                            "UNOH",
                            "UNOI",
                            "UNOJ",
                            "UNOK",
                            "UNOX",
                            "UNOY",
                            "KECA"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "EdifactCharacterSet"
                          }
                        },
                        "componentSeparator": {
                          "description": "The component separator.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "dataElementSeparator": {
                          "description": "The data element separator.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "decimalPointIndicator": {
                          "enum": [
                            "NotSpecified",
                            "Comma",
                            "Decimal"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "EdifactDecimalIndicator"
                          }
                        },
                        "protocolVersion": {
                          "description": "The protocol version.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "releaseIndicator": {
                          "description": "The release indicator.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "repetitionSeparator": {
                          "description": "The repetition separator.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "segmentTerminator": {
                          "description": "The segment terminator.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "segmentTerminatorSuffix": {
                          "enum": [
                            "NotSpecified",
                            "None",
                            "CR",
                            "LF",
                            "CRLF"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "SegmentTerminatorSuffix"
                          }
                        },
                        "serviceCodeListDirectoryVersion": {
                          "description": "The service code list directory version.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "messageFilter": {
                      "properties": {
                        "messageFilterType": {
                          "enum": [
                            "NotSpecified",
                            "Include",
                            "Exclude"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "MessageFilterType"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "messageFilterList": {
                      "description": "The EDIFACT message filter list.",
                      "items": {
                        "properties": {
                          "messageId": {
                            "description": "The message id on which this envelope settings has to be applied.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "processingSettings": {
                      "properties": {
                        "createEmptyXmlTagsForTrailingSeparators": {
                          "description": "The value indicating whether to create empty xml tags for trailing separators.",
                          "type": "boolean"
                        },
                        "maskSecurityInfo": {
                          "description": "The value indicating whether to mask security information.",
                          "type": "boolean"
                        },
                        "preserveInterchange": {
                          "description": "The value indicating whether to preserve interchange.",
                          "type": "boolean"
                        },
                        "suspendInterchangeOnError": {
                          "description": "The value indicating whether to suspend interchange on error.",
                          "type": "boolean"
                        },
                        "useDotAsDecimalSeparator": {
                          "description": "The value indicating whether to use dot as decimal separator.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "schemaReferences": {
                      "description": "The EDIFACT schema references.",
                      "items": {
                        "properties": {
                          "associationAssignedCode": {
                            "description": "The association assigned code.",
                            "type": "string"
                          },
                          "messageId": {
                            "description": "The message id.",
                            "type": "string"
                          },
                          "messageRelease": {
                            "description": "The message release version.",
                            "type": "string"
                          },
                          "messageVersion": {
                            "description": "The message version.",
                            "type": "string"
                          },
                          "schemaName": {
                            "description": "The schema name.",
                            "type": "string"
                          },
                          "senderApplicationId": {
                            "description": "The sender application id.",
                            "type": "string"
                          },
                          "senderApplicationQualifier": {
                            "description": "The sender application qualifier.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "validationOverrides": {
                      "description": "The EDIFACT validation override settings.",
                      "items": {
                        "properties": {
                          "allowLeadingAndTrailingSpacesAndZeroes": {
                            "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                            "type": "boolean"
                          },
                          "enforceCharacterSet": {
                            "description": "The value indicating whether to validate character Set.",
                            "type": "boolean"
                          },
                          "messageId": {
                            "description": "The message id on which the validation settings has to be applied.",
                            "type": "string"
                          },
                          "trailingSeparatorPolicy": {
                            "enum": [
                              "NotSpecified",
                              "NotAllowed",
                              "Optional",
                              "Mandatory"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "TrailingSeparatorPolicy"
                            }
                          },
                          "trimLeadingAndTrailingSpacesAndZeroes": {
                            "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                            "type": "boolean"
                          },
                          "validateEDITypes": {
                            "description": "The value indicating whether to validate EDI types.",
                            "type": "boolean"
                          },
                          "validateXSDTypes": {
                            "description": "The value indicating whether to validate XSD types.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "validationSettings": {
                      "properties": {
                        "allowLeadingAndTrailingSpacesAndZeroes": {
                          "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                          "type": "boolean"
                        },
                        "checkDuplicateGroupControlNumber": {
                          "description": "The value indicating whether to check for duplicate group control number.",
                          "type": "boolean"
                        },
                        "checkDuplicateInterchangeControlNumber": {
                          "description": "The value indicating whether to check for duplicate interchange control number.",
                          "type": "boolean"
                        },
                        "checkDuplicateTransactionSetControlNumber": {
                          "description": "The value indicating whether to check for duplicate transaction set control number.",
                          "type": "boolean"
                        },
                        "interchangeControlNumberValidityDays": {
                          "description": "The validity period of interchange control number.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "trailingSeparatorPolicy": {
                          "enum": [
                            "NotSpecified",
                            "NotAllowed",
                            "Optional",
                            "Mandatory"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "TrailingSeparatorPolicy"
                          }
                        },
                        "trimLeadingAndTrailingSpacesAndZeroes": {
                          "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                          "type": "boolean"
                        },
                        "validateCharacterSet": {
                          "description": "The value indicating whether to validate character set in the message.",
                          "type": "boolean"
                        },
                        "validateEDITypes": {
                          "description": "The value indicating whether to Whether to validate EDI types.",
                          "type": "boolean"
                        },
                        "validateXSDTypes": {
                          "description": "The value indicating whether to Whether to validate XSD types.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "receiverBusinessIdentity": {
                  "properties": {
                    "Qualifier": {
                      "description": "The business identity qualifier.",
                      "type": "string"
                    },
                    "Value": {
                      "description": "The business identity value.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "senderBusinessIdentity": {
                  "properties": {
                    "Qualifier": {
                      "description": "The business identity qualifier.",
                      "type": "string"
                    },
                    "Value": {
                      "description": "The business identity value.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EdifactOneWayAgreement"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "createEmptyXmlTagsForTrailingSeparators": {
                  "description": "The value indicating whether to create empty xml tags for trailing separators.",
                  "type": "boolean"
                },
                "maskSecurityInfo": {
                  "description": "The value indicating whether to mask security information.",
                  "type": "boolean"
                },
                "preserveInterchange": {
                  "description": "The value indicating whether to preserve interchange.",
                  "type": "boolean"
                },
                "suspendInterchangeOnError": {
                  "description": "The value indicating whether to suspend interchange on error.",
                  "type": "boolean"
                },
                "useDotAsDecimalSeparator": {
                  "description": "The value indicating whether to use dot as decimal separator.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EdifactProcessingSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "acknowledgementSettings": {
                  "properties": {
                    "acknowledgementControlNumberLowerBound": {
                      "description": "The acknowledgement control number lower bound.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "acknowledgementControlNumberPrefix": {
                      "description": "The acknowledgement control number prefix.",
                      "type": "string"
                    },
                    "acknowledgementControlNumberSuffix": {
                      "description": "The acknowledgement control number suffix.",
                      "type": "string"
                    },
                    "acknowledgementControlNumberUpperBound": {
                      "description": "The acknowledgement control number upper bound.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "batchFunctionalAcknowledgements": {
                      "description": "The value indicating whether to batch functional acknowledgements.",
                      "type": "boolean"
                    },
                    "batchTechnicalAcknowledgements": {
                      "description": "The value indicating whether to batch the technical acknowledgements.",
                      "type": "boolean"
                    },
                    "needFunctionalAcknowledgement": {
                      "description": "The value indicating whether functional acknowledgement is needed.",
                      "type": "boolean"
                    },
                    "needLoopForValidMessages": {
                      "description": "The value indicating whether a loop is needed for valid messages.",
                      "type": "boolean"
                    },
                    "needTechnicalAcknowledgement": {
                      "description": "The value indicating whether technical acknowledgement is needed.",
                      "type": "boolean"
                    },
                    "rolloverAcknowledgementControlNumber": {
                      "description": "The value indicating whether to rollover acknowledgement control number.",
                      "type": "boolean"
                    },
                    "sendSynchronousAcknowledgement": {
                      "description": "The value indicating whether to send synchronous acknowledgement.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "edifactDelimiterOverrides": {
                  "description": "The EDIFACT delimiter override settings.",
                  "items": {
                    "properties": {
                      "componentSeparator": {
                        "description": "The component separator.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "dataElementSeparator": {
                        "description": "The data element separator.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "decimalPointIndicator": {
                        "enum": [
                          "NotSpecified",
                          "Comma",
                          "Decimal"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "EdifactDecimalIndicator"
                        }
                      },
                      "messageAssociationAssignedCode": {
                        "description": "The message association assigned code.",
                        "type": "string"
                      },
                      "messageId": {
                        "description": "The message id.",
                        "type": "string"
                      },
                      "messageRelease": {
                        "description": "The message release version.",
                        "type": "string"
                      },
                      "messageVersion": {
                        "description": "The message version.",
                        "type": "string"
                      },
                      "releaseIndicator": {
                        "description": "The release indicator.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "repetitionSeparator": {
                        "description": "The repetition separator.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "segmentTerminator": {
                        "description": "The segment terminator.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "segmentTerminatorSuffix": {
                        "enum": [
                          "NotSpecified",
                          "None",
                          "CR",
                          "LF",
                          "CRLF"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "SegmentTerminatorSuffix"
                        }
                      },
                      "targetNamespace": {
                        "description": "The target namespace on which this delimiter settings has to be applied.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "envelopeOverrides": {
                  "description": "The EDIFACT envelope override settings.",
                  "items": {
                    "properties": {
                      "applicationPassword": {
                        "description": "The application password.",
                        "type": "string"
                      },
                      "associationAssignedCode": {
                        "description": "The association assigned code.",
                        "type": "string"
                      },
                      "controllingAgencyCode": {
                        "description": "The controlling agency code.",
                        "type": "string"
                      },
                      "functionalGroupId": {
                        "description": "The functional group id.",
                        "type": "string"
                      },
                      "groupHeaderMessageRelease": {
                        "description": "The group header message release.",
                        "type": "string"
                      },
                      "groupHeaderMessageVersion": {
                        "description": "The group header message version.",
                        "type": "string"
                      },
                      "messageAssociationAssignedCode": {
                        "description": "The message association assigned code.",
                        "type": "string"
                      },
                      "messageId": {
                        "description": "The message id on which this envelope settings has to be applied.",
                        "type": "string"
                      },
                      "messageRelease": {
                        "description": "The message release version on which this envelope settings has to be applied.",
                        "type": "string"
                      },
                      "messageVersion": {
                        "description": "The message version on which this envelope settings has to be applied.",
                        "type": "string"
                      },
                      "receiverApplicationId": {
                        "description": "The receiver application id.",
                        "type": "string"
                      },
                      "receiverApplicationQualifier": {
                        "description": "The receiver application qualifier.",
                        "type": "string"
                      },
                      "senderApplicationId": {
                        "description": "The sender application id.",
                        "type": "string"
                      },
                      "senderApplicationQualifier": {
                        "description": "The sender application qualifier.",
                        "type": "string"
                      },
                      "targetNamespace": {
                        "description": "The target namespace on which this envelope settings has to be applied.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "envelopeSettings": {
                  "properties": {
                    "applicationReferenceId": {
                      "description": "The application reference id.",
                      "type": "string"
                    },
                    "applyDelimiterStringAdvice": {
                      "description": "The value indicating whether to apply delimiter string advice.",
                      "type": "boolean"
                    },
                    "communicationAgreementId": {
                      "description": "The communication agreement id.",
                      "type": "string"
                    },
                    "createGroupingSegments": {
                      "description": "The value indicating whether to create grouping segments.",
                      "type": "boolean"
                    },
                    "enableDefaultGroupHeaders": {
                      "description": "The value indicating whether to enable default group headers.",
                      "type": "boolean"
                    },
                    "functionalGroupId": {
                      "description": "The functional group id.",
                      "type": "string"
                    },
                    "groupApplicationPassword": {
                      "description": "The group application password.",
                      "type": "string"
                    },
                    "groupApplicationReceiverId": {
                      "description": "The group application receiver id.",
                      "type": "string"
                    },
                    "groupApplicationReceiverQualifier": {
                      "description": "The group application receiver qualifier.",
                      "type": "string"
                    },
                    "groupApplicationSenderId": {
                      "description": "The group application sender id.",
                      "type": "string"
                    },
                    "groupApplicationSenderQualifier": {
                      "description": "The group application sender qualifier.",
                      "type": "string"
                    },
                    "groupAssociationAssignedCode": {
                      "description": "The group association assigned code.",
                      "type": "string"
                    },
                    "groupControlNumberLowerBound": {
                      "description": "The group control number lower bound.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "groupControlNumberPrefix": {
                      "description": "The group control number prefix.",
                      "type": "string"
                    },
                    "groupControlNumberSuffix": {
                      "description": "The group control number suffix.",
                      "type": "string"
                    },
                    "groupControlNumberUpperBound": {
                      "description": "The group control number upper bound.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "groupControllingAgencyCode": {
                      "description": "The group controlling agency code.",
                      "type": "string"
                    },
                    "groupMessageRelease": {
                      "description": "The group message release.",
                      "type": "string"
                    },
                    "groupMessageVersion": {
                      "description": "The group message version.",
                      "type": "string"
                    },
                    "interchangeControlNumberLowerBound": {
                      "description": "The interchange control number lower bound.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "interchangeControlNumberPrefix": {
                      "description": "The interchange control number prefix.",
                      "type": "string"
                    },
                    "interchangeControlNumberSuffix": {
                      "description": "The interchange control number suffix.",
                      "type": "string"
                    },
                    "interchangeControlNumberUpperBound": {
                      "description": "The interchange control number upper bound.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "isTestInterchange": {
                      "description": "The value indicating whether the message is a test interchange.",
                      "type": "boolean"
                    },
                    "overwriteExistingTransactionSetControlNumber": {
                      "description": "The value indicating whether to overwrite existing transaction set control number.",
                      "type": "boolean"
                    },
                    "processingPriorityCode": {
                      "description": "The processing priority code.",
                      "type": "string"
                    },
                    "receiverInternalIdentification": {
                      "description": "The receiver internal identification.",
                      "type": "string"
                    },
                    "receiverInternalSubIdentification": {
                      "description": "The receiver internal sub identification.",
                      "type": "string"
                    },
                    "receiverReverseRoutingAddress": {
                      "description": "The receiver reverse routing address.",
                      "type": "string"
                    },
                    "recipientReferencePasswordQualifier": {
                      "description": "The recipient reference password qualifier.",
                      "type": "string"
                    },
                    "recipientReferencePasswordValue": {
                      "description": "The recipient reference password value.",
                      "type": "string"
                    },
                    "rolloverGroupControlNumber": {
                      "description": "The value indicating whether to rollover group control number.",
                      "type": "boolean"
                    },
                    "rolloverInterchangeControlNumber": {
                      "description": "The value indicating whether to rollover interchange control number.",
                      "type": "boolean"
                    },
                    "rolloverTransactionSetControlNumber": {
                      "description": "The value indicating whether to rollover transaction set control number.",
                      "type": "boolean"
                    },
                    "senderInternalIdentification": {
                      "description": "The sender internal identification.",
                      "type": "string"
                    },
                    "senderInternalSubIdentification": {
                      "description": "The sender internal sub identification.",
                      "type": "string"
                    },
                    "senderReverseRoutingAddress": {
                      "description": "The sender reverse routing address.",
                      "type": "string"
                    },
                    "transactionSetControlNumberLowerBound": {
                      "description": "The transaction set control number lower bound.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "transactionSetControlNumberPrefix": {
                      "description": "The transaction set control number prefix.",
                      "type": "string"
                    },
                    "transactionSetControlNumberSuffix": {
                      "description": "The transaction set control number suffix.",
                      "type": "string"
                    },
                    "transactionSetControlNumberUpperBound": {
                      "description": "The transaction set control number upper bound.",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "framingSettings": {
                  "properties": {
                    "characterEncoding": {
                      "description": "The character encoding.",
                      "type": "string"
                    },
                    "characterSet": {
                      "enum": [
                        "NotSpecified",
                        "UNOB",
                        "UNOA",
                        "UNOC",
                        "UNOD",
                        "UNOE",
                        "UNOF",
                        "UNOG",
                        "UNOH",
                        "UNOI",
                        "UNOJ",
                        "UNOK",
                        "UNOX",
                        "UNOY",
                        "KECA"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "EdifactCharacterSet"
                      }
                    },
                    "componentSeparator": {
                      "description": "The component separator.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "dataElementSeparator": {
                      "description": "The data element separator.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "decimalPointIndicator": {
                      "enum": [
                        "NotSpecified",
                        "Comma",
                        "Decimal"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "EdifactDecimalIndicator"
                      }
                    },
                    "protocolVersion": {
                      "description": "The protocol version.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "releaseIndicator": {
                      "description": "The release indicator.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "repetitionSeparator": {
                      "description": "The repetition separator.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "segmentTerminator": {
                      "description": "The segment terminator.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "segmentTerminatorSuffix": {
                      "enum": [
                        "NotSpecified",
                        "None",
                        "CR",
                        "LF",
                        "CRLF"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "SegmentTerminatorSuffix"
                      }
                    },
                    "serviceCodeListDirectoryVersion": {
                      "description": "The service code list directory version.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "messageFilter": {
                  "properties": {
                    "messageFilterType": {
                      "enum": [
                        "NotSpecified",
                        "Include",
                        "Exclude"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "MessageFilterType"
                      }
                    }
                  },
                  "type": "object"
                },
                "messageFilterList": {
                  "description": "The EDIFACT message filter list.",
                  "items": {
                    "properties": {
                      "messageId": {
                        "description": "The message id on which this envelope settings has to be applied.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "processingSettings": {
                  "properties": {
                    "createEmptyXmlTagsForTrailingSeparators": {
                      "description": "The value indicating whether to create empty xml tags for trailing separators.",
                      "type": "boolean"
                    },
                    "maskSecurityInfo": {
                      "description": "The value indicating whether to mask security information.",
                      "type": "boolean"
                    },
                    "preserveInterchange": {
                      "description": "The value indicating whether to preserve interchange.",
                      "type": "boolean"
                    },
                    "suspendInterchangeOnError": {
                      "description": "The value indicating whether to suspend interchange on error.",
                      "type": "boolean"
                    },
                    "useDotAsDecimalSeparator": {
                      "description": "The value indicating whether to use dot as decimal separator.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "schemaReferences": {
                  "description": "The EDIFACT schema references.",
                  "items": {
                    "properties": {
                      "associationAssignedCode": {
                        "description": "The association assigned code.",
                        "type": "string"
                      },
                      "messageId": {
                        "description": "The message id.",
                        "type": "string"
                      },
                      "messageRelease": {
                        "description": "The message release version.",
                        "type": "string"
                      },
                      "messageVersion": {
                        "description": "The message version.",
                        "type": "string"
                      },
                      "schemaName": {
                        "description": "The schema name.",
                        "type": "string"
                      },
                      "senderApplicationId": {
                        "description": "The sender application id.",
                        "type": "string"
                      },
                      "senderApplicationQualifier": {
                        "description": "The sender application qualifier.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "validationOverrides": {
                  "description": "The EDIFACT validation override settings.",
                  "items": {
                    "properties": {
                      "allowLeadingAndTrailingSpacesAndZeroes": {
                        "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                        "type": "boolean"
                      },
                      "enforceCharacterSet": {
                        "description": "The value indicating whether to validate character Set.",
                        "type": "boolean"
                      },
                      "messageId": {
                        "description": "The message id on which the validation settings has to be applied.",
                        "type": "string"
                      },
                      "trailingSeparatorPolicy": {
                        "enum": [
                          "NotSpecified",
                          "NotAllowed",
                          "Optional",
                          "Mandatory"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "TrailingSeparatorPolicy"
                        }
                      },
                      "trimLeadingAndTrailingSpacesAndZeroes": {
                        "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                        "type": "boolean"
                      },
                      "validateEDITypes": {
                        "description": "The value indicating whether to validate EDI types.",
                        "type": "boolean"
                      },
                      "validateXSDTypes": {
                        "description": "The value indicating whether to validate XSD types.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "validationSettings": {
                  "properties": {
                    "allowLeadingAndTrailingSpacesAndZeroes": {
                      "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                      "type": "boolean"
                    },
                    "checkDuplicateGroupControlNumber": {
                      "description": "The value indicating whether to check for duplicate group control number.",
                      "type": "boolean"
                    },
                    "checkDuplicateInterchangeControlNumber": {
                      "description": "The value indicating whether to check for duplicate interchange control number.",
                      "type": "boolean"
                    },
                    "checkDuplicateTransactionSetControlNumber": {
                      "description": "The value indicating whether to check for duplicate transaction set control number.",
                      "type": "boolean"
                    },
                    "interchangeControlNumberValidityDays": {
                      "description": "The validity period of interchange control number.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "trailingSeparatorPolicy": {
                      "enum": [
                        "NotSpecified",
                        "NotAllowed",
                        "Optional",
                        "Mandatory"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "TrailingSeparatorPolicy"
                      }
                    },
                    "trimLeadingAndTrailingSpacesAndZeroes": {
                      "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                      "type": "boolean"
                    },
                    "validateCharacterSet": {
                      "description": "The value indicating whether to validate character set in the message.",
                      "type": "boolean"
                    },
                    "validateEDITypes": {
                      "description": "The value indicating whether to Whether to validate EDI types.",
                      "type": "boolean"
                    },
                    "validateXSDTypes": {
                      "description": "The value indicating whether to Whether to validate XSD types.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EdifactProtocolSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "associationAssignedCode": {
                  "description": "The association assigned code.",
                  "type": "string"
                },
                "messageId": {
                  "description": "The message id.",
                  "type": "string"
                },
                "messageRelease": {
                  "description": "The message release version.",
                  "type": "string"
                },
                "messageVersion": {
                  "description": "The message version.",
                  "type": "string"
                },
                "schemaName": {
                  "description": "The schema name.",
                  "type": "string"
                },
                "senderApplicationId": {
                  "description": "The sender application id.",
                  "type": "string"
                },
                "senderApplicationQualifier": {
                  "description": "The sender application qualifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EdifactSchemaReference"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "allowLeadingAndTrailingSpacesAndZeroes": {
                  "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                  "type": "boolean"
                },
                "enforceCharacterSet": {
                  "description": "The value indicating whether to validate character Set.",
                  "type": "boolean"
                },
                "messageId": {
                  "description": "The message id on which the validation settings has to be applied.",
                  "type": "string"
                },
                "trailingSeparatorPolicy": {
                  "enum": [
                    "NotSpecified",
                    "NotAllowed",
                    "Optional",
                    "Mandatory"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "TrailingSeparatorPolicy"
                  }
                },
                "trimLeadingAndTrailingSpacesAndZeroes": {
                  "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                  "type": "boolean"
                },
                "validateEDITypes": {
                  "description": "The value indicating whether to validate EDI types.",
                  "type": "boolean"
                },
                "validateXSDTypes": {
                  "description": "The value indicating whether to validate XSD types.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EdifactValidationOverride"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "allowLeadingAndTrailingSpacesAndZeroes": {
                  "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                  "type": "boolean"
                },
                "checkDuplicateGroupControlNumber": {
                  "description": "The value indicating whether to check for duplicate group control number.",
                  "type": "boolean"
                },
                "checkDuplicateInterchangeControlNumber": {
                  "description": "The value indicating whether to check for duplicate interchange control number.",
                  "type": "boolean"
                },
                "checkDuplicateTransactionSetControlNumber": {
                  "description": "The value indicating whether to check for duplicate transaction set control number.",
                  "type": "boolean"
                },
                "interchangeControlNumberValidityDays": {
                  "description": "The validity period of interchange control number.",
                  "format": "int32",
                  "type": "integer"
                },
                "trailingSeparatorPolicy": {
                  "enum": [
                    "NotSpecified",
                    "NotAllowed",
                    "Optional",
                    "Mandatory"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "TrailingSeparatorPolicy"
                  }
                },
                "trimLeadingAndTrailingSpacesAndZeroes": {
                  "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                  "type": "boolean"
                },
                "validateCharacterSet": {
                  "description": "The value indicating whether to validate character set in the message.",
                  "type": "boolean"
                },
                "validateEDITypes": {
                  "description": "The value indicating whether to Whether to validate EDI types.",
                  "type": "boolean"
                },
                "validateXSDTypes": {
                  "description": "The value indicating whether to Whether to validate XSD types.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EdifactValidationSettings"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "None",
                "DES3",
                "RC2",
                "AES128",
                "AES192",
                "AES256"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "EncryptionAlgorithm"
              }
            },
            "op": "add",
            "from": "",
            "path": "/EncryptionAlgorithm"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "None",
                "SHA2256",
                "SHA2384",
                "SHA2512"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "HashingAlgorithm"
              }
            },
            "op": "add",
            "from": "",
            "path": "/HashingAlgorithm"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "description": "The resource id.",
                      "type": "string"
                    },
                    "location": {
                      "description": "The resource location.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The resource name.",
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "The resource tags.",
                      "type": "object"
                    },
                    "type": {
                      "description": "The resource type.",
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "properties": {
                "properties": {
                  "type": "object"
                },
                "sku": {
                  "properties": {
                    "name": {
                      "enum": [
                        "NotSpecified",
                        "Free",
                        "Shared",
                        "Basic",
                        "Standard",
                        "Premium"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "SkuName"
                      }
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccount"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "description": "The resource id.",
                      "type": "string"
                    },
                    "location": {
                      "description": "The resource location.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The resource name.",
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "The resource tags.",
                      "type": "object"
                    },
                    "type": {
                      "description": "The resource type.",
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "properties": {
                "properties": {
                  "properties": {
                    "agreementType": {
                      "enum": [
                        "NotSpecified",
                        "AS2",
                        "X12",
                        "Edifact"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "AgreementType"
                      }
                    },
                    "changedTime": {
                      "description": "The changed time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "content": {
                      "properties": {
                        "AS2": {
                          "properties": {
                            "receiveAgreement": {
                              "properties": {
                                "protocolSettings": {
                                  "properties": {
                                    "acknowledgementConnectionSettings": {
                                      "properties": {
                                        "ignoreCertificateNameMismatch": {
                                          "description": "The value indicating whether to ignore mismatch in certificate name.",
                                          "type": "boolean"
                                        },
                                        "keepHttpConnectionAlive": {
                                          "description": "The value indicating whether to keep the connection alive.",
                                          "type": "boolean"
                                        },
                                        "supportHttpStatusCodeContinue": {
                                          "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                          "type": "boolean"
                                        },
                                        "unfoldHttpHeaders": {
                                          "description": "The value indicating whether to unfold the HTTP headers.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "envelopeSettings": {
                                      "properties": {
                                        "AutogenerateFileName": {
                                          "description": "The value indicating whether to auto generate file name.",
                                          "type": "boolean"
                                        },
                                        "SuspendMessageOnFileNameGenerationError": {
                                          "description": "The value indicating whether to suspend message on file name generation error.",
                                          "type": "boolean"
                                        },
                                        "fileNameTemplate": {
                                          "description": "The template for file name.",
                                          "type": "string"
                                        },
                                        "messageContentType": {
                                          "description": "The message content type.",
                                          "type": "string"
                                        },
                                        "transmitFileNameInMimeHeader": {
                                          "description": "The value indicating whether to transmit file name in mime header.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "errorSettings": {
                                      "properties": {
                                        "ResendIfMdnNotReceived": {
                                          "description": "The value indicating whether to resend message If MDN is not received.",
                                          "type": "boolean"
                                        },
                                        "SuspendDuplicateMessage": {
                                          "description": "The value indicating whether to suspend duplicate message.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "mdnSettings": {
                                      "properties": {
                                        "dispositionNotificationTo": {
                                          "description": "The disposition notification to header value.",
                                          "type": "string"
                                        },
                                        "mdnText": {
                                          "description": "The MDN text.",
                                          "type": "string"
                                        },
                                        "micHashingAlgorithm": {
                                          "enum": [
                                            "NotSpecified",
                                            "None",
                                            "SHA2256",
                                            "SHA2384",
                                            "SHA2512"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "HashingAlgorithm"
                                          }
                                        },
                                        "needMdn": {
                                          "description": "The value indicating whether to send or request a MDN.",
                                          "type": "boolean"
                                        },
                                        "receiptDeliveryUrl": {
                                          "description": "The receipt delivery URL.",
                                          "type": "string"
                                        },
                                        "sendInboundMdnToMessageBox": {
                                          "description": "The value indicating whether to send inbound MDN to message box.",
                                          "type": "boolean"
                                        },
                                        "sendMdnAsynchronously": {
                                          "description": "The value indicating whether to send the asynchronous MDN.",
                                          "type": "boolean"
                                        },
                                        "signMdn": {
                                          "description": "The value indicating whether the MDN needs to be signed or not.",
                                          "type": "boolean"
                                        },
                                        "signOutboundMdnIfOptional": {
                                          "description": "The value indicating whether to sign the outbound MDN if optional.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "messageConnectionSettings": {
                                      "properties": {
                                        "ignoreCertificateNameMismatch": {
                                          "description": "The value indicating whether to ignore mismatch in certificate name.",
                                          "type": "boolean"
                                        },
                                        "keepHttpConnectionAlive": {
                                          "description": "The value indicating whether to keep the connection alive.",
                                          "type": "boolean"
                                        },
                                        "supportHttpStatusCodeContinue": {
                                          "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                          "type": "boolean"
                                        },
                                        "unfoldHttpHeaders": {
                                          "description": "The value indicating whether to unfold the HTTP headers.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "securitySettings": {
                                      "properties": {
                                        "enableNrrForInboundDecodedMessages": {
                                          "description": "The value indicating whether to enable NRR for inbound decoded messages.",
                                          "type": "boolean"
                                        },
                                        "enableNrrForInboundEncodedMessages": {
                                          "description": "The value indicating whether to enable NRR for inbound encoded messages.",
                                          "type": "boolean"
                                        },
                                        "enableNrrForInboundMdn": {
                                          "description": "The value indicating whether to enable NRR for inbound MDN.",
                                          "type": "boolean"
                                        },
                                        "enableNrrForOutboundDecodedMessages": {
                                          "description": "The value indicating whether to enable NRR for outbound decoded messages.",
                                          "type": "boolean"
                                        },
                                        "enableNrrForOutboundEncodedMessages": {
                                          "description": "The value indicating whether to enable NRR for outbound encoded messages.",
                                          "type": "boolean"
                                        },
                                        "enableNrrForOutboundMdn": {
                                          "description": "The value indicating whether to enable NRR for outbound MDN.",
                                          "type": "boolean"
                                        },
                                        "encryptionCertificateName": {
                                          "description": "The name of the encryption certificate.",
                                          "type": "string"
                                        },
                                        "overrideGroupSigningCertificate": {
                                          "description": "The value indicating whether to send or request a MDN.",
                                          "type": "boolean"
                                        },
                                        "signingCertificateName": {
                                          "description": "The name of the signing certificate.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "validationSettings": {
                                      "properties": {
                                        "checkCertificateRevocationListOnReceive": {
                                          "description": "The value indicating whether to check for certificate revocation list on receive.",
                                          "type": "boolean"
                                        },
                                        "checkCertificateRevocationListOnSend": {
                                          "description": "The value indicating whether to check for certificate revocation list on send.",
                                          "type": "boolean"
                                        },
                                        "checkDuplicateMessage": {
                                          "description": "The value indicating whether to check for duplicate message.",
                                          "type": "boolean"
                                        },
                                        "compressMessage": {
                                          "description": "The value indicating whether the message has to be compressed.",
                                          "type": "boolean"
                                        },
                                        "encryptMessage": {
                                          "description": "The value indicating whether the message has to be encrypted.",
                                          "type": "boolean"
                                        },
                                        "encryptionAlgorithm": {
                                          "enum": [
                                            "NotSpecified",
                                            "None",
                                            "DES3",
                                            "RC2",
                                            "AES128",
                                            "AES192",
                                            "AES256"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "EncryptionAlgorithm"
                                          }
                                        },
                                        "interchangeDuplicatesValidityDays": {
                                          "description": "The number of days to look back for duplicate interchange.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "overrideMessageProperties": {
                                          "description": "The value indicating whether to override incoming message properties with those in agreement.",
                                          "type": "boolean"
                                        },
                                        "signMessage": {
                                          "description": "The value indicating whether the message has to be signed.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "receiverBusinessIdentity": {
                                  "properties": {
                                    "Qualifier": {
                                      "description": "The business identity qualifier.",
                                      "type": "string"
                                    },
                                    "Value": {
                                      "description": "The business identity value.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "senderBusinessIdentity": {
                                  "properties": {
                                    "Qualifier": {
                                      "description": "The business identity qualifier.",
                                      "type": "string"
                                    },
                                    "Value": {
                                      "description": "The business identity value.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "sendAgreement": {
                              "properties": {
                                "protocolSettings": {
                                  "properties": {
                                    "acknowledgementConnectionSettings": {
                                      "properties": {
                                        "ignoreCertificateNameMismatch": {
                                          "description": "The value indicating whether to ignore mismatch in certificate name.",
                                          "type": "boolean"
                                        },
                                        "keepHttpConnectionAlive": {
                                          "description": "The value indicating whether to keep the connection alive.",
                                          "type": "boolean"
                                        },
                                        "supportHttpStatusCodeContinue": {
                                          "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                          "type": "boolean"
                                        },
                                        "unfoldHttpHeaders": {
                                          "description": "The value indicating whether to unfold the HTTP headers.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "envelopeSettings": {
                                      "properties": {
                                        "AutogenerateFileName": {
                                          "description": "The value indicating whether to auto generate file name.",
                                          "type": "boolean"
                                        },
                                        "SuspendMessageOnFileNameGenerationError": {
                                          "description": "The value indicating whether to suspend message on file name generation error.",
                                          "type": "boolean"
                                        },
                                        "fileNameTemplate": {
                                          "description": "The template for file name.",
                                          "type": "string"
                                        },
                                        "messageContentType": {
                                          "description": "The message content type.",
                                          "type": "string"
                                        },
                                        "transmitFileNameInMimeHeader": {
                                          "description": "The value indicating whether to transmit file name in mime header.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "errorSettings": {
                                      "properties": {
                                        "ResendIfMdnNotReceived": {
                                          "description": "The value indicating whether to resend message If MDN is not received.",
                                          "type": "boolean"
                                        },
                                        "SuspendDuplicateMessage": {
                                          "description": "The value indicating whether to suspend duplicate message.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "mdnSettings": {
                                      "properties": {
                                        "dispositionNotificationTo": {
                                          "description": "The disposition notification to header value.",
                                          "type": "string"
                                        },
                                        "mdnText": {
                                          "description": "The MDN text.",
                                          "type": "string"
                                        },
                                        "micHashingAlgorithm": {
                                          "enum": [
                                            "NotSpecified",
                                            "None",
                                            "SHA2256",
                                            "SHA2384",
                                            "SHA2512"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "HashingAlgorithm"
                                          }
                                        },
                                        "needMdn": {
                                          "description": "The value indicating whether to send or request a MDN.",
                                          "type": "boolean"
                                        },
                                        "receiptDeliveryUrl": {
                                          "description": "The receipt delivery URL.",
                                          "type": "string"
                                        },
                                        "sendInboundMdnToMessageBox": {
                                          "description": "The value indicating whether to send inbound MDN to message box.",
                                          "type": "boolean"
                                        },
                                        "sendMdnAsynchronously": {
                                          "description": "The value indicating whether to send the asynchronous MDN.",
                                          "type": "boolean"
                                        },
                                        "signMdn": {
                                          "description": "The value indicating whether the MDN needs to be signed or not.",
                                          "type": "boolean"
                                        },
                                        "signOutboundMdnIfOptional": {
                                          "description": "The value indicating whether to sign the outbound MDN if optional.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "messageConnectionSettings": {
                                      "properties": {
                                        "ignoreCertificateNameMismatch": {
                                          "description": "The value indicating whether to ignore mismatch in certificate name.",
                                          "type": "boolean"
                                        },
                                        "keepHttpConnectionAlive": {
                                          "description": "The value indicating whether to keep the connection alive.",
                                          "type": "boolean"
                                        },
                                        "supportHttpStatusCodeContinue": {
                                          "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                          "type": "boolean"
                                        },
                                        "unfoldHttpHeaders": {
                                          "description": "The value indicating whether to unfold the HTTP headers.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "securitySettings": {
                                      "properties": {
                                        "enableNrrForInboundDecodedMessages": {
                                          "description": "The value indicating whether to enable NRR for inbound decoded messages.",
                                          "type": "boolean"
                                        },
                                        "enableNrrForInboundEncodedMessages": {
                                          "description": "The value indicating whether to enable NRR for inbound encoded messages.",
                                          "type": "boolean"
                                        },
                                        "enableNrrForInboundMdn": {
                                          "description": "The value indicating whether to enable NRR for inbound MDN.",
                                          "type": "boolean"
                                        },
                                        "enableNrrForOutboundDecodedMessages": {
                                          "description": "The value indicating whether to enable NRR for outbound decoded messages.",
                                          "type": "boolean"
                                        },
                                        "enableNrrForOutboundEncodedMessages": {
                                          "description": "The value indicating whether to enable NRR for outbound encoded messages.",
                                          "type": "boolean"
                                        },
                                        "enableNrrForOutboundMdn": {
                                          "description": "The value indicating whether to enable NRR for outbound MDN.",
                                          "type": "boolean"
                                        },
                                        "encryptionCertificateName": {
                                          "description": "The name of the encryption certificate.",
                                          "type": "string"
                                        },
                                        "overrideGroupSigningCertificate": {
                                          "description": "The value indicating whether to send or request a MDN.",
                                          "type": "boolean"
                                        },
                                        "signingCertificateName": {
                                          "description": "The name of the signing certificate.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "validationSettings": {
                                      "properties": {
                                        "checkCertificateRevocationListOnReceive": {
                                          "description": "The value indicating whether to check for certificate revocation list on receive.",
                                          "type": "boolean"
                                        },
                                        "checkCertificateRevocationListOnSend": {
                                          "description": "The value indicating whether to check for certificate revocation list on send.",
                                          "type": "boolean"
                                        },
                                        "checkDuplicateMessage": {
                                          "description": "The value indicating whether to check for duplicate message.",
                                          "type": "boolean"
                                        },
                                        "compressMessage": {
                                          "description": "The value indicating whether the message has to be compressed.",
                                          "type": "boolean"
                                        },
                                        "encryptMessage": {
                                          "description": "The value indicating whether the message has to be encrypted.",
                                          "type": "boolean"
                                        },
                                        "encryptionAlgorithm": {
                                          "enum": [
                                            "NotSpecified",
                                            "None",
                                            "DES3",
                                            "RC2",
                                            "AES128",
                                            "AES192",
                                            "AES256"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "EncryptionAlgorithm"
                                          }
                                        },
                                        "interchangeDuplicatesValidityDays": {
                                          "description": "The number of days to look back for duplicate interchange.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "overrideMessageProperties": {
                                          "description": "The value indicating whether to override incoming message properties with those in agreement.",
                                          "type": "boolean"
                                        },
                                        "signMessage": {
                                          "description": "The value indicating whether the message has to be signed.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "receiverBusinessIdentity": {
                                  "properties": {
                                    "Qualifier": {
                                      "description": "The business identity qualifier.",
                                      "type": "string"
                                    },
                                    "Value": {
                                      "description": "The business identity value.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "senderBusinessIdentity": {
                                  "properties": {
                                    "Qualifier": {
                                      "description": "The business identity qualifier.",
                                      "type": "string"
                                    },
                                    "Value": {
                                      "description": "The business identity value.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "Edifact": {
                          "properties": {
                            "receiveAgreement": {
                              "properties": {
                                "protocolSettings": {
                                  "properties": {
                                    "acknowledgementSettings": {
                                      "properties": {
                                        "acknowledgementControlNumberLowerBound": {
                                          "description": "The acknowledgement control number lower bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "acknowledgementControlNumberPrefix": {
                                          "description": "The acknowledgement control number prefix.",
                                          "type": "string"
                                        },
                                        "acknowledgementControlNumberSuffix": {
                                          "description": "The acknowledgement control number suffix.",
                                          "type": "string"
                                        },
                                        "acknowledgementControlNumberUpperBound": {
                                          "description": "The acknowledgement control number upper bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "batchFunctionalAcknowledgements": {
                                          "description": "The value indicating whether to batch functional acknowledgements.",
                                          "type": "boolean"
                                        },
                                        "batchTechnicalAcknowledgements": {
                                          "description": "The value indicating whether to batch the technical acknowledgements.",
                                          "type": "boolean"
                                        },
                                        "needFunctionalAcknowledgement": {
                                          "description": "The value indicating whether functional acknowledgement is needed.",
                                          "type": "boolean"
                                        },
                                        "needLoopForValidMessages": {
                                          "description": "The value indicating whether a loop is needed for valid messages.",
                                          "type": "boolean"
                                        },
                                        "needTechnicalAcknowledgement": {
                                          "description": "The value indicating whether technical acknowledgement is needed.",
                                          "type": "boolean"
                                        },
                                        "rolloverAcknowledgementControlNumber": {
                                          "description": "The value indicating whether to rollover acknowledgement control number.",
                                          "type": "boolean"
                                        },
                                        "sendSynchronousAcknowledgement": {
                                          "description": "The value indicating whether to send synchronous acknowledgement.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "edifactDelimiterOverrides": {
                                      "description": "The EDIFACT delimiter override settings.",
                                      "items": {
                                        "properties": {
                                          "componentSeparator": {
                                            "description": "The component separator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "dataElementSeparator": {
                                            "description": "The data element separator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "decimalPointIndicator": {
                                            "enum": [
                                              "NotSpecified",
                                              "Comma",
                                              "Decimal"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "EdifactDecimalIndicator"
                                            }
                                          },
                                          "messageAssociationAssignedCode": {
                                            "description": "The message association assigned code.",
                                            "type": "string"
                                          },
                                          "messageId": {
                                            "description": "The message id.",
                                            "type": "string"
                                          },
                                          "messageRelease": {
                                            "description": "The message release version.",
                                            "type": "string"
                                          },
                                          "messageVersion": {
                                            "description": "The message version.",
                                            "type": "string"
                                          },
                                          "releaseIndicator": {
                                            "description": "The release indicator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "repetitionSeparator": {
                                            "description": "The repetition separator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "segmentTerminator": {
                                            "description": "The segment terminator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "segmentTerminatorSuffix": {
                                            "enum": [
                                              "NotSpecified",
                                              "None",
                                              "CR",
                                              "LF",
                                              "CRLF"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "SegmentTerminatorSuffix"
                                            }
                                          },
                                          "targetNamespace": {
                                            "description": "The target namespace on which this delimiter settings has to be applied.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "envelopeOverrides": {
                                      "description": "The EDIFACT envelope override settings.",
                                      "items": {
                                        "properties": {
                                          "applicationPassword": {
                                            "description": "The application password.",
                                            "type": "string"
                                          },
                                          "associationAssignedCode": {
                                            "description": "The association assigned code.",
                                            "type": "string"
                                          },
                                          "controllingAgencyCode": {
                                            "description": "The controlling agency code.",
                                            "type": "string"
                                          },
                                          "functionalGroupId": {
                                            "description": "The functional group id.",
                                            "type": "string"
                                          },
                                          "groupHeaderMessageRelease": {
                                            "description": "The group header message release.",
                                            "type": "string"
                                          },
                                          "groupHeaderMessageVersion": {
                                            "description": "The group header message version.",
                                            "type": "string"
                                          },
                                          "messageAssociationAssignedCode": {
                                            "description": "The message association assigned code.",
                                            "type": "string"
                                          },
                                          "messageId": {
                                            "description": "The message id on which this envelope settings has to be applied.",
                                            "type": "string"
                                          },
                                          "messageRelease": {
                                            "description": "The message release version on which this envelope settings has to be applied.",
                                            "type": "string"
                                          },
                                          "messageVersion": {
                                            "description": "The message version on which this envelope settings has to be applied.",
                                            "type": "string"
                                          },
                                          "receiverApplicationId": {
                                            "description": "The receiver application id.",
                                            "type": "string"
                                          },
                                          "receiverApplicationQualifier": {
                                            "description": "The receiver application qualifier.",
                                            "type": "string"
                                          },
                                          "senderApplicationId": {
                                            "description": "The sender application id.",
                                            "type": "string"
                                          },
                                          "senderApplicationQualifier": {
                                            "description": "The sender application qualifier.",
                                            "type": "string"
                                          },
                                          "targetNamespace": {
                                            "description": "The target namespace on which this envelope settings has to be applied.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "envelopeSettings": {
                                      "properties": {
                                        "applicationReferenceId": {
                                          "description": "The application reference id.",
                                          "type": "string"
                                        },
                                        "applyDelimiterStringAdvice": {
                                          "description": "The value indicating whether to apply delimiter string advice.",
                                          "type": "boolean"
                                        },
                                        "communicationAgreementId": {
                                          "description": "The communication agreement id.",
                                          "type": "string"
                                        },
                                        "createGroupingSegments": {
                                          "description": "The value indicating whether to create grouping segments.",
                                          "type": "boolean"
                                        },
                                        "enableDefaultGroupHeaders": {
                                          "description": "The value indicating whether to enable default group headers.",
                                          "type": "boolean"
                                        },
                                        "functionalGroupId": {
                                          "description": "The functional group id.",
                                          "type": "string"
                                        },
                                        "groupApplicationPassword": {
                                          "description": "The group application password.",
                                          "type": "string"
                                        },
                                        "groupApplicationReceiverId": {
                                          "description": "The group application receiver id.",
                                          "type": "string"
                                        },
                                        "groupApplicationReceiverQualifier": {
                                          "description": "The group application receiver qualifier.",
                                          "type": "string"
                                        },
                                        "groupApplicationSenderId": {
                                          "description": "The group application sender id.",
                                          "type": "string"
                                        },
                                        "groupApplicationSenderQualifier": {
                                          "description": "The group application sender qualifier.",
                                          "type": "string"
                                        },
                                        "groupAssociationAssignedCode": {
                                          "description": "The group association assigned code.",
                                          "type": "string"
                                        },
                                        "groupControlNumberLowerBound": {
                                          "description": "The group control number lower bound.",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "groupControlNumberPrefix": {
                                          "description": "The group control number prefix.",
                                          "type": "string"
                                        },
                                        "groupControlNumberSuffix": {
                                          "description": "The group control number suffix.",
                                          "type": "string"
                                        },
                                        "groupControlNumberUpperBound": {
                                          "description": "The group control number upper bound.",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "groupControllingAgencyCode": {
                                          "description": "The group controlling agency code.",
                                          "type": "string"
                                        },
                                        "groupMessageRelease": {
                                          "description": "The group message release.",
                                          "type": "string"
                                        },
                                        "groupMessageVersion": {
                                          "description": "The group message version.",
                                          "type": "string"
                                        },
                                        "interchangeControlNumberLowerBound": {
                                          "description": "The interchange control number lower bound.",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "interchangeControlNumberPrefix": {
                                          "description": "The interchange control number prefix.",
                                          "type": "string"
                                        },
                                        "interchangeControlNumberSuffix": {
                                          "description": "The interchange control number suffix.",
                                          "type": "string"
                                        },
                                        "interchangeControlNumberUpperBound": {
                                          "description": "The interchange control number upper bound.",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "isTestInterchange": {
                                          "description": "The value indicating whether the message is a test interchange.",
                                          "type": "boolean"
                                        },
                                        "overwriteExistingTransactionSetControlNumber": {
                                          "description": "The value indicating whether to overwrite existing transaction set control number.",
                                          "type": "boolean"
                                        },
                                        "processingPriorityCode": {
                                          "description": "The processing priority code.",
                                          "type": "string"
                                        },
                                        "receiverInternalIdentification": {
                                          "description": "The receiver internal identification.",
                                          "type": "string"
                                        },
                                        "receiverInternalSubIdentification": {
                                          "description": "The receiver internal sub identification.",
                                          "type": "string"
                                        },
                                        "receiverReverseRoutingAddress": {
                                          "description": "The receiver reverse routing address.",
                                          "type": "string"
                                        },
                                        "recipientReferencePasswordQualifier": {
                                          "description": "The recipient reference password qualifier.",
                                          "type": "string"
                                        },
                                        "recipientReferencePasswordValue": {
                                          "description": "The recipient reference password value.",
                                          "type": "string"
                                        },
                                        "rolloverGroupControlNumber": {
                                          "description": "The value indicating whether to rollover group control number.",
                                          "type": "boolean"
                                        },
                                        "rolloverInterchangeControlNumber": {
                                          "description": "The value indicating whether to rollover interchange control number.",
                                          "type": "boolean"
                                        },
                                        "rolloverTransactionSetControlNumber": {
                                          "description": "The value indicating whether to rollover transaction set control number.",
                                          "type": "boolean"
                                        },
                                        "senderInternalIdentification": {
                                          "description": "The sender internal identification.",
                                          "type": "string"
                                        },
                                        "senderInternalSubIdentification": {
                                          "description": "The sender internal sub identification.",
                                          "type": "string"
                                        },
                                        "senderReverseRoutingAddress": {
                                          "description": "The sender reverse routing address.",
                                          "type": "string"
                                        },
                                        "transactionSetControlNumberLowerBound": {
                                          "description": "The transaction set control number lower bound.",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "transactionSetControlNumberPrefix": {
                                          "description": "The transaction set control number prefix.",
                                          "type": "string"
                                        },
                                        "transactionSetControlNumberSuffix": {
                                          "description": "The transaction set control number suffix.",
                                          "type": "string"
                                        },
                                        "transactionSetControlNumberUpperBound": {
                                          "description": "The transaction set control number upper bound.",
                                          "format": "int64",
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "framingSettings": {
                                      "properties": {
                                        "characterEncoding": {
                                          "description": "The character encoding.",
                                          "type": "string"
                                        },
                                        "characterSet": {
                                          "enum": [
                                            "NotSpecified",
                                            "UNOB",
                                            "UNOA",
                                            "UNOC",
                                            "UNOD",
                                            "UNOE",
                                            "UNOF",
                                            "UNOG",
                                            "UNOH",
                                            "UNOI",
                                            "UNOJ",
                                            "UNOK",
                                            "UNOX",
                                            "UNOY",
                                            "KECA"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "EdifactCharacterSet"
                                          }
                                        },
                                        "componentSeparator": {
                                          "description": "The component separator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "dataElementSeparator": {
                                          "description": "The data element separator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "decimalPointIndicator": {
                                          "enum": [
                                            "NotSpecified",
                                            "Comma",
                                            "Decimal"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "EdifactDecimalIndicator"
                                          }
                                        },
                                        "protocolVersion": {
                                          "description": "The protocol version.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "releaseIndicator": {
                                          "description": "The release indicator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "repetitionSeparator": {
                                          "description": "The repetition separator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "segmentTerminator": {
                                          "description": "The segment terminator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "segmentTerminatorSuffix": {
                                          "enum": [
                                            "NotSpecified",
                                            "None",
                                            "CR",
                                            "LF",
                                            "CRLF"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "SegmentTerminatorSuffix"
                                          }
                                        },
                                        "serviceCodeListDirectoryVersion": {
                                          "description": "The service code list directory version.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "messageFilter": {
                                      "properties": {
                                        "messageFilterType": {
                                          "enum": [
                                            "NotSpecified",
                                            "Include",
                                            "Exclude"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "MessageFilterType"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "messageFilterList": {
                                      "description": "The EDIFACT message filter list.",
                                      "items": {
                                        "properties": {
                                          "messageId": {
                                            "description": "The message id on which this envelope settings has to be applied.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "processingSettings": {
                                      "properties": {
                                        "createEmptyXmlTagsForTrailingSeparators": {
                                          "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                          "type": "boolean"
                                        },
                                        "maskSecurityInfo": {
                                          "description": "The value indicating whether to mask security information.",
                                          "type": "boolean"
                                        },
                                        "preserveInterchange": {
                                          "description": "The value indicating whether to preserve interchange.",
                                          "type": "boolean"
                                        },
                                        "suspendInterchangeOnError": {
                                          "description": "The value indicating whether to suspend interchange on error.",
                                          "type": "boolean"
                                        },
                                        "useDotAsDecimalSeparator": {
                                          "description": "The value indicating whether to use dot as decimal separator.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "schemaReferences": {
                                      "description": "The EDIFACT schema references.",
                                      "items": {
                                        "properties": {
                                          "associationAssignedCode": {
                                            "description": "The association assigned code.",
                                            "type": "string"
                                          },
                                          "messageId": {
                                            "description": "The message id.",
                                            "type": "string"
                                          },
                                          "messageRelease": {
                                            "description": "The message release version.",
                                            "type": "string"
                                          },
                                          "messageVersion": {
                                            "description": "The message version.",
                                            "type": "string"
                                          },
                                          "schemaName": {
                                            "description": "The schema name.",
                                            "type": "string"
                                          },
                                          "senderApplicationId": {
                                            "description": "The sender application id.",
                                            "type": "string"
                                          },
                                          "senderApplicationQualifier": {
                                            "description": "The sender application qualifier.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "validationOverrides": {
                                      "description": "The EDIFACT validation override settings.",
                                      "items": {
                                        "properties": {
                                          "allowLeadingAndTrailingSpacesAndZeroes": {
                                            "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                            "type": "boolean"
                                          },
                                          "enforceCharacterSet": {
                                            "description": "The value indicating whether to validate character Set.",
                                            "type": "boolean"
                                          },
                                          "messageId": {
                                            "description": "The message id on which the validation settings has to be applied.",
                                            "type": "string"
                                          },
                                          "trailingSeparatorPolicy": {
                                            "enum": [
                                              "NotSpecified",
                                              "NotAllowed",
                                              "Optional",
                                              "Mandatory"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "TrailingSeparatorPolicy"
                                            }
                                          },
                                          "trimLeadingAndTrailingSpacesAndZeroes": {
                                            "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                            "type": "boolean"
                                          },
                                          "validateEDITypes": {
                                            "description": "The value indicating whether to validate EDI types.",
                                            "type": "boolean"
                                          },
                                          "validateXSDTypes": {
                                            "description": "The value indicating whether to validate XSD types.",
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "validationSettings": {
                                      "properties": {
                                        "allowLeadingAndTrailingSpacesAndZeroes": {
                                          "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                          "type": "boolean"
                                        },
                                        "checkDuplicateGroupControlNumber": {
                                          "description": "The value indicating whether to check for duplicate group control number.",
                                          "type": "boolean"
                                        },
                                        "checkDuplicateInterchangeControlNumber": {
                                          "description": "The value indicating whether to check for duplicate interchange control number.",
                                          "type": "boolean"
                                        },
                                        "checkDuplicateTransactionSetControlNumber": {
                                          "description": "The value indicating whether to check for duplicate transaction set control number.",
                                          "type": "boolean"
                                        },
                                        "interchangeControlNumberValidityDays": {
                                          "description": "The validity period of interchange control number.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "trailingSeparatorPolicy": {
                                          "enum": [
                                            "NotSpecified",
                                            "NotAllowed",
                                            "Optional",
                                            "Mandatory"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "TrailingSeparatorPolicy"
                                          }
                                        },
                                        "trimLeadingAndTrailingSpacesAndZeroes": {
                                          "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                          "type": "boolean"
                                        },
                                        "validateCharacterSet": {
                                          "description": "The value indicating whether to validate character set in the message.",
                                          "type": "boolean"
                                        },
                                        "validateEDITypes": {
                                          "description": "The value indicating whether to Whether to validate EDI types.",
                                          "type": "boolean"
                                        },
                                        "validateXSDTypes": {
                                          "description": "The value indicating whether to Whether to validate XSD types.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "receiverBusinessIdentity": {
                                  "properties": {
                                    "Qualifier": {
                                      "description": "The business identity qualifier.",
                                      "type": "string"
                                    },
                                    "Value": {
                                      "description": "The business identity value.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "senderBusinessIdentity": {
                                  "properties": {
                                    "Qualifier": {
                                      "description": "The business identity qualifier.",
                                      "type": "string"
                                    },
                                    "Value": {
                                      "description": "The business identity value.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "sendAgreement": {
                              "properties": {
                                "protocolSettings": {
                                  "properties": {
                                    "acknowledgementSettings": {
                                      "properties": {
                                        "acknowledgementControlNumberLowerBound": {
                                          "description": "The acknowledgement control number lower bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "acknowledgementControlNumberPrefix": {
                                          "description": "The acknowledgement control number prefix.",
                                          "type": "string"
                                        },
                                        "acknowledgementControlNumberSuffix": {
                                          "description": "The acknowledgement control number suffix.",
                                          "type": "string"
                                        },
                                        "acknowledgementControlNumberUpperBound": {
                                          "description": "The acknowledgement control number upper bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "batchFunctionalAcknowledgements": {
                                          "description": "The value indicating whether to batch functional acknowledgements.",
                                          "type": "boolean"
                                        },
                                        "batchTechnicalAcknowledgements": {
                                          "description": "The value indicating whether to batch the technical acknowledgements.",
                                          "type": "boolean"
                                        },
                                        "needFunctionalAcknowledgement": {
                                          "description": "The value indicating whether functional acknowledgement is needed.",
                                          "type": "boolean"
                                        },
                                        "needLoopForValidMessages": {
                                          "description": "The value indicating whether a loop is needed for valid messages.",
                                          "type": "boolean"
                                        },
                                        "needTechnicalAcknowledgement": {
                                          "description": "The value indicating whether technical acknowledgement is needed.",
                                          "type": "boolean"
                                        },
                                        "rolloverAcknowledgementControlNumber": {
                                          "description": "The value indicating whether to rollover acknowledgement control number.",
                                          "type": "boolean"
                                        },
                                        "sendSynchronousAcknowledgement": {
                                          "description": "The value indicating whether to send synchronous acknowledgement.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "edifactDelimiterOverrides": {
                                      "description": "The EDIFACT delimiter override settings.",
                                      "items": {
                                        "properties": {
                                          "componentSeparator": {
                                            "description": "The component separator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "dataElementSeparator": {
                                            "description": "The data element separator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "decimalPointIndicator": {
                                            "enum": [
                                              "NotSpecified",
                                              "Comma",
                                              "Decimal"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "EdifactDecimalIndicator"
                                            }
                                          },
                                          "messageAssociationAssignedCode": {
                                            "description": "The message association assigned code.",
                                            "type": "string"
                                          },
                                          "messageId": {
                                            "description": "The message id.",
                                            "type": "string"
                                          },
                                          "messageRelease": {
                                            "description": "The message release version.",
                                            "type": "string"
                                          },
                                          "messageVersion": {
                                            "description": "The message version.",
                                            "type": "string"
                                          },
                                          "releaseIndicator": {
                                            "description": "The release indicator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "repetitionSeparator": {
                                            "description": "The repetition separator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "segmentTerminator": {
                                            "description": "The segment terminator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "segmentTerminatorSuffix": {
                                            "enum": [
                                              "NotSpecified",
                                              "None",
                                              "CR",
                                              "LF",
                                              "CRLF"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "SegmentTerminatorSuffix"
                                            }
                                          },
                                          "targetNamespace": {
                                            "description": "The target namespace on which this delimiter settings has to be applied.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "envelopeOverrides": {
                                      "description": "The EDIFACT envelope override settings.",
                                      "items": {
                                        "properties": {
                                          "applicationPassword": {
                                            "description": "The application password.",
                                            "type": "string"
                                          },
                                          "associationAssignedCode": {
                                            "description": "The association assigned code.",
                                            "type": "string"
                                          },
                                          "controllingAgencyCode": {
                                            "description": "The controlling agency code.",
                                            "type": "string"
                                          },
                                          "functionalGroupId": {
                                            "description": "The functional group id.",
                                            "type": "string"
                                          },
                                          "groupHeaderMessageRelease": {
                                            "description": "The group header message release.",
                                            "type": "string"
                                          },
                                          "groupHeaderMessageVersion": {
                                            "description": "The group header message version.",
                                            "type": "string"
                                          },
                                          "messageAssociationAssignedCode": {
                                            "description": "The message association assigned code.",
                                            "type": "string"
                                          },
                                          "messageId": {
                                            "description": "The message id on which this envelope settings has to be applied.",
                                            "type": "string"
                                          },
                                          "messageRelease": {
                                            "description": "The message release version on which this envelope settings has to be applied.",
                                            "type": "string"
                                          },
                                          "messageVersion": {
                                            "description": "The message version on which this envelope settings has to be applied.",
                                            "type": "string"
                                          },
                                          "receiverApplicationId": {
                                            "description": "The receiver application id.",
                                            "type": "string"
                                          },
                                          "receiverApplicationQualifier": {
                                            "description": "The receiver application qualifier.",
                                            "type": "string"
                                          },
                                          "senderApplicationId": {
                                            "description": "The sender application id.",
                                            "type": "string"
                                          },
                                          "senderApplicationQualifier": {
                                            "description": "The sender application qualifier.",
                                            "type": "string"
                                          },
                                          "targetNamespace": {
                                            "description": "The target namespace on which this envelope settings has to be applied.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "envelopeSettings": {
                                      "properties": {
                                        "applicationReferenceId": {
                                          "description": "The application reference id.",
                                          "type": "string"
                                        },
                                        "applyDelimiterStringAdvice": {
                                          "description": "The value indicating whether to apply delimiter string advice.",
                                          "type": "boolean"
                                        },
                                        "communicationAgreementId": {
                                          "description": "The communication agreement id.",
                                          "type": "string"
                                        },
                                        "createGroupingSegments": {
                                          "description": "The value indicating whether to create grouping segments.",
                                          "type": "boolean"
                                        },
                                        "enableDefaultGroupHeaders": {
                                          "description": "The value indicating whether to enable default group headers.",
                                          "type": "boolean"
                                        },
                                        "functionalGroupId": {
                                          "description": "The functional group id.",
                                          "type": "string"
                                        },
                                        "groupApplicationPassword": {
                                          "description": "The group application password.",
                                          "type": "string"
                                        },
                                        "groupApplicationReceiverId": {
                                          "description": "The group application receiver id.",
                                          "type": "string"
                                        },
                                        "groupApplicationReceiverQualifier": {
                                          "description": "The group application receiver qualifier.",
                                          "type": "string"
                                        },
                                        "groupApplicationSenderId": {
                                          "description": "The group application sender id.",
                                          "type": "string"
                                        },
                                        "groupApplicationSenderQualifier": {
                                          "description": "The group application sender qualifier.",
                                          "type": "string"
                                        },
                                        "groupAssociationAssignedCode": {
                                          "description": "The group association assigned code.",
                                          "type": "string"
                                        },
                                        "groupControlNumberLowerBound": {
                                          "description": "The group control number lower bound.",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "groupControlNumberPrefix": {
                                          "description": "The group control number prefix.",
                                          "type": "string"
                                        },
                                        "groupControlNumberSuffix": {
                                          "description": "The group control number suffix.",
                                          "type": "string"
                                        },
                                        "groupControlNumberUpperBound": {
                                          "description": "The group control number upper bound.",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "groupControllingAgencyCode": {
                                          "description": "The group controlling agency code.",
                                          "type": "string"
                                        },
                                        "groupMessageRelease": {
                                          "description": "The group message release.",
                                          "type": "string"
                                        },
                                        "groupMessageVersion": {
                                          "description": "The group message version.",
                                          "type": "string"
                                        },
                                        "interchangeControlNumberLowerBound": {
                                          "description": "The interchange control number lower bound.",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "interchangeControlNumberPrefix": {
                                          "description": "The interchange control number prefix.",
                                          "type": "string"
                                        },
                                        "interchangeControlNumberSuffix": {
                                          "description": "The interchange control number suffix.",
                                          "type": "string"
                                        },
                                        "interchangeControlNumberUpperBound": {
                                          "description": "The interchange control number upper bound.",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "isTestInterchange": {
                                          "description": "The value indicating whether the message is a test interchange.",
                                          "type": "boolean"
                                        },
                                        "overwriteExistingTransactionSetControlNumber": {
                                          "description": "The value indicating whether to overwrite existing transaction set control number.",
                                          "type": "boolean"
                                        },
                                        "processingPriorityCode": {
                                          "description": "The processing priority code.",
                                          "type": "string"
                                        },
                                        "receiverInternalIdentification": {
                                          "description": "The receiver internal identification.",
                                          "type": "string"
                                        },
                                        "receiverInternalSubIdentification": {
                                          "description": "The receiver internal sub identification.",
                                          "type": "string"
                                        },
                                        "receiverReverseRoutingAddress": {
                                          "description": "The receiver reverse routing address.",
                                          "type": "string"
                                        },
                                        "recipientReferencePasswordQualifier": {
                                          "description": "The recipient reference password qualifier.",
                                          "type": "string"
                                        },
                                        "recipientReferencePasswordValue": {
                                          "description": "The recipient reference password value.",
                                          "type": "string"
                                        },
                                        "rolloverGroupControlNumber": {
                                          "description": "The value indicating whether to rollover group control number.",
                                          "type": "boolean"
                                        },
                                        "rolloverInterchangeControlNumber": {
                                          "description": "The value indicating whether to rollover interchange control number.",
                                          "type": "boolean"
                                        },
                                        "rolloverTransactionSetControlNumber": {
                                          "description": "The value indicating whether to rollover transaction set control number.",
                                          "type": "boolean"
                                        },
                                        "senderInternalIdentification": {
                                          "description": "The sender internal identification.",
                                          "type": "string"
                                        },
                                        "senderInternalSubIdentification": {
                                          "description": "The sender internal sub identification.",
                                          "type": "string"
                                        },
                                        "senderReverseRoutingAddress": {
                                          "description": "The sender reverse routing address.",
                                          "type": "string"
                                        },
                                        "transactionSetControlNumberLowerBound": {
                                          "description": "The transaction set control number lower bound.",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "transactionSetControlNumberPrefix": {
                                          "description": "The transaction set control number prefix.",
                                          "type": "string"
                                        },
                                        "transactionSetControlNumberSuffix": {
                                          "description": "The transaction set control number suffix.",
                                          "type": "string"
                                        },
                                        "transactionSetControlNumberUpperBound": {
                                          "description": "The transaction set control number upper bound.",
                                          "format": "int64",
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "framingSettings": {
                                      "properties": {
                                        "characterEncoding": {
                                          "description": "The character encoding.",
                                          "type": "string"
                                        },
                                        "characterSet": {
                                          "enum": [
                                            "NotSpecified",
                                            "UNOB",
                                            "UNOA",
                                            "UNOC",
                                            "UNOD",
                                            "UNOE",
                                            "UNOF",
                                            "UNOG",
                                            "UNOH",
                                            "UNOI",
                                            "UNOJ",
                                            "UNOK",
                                            "UNOX",
                                            "UNOY",
                                            "KECA"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "EdifactCharacterSet"
                                          }
                                        },
                                        "componentSeparator": {
                                          "description": "The component separator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "dataElementSeparator": {
                                          "description": "The data element separator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "decimalPointIndicator": {
                                          "enum": [
                                            "NotSpecified",
                                            "Comma",
                                            "Decimal"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "EdifactDecimalIndicator"
                                          }
                                        },
                                        "protocolVersion": {
                                          "description": "The protocol version.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "releaseIndicator": {
                                          "description": "The release indicator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "repetitionSeparator": {
                                          "description": "The repetition separator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "segmentTerminator": {
                                          "description": "The segment terminator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "segmentTerminatorSuffix": {
                                          "enum": [
                                            "NotSpecified",
                                            "None",
                                            "CR",
                                            "LF",
                                            "CRLF"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "SegmentTerminatorSuffix"
                                          }
                                        },
                                        "serviceCodeListDirectoryVersion": {
                                          "description": "The service code list directory version.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "messageFilter": {
                                      "properties": {
                                        "messageFilterType": {
                                          "enum": [
                                            "NotSpecified",
                                            "Include",
                                            "Exclude"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "MessageFilterType"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "messageFilterList": {
                                      "description": "The EDIFACT message filter list.",
                                      "items": {
                                        "properties": {
                                          "messageId": {
                                            "description": "The message id on which this envelope settings has to be applied.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "processingSettings": {
                                      "properties": {
                                        "createEmptyXmlTagsForTrailingSeparators": {
                                          "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                          "type": "boolean"
                                        },
                                        "maskSecurityInfo": {
                                          "description": "The value indicating whether to mask security information.",
                                          "type": "boolean"
                                        },
                                        "preserveInterchange": {
                                          "description": "The value indicating whether to preserve interchange.",
                                          "type": "boolean"
                                        },
                                        "suspendInterchangeOnError": {
                                          "description": "The value indicating whether to suspend interchange on error.",
                                          "type": "boolean"
                                        },
                                        "useDotAsDecimalSeparator": {
                                          "description": "The value indicating whether to use dot as decimal separator.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "schemaReferences": {
                                      "description": "The EDIFACT schema references.",
                                      "items": {
                                        "properties": {
                                          "associationAssignedCode": {
                                            "description": "The association assigned code.",
                                            "type": "string"
                                          },
                                          "messageId": {
                                            "description": "The message id.",
                                            "type": "string"
                                          },
                                          "messageRelease": {
                                            "description": "The message release version.",
                                            "type": "string"
                                          },
                                          "messageVersion": {
                                            "description": "The message version.",
                                            "type": "string"
                                          },
                                          "schemaName": {
                                            "description": "The schema name.",
                                            "type": "string"
                                          },
                                          "senderApplicationId": {
                                            "description": "The sender application id.",
                                            "type": "string"
                                          },
                                          "senderApplicationQualifier": {
                                            "description": "The sender application qualifier.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "validationOverrides": {
                                      "description": "The EDIFACT validation override settings.",
                                      "items": {
                                        "properties": {
                                          "allowLeadingAndTrailingSpacesAndZeroes": {
                                            "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                            "type": "boolean"
                                          },
                                          "enforceCharacterSet": {
                                            "description": "The value indicating whether to validate character Set.",
                                            "type": "boolean"
                                          },
                                          "messageId": {
                                            "description": "The message id on which the validation settings has to be applied.",
                                            "type": "string"
                                          },
                                          "trailingSeparatorPolicy": {
                                            "enum": [
                                              "NotSpecified",
                                              "NotAllowed",
                                              "Optional",
                                              "Mandatory"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "TrailingSeparatorPolicy"
                                            }
                                          },
                                          "trimLeadingAndTrailingSpacesAndZeroes": {
                                            "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                            "type": "boolean"
                                          },
                                          "validateEDITypes": {
                                            "description": "The value indicating whether to validate EDI types.",
                                            "type": "boolean"
                                          },
                                          "validateXSDTypes": {
                                            "description": "The value indicating whether to validate XSD types.",
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "validationSettings": {
                                      "properties": {
                                        "allowLeadingAndTrailingSpacesAndZeroes": {
                                          "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                          "type": "boolean"
                                        },
                                        "checkDuplicateGroupControlNumber": {
                                          "description": "The value indicating whether to check for duplicate group control number.",
                                          "type": "boolean"
                                        },
                                        "checkDuplicateInterchangeControlNumber": {
                                          "description": "The value indicating whether to check for duplicate interchange control number.",
                                          "type": "boolean"
                                        },
                                        "checkDuplicateTransactionSetControlNumber": {
                                          "description": "The value indicating whether to check for duplicate transaction set control number.",
                                          "type": "boolean"
                                        },
                                        "interchangeControlNumberValidityDays": {
                                          "description": "The validity period of interchange control number.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "trailingSeparatorPolicy": {
                                          "enum": [
                                            "NotSpecified",
                                            "NotAllowed",
                                            "Optional",
                                            "Mandatory"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "TrailingSeparatorPolicy"
                                          }
                                        },
                                        "trimLeadingAndTrailingSpacesAndZeroes": {
                                          "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                          "type": "boolean"
                                        },
                                        "validateCharacterSet": {
                                          "description": "The value indicating whether to validate character set in the message.",
                                          "type": "boolean"
                                        },
                                        "validateEDITypes": {
                                          "description": "The value indicating whether to Whether to validate EDI types.",
                                          "type": "boolean"
                                        },
                                        "validateXSDTypes": {
                                          "description": "The value indicating whether to Whether to validate XSD types.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "receiverBusinessIdentity": {
                                  "properties": {
                                    "Qualifier": {
                                      "description": "The business identity qualifier.",
                                      "type": "string"
                                    },
                                    "Value": {
                                      "description": "The business identity value.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "senderBusinessIdentity": {
                                  "properties": {
                                    "Qualifier": {
                                      "description": "The business identity qualifier.",
                                      "type": "string"
                                    },
                                    "Value": {
                                      "description": "The business identity value.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "X12": {
                          "properties": {
                            "receiveAgreement": {
                              "properties": {
                                "protocolSettings": {
                                  "properties": {
                                    "acknowledgementSettings": {
                                      "properties": {
                                        "acknowledgementControlNumberLowerBound": {
                                          "description": "The acknowledgement control number lower bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "acknowledgementControlNumberPrefix": {
                                          "description": "The acknowledgement control number prefix.",
                                          "type": "string"
                                        },
                                        "acknowledgementControlNumberSuffix": {
                                          "description": "The acknowledgement control number suffix.",
                                          "type": "string"
                                        },
                                        "acknowledgementControlNumberUpperBound": {
                                          "description": "The acknowledgement control number upper bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "batchFunctionalAcknowledgements": {
                                          "description": "The value indicating whether to batch functional acknowledgements.",
                                          "type": "boolean"
                                        },
                                        "batchImplementationAcknowledgements": {
                                          "description": "The value indicating whether to batch implementation acknowledgements.",
                                          "type": "boolean"
                                        },
                                        "batchTechnicalAcknowledgements": {
                                          "description": "The value indicating whether to batch the technical acknowledgements.",
                                          "type": "boolean"
                                        },
                                        "functionalAcknowledgementVersion": {
                                          "description": "The functional acknowledgement version.",
                                          "type": "string"
                                        },
                                        "implementationAcknowledgementVersion": {
                                          "description": "The implementation acknowledgement version.",
                                          "type": "string"
                                        },
                                        "needFunctionalAcknowledgement": {
                                          "description": "The value indicating whether functional acknowledgement is needed.",
                                          "type": "boolean"
                                        },
                                        "needImplementationAcknowledgement": {
                                          "description": "The value indicating whether implementation acknowledgement is needed.",
                                          "type": "boolean"
                                        },
                                        "needLoopForValidMessages": {
                                          "description": "The value indicating whether a loop is needed for valid messages.",
                                          "type": "boolean"
                                        },
                                        "needTechnicalAcknowledgement": {
                                          "description": "The value indicating whether technical acknowledgement is needed.",
                                          "type": "boolean"
                                        },
                                        "rolloverAcknowledgementControlNumber": {
                                          "description": "The value indicating whether to rollover acknowledgement control number.",
                                          "type": "boolean"
                                        },
                                        "sendSynchronousAcknowledgement": {
                                          "description": "The value indicating whether to send synchronous acknowledgement.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "envelopeOverrides": {
                                      "description": "The X12 envelope override settings.",
                                      "items": {
                                        "properties": {
                                          "dateFormat": {
                                            "enum": [
                                              "NotSpecified",
                                              "CCYYMMDD",
                                              "YYMMDD"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "X12DateFormat"
                                            }
                                          },
                                          "functionalIdentifierCode": {
                                            "description": "The functional identifier code.",
                                            "type": "string"
                                          },
                                          "headerVersion": {
                                            "description": "The header version.",
                                            "type": "string"
                                          },
                                          "messageId": {
                                            "description": "The message id on which this envelope settings has to be applied.",
                                            "type": "string"
                                          },
                                          "protocolVersion": {
                                            "description": "The protocol version on which this envelope settings has to be applied.",
                                            "type": "string"
                                          },
                                          "receiverApplicationId": {
                                            "description": "The receiver application id.",
                                            "type": "string"
                                          },
                                          "responsibleAgencyCode": {
                                            "description": "The responsible agency code.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "senderApplicationId": {
                                            "description": "The sender application id.",
                                            "type": "string"
                                          },
                                          "targetNamespace": {
                                            "description": "The target namespace on which this envelope settings has to be applied.",
                                            "type": "string"
                                          },
                                          "timeFormat": {
                                            "enum": [
                                              "NotSpecified",
                                              "HHMM",
                                              "HHMMSS",
                                              "HHMMSSdd",
                                              "HHMMSSd"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "X12TimeFormat"
                                            }
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "envelopeSettings": {
                                      "properties": {
                                        "controlStandardsId": {
                                          "description": "The controls standards id.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "controlVersionNumber": {
                                          "description": "The control version number.",
                                          "type": "string"
                                        },
                                        "enableDefaultGroupHeaders": {
                                          "description": "The value indicating whether to enable default group headers.",
                                          "type": "boolean"
                                        },
                                        "functionalGroupId": {
                                          "description": "The functional group id.",
                                          "type": "string"
                                        },
                                        "groupControlNumberLowerBound": {
                                          "description": "The group control number lower bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "groupControlNumberUpperBound": {
                                          "description": "The group control number upper bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "groupHeaderAgencyCode": {
                                          "description": "The group header agency code.",
                                          "type": "string"
                                        },
                                        "groupHeaderDateFormat": {
                                          "enum": [
                                            "NotSpecified",
                                            "CCYYMMDD",
                                            "YYMMDD"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "X12DateFormat"
                                          }
                                        },
                                        "groupHeaderTimeFormat": {
                                          "enum": [
                                            "NotSpecified",
                                            "HHMM",
                                            "HHMMSS",
                                            "HHMMSSdd",
                                            "HHMMSSd"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "X12TimeFormat"
                                          }
                                        },
                                        "groupHeaderVersion": {
                                          "description": "The group header version.",
                                          "type": "string"
                                        },
                                        "interchangeControlNumberLowerBound": {
                                          "description": "The interchange  control number lower bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "interchangeControlNumberUpperBound": {
                                          "description": "The interchange  control number upper bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "overwriteExistingTransactionSetControlNumber": {
                                          "description": "The value indicating whether to overwrite existing transaction set control number.",
                                          "type": "boolean"
                                        },
                                        "receiverApplicationId": {
                                          "description": "The receiver application id.",
                                          "type": "string"
                                        },
                                        "rolloverGroupControlNumber": {
                                          "description": "The value indicating whether to rollover group control number.",
                                          "type": "boolean"
                                        },
                                        "rolloverInterchangeControlNumber": {
                                          "description": "The value indicating whether to rollover interchange control number.",
                                          "type": "boolean"
                                        },
                                        "rolloverTransactionSetControlNumber": {
                                          "description": "The value indicating whether to rollover transaction set control number.",
                                          "type": "boolean"
                                        },
                                        "senderApplicationId": {
                                          "description": "The sender application id.",
                                          "type": "string"
                                        },
                                        "transactionSetControlNumberLowerBound": {
                                          "description": "The transaction set control number lower bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "transactionSetControlNumberPrefix": {
                                          "description": "The transaction set control number prefix.",
                                          "type": "string"
                                        },
                                        "transactionSetControlNumberSuffix": {
                                          "description": "The transaction set control number suffix.",
                                          "type": "string"
                                        },
                                        "transactionSetControlNumberUpperBound": {
                                          "description": "The transaction set control number upper bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "usageIndicator": {
                                          "enum": [
                                            "NotSpecified",
                                            "Test",
                                            "Information",
                                            "Production"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "UsageIndicator"
                                          }
                                        },
                                        "useControlStandardsIdAsRepetitionCharacter": {
                                          "description": "The value indicating whether to use control standards id as repetition character.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "framingSettings": {
                                      "properties": {
                                        "characterSet": {
                                          "enum": [
                                            "NotSpecified",
                                            "Basic",
                                            "Extended",
                                            "UTF8"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "X12CharacterSet"
                                          }
                                        },
                                        "componentSeparator": {
                                          "description": "The component separator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "dataElementSeparator": {
                                          "description": "The data element separator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "replaceCharacter": {
                                          "description": "The replacement character.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "replaceSeparatorsInPayload": {
                                          "description": "The value indicating whether to replace separators in payload.",
                                          "type": "boolean"
                                        },
                                        "segmentTerminator": {
                                          "description": "The segment terminator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "segmentTerminatorSuffix": {
                                          "enum": [
                                            "NotSpecified",
                                            "None",
                                            "CR",
                                            "LF",
                                            "CRLF"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "SegmentTerminatorSuffix"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "messageFilter": {
                                      "properties": {
                                        "messageFilterType": {
                                          "enum": [
                                            "NotSpecified",
                                            "Include",
                                            "Exclude"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "MessageFilterType"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "messageFilterList": {
                                      "description": "The X12 message filter list.",
                                      "items": {
                                        "properties": {
                                          "messageId": {
                                            "description": "The message id.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "processingSettings": {
                                      "properties": {
                                        "convertImpliedDecimal": {
                                          "description": "The value indicating whether to convert numerical type to implied decimal.",
                                          "type": "boolean"
                                        },
                                        "createEmptyXmlTagsForTrailingSeparators": {
                                          "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                          "type": "boolean"
                                        },
                                        "maskSecurityInfo": {
                                          "description": "The value indicating whether to mask security information.",
                                          "type": "boolean"
                                        },
                                        "preserveInterchange": {
                                          "description": "The value indicating whether to preserve interchange.",
                                          "type": "boolean"
                                        },
                                        "suspendInterchangeOnError": {
                                          "description": "The value indicating whether to suspend interchange on error.",
                                          "type": "boolean"
                                        },
                                        "useDotAsDecimalSeparator": {
                                          "description": "The value indicating whether to use dot as decimal separator.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "schemaReferences": {
                                      "description": "The X12 schema references.",
                                      "items": {
                                        "properties": {
                                          "messageId": {
                                            "description": "The message id.",
                                            "type": "string"
                                          },
                                          "schemaName": {
                                            "description": "The schema name.",
                                            "type": "string"
                                          },
                                          "schemaVersion": {
                                            "description": "The schema version.",
                                            "type": "string"
                                          },
                                          "senderApplicationId": {
                                            "description": "The sender application id.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "securitySettings": {
                                      "properties": {
                                        "authorizationQualifier": {
                                          "description": "The authorization qualifier.",
                                          "type": "string"
                                        },
                                        "authorizationValue": {
                                          "description": "The authorization value.",
                                          "type": "string"
                                        },
                                        "passwordValue": {
                                          "description": "The password value.",
                                          "type": "string"
                                        },
                                        "securityQualifier": {
                                          "description": "The security qualifier.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "validationOverrides": {
                                      "description": "The X12 validation override settings.",
                                      "items": {
                                        "properties": {
                                          "allowLeadingAndTrailingSpacesAndZeroes": {
                                            "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                            "type": "boolean"
                                          },
                                          "messageId": {
                                            "description": "The message id on which the validation settings has to be applied.",
                                            "type": "string"
                                          },
                                          "trailingSeparatorPolicy": {
                                            "enum": [
                                              "NotSpecified",
                                              "NotAllowed",
                                              "Optional",
                                              "Mandatory"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "TrailingSeparatorPolicy"
                                            }
                                          },
                                          "trimLeadingAndTrailingSpacesAndZeroes": {
                                            "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                            "type": "boolean"
                                          },
                                          "validateCharacterSet": {
                                            "description": "The value indicating whether to validate character Set.",
                                            "type": "boolean"
                                          },
                                          "validateEDITypes": {
                                            "description": "The value indicating whether to validate EDI types.",
                                            "type": "boolean"
                                          },
                                          "validateXSDTypes": {
                                            "description": "The value indicating whether to validate XSD types.",
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "validationSettings": {
                                      "properties": {
                                        "allowLeadingAndTrailingSpacesAndZeroes": {
                                          "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                          "type": "boolean"
                                        },
                                        "checkDuplicateGroupControlNumber": {
                                          "description": "The value indicating whether to check for duplicate group control number.",
                                          "type": "boolean"
                                        },
                                        "checkDuplicateInterchangeControlNumber": {
                                          "description": "The value indicating whether to check for duplicate interchange control number.",
                                          "type": "boolean"
                                        },
                                        "checkDuplicateTransactionSetControlNumber": {
                                          "description": "The value indicating whether to check for duplicate transaction set control number.",
                                          "type": "boolean"
                                        },
                                        "interchangeControlNumberValidityDays": {
                                          "description": "The validity period of interchange control number.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "trailingSeparatorPolicy": {
                                          "enum": [
                                            "NotSpecified",
                                            "NotAllowed",
                                            "Optional",
                                            "Mandatory"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "TrailingSeparatorPolicy"
                                          }
                                        },
                                        "trimLeadingAndTrailingSpacesAndZeroes": {
                                          "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                          "type": "boolean"
                                        },
                                        "validateCharacterSet": {
                                          "description": "The value indicating whether to validate character set in the message.",
                                          "type": "boolean"
                                        },
                                        "validateEDITypes": {
                                          "description": "The value indicating whether to Whether to validate EDI types.",
                                          "type": "boolean"
                                        },
                                        "validateXSDTypes": {
                                          "description": "The value indicating whether to Whether to validate XSD types.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "x12DelimiterOverrides": {
                                      "description": "The X12 delimiter override settings.",
                                      "items": {
                                        "properties": {
                                          "componentSeparator": {
                                            "description": "The component separator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "dataElementSeparator": {
                                            "description": "The data element separator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "messageId": {
                                            "description": "The message id.",
                                            "type": "string"
                                          },
                                          "protocolVersion": {
                                            "description": "The protocol version.",
                                            "type": "string"
                                          },
                                          "replaceCharacter": {
                                            "description": "The replacement character.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "replaceSeparatorsInPayload": {
                                            "description": "The value indicating whether to replace separators in payload.",
                                            "type": "boolean"
                                          },
                                          "segmentTerminator": {
                                            "description": "The segment terminator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "segmentTerminatorSuffix": {
                                            "enum": [
                                              "NotSpecified",
                                              "None",
                                              "CR",
                                              "LF",
                                              "CRLF"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "SegmentTerminatorSuffix"
                                            }
                                          },
                                          "targetNamespace": {
                                            "description": "The target namespace on which this delimiter settings has to be applied.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "receiverBusinessIdentity": {
                                  "properties": {
                                    "Qualifier": {
                                      "description": "The business identity qualifier.",
                                      "type": "string"
                                    },
                                    "Value": {
                                      "description": "The business identity value.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "senderBusinessIdentity": {
                                  "properties": {
                                    "Qualifier": {
                                      "description": "The business identity qualifier.",
                                      "type": "string"
                                    },
                                    "Value": {
                                      "description": "The business identity value.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "sendAgreement": {
                              "properties": {
                                "protocolSettings": {
                                  "properties": {
                                    "acknowledgementSettings": {
                                      "properties": {
                                        "acknowledgementControlNumberLowerBound": {
                                          "description": "The acknowledgement control number lower bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "acknowledgementControlNumberPrefix": {
                                          "description": "The acknowledgement control number prefix.",
                                          "type": "string"
                                        },
                                        "acknowledgementControlNumberSuffix": {
                                          "description": "The acknowledgement control number suffix.",
                                          "type": "string"
                                        },
                                        "acknowledgementControlNumberUpperBound": {
                                          "description": "The acknowledgement control number upper bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "batchFunctionalAcknowledgements": {
                                          "description": "The value indicating whether to batch functional acknowledgements.",
                                          "type": "boolean"
                                        },
                                        "batchImplementationAcknowledgements": {
                                          "description": "The value indicating whether to batch implementation acknowledgements.",
                                          "type": "boolean"
                                        },
                                        "batchTechnicalAcknowledgements": {
                                          "description": "The value indicating whether to batch the technical acknowledgements.",
                                          "type": "boolean"
                                        },
                                        "functionalAcknowledgementVersion": {
                                          "description": "The functional acknowledgement version.",
                                          "type": "string"
                                        },
                                        "implementationAcknowledgementVersion": {
                                          "description": "The implementation acknowledgement version.",
                                          "type": "string"
                                        },
                                        "needFunctionalAcknowledgement": {
                                          "description": "The value indicating whether functional acknowledgement is needed.",
                                          "type": "boolean"
                                        },
                                        "needImplementationAcknowledgement": {
                                          "description": "The value indicating whether implementation acknowledgement is needed.",
                                          "type": "boolean"
                                        },
                                        "needLoopForValidMessages": {
                                          "description": "The value indicating whether a loop is needed for valid messages.",
                                          "type": "boolean"
                                        },
                                        "needTechnicalAcknowledgement": {
                                          "description": "The value indicating whether technical acknowledgement is needed.",
                                          "type": "boolean"
                                        },
                                        "rolloverAcknowledgementControlNumber": {
                                          "description": "The value indicating whether to rollover acknowledgement control number.",
                                          "type": "boolean"
                                        },
                                        "sendSynchronousAcknowledgement": {
                                          "description": "The value indicating whether to send synchronous acknowledgement.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "envelopeOverrides": {
                                      "description": "The X12 envelope override settings.",
                                      "items": {
                                        "properties": {
                                          "dateFormat": {
                                            "enum": [
                                              "NotSpecified",
                                              "CCYYMMDD",
                                              "YYMMDD"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "X12DateFormat"
                                            }
                                          },
                                          "functionalIdentifierCode": {
                                            "description": "The functional identifier code.",
                                            "type": "string"
                                          },
                                          "headerVersion": {
                                            "description": "The header version.",
                                            "type": "string"
                                          },
                                          "messageId": {
                                            "description": "The message id on which this envelope settings has to be applied.",
                                            "type": "string"
                                          },
                                          "protocolVersion": {
                                            "description": "The protocol version on which this envelope settings has to be applied.",
                                            "type": "string"
                                          },
                                          "receiverApplicationId": {
                                            "description": "The receiver application id.",
                                            "type": "string"
                                          },
                                          "responsibleAgencyCode": {
                                            "description": "The responsible agency code.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "senderApplicationId": {
                                            "description": "The sender application id.",
                                            "type": "string"
                                          },
                                          "targetNamespace": {
                                            "description": "The target namespace on which this envelope settings has to be applied.",
                                            "type": "string"
                                          },
                                          "timeFormat": {
                                            "enum": [
                                              "NotSpecified",
                                              "HHMM",
                                              "HHMMSS",
                                              "HHMMSSdd",
                                              "HHMMSSd"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "X12TimeFormat"
                                            }
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "envelopeSettings": {
                                      "properties": {
                                        "controlStandardsId": {
                                          "description": "The controls standards id.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "controlVersionNumber": {
                                          "description": "The control version number.",
                                          "type": "string"
                                        },
                                        "enableDefaultGroupHeaders": {
                                          "description": "The value indicating whether to enable default group headers.",
                                          "type": "boolean"
                                        },
                                        "functionalGroupId": {
                                          "description": "The functional group id.",
                                          "type": "string"
                                        },
                                        "groupControlNumberLowerBound": {
                                          "description": "The group control number lower bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "groupControlNumberUpperBound": {
                                          "description": "The group control number upper bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "groupHeaderAgencyCode": {
                                          "description": "The group header agency code.",
                                          "type": "string"
                                        },
                                        "groupHeaderDateFormat": {
                                          "enum": [
                                            "NotSpecified",
                                            "CCYYMMDD",
                                            "YYMMDD"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "X12DateFormat"
                                          }
                                        },
                                        "groupHeaderTimeFormat": {
                                          "enum": [
                                            "NotSpecified",
                                            "HHMM",
                                            "HHMMSS",
                                            "HHMMSSdd",
                                            "HHMMSSd"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "X12TimeFormat"
                                          }
                                        },
                                        "groupHeaderVersion": {
                                          "description": "The group header version.",
                                          "type": "string"
                                        },
                                        "interchangeControlNumberLowerBound": {
                                          "description": "The interchange  control number lower bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "interchangeControlNumberUpperBound": {
                                          "description": "The interchange  control number upper bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "overwriteExistingTransactionSetControlNumber": {
                                          "description": "The value indicating whether to overwrite existing transaction set control number.",
                                          "type": "boolean"
                                        },
                                        "receiverApplicationId": {
                                          "description": "The receiver application id.",
                                          "type": "string"
                                        },
                                        "rolloverGroupControlNumber": {
                                          "description": "The value indicating whether to rollover group control number.",
                                          "type": "boolean"
                                        },
                                        "rolloverInterchangeControlNumber": {
                                          "description": "The value indicating whether to rollover interchange control number.",
                                          "type": "boolean"
                                        },
                                        "rolloverTransactionSetControlNumber": {
                                          "description": "The value indicating whether to rollover transaction set control number.",
                                          "type": "boolean"
                                        },
                                        "senderApplicationId": {
                                          "description": "The sender application id.",
                                          "type": "string"
                                        },
                                        "transactionSetControlNumberLowerBound": {
                                          "description": "The transaction set control number lower bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "transactionSetControlNumberPrefix": {
                                          "description": "The transaction set control number prefix.",
                                          "type": "string"
                                        },
                                        "transactionSetControlNumberSuffix": {
                                          "description": "The transaction set control number suffix.",
                                          "type": "string"
                                        },
                                        "transactionSetControlNumberUpperBound": {
                                          "description": "The transaction set control number upper bound.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "usageIndicator": {
                                          "enum": [
                                            "NotSpecified",
                                            "Test",
                                            "Information",
                                            "Production"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "UsageIndicator"
                                          }
                                        },
                                        "useControlStandardsIdAsRepetitionCharacter": {
                                          "description": "The value indicating whether to use control standards id as repetition character.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "framingSettings": {
                                      "properties": {
                                        "characterSet": {
                                          "enum": [
                                            "NotSpecified",
                                            "Basic",
                                            "Extended",
                                            "UTF8"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "X12CharacterSet"
                                          }
                                        },
                                        "componentSeparator": {
                                          "description": "The component separator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "dataElementSeparator": {
                                          "description": "The data element separator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "replaceCharacter": {
                                          "description": "The replacement character.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "replaceSeparatorsInPayload": {
                                          "description": "The value indicating whether to replace separators in payload.",
                                          "type": "boolean"
                                        },
                                        "segmentTerminator": {
                                          "description": "The segment terminator.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "segmentTerminatorSuffix": {
                                          "enum": [
                                            "NotSpecified",
                                            "None",
                                            "CR",
                                            "LF",
                                            "CRLF"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "SegmentTerminatorSuffix"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "messageFilter": {
                                      "properties": {
                                        "messageFilterType": {
                                          "enum": [
                                            "NotSpecified",
                                            "Include",
                                            "Exclude"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "MessageFilterType"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "messageFilterList": {
                                      "description": "The X12 message filter list.",
                                      "items": {
                                        "properties": {
                                          "messageId": {
                                            "description": "The message id.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "processingSettings": {
                                      "properties": {
                                        "convertImpliedDecimal": {
                                          "description": "The value indicating whether to convert numerical type to implied decimal.",
                                          "type": "boolean"
                                        },
                                        "createEmptyXmlTagsForTrailingSeparators": {
                                          "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                          "type": "boolean"
                                        },
                                        "maskSecurityInfo": {
                                          "description": "The value indicating whether to mask security information.",
                                          "type": "boolean"
                                        },
                                        "preserveInterchange": {
                                          "description": "The value indicating whether to preserve interchange.",
                                          "type": "boolean"
                                        },
                                        "suspendInterchangeOnError": {
                                          "description": "The value indicating whether to suspend interchange on error.",
                                          "type": "boolean"
                                        },
                                        "useDotAsDecimalSeparator": {
                                          "description": "The value indicating whether to use dot as decimal separator.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "schemaReferences": {
                                      "description": "The X12 schema references.",
                                      "items": {
                                        "properties": {
                                          "messageId": {
                                            "description": "The message id.",
                                            "type": "string"
                                          },
                                          "schemaName": {
                                            "description": "The schema name.",
                                            "type": "string"
                                          },
                                          "schemaVersion": {
                                            "description": "The schema version.",
                                            "type": "string"
                                          },
                                          "senderApplicationId": {
                                            "description": "The sender application id.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "securitySettings": {
                                      "properties": {
                                        "authorizationQualifier": {
                                          "description": "The authorization qualifier.",
                                          "type": "string"
                                        },
                                        "authorizationValue": {
                                          "description": "The authorization value.",
                                          "type": "string"
                                        },
                                        "passwordValue": {
                                          "description": "The password value.",
                                          "type": "string"
                                        },
                                        "securityQualifier": {
                                          "description": "The security qualifier.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "validationOverrides": {
                                      "description": "The X12 validation override settings.",
                                      "items": {
                                        "properties": {
                                          "allowLeadingAndTrailingSpacesAndZeroes": {
                                            "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                            "type": "boolean"
                                          },
                                          "messageId": {
                                            "description": "The message id on which the validation settings has to be applied.",
                                            "type": "string"
                                          },
                                          "trailingSeparatorPolicy": {
                                            "enum": [
                                              "NotSpecified",
                                              "NotAllowed",
                                              "Optional",
                                              "Mandatory"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "TrailingSeparatorPolicy"
                                            }
                                          },
                                          "trimLeadingAndTrailingSpacesAndZeroes": {
                                            "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                            "type": "boolean"
                                          },
                                          "validateCharacterSet": {
                                            "description": "The value indicating whether to validate character Set.",
                                            "type": "boolean"
                                          },
                                          "validateEDITypes": {
                                            "description": "The value indicating whether to validate EDI types.",
                                            "type": "boolean"
                                          },
                                          "validateXSDTypes": {
                                            "description": "The value indicating whether to validate XSD types.",
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "validationSettings": {
                                      "properties": {
                                        "allowLeadingAndTrailingSpacesAndZeroes": {
                                          "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                          "type": "boolean"
                                        },
                                        "checkDuplicateGroupControlNumber": {
                                          "description": "The value indicating whether to check for duplicate group control number.",
                                          "type": "boolean"
                                        },
                                        "checkDuplicateInterchangeControlNumber": {
                                          "description": "The value indicating whether to check for duplicate interchange control number.",
                                          "type": "boolean"
                                        },
                                        "checkDuplicateTransactionSetControlNumber": {
                                          "description": "The value indicating whether to check for duplicate transaction set control number.",
                                          "type": "boolean"
                                        },
                                        "interchangeControlNumberValidityDays": {
                                          "description": "The validity period of interchange control number.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "trailingSeparatorPolicy": {
                                          "enum": [
                                            "NotSpecified",
                                            "NotAllowed",
                                            "Optional",
                                            "Mandatory"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": false,
                                            "name": "TrailingSeparatorPolicy"
                                          }
                                        },
                                        "trimLeadingAndTrailingSpacesAndZeroes": {
                                          "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                          "type": "boolean"
                                        },
                                        "validateCharacterSet": {
                                          "description": "The value indicating whether to validate character set in the message.",
                                          "type": "boolean"
                                        },
                                        "validateEDITypes": {
                                          "description": "The value indicating whether to Whether to validate EDI types.",
                                          "type": "boolean"
                                        },
                                        "validateXSDTypes": {
                                          "description": "The value indicating whether to Whether to validate XSD types.",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "x12DelimiterOverrides": {
                                      "description": "The X12 delimiter override settings.",
                                      "items": {
                                        "properties": {
                                          "componentSeparator": {
                                            "description": "The component separator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "dataElementSeparator": {
                                            "description": "The data element separator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "messageId": {
                                            "description": "The message id.",
                                            "type": "string"
                                          },
                                          "protocolVersion": {
                                            "description": "The protocol version.",
                                            "type": "string"
                                          },
                                          "replaceCharacter": {
                                            "description": "The replacement character.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "replaceSeparatorsInPayload": {
                                            "description": "The value indicating whether to replace separators in payload.",
                                            "type": "boolean"
                                          },
                                          "segmentTerminator": {
                                            "description": "The segment terminator.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "segmentTerminatorSuffix": {
                                            "enum": [
                                              "NotSpecified",
                                              "None",
                                              "CR",
                                              "LF",
                                              "CRLF"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "SegmentTerminatorSuffix"
                                            }
                                          },
                                          "targetNamespace": {
                                            "description": "The target namespace on which this delimiter settings has to be applied.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "receiverBusinessIdentity": {
                                  "properties": {
                                    "Qualifier": {
                                      "description": "The business identity qualifier.",
                                      "type": "string"
                                    },
                                    "Value": {
                                      "description": "The business identity value.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "senderBusinessIdentity": {
                                  "properties": {
                                    "Qualifier": {
                                      "description": "The business identity qualifier.",
                                      "type": "string"
                                    },
                                    "Value": {
                                      "description": "The business identity value.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "createdTime": {
                      "description": "The created time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "guestIdentity": {
                      "properties": {
                        "Qualifier": {
                          "description": "The business identity qualifier.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "The business identity value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "guestPartner": {
                      "description": "The guest partner.",
                      "type": "string"
                    },
                    "hostIdentity": {
                      "properties": {
                        "Qualifier": {
                          "description": "The business identity qualifier.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "The business identity value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "hostPartner": {
                      "description": "The host partner.",
                      "type": "string"
                    },
                    "metadata": {
                      "description": "The metadata.",
                      "properties": {},
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountAgreement"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "agreementType": {
                  "enum": [
                    "NotSpecified",
                    "AS2",
                    "X12",
                    "Edifact"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "AgreementType"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountAgreementFilter"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "nextLink": {
                  "description": "The URL to get the next set of results.",
                  "type": "string"
                },
                "value": {
                  "description": "The list of integration account agreements.",
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "id": {
                            "description": "The resource id.",
                            "type": "string"
                          },
                          "location": {
                            "description": "The resource location.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The resource name.",
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "The resource tags.",
                            "type": "object"
                          },
                          "type": {
                            "description": "The resource type.",
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "properties": {
                      "properties": {
                        "properties": {
                          "agreementType": {
                            "enum": [
                              "NotSpecified",
                              "AS2",
                              "X12",
                              "Edifact"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "AgreementType"
                            }
                          },
                          "changedTime": {
                            "description": "The changed time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "content": {
                            "properties": {
                              "AS2": {
                                "properties": {
                                  "receiveAgreement": {
                                    "properties": {
                                      "protocolSettings": {
                                        "properties": {
                                          "acknowledgementConnectionSettings": {
                                            "properties": {
                                              "ignoreCertificateNameMismatch": {
                                                "description": "The value indicating whether to ignore mismatch in certificate name.",
                                                "type": "boolean"
                                              },
                                              "keepHttpConnectionAlive": {
                                                "description": "The value indicating whether to keep the connection alive.",
                                                "type": "boolean"
                                              },
                                              "supportHttpStatusCodeContinue": {
                                                "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                                "type": "boolean"
                                              },
                                              "unfoldHttpHeaders": {
                                                "description": "The value indicating whether to unfold the HTTP headers.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "envelopeSettings": {
                                            "properties": {
                                              "AutogenerateFileName": {
                                                "description": "The value indicating whether to auto generate file name.",
                                                "type": "boolean"
                                              },
                                              "SuspendMessageOnFileNameGenerationError": {
                                                "description": "The value indicating whether to suspend message on file name generation error.",
                                                "type": "boolean"
                                              },
                                              "fileNameTemplate": {
                                                "description": "The template for file name.",
                                                "type": "string"
                                              },
                                              "messageContentType": {
                                                "description": "The message content type.",
                                                "type": "string"
                                              },
                                              "transmitFileNameInMimeHeader": {
                                                "description": "The value indicating whether to transmit file name in mime header.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "errorSettings": {
                                            "properties": {
                                              "ResendIfMdnNotReceived": {
                                                "description": "The value indicating whether to resend message If MDN is not received.",
                                                "type": "boolean"
                                              },
                                              "SuspendDuplicateMessage": {
                                                "description": "The value indicating whether to suspend duplicate message.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "mdnSettings": {
                                            "properties": {
                                              "dispositionNotificationTo": {
                                                "description": "The disposition notification to header value.",
                                                "type": "string"
                                              },
                                              "mdnText": {
                                                "description": "The MDN text.",
                                                "type": "string"
                                              },
                                              "micHashingAlgorithm": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "None",
                                                  "SHA2256",
                                                  "SHA2384",
                                                  "SHA2512"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "HashingAlgorithm"
                                                }
                                              },
                                              "needMdn": {
                                                "description": "The value indicating whether to send or request a MDN.",
                                                "type": "boolean"
                                              },
                                              "receiptDeliveryUrl": {
                                                "description": "The receipt delivery URL.",
                                                "type": "string"
                                              },
                                              "sendInboundMdnToMessageBox": {
                                                "description": "The value indicating whether to send inbound MDN to message box.",
                                                "type": "boolean"
                                              },
                                              "sendMdnAsynchronously": {
                                                "description": "The value indicating whether to send the asynchronous MDN.",
                                                "type": "boolean"
                                              },
                                              "signMdn": {
                                                "description": "The value indicating whether the MDN needs to be signed or not.",
                                                "type": "boolean"
                                              },
                                              "signOutboundMdnIfOptional": {
                                                "description": "The value indicating whether to sign the outbound MDN if optional.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "messageConnectionSettings": {
                                            "properties": {
                                              "ignoreCertificateNameMismatch": {
                                                "description": "The value indicating whether to ignore mismatch in certificate name.",
                                                "type": "boolean"
                                              },
                                              "keepHttpConnectionAlive": {
                                                "description": "The value indicating whether to keep the connection alive.",
                                                "type": "boolean"
                                              },
                                              "supportHttpStatusCodeContinue": {
                                                "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                                "type": "boolean"
                                              },
                                              "unfoldHttpHeaders": {
                                                "description": "The value indicating whether to unfold the HTTP headers.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "securitySettings": {
                                            "properties": {
                                              "enableNrrForInboundDecodedMessages": {
                                                "description": "The value indicating whether to enable NRR for inbound decoded messages.",
                                                "type": "boolean"
                                              },
                                              "enableNrrForInboundEncodedMessages": {
                                                "description": "The value indicating whether to enable NRR for inbound encoded messages.",
                                                "type": "boolean"
                                              },
                                              "enableNrrForInboundMdn": {
                                                "description": "The value indicating whether to enable NRR for inbound MDN.",
                                                "type": "boolean"
                                              },
                                              "enableNrrForOutboundDecodedMessages": {
                                                "description": "The value indicating whether to enable NRR for outbound decoded messages.",
                                                "type": "boolean"
                                              },
                                              "enableNrrForOutboundEncodedMessages": {
                                                "description": "The value indicating whether to enable NRR for outbound encoded messages.",
                                                "type": "boolean"
                                              },
                                              "enableNrrForOutboundMdn": {
                                                "description": "The value indicating whether to enable NRR for outbound MDN.",
                                                "type": "boolean"
                                              },
                                              "encryptionCertificateName": {
                                                "description": "The name of the encryption certificate.",
                                                "type": "string"
                                              },
                                              "overrideGroupSigningCertificate": {
                                                "description": "The value indicating whether to send or request a MDN.",
                                                "type": "boolean"
                                              },
                                              "signingCertificateName": {
                                                "description": "The name of the signing certificate.",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "validationSettings": {
                                            "properties": {
                                              "checkCertificateRevocationListOnReceive": {
                                                "description": "The value indicating whether to check for certificate revocation list on receive.",
                                                "type": "boolean"
                                              },
                                              "checkCertificateRevocationListOnSend": {
                                                "description": "The value indicating whether to check for certificate revocation list on send.",
                                                "type": "boolean"
                                              },
                                              "checkDuplicateMessage": {
                                                "description": "The value indicating whether to check for duplicate message.",
                                                "type": "boolean"
                                              },
                                              "compressMessage": {
                                                "description": "The value indicating whether the message has to be compressed.",
                                                "type": "boolean"
                                              },
                                              "encryptMessage": {
                                                "description": "The value indicating whether the message has to be encrypted.",
                                                "type": "boolean"
                                              },
                                              "encryptionAlgorithm": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "None",
                                                  "DES3",
                                                  "RC2",
                                                  "AES128",
                                                  "AES192",
                                                  "AES256"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "EncryptionAlgorithm"
                                                }
                                              },
                                              "interchangeDuplicatesValidityDays": {
                                                "description": "The number of days to look back for duplicate interchange.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "overrideMessageProperties": {
                                                "description": "The value indicating whether to override incoming message properties with those in agreement.",
                                                "type": "boolean"
                                              },
                                              "signMessage": {
                                                "description": "The value indicating whether the message has to be signed.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "receiverBusinessIdentity": {
                                        "properties": {
                                          "Qualifier": {
                                            "description": "The business identity qualifier.",
                                            "type": "string"
                                          },
                                          "Value": {
                                            "description": "The business identity value.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "senderBusinessIdentity": {
                                        "properties": {
                                          "Qualifier": {
                                            "description": "The business identity qualifier.",
                                            "type": "string"
                                          },
                                          "Value": {
                                            "description": "The business identity value.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "sendAgreement": {
                                    "properties": {
                                      "protocolSettings": {
                                        "properties": {
                                          "acknowledgementConnectionSettings": {
                                            "properties": {
                                              "ignoreCertificateNameMismatch": {
                                                "description": "The value indicating whether to ignore mismatch in certificate name.",
                                                "type": "boolean"
                                              },
                                              "keepHttpConnectionAlive": {
                                                "description": "The value indicating whether to keep the connection alive.",
                                                "type": "boolean"
                                              },
                                              "supportHttpStatusCodeContinue": {
                                                "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                                "type": "boolean"
                                              },
                                              "unfoldHttpHeaders": {
                                                "description": "The value indicating whether to unfold the HTTP headers.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "envelopeSettings": {
                                            "properties": {
                                              "AutogenerateFileName": {
                                                "description": "The value indicating whether to auto generate file name.",
                                                "type": "boolean"
                                              },
                                              "SuspendMessageOnFileNameGenerationError": {
                                                "description": "The value indicating whether to suspend message on file name generation error.",
                                                "type": "boolean"
                                              },
                                              "fileNameTemplate": {
                                                "description": "The template for file name.",
                                                "type": "string"
                                              },
                                              "messageContentType": {
                                                "description": "The message content type.",
                                                "type": "string"
                                              },
                                              "transmitFileNameInMimeHeader": {
                                                "description": "The value indicating whether to transmit file name in mime header.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "errorSettings": {
                                            "properties": {
                                              "ResendIfMdnNotReceived": {
                                                "description": "The value indicating whether to resend message If MDN is not received.",
                                                "type": "boolean"
                                              },
                                              "SuspendDuplicateMessage": {
                                                "description": "The value indicating whether to suspend duplicate message.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "mdnSettings": {
                                            "properties": {
                                              "dispositionNotificationTo": {
                                                "description": "The disposition notification to header value.",
                                                "type": "string"
                                              },
                                              "mdnText": {
                                                "description": "The MDN text.",
                                                "type": "string"
                                              },
                                              "micHashingAlgorithm": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "None",
                                                  "SHA2256",
                                                  "SHA2384",
                                                  "SHA2512"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "HashingAlgorithm"
                                                }
                                              },
                                              "needMdn": {
                                                "description": "The value indicating whether to send or request a MDN.",
                                                "type": "boolean"
                                              },
                                              "receiptDeliveryUrl": {
                                                "description": "The receipt delivery URL.",
                                                "type": "string"
                                              },
                                              "sendInboundMdnToMessageBox": {
                                                "description": "The value indicating whether to send inbound MDN to message box.",
                                                "type": "boolean"
                                              },
                                              "sendMdnAsynchronously": {
                                                "description": "The value indicating whether to send the asynchronous MDN.",
                                                "type": "boolean"
                                              },
                                              "signMdn": {
                                                "description": "The value indicating whether the MDN needs to be signed or not.",
                                                "type": "boolean"
                                              },
                                              "signOutboundMdnIfOptional": {
                                                "description": "The value indicating whether to sign the outbound MDN if optional.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "messageConnectionSettings": {
                                            "properties": {
                                              "ignoreCertificateNameMismatch": {
                                                "description": "The value indicating whether to ignore mismatch in certificate name.",
                                                "type": "boolean"
                                              },
                                              "keepHttpConnectionAlive": {
                                                "description": "The value indicating whether to keep the connection alive.",
                                                "type": "boolean"
                                              },
                                              "supportHttpStatusCodeContinue": {
                                                "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                                "type": "boolean"
                                              },
                                              "unfoldHttpHeaders": {
                                                "description": "The value indicating whether to unfold the HTTP headers.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "securitySettings": {
                                            "properties": {
                                              "enableNrrForInboundDecodedMessages": {
                                                "description": "The value indicating whether to enable NRR for inbound decoded messages.",
                                                "type": "boolean"
                                              },
                                              "enableNrrForInboundEncodedMessages": {
                                                "description": "The value indicating whether to enable NRR for inbound encoded messages.",
                                                "type": "boolean"
                                              },
                                              "enableNrrForInboundMdn": {
                                                "description": "The value indicating whether to enable NRR for inbound MDN.",
                                                "type": "boolean"
                                              },
                                              "enableNrrForOutboundDecodedMessages": {
                                                "description": "The value indicating whether to enable NRR for outbound decoded messages.",
                                                "type": "boolean"
                                              },
                                              "enableNrrForOutboundEncodedMessages": {
                                                "description": "The value indicating whether to enable NRR for outbound encoded messages.",
                                                "type": "boolean"
                                              },
                                              "enableNrrForOutboundMdn": {
                                                "description": "The value indicating whether to enable NRR for outbound MDN.",
                                                "type": "boolean"
                                              },
                                              "encryptionCertificateName": {
                                                "description": "The name of the encryption certificate.",
                                                "type": "string"
                                              },
                                              "overrideGroupSigningCertificate": {
                                                "description": "The value indicating whether to send or request a MDN.",
                                                "type": "boolean"
                                              },
                                              "signingCertificateName": {
                                                "description": "The name of the signing certificate.",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "validationSettings": {
                                            "properties": {
                                              "checkCertificateRevocationListOnReceive": {
                                                "description": "The value indicating whether to check for certificate revocation list on receive.",
                                                "type": "boolean"
                                              },
                                              "checkCertificateRevocationListOnSend": {
                                                "description": "The value indicating whether to check for certificate revocation list on send.",
                                                "type": "boolean"
                                              },
                                              "checkDuplicateMessage": {
                                                "description": "The value indicating whether to check for duplicate message.",
                                                "type": "boolean"
                                              },
                                              "compressMessage": {
                                                "description": "The value indicating whether the message has to be compressed.",
                                                "type": "boolean"
                                              },
                                              "encryptMessage": {
                                                "description": "The value indicating whether the message has to be encrypted.",
                                                "type": "boolean"
                                              },
                                              "encryptionAlgorithm": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "None",
                                                  "DES3",
                                                  "RC2",
                                                  "AES128",
                                                  "AES192",
                                                  "AES256"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "EncryptionAlgorithm"
                                                }
                                              },
                                              "interchangeDuplicatesValidityDays": {
                                                "description": "The number of days to look back for duplicate interchange.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "overrideMessageProperties": {
                                                "description": "The value indicating whether to override incoming message properties with those in agreement.",
                                                "type": "boolean"
                                              },
                                              "signMessage": {
                                                "description": "The value indicating whether the message has to be signed.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "receiverBusinessIdentity": {
                                        "properties": {
                                          "Qualifier": {
                                            "description": "The business identity qualifier.",
                                            "type": "string"
                                          },
                                          "Value": {
                                            "description": "The business identity value.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "senderBusinessIdentity": {
                                        "properties": {
                                          "Qualifier": {
                                            "description": "The business identity qualifier.",
                                            "type": "string"
                                          },
                                          "Value": {
                                            "description": "The business identity value.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "Edifact": {
                                "properties": {
                                  "receiveAgreement": {
                                    "properties": {
                                      "protocolSettings": {
                                        "properties": {
                                          "acknowledgementSettings": {
                                            "properties": {
                                              "acknowledgementControlNumberLowerBound": {
                                                "description": "The acknowledgement control number lower bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "acknowledgementControlNumberPrefix": {
                                                "description": "The acknowledgement control number prefix.",
                                                "type": "string"
                                              },
                                              "acknowledgementControlNumberSuffix": {
                                                "description": "The acknowledgement control number suffix.",
                                                "type": "string"
                                              },
                                              "acknowledgementControlNumberUpperBound": {
                                                "description": "The acknowledgement control number upper bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "batchFunctionalAcknowledgements": {
                                                "description": "The value indicating whether to batch functional acknowledgements.",
                                                "type": "boolean"
                                              },
                                              "batchTechnicalAcknowledgements": {
                                                "description": "The value indicating whether to batch the technical acknowledgements.",
                                                "type": "boolean"
                                              },
                                              "needFunctionalAcknowledgement": {
                                                "description": "The value indicating whether functional acknowledgement is needed.",
                                                "type": "boolean"
                                              },
                                              "needLoopForValidMessages": {
                                                "description": "The value indicating whether a loop is needed for valid messages.",
                                                "type": "boolean"
                                              },
                                              "needTechnicalAcknowledgement": {
                                                "description": "The value indicating whether technical acknowledgement is needed.",
                                                "type": "boolean"
                                              },
                                              "rolloverAcknowledgementControlNumber": {
                                                "description": "The value indicating whether to rollover acknowledgement control number.",
                                                "type": "boolean"
                                              },
                                              "sendSynchronousAcknowledgement": {
                                                "description": "The value indicating whether to send synchronous acknowledgement.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "edifactDelimiterOverrides": {
                                            "description": "The EDIFACT delimiter override settings.",
                                            "items": {
                                              "properties": {
                                                "componentSeparator": {
                                                  "description": "The component separator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "dataElementSeparator": {
                                                  "description": "The data element separator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "decimalPointIndicator": {
                                                  "enum": [
                                                    "NotSpecified",
                                                    "Comma",
                                                    "Decimal"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": false,
                                                    "name": "EdifactDecimalIndicator"
                                                  }
                                                },
                                                "messageAssociationAssignedCode": {
                                                  "description": "The message association assigned code.",
                                                  "type": "string"
                                                },
                                                "messageId": {
                                                  "description": "The message id.",
                                                  "type": "string"
                                                },
                                                "messageRelease": {
                                                  "description": "The message release version.",
                                                  "type": "string"
                                                },
                                                "messageVersion": {
                                                  "description": "The message version.",
                                                  "type": "string"
                                                },
                                                "releaseIndicator": {
                                                  "description": "The release indicator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "repetitionSeparator": {
                                                  "description": "The repetition separator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "segmentTerminator": {
                                                  "description": "The segment terminator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "segmentTerminatorSuffix": {
                                                  "enum": [
                                                    "NotSpecified",
                                                    "None",
                                                    "CR",
                                                    "LF",
                                                    "CRLF"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": false,
                                                    "name": "SegmentTerminatorSuffix"
                                                  }
                                                },
                                                "targetNamespace": {
                                                  "description": "The target namespace on which this delimiter settings has to be applied.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "envelopeOverrides": {
                                            "description": "The EDIFACT envelope override settings.",
                                            "items": {
                                              "properties": {
                                                "applicationPassword": {
                                                  "description": "The application password.",
                                                  "type": "string"
                                                },
                                                "associationAssignedCode": {
                                                  "description": "The association assigned code.",
                                                  "type": "string"
                                                },
                                                "controllingAgencyCode": {
                                                  "description": "The controlling agency code.",
                                                  "type": "string"
                                                },
                                                "functionalGroupId": {
                                                  "description": "The functional group id.",
                                                  "type": "string"
                                                },
                                                "groupHeaderMessageRelease": {
                                                  "description": "The group header message release.",
                                                  "type": "string"
                                                },
                                                "groupHeaderMessageVersion": {
                                                  "description": "The group header message version.",
                                                  "type": "string"
                                                },
                                                "messageAssociationAssignedCode": {
                                                  "description": "The message association assigned code.",
                                                  "type": "string"
                                                },
                                                "messageId": {
                                                  "description": "The message id on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "messageRelease": {
                                                  "description": "The message release version on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "messageVersion": {
                                                  "description": "The message version on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "receiverApplicationId": {
                                                  "description": "The receiver application id.",
                                                  "type": "string"
                                                },
                                                "receiverApplicationQualifier": {
                                                  "description": "The receiver application qualifier.",
                                                  "type": "string"
                                                },
                                                "senderApplicationId": {
                                                  "description": "The sender application id.",
                                                  "type": "string"
                                                },
                                                "senderApplicationQualifier": {
                                                  "description": "The sender application qualifier.",
                                                  "type": "string"
                                                },
                                                "targetNamespace": {
                                                  "description": "The target namespace on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "envelopeSettings": {
                                            "properties": {
                                              "applicationReferenceId": {
                                                "description": "The application reference id.",
                                                "type": "string"
                                              },
                                              "applyDelimiterStringAdvice": {
                                                "description": "The value indicating whether to apply delimiter string advice.",
                                                "type": "boolean"
                                              },
                                              "communicationAgreementId": {
                                                "description": "The communication agreement id.",
                                                "type": "string"
                                              },
                                              "createGroupingSegments": {
                                                "description": "The value indicating whether to create grouping segments.",
                                                "type": "boolean"
                                              },
                                              "enableDefaultGroupHeaders": {
                                                "description": "The value indicating whether to enable default group headers.",
                                                "type": "boolean"
                                              },
                                              "functionalGroupId": {
                                                "description": "The functional group id.",
                                                "type": "string"
                                              },
                                              "groupApplicationPassword": {
                                                "description": "The group application password.",
                                                "type": "string"
                                              },
                                              "groupApplicationReceiverId": {
                                                "description": "The group application receiver id.",
                                                "type": "string"
                                              },
                                              "groupApplicationReceiverQualifier": {
                                                "description": "The group application receiver qualifier.",
                                                "type": "string"
                                              },
                                              "groupApplicationSenderId": {
                                                "description": "The group application sender id.",
                                                "type": "string"
                                              },
                                              "groupApplicationSenderQualifier": {
                                                "description": "The group application sender qualifier.",
                                                "type": "string"
                                              },
                                              "groupAssociationAssignedCode": {
                                                "description": "The group association assigned code.",
                                                "type": "string"
                                              },
                                              "groupControlNumberLowerBound": {
                                                "description": "The group control number lower bound.",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "groupControlNumberPrefix": {
                                                "description": "The group control number prefix.",
                                                "type": "string"
                                              },
                                              "groupControlNumberSuffix": {
                                                "description": "The group control number suffix.",
                                                "type": "string"
                                              },
                                              "groupControlNumberUpperBound": {
                                                "description": "The group control number upper bound.",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "groupControllingAgencyCode": {
                                                "description": "The group controlling agency code.",
                                                "type": "string"
                                              },
                                              "groupMessageRelease": {
                                                "description": "The group message release.",
                                                "type": "string"
                                              },
                                              "groupMessageVersion": {
                                                "description": "The group message version.",
                                                "type": "string"
                                              },
                                              "interchangeControlNumberLowerBound": {
                                                "description": "The interchange control number lower bound.",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "interchangeControlNumberPrefix": {
                                                "description": "The interchange control number prefix.",
                                                "type": "string"
                                              },
                                              "interchangeControlNumberSuffix": {
                                                "description": "The interchange control number suffix.",
                                                "type": "string"
                                              },
                                              "interchangeControlNumberUpperBound": {
                                                "description": "The interchange control number upper bound.",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "isTestInterchange": {
                                                "description": "The value indicating whether the message is a test interchange.",
                                                "type": "boolean"
                                              },
                                              "overwriteExistingTransactionSetControlNumber": {
                                                "description": "The value indicating whether to overwrite existing transaction set control number.",
                                                "type": "boolean"
                                              },
                                              "processingPriorityCode": {
                                                "description": "The processing priority code.",
                                                "type": "string"
                                              },
                                              "receiverInternalIdentification": {
                                                "description": "The receiver internal identification.",
                                                "type": "string"
                                              },
                                              "receiverInternalSubIdentification": {
                                                "description": "The receiver internal sub identification.",
                                                "type": "string"
                                              },
                                              "receiverReverseRoutingAddress": {
                                                "description": "The receiver reverse routing address.",
                                                "type": "string"
                                              },
                                              "recipientReferencePasswordQualifier": {
                                                "description": "The recipient reference password qualifier.",
                                                "type": "string"
                                              },
                                              "recipientReferencePasswordValue": {
                                                "description": "The recipient reference password value.",
                                                "type": "string"
                                              },
                                              "rolloverGroupControlNumber": {
                                                "description": "The value indicating whether to rollover group control number.",
                                                "type": "boolean"
                                              },
                                              "rolloverInterchangeControlNumber": {
                                                "description": "The value indicating whether to rollover interchange control number.",
                                                "type": "boolean"
                                              },
                                              "rolloverTransactionSetControlNumber": {
                                                "description": "The value indicating whether to rollover transaction set control number.",
                                                "type": "boolean"
                                              },
                                              "senderInternalIdentification": {
                                                "description": "The sender internal identification.",
                                                "type": "string"
                                              },
                                              "senderInternalSubIdentification": {
                                                "description": "The sender internal sub identification.",
                                                "type": "string"
                                              },
                                              "senderReverseRoutingAddress": {
                                                "description": "The sender reverse routing address.",
                                                "type": "string"
                                              },
                                              "transactionSetControlNumberLowerBound": {
                                                "description": "The transaction set control number lower bound.",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "transactionSetControlNumberPrefix": {
                                                "description": "The transaction set control number prefix.",
                                                "type": "string"
                                              },
                                              "transactionSetControlNumberSuffix": {
                                                "description": "The transaction set control number suffix.",
                                                "type": "string"
                                              },
                                              "transactionSetControlNumberUpperBound": {
                                                "description": "The transaction set control number upper bound.",
                                                "format": "int64",
                                                "type": "integer"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "framingSettings": {
                                            "properties": {
                                              "characterEncoding": {
                                                "description": "The character encoding.",
                                                "type": "string"
                                              },
                                              "characterSet": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "UNOB",
                                                  "UNOA",
                                                  "UNOC",
                                                  "UNOD",
                                                  "UNOE",
                                                  "UNOF",
                                                  "UNOG",
                                                  "UNOH",
                                                  "UNOI",
                                                  "UNOJ",
                                                  "UNOK",
                                                  "UNOX",
                                                  "UNOY",
                                                  "KECA"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "EdifactCharacterSet"
                                                }
                                              },
                                              "componentSeparator": {
                                                "description": "The component separator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "dataElementSeparator": {
                                                "description": "The data element separator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "decimalPointIndicator": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "Comma",
                                                  "Decimal"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "EdifactDecimalIndicator"
                                                }
                                              },
                                              "protocolVersion": {
                                                "description": "The protocol version.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "releaseIndicator": {
                                                "description": "The release indicator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "repetitionSeparator": {
                                                "description": "The repetition separator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "segmentTerminator": {
                                                "description": "The segment terminator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "segmentTerminatorSuffix": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "None",
                                                  "CR",
                                                  "LF",
                                                  "CRLF"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "SegmentTerminatorSuffix"
                                                }
                                              },
                                              "serviceCodeListDirectoryVersion": {
                                                "description": "The service code list directory version.",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "messageFilter": {
                                            "properties": {
                                              "messageFilterType": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "Include",
                                                  "Exclude"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "MessageFilterType"
                                                }
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "messageFilterList": {
                                            "description": "The EDIFACT message filter list.",
                                            "items": {
                                              "properties": {
                                                "messageId": {
                                                  "description": "The message id on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "processingSettings": {
                                            "properties": {
                                              "createEmptyXmlTagsForTrailingSeparators": {
                                                "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                                "type": "boolean"
                                              },
                                              "maskSecurityInfo": {
                                                "description": "The value indicating whether to mask security information.",
                                                "type": "boolean"
                                              },
                                              "preserveInterchange": {
                                                "description": "The value indicating whether to preserve interchange.",
                                                "type": "boolean"
                                              },
                                              "suspendInterchangeOnError": {
                                                "description": "The value indicating whether to suspend interchange on error.",
                                                "type": "boolean"
                                              },
                                              "useDotAsDecimalSeparator": {
                                                "description": "The value indicating whether to use dot as decimal separator.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "schemaReferences": {
                                            "description": "The EDIFACT schema references.",
                                            "items": {
                                              "properties": {
                                                "associationAssignedCode": {
                                                  "description": "The association assigned code.",
                                                  "type": "string"
                                                },
                                                "messageId": {
                                                  "description": "The message id.",
                                                  "type": "string"
                                                },
                                                "messageRelease": {
                                                  "description": "The message release version.",
                                                  "type": "string"
                                                },
                                                "messageVersion": {
                                                  "description": "The message version.",
                                                  "type": "string"
                                                },
                                                "schemaName": {
                                                  "description": "The schema name.",
                                                  "type": "string"
                                                },
                                                "senderApplicationId": {
                                                  "description": "The sender application id.",
                                                  "type": "string"
                                                },
                                                "senderApplicationQualifier": {
                                                  "description": "The sender application qualifier.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "validationOverrides": {
                                            "description": "The EDIFACT validation override settings.",
                                            "items": {
                                              "properties": {
                                                "allowLeadingAndTrailingSpacesAndZeroes": {
                                                  "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                                  "type": "boolean"
                                                },
                                                "enforceCharacterSet": {
                                                  "description": "The value indicating whether to validate character Set.",
                                                  "type": "boolean"
                                                },
                                                "messageId": {
                                                  "description": "The message id on which the validation settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "trailingSeparatorPolicy": {
                                                  "enum": [
                                                    "NotSpecified",
                                                    "NotAllowed",
                                                    "Optional",
                                                    "Mandatory"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": false,
                                                    "name": "TrailingSeparatorPolicy"
                                                  }
                                                },
                                                "trimLeadingAndTrailingSpacesAndZeroes": {
                                                  "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                                  "type": "boolean"
                                                },
                                                "validateEDITypes": {
                                                  "description": "The value indicating whether to validate EDI types.",
                                                  "type": "boolean"
                                                },
                                                "validateXSDTypes": {
                                                  "description": "The value indicating whether to validate XSD types.",
                                                  "type": "boolean"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "validationSettings": {
                                            "properties": {
                                              "allowLeadingAndTrailingSpacesAndZeroes": {
                                                "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                                "type": "boolean"
                                              },
                                              "checkDuplicateGroupControlNumber": {
                                                "description": "The value indicating whether to check for duplicate group control number.",
                                                "type": "boolean"
                                              },
                                              "checkDuplicateInterchangeControlNumber": {
                                                "description": "The value indicating whether to check for duplicate interchange control number.",
                                                "type": "boolean"
                                              },
                                              "checkDuplicateTransactionSetControlNumber": {
                                                "description": "The value indicating whether to check for duplicate transaction set control number.",
                                                "type": "boolean"
                                              },
                                              "interchangeControlNumberValidityDays": {
                                                "description": "The validity period of interchange control number.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "trailingSeparatorPolicy": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "NotAllowed",
                                                  "Optional",
                                                  "Mandatory"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "TrailingSeparatorPolicy"
                                                }
                                              },
                                              "trimLeadingAndTrailingSpacesAndZeroes": {
                                                "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                                "type": "boolean"
                                              },
                                              "validateCharacterSet": {
                                                "description": "The value indicating whether to validate character set in the message.",
                                                "type": "boolean"
                                              },
                                              "validateEDITypes": {
                                                "description": "The value indicating whether to Whether to validate EDI types.",
                                                "type": "boolean"
                                              },
                                              "validateXSDTypes": {
                                                "description": "The value indicating whether to Whether to validate XSD types.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "receiverBusinessIdentity": {
                                        "properties": {
                                          "Qualifier": {
                                            "description": "The business identity qualifier.",
                                            "type": "string"
                                          },
                                          "Value": {
                                            "description": "The business identity value.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "senderBusinessIdentity": {
                                        "properties": {
                                          "Qualifier": {
                                            "description": "The business identity qualifier.",
                                            "type": "string"
                                          },
                                          "Value": {
                                            "description": "The business identity value.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "sendAgreement": {
                                    "properties": {
                                      "protocolSettings": {
                                        "properties": {
                                          "acknowledgementSettings": {
                                            "properties": {
                                              "acknowledgementControlNumberLowerBound": {
                                                "description": "The acknowledgement control number lower bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "acknowledgementControlNumberPrefix": {
                                                "description": "The acknowledgement control number prefix.",
                                                "type": "string"
                                              },
                                              "acknowledgementControlNumberSuffix": {
                                                "description": "The acknowledgement control number suffix.",
                                                "type": "string"
                                              },
                                              "acknowledgementControlNumberUpperBound": {
                                                "description": "The acknowledgement control number upper bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "batchFunctionalAcknowledgements": {
                                                "description": "The value indicating whether to batch functional acknowledgements.",
                                                "type": "boolean"
                                              },
                                              "batchTechnicalAcknowledgements": {
                                                "description": "The value indicating whether to batch the technical acknowledgements.",
                                                "type": "boolean"
                                              },
                                              "needFunctionalAcknowledgement": {
                                                "description": "The value indicating whether functional acknowledgement is needed.",
                                                "type": "boolean"
                                              },
                                              "needLoopForValidMessages": {
                                                "description": "The value indicating whether a loop is needed for valid messages.",
                                                "type": "boolean"
                                              },
                                              "needTechnicalAcknowledgement": {
                                                "description": "The value indicating whether technical acknowledgement is needed.",
                                                "type": "boolean"
                                              },
                                              "rolloverAcknowledgementControlNumber": {
                                                "description": "The value indicating whether to rollover acknowledgement control number.",
                                                "type": "boolean"
                                              },
                                              "sendSynchronousAcknowledgement": {
                                                "description": "The value indicating whether to send synchronous acknowledgement.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "edifactDelimiterOverrides": {
                                            "description": "The EDIFACT delimiter override settings.",
                                            "items": {
                                              "properties": {
                                                "componentSeparator": {
                                                  "description": "The component separator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "dataElementSeparator": {
                                                  "description": "The data element separator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "decimalPointIndicator": {
                                                  "enum": [
                                                    "NotSpecified",
                                                    "Comma",
                                                    "Decimal"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": false,
                                                    "name": "EdifactDecimalIndicator"
                                                  }
                                                },
                                                "messageAssociationAssignedCode": {
                                                  "description": "The message association assigned code.",
                                                  "type": "string"
                                                },
                                                "messageId": {
                                                  "description": "The message id.",
                                                  "type": "string"
                                                },
                                                "messageRelease": {
                                                  "description": "The message release version.",
                                                  "type": "string"
                                                },
                                                "messageVersion": {
                                                  "description": "The message version.",
                                                  "type": "string"
                                                },
                                                "releaseIndicator": {
                                                  "description": "The release indicator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "repetitionSeparator": {
                                                  "description": "The repetition separator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "segmentTerminator": {
                                                  "description": "The segment terminator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "segmentTerminatorSuffix": {
                                                  "enum": [
                                                    "NotSpecified",
                                                    "None",
                                                    "CR",
                                                    "LF",
                                                    "CRLF"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": false,
                                                    "name": "SegmentTerminatorSuffix"
                                                  }
                                                },
                                                "targetNamespace": {
                                                  "description": "The target namespace on which this delimiter settings has to be applied.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "envelopeOverrides": {
                                            "description": "The EDIFACT envelope override settings.",
                                            "items": {
                                              "properties": {
                                                "applicationPassword": {
                                                  "description": "The application password.",
                                                  "type": "string"
                                                },
                                                "associationAssignedCode": {
                                                  "description": "The association assigned code.",
                                                  "type": "string"
                                                },
                                                "controllingAgencyCode": {
                                                  "description": "The controlling agency code.",
                                                  "type": "string"
                                                },
                                                "functionalGroupId": {
                                                  "description": "The functional group id.",
                                                  "type": "string"
                                                },
                                                "groupHeaderMessageRelease": {
                                                  "description": "The group header message release.",
                                                  "type": "string"
                                                },
                                                "groupHeaderMessageVersion": {
                                                  "description": "The group header message version.",
                                                  "type": "string"
                                                },
                                                "messageAssociationAssignedCode": {
                                                  "description": "The message association assigned code.",
                                                  "type": "string"
                                                },
                                                "messageId": {
                                                  "description": "The message id on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "messageRelease": {
                                                  "description": "The message release version on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "messageVersion": {
                                                  "description": "The message version on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "receiverApplicationId": {
                                                  "description": "The receiver application id.",
                                                  "type": "string"
                                                },
                                                "receiverApplicationQualifier": {
                                                  "description": "The receiver application qualifier.",
                                                  "type": "string"
                                                },
                                                "senderApplicationId": {
                                                  "description": "The sender application id.",
                                                  "type": "string"
                                                },
                                                "senderApplicationQualifier": {
                                                  "description": "The sender application qualifier.",
                                                  "type": "string"
                                                },
                                                "targetNamespace": {
                                                  "description": "The target namespace on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "envelopeSettings": {
                                            "properties": {
                                              "applicationReferenceId": {
                                                "description": "The application reference id.",
                                                "type": "string"
                                              },
                                              "applyDelimiterStringAdvice": {
                                                "description": "The value indicating whether to apply delimiter string advice.",
                                                "type": "boolean"
                                              },
                                              "communicationAgreementId": {
                                                "description": "The communication agreement id.",
                                                "type": "string"
                                              },
                                              "createGroupingSegments": {
                                                "description": "The value indicating whether to create grouping segments.",
                                                "type": "boolean"
                                              },
                                              "enableDefaultGroupHeaders": {
                                                "description": "The value indicating whether to enable default group headers.",
                                                "type": "boolean"
                                              },
                                              "functionalGroupId": {
                                                "description": "The functional group id.",
                                                "type": "string"
                                              },
                                              "groupApplicationPassword": {
                                                "description": "The group application password.",
                                                "type": "string"
                                              },
                                              "groupApplicationReceiverId": {
                                                "description": "The group application receiver id.",
                                                "type": "string"
                                              },
                                              "groupApplicationReceiverQualifier": {
                                                "description": "The group application receiver qualifier.",
                                                "type": "string"
                                              },
                                              "groupApplicationSenderId": {
                                                "description": "The group application sender id.",
                                                "type": "string"
                                              },
                                              "groupApplicationSenderQualifier": {
                                                "description": "The group application sender qualifier.",
                                                "type": "string"
                                              },
                                              "groupAssociationAssignedCode": {
                                                "description": "The group association assigned code.",
                                                "type": "string"
                                              },
                                              "groupControlNumberLowerBound": {
                                                "description": "The group control number lower bound.",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "groupControlNumberPrefix": {
                                                "description": "The group control number prefix.",
                                                "type": "string"
                                              },
                                              "groupControlNumberSuffix": {
                                                "description": "The group control number suffix.",
                                                "type": "string"
                                              },
                                              "groupControlNumberUpperBound": {
                                                "description": "The group control number upper bound.",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "groupControllingAgencyCode": {
                                                "description": "The group controlling agency code.",
                                                "type": "string"
                                              },
                                              "groupMessageRelease": {
                                                "description": "The group message release.",
                                                "type": "string"
                                              },
                                              "groupMessageVersion": {
                                                "description": "The group message version.",
                                                "type": "string"
                                              },
                                              "interchangeControlNumberLowerBound": {
                                                "description": "The interchange control number lower bound.",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "interchangeControlNumberPrefix": {
                                                "description": "The interchange control number prefix.",
                                                "type": "string"
                                              },
                                              "interchangeControlNumberSuffix": {
                                                "description": "The interchange control number suffix.",
                                                "type": "string"
                                              },
                                              "interchangeControlNumberUpperBound": {
                                                "description": "The interchange control number upper bound.",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "isTestInterchange": {
                                                "description": "The value indicating whether the message is a test interchange.",
                                                "type": "boolean"
                                              },
                                              "overwriteExistingTransactionSetControlNumber": {
                                                "description": "The value indicating whether to overwrite existing transaction set control number.",
                                                "type": "boolean"
                                              },
                                              "processingPriorityCode": {
                                                "description": "The processing priority code.",
                                                "type": "string"
                                              },
                                              "receiverInternalIdentification": {
                                                "description": "The receiver internal identification.",
                                                "type": "string"
                                              },
                                              "receiverInternalSubIdentification": {
                                                "description": "The receiver internal sub identification.",
                                                "type": "string"
                                              },
                                              "receiverReverseRoutingAddress": {
                                                "description": "The receiver reverse routing address.",
                                                "type": "string"
                                              },
                                              "recipientReferencePasswordQualifier": {
                                                "description": "The recipient reference password qualifier.",
                                                "type": "string"
                                              },
                                              "recipientReferencePasswordValue": {
                                                "description": "The recipient reference password value.",
                                                "type": "string"
                                              },
                                              "rolloverGroupControlNumber": {
                                                "description": "The value indicating whether to rollover group control number.",
                                                "type": "boolean"
                                              },
                                              "rolloverInterchangeControlNumber": {
                                                "description": "The value indicating whether to rollover interchange control number.",
                                                "type": "boolean"
                                              },
                                              "rolloverTransactionSetControlNumber": {
                                                "description": "The value indicating whether to rollover transaction set control number.",
                                                "type": "boolean"
                                              },
                                              "senderInternalIdentification": {
                                                "description": "The sender internal identification.",
                                                "type": "string"
                                              },
                                              "senderInternalSubIdentification": {
                                                "description": "The sender internal sub identification.",
                                                "type": "string"
                                              },
                                              "senderReverseRoutingAddress": {
                                                "description": "The sender reverse routing address.",
                                                "type": "string"
                                              },
                                              "transactionSetControlNumberLowerBound": {
                                                "description": "The transaction set control number lower bound.",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "transactionSetControlNumberPrefix": {
                                                "description": "The transaction set control number prefix.",
                                                "type": "string"
                                              },
                                              "transactionSetControlNumberSuffix": {
                                                "description": "The transaction set control number suffix.",
                                                "type": "string"
                                              },
                                              "transactionSetControlNumberUpperBound": {
                                                "description": "The transaction set control number upper bound.",
                                                "format": "int64",
                                                "type": "integer"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "framingSettings": {
                                            "properties": {
                                              "characterEncoding": {
                                                "description": "The character encoding.",
                                                "type": "string"
                                              },
                                              "characterSet": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "UNOB",
                                                  "UNOA",
                                                  "UNOC",
                                                  "UNOD",
                                                  "UNOE",
                                                  "UNOF",
                                                  "UNOG",
                                                  "UNOH",
                                                  "UNOI",
                                                  "UNOJ",
                                                  "UNOK",
                                                  "UNOX",
                                                  "UNOY",
                                                  "KECA"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "EdifactCharacterSet"
                                                }
                                              },
                                              "componentSeparator": {
                                                "description": "The component separator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "dataElementSeparator": {
                                                "description": "The data element separator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "decimalPointIndicator": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "Comma",
                                                  "Decimal"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "EdifactDecimalIndicator"
                                                }
                                              },
                                              "protocolVersion": {
                                                "description": "The protocol version.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "releaseIndicator": {
                                                "description": "The release indicator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "repetitionSeparator": {
                                                "description": "The repetition separator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "segmentTerminator": {
                                                "description": "The segment terminator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "segmentTerminatorSuffix": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "None",
                                                  "CR",
                                                  "LF",
                                                  "CRLF"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "SegmentTerminatorSuffix"
                                                }
                                              },
                                              "serviceCodeListDirectoryVersion": {
                                                "description": "The service code list directory version.",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "messageFilter": {
                                            "properties": {
                                              "messageFilterType": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "Include",
                                                  "Exclude"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "MessageFilterType"
                                                }
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "messageFilterList": {
                                            "description": "The EDIFACT message filter list.",
                                            "items": {
                                              "properties": {
                                                "messageId": {
                                                  "description": "The message id on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "processingSettings": {
                                            "properties": {
                                              "createEmptyXmlTagsForTrailingSeparators": {
                                                "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                                "type": "boolean"
                                              },
                                              "maskSecurityInfo": {
                                                "description": "The value indicating whether to mask security information.",
                                                "type": "boolean"
                                              },
                                              "preserveInterchange": {
                                                "description": "The value indicating whether to preserve interchange.",
                                                "type": "boolean"
                                              },
                                              "suspendInterchangeOnError": {
                                                "description": "The value indicating whether to suspend interchange on error.",
                                                "type": "boolean"
                                              },
                                              "useDotAsDecimalSeparator": {
                                                "description": "The value indicating whether to use dot as decimal separator.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "schemaReferences": {
                                            "description": "The EDIFACT schema references.",
                                            "items": {
                                              "properties": {
                                                "associationAssignedCode": {
                                                  "description": "The association assigned code.",
                                                  "type": "string"
                                                },
                                                "messageId": {
                                                  "description": "The message id.",
                                                  "type": "string"
                                                },
                                                "messageRelease": {
                                                  "description": "The message release version.",
                                                  "type": "string"
                                                },
                                                "messageVersion": {
                                                  "description": "The message version.",
                                                  "type": "string"
                                                },
                                                "schemaName": {
                                                  "description": "The schema name.",
                                                  "type": "string"
                                                },
                                                "senderApplicationId": {
                                                  "description": "The sender application id.",
                                                  "type": "string"
                                                },
                                                "senderApplicationQualifier": {
                                                  "description": "The sender application qualifier.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "validationOverrides": {
                                            "description": "The EDIFACT validation override settings.",
                                            "items": {
                                              "properties": {
                                                "allowLeadingAndTrailingSpacesAndZeroes": {
                                                  "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                                  "type": "boolean"
                                                },
                                                "enforceCharacterSet": {
                                                  "description": "The value indicating whether to validate character Set.",
                                                  "type": "boolean"
                                                },
                                                "messageId": {
                                                  "description": "The message id on which the validation settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "trailingSeparatorPolicy": {
                                                  "enum": [
                                                    "NotSpecified",
                                                    "NotAllowed",
                                                    "Optional",
                                                    "Mandatory"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": false,
                                                    "name": "TrailingSeparatorPolicy"
                                                  }
                                                },
                                                "trimLeadingAndTrailingSpacesAndZeroes": {
                                                  "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                                  "type": "boolean"
                                                },
                                                "validateEDITypes": {
                                                  "description": "The value indicating whether to validate EDI types.",
                                                  "type": "boolean"
                                                },
                                                "validateXSDTypes": {
                                                  "description": "The value indicating whether to validate XSD types.",
                                                  "type": "boolean"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "validationSettings": {
                                            "properties": {
                                              "allowLeadingAndTrailingSpacesAndZeroes": {
                                                "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                                "type": "boolean"
                                              },
                                              "checkDuplicateGroupControlNumber": {
                                                "description": "The value indicating whether to check for duplicate group control number.",
                                                "type": "boolean"
                                              },
                                              "checkDuplicateInterchangeControlNumber": {
                                                "description": "The value indicating whether to check for duplicate interchange control number.",
                                                "type": "boolean"
                                              },
                                              "checkDuplicateTransactionSetControlNumber": {
                                                "description": "The value indicating whether to check for duplicate transaction set control number.",
                                                "type": "boolean"
                                              },
                                              "interchangeControlNumberValidityDays": {
                                                "description": "The validity period of interchange control number.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "trailingSeparatorPolicy": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "NotAllowed",
                                                  "Optional",
                                                  "Mandatory"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "TrailingSeparatorPolicy"
                                                }
                                              },
                                              "trimLeadingAndTrailingSpacesAndZeroes": {
                                                "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                                "type": "boolean"
                                              },
                                              "validateCharacterSet": {
                                                "description": "The value indicating whether to validate character set in the message.",
                                                "type": "boolean"
                                              },
                                              "validateEDITypes": {
                                                "description": "The value indicating whether to Whether to validate EDI types.",
                                                "type": "boolean"
                                              },
                                              "validateXSDTypes": {
                                                "description": "The value indicating whether to Whether to validate XSD types.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "receiverBusinessIdentity": {
                                        "properties": {
                                          "Qualifier": {
                                            "description": "The business identity qualifier.",
                                            "type": "string"
                                          },
                                          "Value": {
                                            "description": "The business identity value.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "senderBusinessIdentity": {
                                        "properties": {
                                          "Qualifier": {
                                            "description": "The business identity qualifier.",
                                            "type": "string"
                                          },
                                          "Value": {
                                            "description": "The business identity value.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "X12": {
                                "properties": {
                                  "receiveAgreement": {
                                    "properties": {
                                      "protocolSettings": {
                                        "properties": {
                                          "acknowledgementSettings": {
                                            "properties": {
                                              "acknowledgementControlNumberLowerBound": {
                                                "description": "The acknowledgement control number lower bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "acknowledgementControlNumberPrefix": {
                                                "description": "The acknowledgement control number prefix.",
                                                "type": "string"
                                              },
                                              "acknowledgementControlNumberSuffix": {
                                                "description": "The acknowledgement control number suffix.",
                                                "type": "string"
                                              },
                                              "acknowledgementControlNumberUpperBound": {
                                                "description": "The acknowledgement control number upper bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "batchFunctionalAcknowledgements": {
                                                "description": "The value indicating whether to batch functional acknowledgements.",
                                                "type": "boolean"
                                              },
                                              "batchImplementationAcknowledgements": {
                                                "description": "The value indicating whether to batch implementation acknowledgements.",
                                                "type": "boolean"
                                              },
                                              "batchTechnicalAcknowledgements": {
                                                "description": "The value indicating whether to batch the technical acknowledgements.",
                                                "type": "boolean"
                                              },
                                              "functionalAcknowledgementVersion": {
                                                "description": "The functional acknowledgement version.",
                                                "type": "string"
                                              },
                                              "implementationAcknowledgementVersion": {
                                                "description": "The implementation acknowledgement version.",
                                                "type": "string"
                                              },
                                              "needFunctionalAcknowledgement": {
                                                "description": "The value indicating whether functional acknowledgement is needed.",
                                                "type": "boolean"
                                              },
                                              "needImplementationAcknowledgement": {
                                                "description": "The value indicating whether implementation acknowledgement is needed.",
                                                "type": "boolean"
                                              },
                                              "needLoopForValidMessages": {
                                                "description": "The value indicating whether a loop is needed for valid messages.",
                                                "type": "boolean"
                                              },
                                              "needTechnicalAcknowledgement": {
                                                "description": "The value indicating whether technical acknowledgement is needed.",
                                                "type": "boolean"
                                              },
                                              "rolloverAcknowledgementControlNumber": {
                                                "description": "The value indicating whether to rollover acknowledgement control number.",
                                                "type": "boolean"
                                              },
                                              "sendSynchronousAcknowledgement": {
                                                "description": "The value indicating whether to send synchronous acknowledgement.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "envelopeOverrides": {
                                            "description": "The X12 envelope override settings.",
                                            "items": {
                                              "properties": {
                                                "dateFormat": {
                                                  "enum": [
                                                    "NotSpecified",
                                                    "CCYYMMDD",
                                                    "YYMMDD"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": false,
                                                    "name": "X12DateFormat"
                                                  }
                                                },
                                                "functionalIdentifierCode": {
                                                  "description": "The functional identifier code.",
                                                  "type": "string"
                                                },
                                                "headerVersion": {
                                                  "description": "The header version.",
                                                  "type": "string"
                                                },
                                                "messageId": {
                                                  "description": "The message id on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "protocolVersion": {
                                                  "description": "The protocol version on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "receiverApplicationId": {
                                                  "description": "The receiver application id.",
                                                  "type": "string"
                                                },
                                                "responsibleAgencyCode": {
                                                  "description": "The responsible agency code.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "senderApplicationId": {
                                                  "description": "The sender application id.",
                                                  "type": "string"
                                                },
                                                "targetNamespace": {
                                                  "description": "The target namespace on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "timeFormat": {
                                                  "enum": [
                                                    "NotSpecified",
                                                    "HHMM",
                                                    "HHMMSS",
                                                    "HHMMSSdd",
                                                    "HHMMSSd"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": false,
                                                    "name": "X12TimeFormat"
                                                  }
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "envelopeSettings": {
                                            "properties": {
                                              "controlStandardsId": {
                                                "description": "The controls standards id.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "controlVersionNumber": {
                                                "description": "The control version number.",
                                                "type": "string"
                                              },
                                              "enableDefaultGroupHeaders": {
                                                "description": "The value indicating whether to enable default group headers.",
                                                "type": "boolean"
                                              },
                                              "functionalGroupId": {
                                                "description": "The functional group id.",
                                                "type": "string"
                                              },
                                              "groupControlNumberLowerBound": {
                                                "description": "The group control number lower bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "groupControlNumberUpperBound": {
                                                "description": "The group control number upper bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "groupHeaderAgencyCode": {
                                                "description": "The group header agency code.",
                                                "type": "string"
                                              },
                                              "groupHeaderDateFormat": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "CCYYMMDD",
                                                  "YYMMDD"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "X12DateFormat"
                                                }
                                              },
                                              "groupHeaderTimeFormat": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "HHMM",
                                                  "HHMMSS",
                                                  "HHMMSSdd",
                                                  "HHMMSSd"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "X12TimeFormat"
                                                }
                                              },
                                              "groupHeaderVersion": {
                                                "description": "The group header version.",
                                                "type": "string"
                                              },
                                              "interchangeControlNumberLowerBound": {
                                                "description": "The interchange  control number lower bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "interchangeControlNumberUpperBound": {
                                                "description": "The interchange  control number upper bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "overwriteExistingTransactionSetControlNumber": {
                                                "description": "The value indicating whether to overwrite existing transaction set control number.",
                                                "type": "boolean"
                                              },
                                              "receiverApplicationId": {
                                                "description": "The receiver application id.",
                                                "type": "string"
                                              },
                                              "rolloverGroupControlNumber": {
                                                "description": "The value indicating whether to rollover group control number.",
                                                "type": "boolean"
                                              },
                                              "rolloverInterchangeControlNumber": {
                                                "description": "The value indicating whether to rollover interchange control number.",
                                                "type": "boolean"
                                              },
                                              "rolloverTransactionSetControlNumber": {
                                                "description": "The value indicating whether to rollover transaction set control number.",
                                                "type": "boolean"
                                              },
                                              "senderApplicationId": {
                                                "description": "The sender application id.",
                                                "type": "string"
                                              },
                                              "transactionSetControlNumberLowerBound": {
                                                "description": "The transaction set control number lower bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "transactionSetControlNumberPrefix": {
                                                "description": "The transaction set control number prefix.",
                                                "type": "string"
                                              },
                                              "transactionSetControlNumberSuffix": {
                                                "description": "The transaction set control number suffix.",
                                                "type": "string"
                                              },
                                              "transactionSetControlNumberUpperBound": {
                                                "description": "The transaction set control number upper bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "usageIndicator": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "Test",
                                                  "Information",
                                                  "Production"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "UsageIndicator"
                                                }
                                              },
                                              "useControlStandardsIdAsRepetitionCharacter": {
                                                "description": "The value indicating whether to use control standards id as repetition character.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "framingSettings": {
                                            "properties": {
                                              "characterSet": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "Basic",
                                                  "Extended",
                                                  "UTF8"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "X12CharacterSet"
                                                }
                                              },
                                              "componentSeparator": {
                                                "description": "The component separator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "dataElementSeparator": {
                                                "description": "The data element separator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "replaceCharacter": {
                                                "description": "The replacement character.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "replaceSeparatorsInPayload": {
                                                "description": "The value indicating whether to replace separators in payload.",
                                                "type": "boolean"
                                              },
                                              "segmentTerminator": {
                                                "description": "The segment terminator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "segmentTerminatorSuffix": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "None",
                                                  "CR",
                                                  "LF",
                                                  "CRLF"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "SegmentTerminatorSuffix"
                                                }
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "messageFilter": {
                                            "properties": {
                                              "messageFilterType": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "Include",
                                                  "Exclude"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "MessageFilterType"
                                                }
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "messageFilterList": {
                                            "description": "The X12 message filter list.",
                                            "items": {
                                              "properties": {
                                                "messageId": {
                                                  "description": "The message id.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "processingSettings": {
                                            "properties": {
                                              "convertImpliedDecimal": {
                                                "description": "The value indicating whether to convert numerical type to implied decimal.",
                                                "type": "boolean"
                                              },
                                              "createEmptyXmlTagsForTrailingSeparators": {
                                                "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                                "type": "boolean"
                                              },
                                              "maskSecurityInfo": {
                                                "description": "The value indicating whether to mask security information.",
                                                "type": "boolean"
                                              },
                                              "preserveInterchange": {
                                                "description": "The value indicating whether to preserve interchange.",
                                                "type": "boolean"
                                              },
                                              "suspendInterchangeOnError": {
                                                "description": "The value indicating whether to suspend interchange on error.",
                                                "type": "boolean"
                                              },
                                              "useDotAsDecimalSeparator": {
                                                "description": "The value indicating whether to use dot as decimal separator.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "schemaReferences": {
                                            "description": "The X12 schema references.",
                                            "items": {
                                              "properties": {
                                                "messageId": {
                                                  "description": "The message id.",
                                                  "type": "string"
                                                },
                                                "schemaName": {
                                                  "description": "The schema name.",
                                                  "type": "string"
                                                },
                                                "schemaVersion": {
                                                  "description": "The schema version.",
                                                  "type": "string"
                                                },
                                                "senderApplicationId": {
                                                  "description": "The sender application id.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "securitySettings": {
                                            "properties": {
                                              "authorizationQualifier": {
                                                "description": "The authorization qualifier.",
                                                "type": "string"
                                              },
                                              "authorizationValue": {
                                                "description": "The authorization value.",
                                                "type": "string"
                                              },
                                              "passwordValue": {
                                                "description": "The password value.",
                                                "type": "string"
                                              },
                                              "securityQualifier": {
                                                "description": "The security qualifier.",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "validationOverrides": {
                                            "description": "The X12 validation override settings.",
                                            "items": {
                                              "properties": {
                                                "allowLeadingAndTrailingSpacesAndZeroes": {
                                                  "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                                  "type": "boolean"
                                                },
                                                "messageId": {
                                                  "description": "The message id on which the validation settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "trailingSeparatorPolicy": {
                                                  "enum": [
                                                    "NotSpecified",
                                                    "NotAllowed",
                                                    "Optional",
                                                    "Mandatory"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": false,
                                                    "name": "TrailingSeparatorPolicy"
                                                  }
                                                },
                                                "trimLeadingAndTrailingSpacesAndZeroes": {
                                                  "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                                  "type": "boolean"
                                                },
                                                "validateCharacterSet": {
                                                  "description": "The value indicating whether to validate character Set.",
                                                  "type": "boolean"
                                                },
                                                "validateEDITypes": {
                                                  "description": "The value indicating whether to validate EDI types.",
                                                  "type": "boolean"
                                                },
                                                "validateXSDTypes": {
                                                  "description": "The value indicating whether to validate XSD types.",
                                                  "type": "boolean"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "validationSettings": {
                                            "properties": {
                                              "allowLeadingAndTrailingSpacesAndZeroes": {
                                                "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                                "type": "boolean"
                                              },
                                              "checkDuplicateGroupControlNumber": {
                                                "description": "The value indicating whether to check for duplicate group control number.",
                                                "type": "boolean"
                                              },
                                              "checkDuplicateInterchangeControlNumber": {
                                                "description": "The value indicating whether to check for duplicate interchange control number.",
                                                "type": "boolean"
                                              },
                                              "checkDuplicateTransactionSetControlNumber": {
                                                "description": "The value indicating whether to check for duplicate transaction set control number.",
                                                "type": "boolean"
                                              },
                                              "interchangeControlNumberValidityDays": {
                                                "description": "The validity period of interchange control number.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "trailingSeparatorPolicy": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "NotAllowed",
                                                  "Optional",
                                                  "Mandatory"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "TrailingSeparatorPolicy"
                                                }
                                              },
                                              "trimLeadingAndTrailingSpacesAndZeroes": {
                                                "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                                "type": "boolean"
                                              },
                                              "validateCharacterSet": {
                                                "description": "The value indicating whether to validate character set in the message.",
                                                "type": "boolean"
                                              },
                                              "validateEDITypes": {
                                                "description": "The value indicating whether to Whether to validate EDI types.",
                                                "type": "boolean"
                                              },
                                              "validateXSDTypes": {
                                                "description": "The value indicating whether to Whether to validate XSD types.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "x12DelimiterOverrides": {
                                            "description": "The X12 delimiter override settings.",
                                            "items": {
                                              "properties": {
                                                "componentSeparator": {
                                                  "description": "The component separator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "dataElementSeparator": {
                                                  "description": "The data element separator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "messageId": {
                                                  "description": "The message id.",
                                                  "type": "string"
                                                },
                                                "protocolVersion": {
                                                  "description": "The protocol version.",
                                                  "type": "string"
                                                },
                                                "replaceCharacter": {
                                                  "description": "The replacement character.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "replaceSeparatorsInPayload": {
                                                  "description": "The value indicating whether to replace separators in payload.",
                                                  "type": "boolean"
                                                },
                                                "segmentTerminator": {
                                                  "description": "The segment terminator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "segmentTerminatorSuffix": {
                                                  "enum": [
                                                    "NotSpecified",
                                                    "None",
                                                    "CR",
                                                    "LF",
                                                    "CRLF"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": false,
                                                    "name": "SegmentTerminatorSuffix"
                                                  }
                                                },
                                                "targetNamespace": {
                                                  "description": "The target namespace on which this delimiter settings has to be applied.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "receiverBusinessIdentity": {
                                        "properties": {
                                          "Qualifier": {
                                            "description": "The business identity qualifier.",
                                            "type": "string"
                                          },
                                          "Value": {
                                            "description": "The business identity value.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "senderBusinessIdentity": {
                                        "properties": {
                                          "Qualifier": {
                                            "description": "The business identity qualifier.",
                                            "type": "string"
                                          },
                                          "Value": {
                                            "description": "The business identity value.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "sendAgreement": {
                                    "properties": {
                                      "protocolSettings": {
                                        "properties": {
                                          "acknowledgementSettings": {
                                            "properties": {
                                              "acknowledgementControlNumberLowerBound": {
                                                "description": "The acknowledgement control number lower bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "acknowledgementControlNumberPrefix": {
                                                "description": "The acknowledgement control number prefix.",
                                                "type": "string"
                                              },
                                              "acknowledgementControlNumberSuffix": {
                                                "description": "The acknowledgement control number suffix.",
                                                "type": "string"
                                              },
                                              "acknowledgementControlNumberUpperBound": {
                                                "description": "The acknowledgement control number upper bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "batchFunctionalAcknowledgements": {
                                                "description": "The value indicating whether to batch functional acknowledgements.",
                                                "type": "boolean"
                                              },
                                              "batchImplementationAcknowledgements": {
                                                "description": "The value indicating whether to batch implementation acknowledgements.",
                                                "type": "boolean"
                                              },
                                              "batchTechnicalAcknowledgements": {
                                                "description": "The value indicating whether to batch the technical acknowledgements.",
                                                "type": "boolean"
                                              },
                                              "functionalAcknowledgementVersion": {
                                                "description": "The functional acknowledgement version.",
                                                "type": "string"
                                              },
                                              "implementationAcknowledgementVersion": {
                                                "description": "The implementation acknowledgement version.",
                                                "type": "string"
                                              },
                                              "needFunctionalAcknowledgement": {
                                                "description": "The value indicating whether functional acknowledgement is needed.",
                                                "type": "boolean"
                                              },
                                              "needImplementationAcknowledgement": {
                                                "description": "The value indicating whether implementation acknowledgement is needed.",
                                                "type": "boolean"
                                              },
                                              "needLoopForValidMessages": {
                                                "description": "The value indicating whether a loop is needed for valid messages.",
                                                "type": "boolean"
                                              },
                                              "needTechnicalAcknowledgement": {
                                                "description": "The value indicating whether technical acknowledgement is needed.",
                                                "type": "boolean"
                                              },
                                              "rolloverAcknowledgementControlNumber": {
                                                "description": "The value indicating whether to rollover acknowledgement control number.",
                                                "type": "boolean"
                                              },
                                              "sendSynchronousAcknowledgement": {
                                                "description": "The value indicating whether to send synchronous acknowledgement.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "envelopeOverrides": {
                                            "description": "The X12 envelope override settings.",
                                            "items": {
                                              "properties": {
                                                "dateFormat": {
                                                  "enum": [
                                                    "NotSpecified",
                                                    "CCYYMMDD",
                                                    "YYMMDD"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": false,
                                                    "name": "X12DateFormat"
                                                  }
                                                },
                                                "functionalIdentifierCode": {
                                                  "description": "The functional identifier code.",
                                                  "type": "string"
                                                },
                                                "headerVersion": {
                                                  "description": "The header version.",
                                                  "type": "string"
                                                },
                                                "messageId": {
                                                  "description": "The message id on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "protocolVersion": {
                                                  "description": "The protocol version on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "receiverApplicationId": {
                                                  "description": "The receiver application id.",
                                                  "type": "string"
                                                },
                                                "responsibleAgencyCode": {
                                                  "description": "The responsible agency code.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "senderApplicationId": {
                                                  "description": "The sender application id.",
                                                  "type": "string"
                                                },
                                                "targetNamespace": {
                                                  "description": "The target namespace on which this envelope settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "timeFormat": {
                                                  "enum": [
                                                    "NotSpecified",
                                                    "HHMM",
                                                    "HHMMSS",
                                                    "HHMMSSdd",
                                                    "HHMMSSd"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": false,
                                                    "name": "X12TimeFormat"
                                                  }
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "envelopeSettings": {
                                            "properties": {
                                              "controlStandardsId": {
                                                "description": "The controls standards id.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "controlVersionNumber": {
                                                "description": "The control version number.",
                                                "type": "string"
                                              },
                                              "enableDefaultGroupHeaders": {
                                                "description": "The value indicating whether to enable default group headers.",
                                                "type": "boolean"
                                              },
                                              "functionalGroupId": {
                                                "description": "The functional group id.",
                                                "type": "string"
                                              },
                                              "groupControlNumberLowerBound": {
                                                "description": "The group control number lower bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "groupControlNumberUpperBound": {
                                                "description": "The group control number upper bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "groupHeaderAgencyCode": {
                                                "description": "The group header agency code.",
                                                "type": "string"
                                              },
                                              "groupHeaderDateFormat": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "CCYYMMDD",
                                                  "YYMMDD"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "X12DateFormat"
                                                }
                                              },
                                              "groupHeaderTimeFormat": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "HHMM",
                                                  "HHMMSS",
                                                  "HHMMSSdd",
                                                  "HHMMSSd"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "X12TimeFormat"
                                                }
                                              },
                                              "groupHeaderVersion": {
                                                "description": "The group header version.",
                                                "type": "string"
                                              },
                                              "interchangeControlNumberLowerBound": {
                                                "description": "The interchange  control number lower bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "interchangeControlNumberUpperBound": {
                                                "description": "The interchange  control number upper bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "overwriteExistingTransactionSetControlNumber": {
                                                "description": "The value indicating whether to overwrite existing transaction set control number.",
                                                "type": "boolean"
                                              },
                                              "receiverApplicationId": {
                                                "description": "The receiver application id.",
                                                "type": "string"
                                              },
                                              "rolloverGroupControlNumber": {
                                                "description": "The value indicating whether to rollover group control number.",
                                                "type": "boolean"
                                              },
                                              "rolloverInterchangeControlNumber": {
                                                "description": "The value indicating whether to rollover interchange control number.",
                                                "type": "boolean"
                                              },
                                              "rolloverTransactionSetControlNumber": {
                                                "description": "The value indicating whether to rollover transaction set control number.",
                                                "type": "boolean"
                                              },
                                              "senderApplicationId": {
                                                "description": "The sender application id.",
                                                "type": "string"
                                              },
                                              "transactionSetControlNumberLowerBound": {
                                                "description": "The transaction set control number lower bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "transactionSetControlNumberPrefix": {
                                                "description": "The transaction set control number prefix.",
                                                "type": "string"
                                              },
                                              "transactionSetControlNumberSuffix": {
                                                "description": "The transaction set control number suffix.",
                                                "type": "string"
                                              },
                                              "transactionSetControlNumberUpperBound": {
                                                "description": "The transaction set control number upper bound.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "usageIndicator": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "Test",
                                                  "Information",
                                                  "Production"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "UsageIndicator"
                                                }
                                              },
                                              "useControlStandardsIdAsRepetitionCharacter": {
                                                "description": "The value indicating whether to use control standards id as repetition character.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "framingSettings": {
                                            "properties": {
                                              "characterSet": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "Basic",
                                                  "Extended",
                                                  "UTF8"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "X12CharacterSet"
                                                }
                                              },
                                              "componentSeparator": {
                                                "description": "The component separator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "dataElementSeparator": {
                                                "description": "The data element separator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "replaceCharacter": {
                                                "description": "The replacement character.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "replaceSeparatorsInPayload": {
                                                "description": "The value indicating whether to replace separators in payload.",
                                                "type": "boolean"
                                              },
                                              "segmentTerminator": {
                                                "description": "The segment terminator.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "segmentTerminatorSuffix": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "None",
                                                  "CR",
                                                  "LF",
                                                  "CRLF"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "SegmentTerminatorSuffix"
                                                }
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "messageFilter": {
                                            "properties": {
                                              "messageFilterType": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "Include",
                                                  "Exclude"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "MessageFilterType"
                                                }
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "messageFilterList": {
                                            "description": "The X12 message filter list.",
                                            "items": {
                                              "properties": {
                                                "messageId": {
                                                  "description": "The message id.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "processingSettings": {
                                            "properties": {
                                              "convertImpliedDecimal": {
                                                "description": "The value indicating whether to convert numerical type to implied decimal.",
                                                "type": "boolean"
                                              },
                                              "createEmptyXmlTagsForTrailingSeparators": {
                                                "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                                "type": "boolean"
                                              },
                                              "maskSecurityInfo": {
                                                "description": "The value indicating whether to mask security information.",
                                                "type": "boolean"
                                              },
                                              "preserveInterchange": {
                                                "description": "The value indicating whether to preserve interchange.",
                                                "type": "boolean"
                                              },
                                              "suspendInterchangeOnError": {
                                                "description": "The value indicating whether to suspend interchange on error.",
                                                "type": "boolean"
                                              },
                                              "useDotAsDecimalSeparator": {
                                                "description": "The value indicating whether to use dot as decimal separator.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "schemaReferences": {
                                            "description": "The X12 schema references.",
                                            "items": {
                                              "properties": {
                                                "messageId": {
                                                  "description": "The message id.",
                                                  "type": "string"
                                                },
                                                "schemaName": {
                                                  "description": "The schema name.",
                                                  "type": "string"
                                                },
                                                "schemaVersion": {
                                                  "description": "The schema version.",
                                                  "type": "string"
                                                },
                                                "senderApplicationId": {
                                                  "description": "The sender application id.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "securitySettings": {
                                            "properties": {
                                              "authorizationQualifier": {
                                                "description": "The authorization qualifier.",
                                                "type": "string"
                                              },
                                              "authorizationValue": {
                                                "description": "The authorization value.",
                                                "type": "string"
                                              },
                                              "passwordValue": {
                                                "description": "The password value.",
                                                "type": "string"
                                              },
                                              "securityQualifier": {
                                                "description": "The security qualifier.",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "validationOverrides": {
                                            "description": "The X12 validation override settings.",
                                            "items": {
                                              "properties": {
                                                "allowLeadingAndTrailingSpacesAndZeroes": {
                                                  "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                                  "type": "boolean"
                                                },
                                                "messageId": {
                                                  "description": "The message id on which the validation settings has to be applied.",
                                                  "type": "string"
                                                },
                                                "trailingSeparatorPolicy": {
                                                  "enum": [
                                                    "NotSpecified",
                                                    "NotAllowed",
                                                    "Optional",
                                                    "Mandatory"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": false,
                                                    "name": "TrailingSeparatorPolicy"
                                                  }
                                                },
                                                "trimLeadingAndTrailingSpacesAndZeroes": {
                                                  "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                                  "type": "boolean"
                                                },
                                                "validateCharacterSet": {
                                                  "description": "The value indicating whether to validate character Set.",
                                                  "type": "boolean"
                                                },
                                                "validateEDITypes": {
                                                  "description": "The value indicating whether to validate EDI types.",
                                                  "type": "boolean"
                                                },
                                                "validateXSDTypes": {
                                                  "description": "The value indicating whether to validate XSD types.",
                                                  "type": "boolean"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "validationSettings": {
                                            "properties": {
                                              "allowLeadingAndTrailingSpacesAndZeroes": {
                                                "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                                "type": "boolean"
                                              },
                                              "checkDuplicateGroupControlNumber": {
                                                "description": "The value indicating whether to check for duplicate group control number.",
                                                "type": "boolean"
                                              },
                                              "checkDuplicateInterchangeControlNumber": {
                                                "description": "The value indicating whether to check for duplicate interchange control number.",
                                                "type": "boolean"
                                              },
                                              "checkDuplicateTransactionSetControlNumber": {
                                                "description": "The value indicating whether to check for duplicate transaction set control number.",
                                                "type": "boolean"
                                              },
                                              "interchangeControlNumberValidityDays": {
                                                "description": "The validity period of interchange control number.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "trailingSeparatorPolicy": {
                                                "enum": [
                                                  "NotSpecified",
                                                  "NotAllowed",
                                                  "Optional",
                                                  "Mandatory"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": false,
                                                  "name": "TrailingSeparatorPolicy"
                                                }
                                              },
                                              "trimLeadingAndTrailingSpacesAndZeroes": {
                                                "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                                "type": "boolean"
                                              },
                                              "validateCharacterSet": {
                                                "description": "The value indicating whether to validate character set in the message.",
                                                "type": "boolean"
                                              },
                                              "validateEDITypes": {
                                                "description": "The value indicating whether to Whether to validate EDI types.",
                                                "type": "boolean"
                                              },
                                              "validateXSDTypes": {
                                                "description": "The value indicating whether to Whether to validate XSD types.",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "x12DelimiterOverrides": {
                                            "description": "The X12 delimiter override settings.",
                                            "items": {
                                              "properties": {
                                                "componentSeparator": {
                                                  "description": "The component separator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "dataElementSeparator": {
                                                  "description": "The data element separator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "messageId": {
                                                  "description": "The message id.",
                                                  "type": "string"
                                                },
                                                "protocolVersion": {
                                                  "description": "The protocol version.",
                                                  "type": "string"
                                                },
                                                "replaceCharacter": {
                                                  "description": "The replacement character.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "replaceSeparatorsInPayload": {
                                                  "description": "The value indicating whether to replace separators in payload.",
                                                  "type": "boolean"
                                                },
                                                "segmentTerminator": {
                                                  "description": "The segment terminator.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "segmentTerminatorSuffix": {
                                                  "enum": [
                                                    "NotSpecified",
                                                    "None",
                                                    "CR",
                                                    "LF",
                                                    "CRLF"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": false,
                                                    "name": "SegmentTerminatorSuffix"
                                                  }
                                                },
                                                "targetNamespace": {
                                                  "description": "The target namespace on which this delimiter settings has to be applied.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "receiverBusinessIdentity": {
                                        "properties": {
                                          "Qualifier": {
                                            "description": "The business identity qualifier.",
                                            "type": "string"
                                          },
                                          "Value": {
                                            "description": "The business identity value.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "senderBusinessIdentity": {
                                        "properties": {
                                          "Qualifier": {
                                            "description": "The business identity qualifier.",
                                            "type": "string"
                                          },
                                          "Value": {
                                            "description": "The business identity value.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "createdTime": {
                            "description": "The created time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "guestIdentity": {
                            "properties": {
                              "Qualifier": {
                                "description": "The business identity qualifier.",
                                "type": "string"
                              },
                              "Value": {
                                "description": "The business identity value.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "guestPartner": {
                            "description": "The guest partner.",
                            "type": "string"
                          },
                          "hostIdentity": {
                            "properties": {
                              "Qualifier": {
                                "description": "The business identity qualifier.",
                                "type": "string"
                              },
                              "Value": {
                                "description": "The business identity value.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "hostPartner": {
                            "description": "The host partner.",
                            "type": "string"
                          },
                          "metadata": {
                            "description": "The metadata.",
                            "properties": {},
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountAgreementListResult"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "agreementType": {
                  "enum": [
                    "NotSpecified",
                    "AS2",
                    "X12",
                    "Edifact"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "AgreementType"
                  }
                },
                "changedTime": {
                  "description": "The changed time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "content": {
                  "properties": {
                    "AS2": {
                      "properties": {
                        "receiveAgreement": {
                          "properties": {
                            "protocolSettings": {
                              "properties": {
                                "acknowledgementConnectionSettings": {
                                  "properties": {
                                    "ignoreCertificateNameMismatch": {
                                      "description": "The value indicating whether to ignore mismatch in certificate name.",
                                      "type": "boolean"
                                    },
                                    "keepHttpConnectionAlive": {
                                      "description": "The value indicating whether to keep the connection alive.",
                                      "type": "boolean"
                                    },
                                    "supportHttpStatusCodeContinue": {
                                      "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                      "type": "boolean"
                                    },
                                    "unfoldHttpHeaders": {
                                      "description": "The value indicating whether to unfold the HTTP headers.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "envelopeSettings": {
                                  "properties": {
                                    "AutogenerateFileName": {
                                      "description": "The value indicating whether to auto generate file name.",
                                      "type": "boolean"
                                    },
                                    "SuspendMessageOnFileNameGenerationError": {
                                      "description": "The value indicating whether to suspend message on file name generation error.",
                                      "type": "boolean"
                                    },
                                    "fileNameTemplate": {
                                      "description": "The template for file name.",
                                      "type": "string"
                                    },
                                    "messageContentType": {
                                      "description": "The message content type.",
                                      "type": "string"
                                    },
                                    "transmitFileNameInMimeHeader": {
                                      "description": "The value indicating whether to transmit file name in mime header.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "errorSettings": {
                                  "properties": {
                                    "ResendIfMdnNotReceived": {
                                      "description": "The value indicating whether to resend message If MDN is not received.",
                                      "type": "boolean"
                                    },
                                    "SuspendDuplicateMessage": {
                                      "description": "The value indicating whether to suspend duplicate message.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "mdnSettings": {
                                  "properties": {
                                    "dispositionNotificationTo": {
                                      "description": "The disposition notification to header value.",
                                      "type": "string"
                                    },
                                    "mdnText": {
                                      "description": "The MDN text.",
                                      "type": "string"
                                    },
                                    "micHashingAlgorithm": {
                                      "enum": [
                                        "NotSpecified",
                                        "None",
                                        "SHA2256",
                                        "SHA2384",
                                        "SHA2512"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "HashingAlgorithm"
                                      }
                                    },
                                    "needMdn": {
                                      "description": "The value indicating whether to send or request a MDN.",
                                      "type": "boolean"
                                    },
                                    "receiptDeliveryUrl": {
                                      "description": "The receipt delivery URL.",
                                      "type": "string"
                                    },
                                    "sendInboundMdnToMessageBox": {
                                      "description": "The value indicating whether to send inbound MDN to message box.",
                                      "type": "boolean"
                                    },
                                    "sendMdnAsynchronously": {
                                      "description": "The value indicating whether to send the asynchronous MDN.",
                                      "type": "boolean"
                                    },
                                    "signMdn": {
                                      "description": "The value indicating whether the MDN needs to be signed or not.",
                                      "type": "boolean"
                                    },
                                    "signOutboundMdnIfOptional": {
                                      "description": "The value indicating whether to sign the outbound MDN if optional.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "messageConnectionSettings": {
                                  "properties": {
                                    "ignoreCertificateNameMismatch": {
                                      "description": "The value indicating whether to ignore mismatch in certificate name.",
                                      "type": "boolean"
                                    },
                                    "keepHttpConnectionAlive": {
                                      "description": "The value indicating whether to keep the connection alive.",
                                      "type": "boolean"
                                    },
                                    "supportHttpStatusCodeContinue": {
                                      "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                      "type": "boolean"
                                    },
                                    "unfoldHttpHeaders": {
                                      "description": "The value indicating whether to unfold the HTTP headers.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "securitySettings": {
                                  "properties": {
                                    "enableNrrForInboundDecodedMessages": {
                                      "description": "The value indicating whether to enable NRR for inbound decoded messages.",
                                      "type": "boolean"
                                    },
                                    "enableNrrForInboundEncodedMessages": {
                                      "description": "The value indicating whether to enable NRR for inbound encoded messages.",
                                      "type": "boolean"
                                    },
                                    "enableNrrForInboundMdn": {
                                      "description": "The value indicating whether to enable NRR for inbound MDN.",
                                      "type": "boolean"
                                    },
                                    "enableNrrForOutboundDecodedMessages": {
                                      "description": "The value indicating whether to enable NRR for outbound decoded messages.",
                                      "type": "boolean"
                                    },
                                    "enableNrrForOutboundEncodedMessages": {
                                      "description": "The value indicating whether to enable NRR for outbound encoded messages.",
                                      "type": "boolean"
                                    },
                                    "enableNrrForOutboundMdn": {
                                      "description": "The value indicating whether to enable NRR for outbound MDN.",
                                      "type": "boolean"
                                    },
                                    "encryptionCertificateName": {
                                      "description": "The name of the encryption certificate.",
                                      "type": "string"
                                    },
                                    "overrideGroupSigningCertificate": {
                                      "description": "The value indicating whether to send or request a MDN.",
                                      "type": "boolean"
                                    },
                                    "signingCertificateName": {
                                      "description": "The name of the signing certificate.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "validationSettings": {
                                  "properties": {
                                    "checkCertificateRevocationListOnReceive": {
                                      "description": "The value indicating whether to check for certificate revocation list on receive.",
                                      "type": "boolean"
                                    },
                                    "checkCertificateRevocationListOnSend": {
                                      "description": "The value indicating whether to check for certificate revocation list on send.",
                                      "type": "boolean"
                                    },
                                    "checkDuplicateMessage": {
                                      "description": "The value indicating whether to check for duplicate message.",
                                      "type": "boolean"
                                    },
                                    "compressMessage": {
                                      "description": "The value indicating whether the message has to be compressed.",
                                      "type": "boolean"
                                    },
                                    "encryptMessage": {
                                      "description": "The value indicating whether the message has to be encrypted.",
                                      "type": "boolean"
                                    },
                                    "encryptionAlgorithm": {
                                      "enum": [
                                        "NotSpecified",
                                        "None",
                                        "DES3",
                                        "RC2",
                                        "AES128",
                                        "AES192",
                                        "AES256"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "EncryptionAlgorithm"
                                      }
                                    },
                                    "interchangeDuplicatesValidityDays": {
                                      "description": "The number of days to look back for duplicate interchange.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "overrideMessageProperties": {
                                      "description": "The value indicating whether to override incoming message properties with those in agreement.",
                                      "type": "boolean"
                                    },
                                    "signMessage": {
                                      "description": "The value indicating whether the message has to be signed.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "receiverBusinessIdentity": {
                              "properties": {
                                "Qualifier": {
                                  "description": "The business identity qualifier.",
                                  "type": "string"
                                },
                                "Value": {
                                  "description": "The business identity value.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "senderBusinessIdentity": {
                              "properties": {
                                "Qualifier": {
                                  "description": "The business identity qualifier.",
                                  "type": "string"
                                },
                                "Value": {
                                  "description": "The business identity value.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "sendAgreement": {
                          "properties": {
                            "protocolSettings": {
                              "properties": {
                                "acknowledgementConnectionSettings": {
                                  "properties": {
                                    "ignoreCertificateNameMismatch": {
                                      "description": "The value indicating whether to ignore mismatch in certificate name.",
                                      "type": "boolean"
                                    },
                                    "keepHttpConnectionAlive": {
                                      "description": "The value indicating whether to keep the connection alive.",
                                      "type": "boolean"
                                    },
                                    "supportHttpStatusCodeContinue": {
                                      "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                      "type": "boolean"
                                    },
                                    "unfoldHttpHeaders": {
                                      "description": "The value indicating whether to unfold the HTTP headers.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "envelopeSettings": {
                                  "properties": {
                                    "AutogenerateFileName": {
                                      "description": "The value indicating whether to auto generate file name.",
                                      "type": "boolean"
                                    },
                                    "SuspendMessageOnFileNameGenerationError": {
                                      "description": "The value indicating whether to suspend message on file name generation error.",
                                      "type": "boolean"
                                    },
                                    "fileNameTemplate": {
                                      "description": "The template for file name.",
                                      "type": "string"
                                    },
                                    "messageContentType": {
                                      "description": "The message content type.",
                                      "type": "string"
                                    },
                                    "transmitFileNameInMimeHeader": {
                                      "description": "The value indicating whether to transmit file name in mime header.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "errorSettings": {
                                  "properties": {
                                    "ResendIfMdnNotReceived": {
                                      "description": "The value indicating whether to resend message If MDN is not received.",
                                      "type": "boolean"
                                    },
                                    "SuspendDuplicateMessage": {
                                      "description": "The value indicating whether to suspend duplicate message.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "mdnSettings": {
                                  "properties": {
                                    "dispositionNotificationTo": {
                                      "description": "The disposition notification to header value.",
                                      "type": "string"
                                    },
                                    "mdnText": {
                                      "description": "The MDN text.",
                                      "type": "string"
                                    },
                                    "micHashingAlgorithm": {
                                      "enum": [
                                        "NotSpecified",
                                        "None",
                                        "SHA2256",
                                        "SHA2384",
                                        "SHA2512"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "HashingAlgorithm"
                                      }
                                    },
                                    "needMdn": {
                                      "description": "The value indicating whether to send or request a MDN.",
                                      "type": "boolean"
                                    },
                                    "receiptDeliveryUrl": {
                                      "description": "The receipt delivery URL.",
                                      "type": "string"
                                    },
                                    "sendInboundMdnToMessageBox": {
                                      "description": "The value indicating whether to send inbound MDN to message box.",
                                      "type": "boolean"
                                    },
                                    "sendMdnAsynchronously": {
                                      "description": "The value indicating whether to send the asynchronous MDN.",
                                      "type": "boolean"
                                    },
                                    "signMdn": {
                                      "description": "The value indicating whether the MDN needs to be signed or not.",
                                      "type": "boolean"
                                    },
                                    "signOutboundMdnIfOptional": {
                                      "description": "The value indicating whether to sign the outbound MDN if optional.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "messageConnectionSettings": {
                                  "properties": {
                                    "ignoreCertificateNameMismatch": {
                                      "description": "The value indicating whether to ignore mismatch in certificate name.",
                                      "type": "boolean"
                                    },
                                    "keepHttpConnectionAlive": {
                                      "description": "The value indicating whether to keep the connection alive.",
                                      "type": "boolean"
                                    },
                                    "supportHttpStatusCodeContinue": {
                                      "description": "The value indicating whether to support HTTP status code 'CONTINUE'.",
                                      "type": "boolean"
                                    },
                                    "unfoldHttpHeaders": {
                                      "description": "The value indicating whether to unfold the HTTP headers.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "securitySettings": {
                                  "properties": {
                                    "enableNrrForInboundDecodedMessages": {
                                      "description": "The value indicating whether to enable NRR for inbound decoded messages.",
                                      "type": "boolean"
                                    },
                                    "enableNrrForInboundEncodedMessages": {
                                      "description": "The value indicating whether to enable NRR for inbound encoded messages.",
                                      "type": "boolean"
                                    },
                                    "enableNrrForInboundMdn": {
                                      "description": "The value indicating whether to enable NRR for inbound MDN.",
                                      "type": "boolean"
                                    },
                                    "enableNrrForOutboundDecodedMessages": {
                                      "description": "The value indicating whether to enable NRR for outbound decoded messages.",
                                      "type": "boolean"
                                    },
                                    "enableNrrForOutboundEncodedMessages": {
                                      "description": "The value indicating whether to enable NRR for outbound encoded messages.",
                                      "type": "boolean"
                                    },
                                    "enableNrrForOutboundMdn": {
                                      "description": "The value indicating whether to enable NRR for outbound MDN.",
                                      "type": "boolean"
                                    },
                                    "encryptionCertificateName": {
                                      "description": "The name of the encryption certificate.",
                                      "type": "string"
                                    },
                                    "overrideGroupSigningCertificate": {
                                      "description": "The value indicating whether to send or request a MDN.",
                                      "type": "boolean"
                                    },
                                    "signingCertificateName": {
                                      "description": "The name of the signing certificate.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "validationSettings": {
                                  "properties": {
                                    "checkCertificateRevocationListOnReceive": {
                                      "description": "The value indicating whether to check for certificate revocation list on receive.",
                                      "type": "boolean"
                                    },
                                    "checkCertificateRevocationListOnSend": {
                                      "description": "The value indicating whether to check for certificate revocation list on send.",
                                      "type": "boolean"
                                    },
                                    "checkDuplicateMessage": {
                                      "description": "The value indicating whether to check for duplicate message.",
                                      "type": "boolean"
                                    },
                                    "compressMessage": {
                                      "description": "The value indicating whether the message has to be compressed.",
                                      "type": "boolean"
                                    },
                                    "encryptMessage": {
                                      "description": "The value indicating whether the message has to be encrypted.",
                                      "type": "boolean"
                                    },
                                    "encryptionAlgorithm": {
                                      "enum": [
                                        "NotSpecified",
                                        "None",
                                        "DES3",
                                        "RC2",
                                        "AES128",
                                        "AES192",
                                        "AES256"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "EncryptionAlgorithm"
                                      }
                                    },
                                    "interchangeDuplicatesValidityDays": {
                                      "description": "The number of days to look back for duplicate interchange.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "overrideMessageProperties": {
                                      "description": "The value indicating whether to override incoming message properties with those in agreement.",
                                      "type": "boolean"
                                    },
                                    "signMessage": {
                                      "description": "The value indicating whether the message has to be signed.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "receiverBusinessIdentity": {
                              "properties": {
                                "Qualifier": {
                                  "description": "The business identity qualifier.",
                                  "type": "string"
                                },
                                "Value": {
                                  "description": "The business identity value.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "senderBusinessIdentity": {
                              "properties": {
                                "Qualifier": {
                                  "description": "The business identity qualifier.",
                                  "type": "string"
                                },
                                "Value": {
                                  "description": "The business identity value.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "Edifact": {
                      "properties": {
                        "receiveAgreement": {
                          "properties": {
                            "protocolSettings": {
                              "properties": {
                                "acknowledgementSettings": {
                                  "properties": {
                                    "acknowledgementControlNumberLowerBound": {
                                      "description": "The acknowledgement control number lower bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "acknowledgementControlNumberPrefix": {
                                      "description": "The acknowledgement control number prefix.",
                                      "type": "string"
                                    },
                                    "acknowledgementControlNumberSuffix": {
                                      "description": "The acknowledgement control number suffix.",
                                      "type": "string"
                                    },
                                    "acknowledgementControlNumberUpperBound": {
                                      "description": "The acknowledgement control number upper bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "batchFunctionalAcknowledgements": {
                                      "description": "The value indicating whether to batch functional acknowledgements.",
                                      "type": "boolean"
                                    },
                                    "batchTechnicalAcknowledgements": {
                                      "description": "The value indicating whether to batch the technical acknowledgements.",
                                      "type": "boolean"
                                    },
                                    "needFunctionalAcknowledgement": {
                                      "description": "The value indicating whether functional acknowledgement is needed.",
                                      "type": "boolean"
                                    },
                                    "needLoopForValidMessages": {
                                      "description": "The value indicating whether a loop is needed for valid messages.",
                                      "type": "boolean"
                                    },
                                    "needTechnicalAcknowledgement": {
                                      "description": "The value indicating whether technical acknowledgement is needed.",
                                      "type": "boolean"
                                    },
                                    "rolloverAcknowledgementControlNumber": {
                                      "description": "The value indicating whether to rollover acknowledgement control number.",
                                      "type": "boolean"
                                    },
                                    "sendSynchronousAcknowledgement": {
                                      "description": "The value indicating whether to send synchronous acknowledgement.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "edifactDelimiterOverrides": {
                                  "description": "The EDIFACT delimiter override settings.",
                                  "items": {
                                    "properties": {
                                      "componentSeparator": {
                                        "description": "The component separator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "dataElementSeparator": {
                                        "description": "The data element separator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "decimalPointIndicator": {
                                        "enum": [
                                          "NotSpecified",
                                          "Comma",
                                          "Decimal"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": false,
                                          "name": "EdifactDecimalIndicator"
                                        }
                                      },
                                      "messageAssociationAssignedCode": {
                                        "description": "The message association assigned code.",
                                        "type": "string"
                                      },
                                      "messageId": {
                                        "description": "The message id.",
                                        "type": "string"
                                      },
                                      "messageRelease": {
                                        "description": "The message release version.",
                                        "type": "string"
                                      },
                                      "messageVersion": {
                                        "description": "The message version.",
                                        "type": "string"
                                      },
                                      "releaseIndicator": {
                                        "description": "The release indicator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "repetitionSeparator": {
                                        "description": "The repetition separator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "segmentTerminator": {
                                        "description": "The segment terminator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "segmentTerminatorSuffix": {
                                        "enum": [
                                          "NotSpecified",
                                          "None",
                                          "CR",
                                          "LF",
                                          "CRLF"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": false,
                                          "name": "SegmentTerminatorSuffix"
                                        }
                                      },
                                      "targetNamespace": {
                                        "description": "The target namespace on which this delimiter settings has to be applied.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "envelopeOverrides": {
                                  "description": "The EDIFACT envelope override settings.",
                                  "items": {
                                    "properties": {
                                      "applicationPassword": {
                                        "description": "The application password.",
                                        "type": "string"
                                      },
                                      "associationAssignedCode": {
                                        "description": "The association assigned code.",
                                        "type": "string"
                                      },
                                      "controllingAgencyCode": {
                                        "description": "The controlling agency code.",
                                        "type": "string"
                                      },
                                      "functionalGroupId": {
                                        "description": "The functional group id.",
                                        "type": "string"
                                      },
                                      "groupHeaderMessageRelease": {
                                        "description": "The group header message release.",
                                        "type": "string"
                                      },
                                      "groupHeaderMessageVersion": {
                                        "description": "The group header message version.",
                                        "type": "string"
                                      },
                                      "messageAssociationAssignedCode": {
                                        "description": "The message association assigned code.",
                                        "type": "string"
                                      },
                                      "messageId": {
                                        "description": "The message id on which this envelope settings has to be applied.",
                                        "type": "string"
                                      },
                                      "messageRelease": {
                                        "description": "The message release version on which this envelope settings has to be applied.",
                                        "type": "string"
                                      },
                                      "messageVersion": {
                                        "description": "The message version on which this envelope settings has to be applied.",
                                        "type": "string"
                                      },
                                      "receiverApplicationId": {
                                        "description": "The receiver application id.",
                                        "type": "string"
                                      },
                                      "receiverApplicationQualifier": {
                                        "description": "The receiver application qualifier.",
                                        "type": "string"
                                      },
                                      "senderApplicationId": {
                                        "description": "The sender application id.",
                                        "type": "string"
                                      },
                                      "senderApplicationQualifier": {
                                        "description": "The sender application qualifier.",
                                        "type": "string"
                                      },
                                      "targetNamespace": {
                                        "description": "The target namespace on which this envelope settings has to be applied.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "envelopeSettings": {
                                  "properties": {
                                    "applicationReferenceId": {
                                      "description": "The application reference id.",
                                      "type": "string"
                                    },
                                    "applyDelimiterStringAdvice": {
                                      "description": "The value indicating whether to apply delimiter string advice.",
                                      "type": "boolean"
                                    },
                                    "communicationAgreementId": {
                                      "description": "The communication agreement id.",
                                      "type": "string"
                                    },
                                    "createGroupingSegments": {
                                      "description": "The value indicating whether to create grouping segments.",
                                      "type": "boolean"
                                    },
                                    "enableDefaultGroupHeaders": {
                                      "description": "The value indicating whether to enable default group headers.",
                                      "type": "boolean"
                                    },
                                    "functionalGroupId": {
                                      "description": "The functional group id.",
                                      "type": "string"
                                    },
                                    "groupApplicationPassword": {
                                      "description": "The group application password.",
                                      "type": "string"
                                    },
                                    "groupApplicationReceiverId": {
                                      "description": "The group application receiver id.",
                                      "type": "string"
                                    },
                                    "groupApplicationReceiverQualifier": {
                                      "description": "The group application receiver qualifier.",
                                      "type": "string"
                                    },
                                    "groupApplicationSenderId": {
                                      "description": "The group application sender id.",
                                      "type": "string"
                                    },
                                    "groupApplicationSenderQualifier": {
                                      "description": "The group application sender qualifier.",
                                      "type": "string"
                                    },
                                    "groupAssociationAssignedCode": {
                                      "description": "The group association assigned code.",
                                      "type": "string"
                                    },
                                    "groupControlNumberLowerBound": {
                                      "description": "The group control number lower bound.",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "groupControlNumberPrefix": {
                                      "description": "The group control number prefix.",
                                      "type": "string"
                                    },
                                    "groupControlNumberSuffix": {
                                      "description": "The group control number suffix.",
                                      "type": "string"
                                    },
                                    "groupControlNumberUpperBound": {
                                      "description": "The group control number upper bound.",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "groupControllingAgencyCode": {
                                      "description": "The group controlling agency code.",
                                      "type": "string"
                                    },
                                    "groupMessageRelease": {
                                      "description": "The group message release.",
                                      "type": "string"
                                    },
                                    "groupMessageVersion": {
                                      "description": "The group message version.",
                                      "type": "string"
                                    },
                                    "interchangeControlNumberLowerBound": {
                                      "description": "The interchange control number lower bound.",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "interchangeControlNumberPrefix": {
                                      "description": "The interchange control number prefix.",
                                      "type": "string"
                                    },
                                    "interchangeControlNumberSuffix": {
                                      "description": "The interchange control number suffix.",
                                      "type": "string"
                                    },
                                    "interchangeControlNumberUpperBound": {
                                      "description": "The interchange control number upper bound.",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "isTestInterchange": {
                                      "description": "The value indicating whether the message is a test interchange.",
                                      "type": "boolean"
                                    },
                                    "overwriteExistingTransactionSetControlNumber": {
                                      "description": "The value indicating whether to overwrite existing transaction set control number.",
                                      "type": "boolean"
                                    },
                                    "processingPriorityCode": {
                                      "description": "The processing priority code.",
                                      "type": "string"
                                    },
                                    "receiverInternalIdentification": {
                                      "description": "The receiver internal identification.",
                                      "type": "string"
                                    },
                                    "receiverInternalSubIdentification": {
                                      "description": "The receiver internal sub identification.",
                                      "type": "string"
                                    },
                                    "receiverReverseRoutingAddress": {
                                      "description": "The receiver reverse routing address.",
                                      "type": "string"
                                    },
                                    "recipientReferencePasswordQualifier": {
                                      "description": "The recipient reference password qualifier.",
                                      "type": "string"
                                    },
                                    "recipientReferencePasswordValue": {
                                      "description": "The recipient reference password value.",
                                      "type": "string"
                                    },
                                    "rolloverGroupControlNumber": {
                                      "description": "The value indicating whether to rollover group control number.",
                                      "type": "boolean"
                                    },
                                    "rolloverInterchangeControlNumber": {
                                      "description": "The value indicating whether to rollover interchange control number.",
                                      "type": "boolean"
                                    },
                                    "rolloverTransactionSetControlNumber": {
                                      "description": "The value indicating whether to rollover transaction set control number.",
                                      "type": "boolean"
                                    },
                                    "senderInternalIdentification": {
                                      "description": "The sender internal identification.",
                                      "type": "string"
                                    },
                                    "senderInternalSubIdentification": {
                                      "description": "The sender internal sub identification.",
                                      "type": "string"
                                    },
                                    "senderReverseRoutingAddress": {
                                      "description": "The sender reverse routing address.",
                                      "type": "string"
                                    },
                                    "transactionSetControlNumberLowerBound": {
                                      "description": "The transaction set control number lower bound.",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "transactionSetControlNumberPrefix": {
                                      "description": "The transaction set control number prefix.",
                                      "type": "string"
                                    },
                                    "transactionSetControlNumberSuffix": {
                                      "description": "The transaction set control number suffix.",
                                      "type": "string"
                                    },
                                    "transactionSetControlNumberUpperBound": {
                                      "description": "The transaction set control number upper bound.",
                                      "format": "int64",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "framingSettings": {
                                  "properties": {
                                    "characterEncoding": {
                                      "description": "The character encoding.",
                                      "type": "string"
                                    },
                                    "characterSet": {
                                      "enum": [
                                        "NotSpecified",
                                        "UNOB",
                                        "UNOA",
                                        "UNOC",
                                        "UNOD",
                                        "UNOE",
                                        "UNOF",
                                        "UNOG",
                                        "UNOH",
                                        "UNOI",
                                        "UNOJ",
                                        "UNOK",
                                        "UNOX",
                                        "UNOY",
                                        "KECA"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "EdifactCharacterSet"
                                      }
                                    },
                                    "componentSeparator": {
                                      "description": "The component separator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "dataElementSeparator": {
                                      "description": "The data element separator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "decimalPointIndicator": {
                                      "enum": [
                                        "NotSpecified",
                                        "Comma",
                                        "Decimal"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "EdifactDecimalIndicator"
                                      }
                                    },
                                    "protocolVersion": {
                                      "description": "The protocol version.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "releaseIndicator": {
                                      "description": "The release indicator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "repetitionSeparator": {
                                      "description": "The repetition separator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "segmentTerminator": {
                                      "description": "The segment terminator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "segmentTerminatorSuffix": {
                                      "enum": [
                                        "NotSpecified",
                                        "None",
                                        "CR",
                                        "LF",
                                        "CRLF"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "SegmentTerminatorSuffix"
                                      }
                                    },
                                    "serviceCodeListDirectoryVersion": {
                                      "description": "The service code list directory version.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "messageFilter": {
                                  "properties": {
                                    "messageFilterType": {
                                      "enum": [
                                        "NotSpecified",
                                        "Include",
                                        "Exclude"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "MessageFilterType"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "messageFilterList": {
                                  "description": "The EDIFACT message filter list.",
                                  "items": {
                                    "properties": {
                                      "messageId": {
                                        "description": "The message id on which this envelope settings has to be applied.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "processingSettings": {
                                  "properties": {
                                    "createEmptyXmlTagsForTrailingSeparators": {
                                      "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                      "type": "boolean"
                                    },
                                    "maskSecurityInfo": {
                                      "description": "The value indicating whether to mask security information.",
                                      "type": "boolean"
                                    },
                                    "preserveInterchange": {
                                      "description": "The value indicating whether to preserve interchange.",
                                      "type": "boolean"
                                    },
                                    "suspendInterchangeOnError": {
                                      "description": "The value indicating whether to suspend interchange on error.",
                                      "type": "boolean"
                                    },
                                    "useDotAsDecimalSeparator": {
                                      "description": "The value indicating whether to use dot as decimal separator.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schemaReferences": {
                                  "description": "The EDIFACT schema references.",
                                  "items": {
                                    "properties": {
                                      "associationAssignedCode": {
                                        "description": "The association assigned code.",
                                        "type": "string"
                                      },
                                      "messageId": {
                                        "description": "The message id.",
                                        "type": "string"
                                      },
                                      "messageRelease": {
                                        "description": "The message release version.",
                                        "type": "string"
                                      },
                                      "messageVersion": {
                                        "description": "The message version.",
                                        "type": "string"
                                      },
                                      "schemaName": {
                                        "description": "The schema name.",
                                        "type": "string"
                                      },
                                      "senderApplicationId": {
                                        "description": "The sender application id.",
                                        "type": "string"
                                      },
                                      "senderApplicationQualifier": {
                                        "description": "The sender application qualifier.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "validationOverrides": {
                                  "description": "The EDIFACT validation override settings.",
                                  "items": {
                                    "properties": {
                                      "allowLeadingAndTrailingSpacesAndZeroes": {
                                        "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                        "type": "boolean"
                                      },
                                      "enforceCharacterSet": {
                                        "description": "The value indicating whether to validate character Set.",
                                        "type": "boolean"
                                      },
                                      "messageId": {
                                        "description": "The message id on which the validation settings has to be applied.",
                                        "type": "string"
                                      },
                                      "trailingSeparatorPolicy": {
                                        "enum": [
                                          "NotSpecified",
                                          "NotAllowed",
                                          "Optional",
                                          "Mandatory"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": false,
                                          "name": "TrailingSeparatorPolicy"
                                        }
                                      },
                                      "trimLeadingAndTrailingSpacesAndZeroes": {
                                        "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                        "type": "boolean"
                                      },
                                      "validateEDITypes": {
                                        "description": "The value indicating whether to validate EDI types.",
                                        "type": "boolean"
                                      },
                                      "validateXSDTypes": {
                                        "description": "The value indicating whether to validate XSD types.",
                                        "type": "boolean"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "validationSettings": {
                                  "properties": {
                                    "allowLeadingAndTrailingSpacesAndZeroes": {
                                      "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                      "type": "boolean"
                                    },
                                    "checkDuplicateGroupControlNumber": {
                                      "description": "The value indicating whether to check for duplicate group control number.",
                                      "type": "boolean"
                                    },
                                    "checkDuplicateInterchangeControlNumber": {
                                      "description": "The value indicating whether to check for duplicate interchange control number.",
                                      "type": "boolean"
                                    },
                                    "checkDuplicateTransactionSetControlNumber": {
                                      "description": "The value indicating whether to check for duplicate transaction set control number.",
                                      "type": "boolean"
                                    },
                                    "interchangeControlNumberValidityDays": {
                                      "description": "The validity period of interchange control number.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "trailingSeparatorPolicy": {
                                      "enum": [
                                        "NotSpecified",
                                        "NotAllowed",
                                        "Optional",
                                        "Mandatory"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "TrailingSeparatorPolicy"
                                      }
                                    },
                                    "trimLeadingAndTrailingSpacesAndZeroes": {
                                      "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                      "type": "boolean"
                                    },
                                    "validateCharacterSet": {
                                      "description": "The value indicating whether to validate character set in the message.",
                                      "type": "boolean"
                                    },
                                    "validateEDITypes": {
                                      "description": "The value indicating whether to Whether to validate EDI types.",
                                      "type": "boolean"
                                    },
                                    "validateXSDTypes": {
                                      "description": "The value indicating whether to Whether to validate XSD types.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "receiverBusinessIdentity": {
                              "properties": {
                                "Qualifier": {
                                  "description": "The business identity qualifier.",
                                  "type": "string"
                                },
                                "Value": {
                                  "description": "The business identity value.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "senderBusinessIdentity": {
                              "properties": {
                                "Qualifier": {
                                  "description": "The business identity qualifier.",
                                  "type": "string"
                                },
                                "Value": {
                                  "description": "The business identity value.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "sendAgreement": {
                          "properties": {
                            "protocolSettings": {
                              "properties": {
                                "acknowledgementSettings": {
                                  "properties": {
                                    "acknowledgementControlNumberLowerBound": {
                                      "description": "The acknowledgement control number lower bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "acknowledgementControlNumberPrefix": {
                                      "description": "The acknowledgement control number prefix.",
                                      "type": "string"
                                    },
                                    "acknowledgementControlNumberSuffix": {
                                      "description": "The acknowledgement control number suffix.",
                                      "type": "string"
                                    },
                                    "acknowledgementControlNumberUpperBound": {
                                      "description": "The acknowledgement control number upper bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "batchFunctionalAcknowledgements": {
                                      "description": "The value indicating whether to batch functional acknowledgements.",
                                      "type": "boolean"
                                    },
                                    "batchTechnicalAcknowledgements": {
                                      "description": "The value indicating whether to batch the technical acknowledgements.",
                                      "type": "boolean"
                                    },
                                    "needFunctionalAcknowledgement": {
                                      "description": "The value indicating whether functional acknowledgement is needed.",
                                      "type": "boolean"
                                    },
                                    "needLoopForValidMessages": {
                                      "description": "The value indicating whether a loop is needed for valid messages.",
                                      "type": "boolean"
                                    },
                                    "needTechnicalAcknowledgement": {
                                      "description": "The value indicating whether technical acknowledgement is needed.",
                                      "type": "boolean"
                                    },
                                    "rolloverAcknowledgementControlNumber": {
                                      "description": "The value indicating whether to rollover acknowledgement control number.",
                                      "type": "boolean"
                                    },
                                    "sendSynchronousAcknowledgement": {
                                      "description": "The value indicating whether to send synchronous acknowledgement.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "edifactDelimiterOverrides": {
                                  "description": "The EDIFACT delimiter override settings.",
                                  "items": {
                                    "properties": {
                                      "componentSeparator": {
                                        "description": "The component separator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "dataElementSeparator": {
                                        "description": "The data element separator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "decimalPointIndicator": {
                                        "enum": [
                                          "NotSpecified",
                                          "Comma",
                                          "Decimal"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": false,
                                          "name": "EdifactDecimalIndicator"
                                        }
                                      },
                                      "messageAssociationAssignedCode": {
                                        "description": "The message association assigned code.",
                                        "type": "string"
                                      },
                                      "messageId": {
                                        "description": "The message id.",
                                        "type": "string"
                                      },
                                      "messageRelease": {
                                        "description": "The message release version.",
                                        "type": "string"
                                      },
                                      "messageVersion": {
                                        "description": "The message version.",
                                        "type": "string"
                                      },
                                      "releaseIndicator": {
                                        "description": "The release indicator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "repetitionSeparator": {
                                        "description": "The repetition separator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "segmentTerminator": {
                                        "description": "The segment terminator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "segmentTerminatorSuffix": {
                                        "enum": [
                                          "NotSpecified",
                                          "None",
                                          "CR",
                                          "LF",
                                          "CRLF"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": false,
                                          "name": "SegmentTerminatorSuffix"
                                        }
                                      },
                                      "targetNamespace": {
                                        "description": "The target namespace on which this delimiter settings has to be applied.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "envelopeOverrides": {
                                  "description": "The EDIFACT envelope override settings.",
                                  "items": {
                                    "properties": {
                                      "applicationPassword": {
                                        "description": "The application password.",
                                        "type": "string"
                                      },
                                      "associationAssignedCode": {
                                        "description": "The association assigned code.",
                                        "type": "string"
                                      },
                                      "controllingAgencyCode": {
                                        "description": "The controlling agency code.",
                                        "type": "string"
                                      },
                                      "functionalGroupId": {
                                        "description": "The functional group id.",
                                        "type": "string"
                                      },
                                      "groupHeaderMessageRelease": {
                                        "description": "The group header message release.",
                                        "type": "string"
                                      },
                                      "groupHeaderMessageVersion": {
                                        "description": "The group header message version.",
                                        "type": "string"
                                      },
                                      "messageAssociationAssignedCode": {
                                        "description": "The message association assigned code.",
                                        "type": "string"
                                      },
                                      "messageId": {
                                        "description": "The message id on which this envelope settings has to be applied.",
                                        "type": "string"
                                      },
                                      "messageRelease": {
                                        "description": "The message release version on which this envelope settings has to be applied.",
                                        "type": "string"
                                      },
                                      "messageVersion": {
                                        "description": "The message version on which this envelope settings has to be applied.",
                                        "type": "string"
                                      },
                                      "receiverApplicationId": {
                                        "description": "The receiver application id.",
                                        "type": "string"
                                      },
                                      "receiverApplicationQualifier": {
                                        "description": "The receiver application qualifier.",
                                        "type": "string"
                                      },
                                      "senderApplicationId": {
                                        "description": "The sender application id.",
                                        "type": "string"
                                      },
                                      "senderApplicationQualifier": {
                                        "description": "The sender application qualifier.",
                                        "type": "string"
                                      },
                                      "targetNamespace": {
                                        "description": "The target namespace on which this envelope settings has to be applied.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "envelopeSettings": {
                                  "properties": {
                                    "applicationReferenceId": {
                                      "description": "The application reference id.",
                                      "type": "string"
                                    },
                                    "applyDelimiterStringAdvice": {
                                      "description": "The value indicating whether to apply delimiter string advice.",
                                      "type": "boolean"
                                    },
                                    "communicationAgreementId": {
                                      "description": "The communication agreement id.",
                                      "type": "string"
                                    },
                                    "createGroupingSegments": {
                                      "description": "The value indicating whether to create grouping segments.",
                                      "type": "boolean"
                                    },
                                    "enableDefaultGroupHeaders": {
                                      "description": "The value indicating whether to enable default group headers.",
                                      "type": "boolean"
                                    },
                                    "functionalGroupId": {
                                      "description": "The functional group id.",
                                      "type": "string"
                                    },
                                    "groupApplicationPassword": {
                                      "description": "The group application password.",
                                      "type": "string"
                                    },
                                    "groupApplicationReceiverId": {
                                      "description": "The group application receiver id.",
                                      "type": "string"
                                    },
                                    "groupApplicationReceiverQualifier": {
                                      "description": "The group application receiver qualifier.",
                                      "type": "string"
                                    },
                                    "groupApplicationSenderId": {
                                      "description": "The group application sender id.",
                                      "type": "string"
                                    },
                                    "groupApplicationSenderQualifier": {
                                      "description": "The group application sender qualifier.",
                                      "type": "string"
                                    },
                                    "groupAssociationAssignedCode": {
                                      "description": "The group association assigned code.",
                                      "type": "string"
                                    },
                                    "groupControlNumberLowerBound": {
                                      "description": "The group control number lower bound.",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "groupControlNumberPrefix": {
                                      "description": "The group control number prefix.",
                                      "type": "string"
                                    },
                                    "groupControlNumberSuffix": {
                                      "description": "The group control number suffix.",
                                      "type": "string"
                                    },
                                    "groupControlNumberUpperBound": {
                                      "description": "The group control number upper bound.",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "groupControllingAgencyCode": {
                                      "description": "The group controlling agency code.",
                                      "type": "string"
                                    },
                                    "groupMessageRelease": {
                                      "description": "The group message release.",
                                      "type": "string"
                                    },
                                    "groupMessageVersion": {
                                      "description": "The group message version.",
                                      "type": "string"
                                    },
                                    "interchangeControlNumberLowerBound": {
                                      "description": "The interchange control number lower bound.",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "interchangeControlNumberPrefix": {
                                      "description": "The interchange control number prefix.",
                                      "type": "string"
                                    },
                                    "interchangeControlNumberSuffix": {
                                      "description": "The interchange control number suffix.",
                                      "type": "string"
                                    },
                                    "interchangeControlNumberUpperBound": {
                                      "description": "The interchange control number upper bound.",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "isTestInterchange": {
                                      "description": "The value indicating whether the message is a test interchange.",
                                      "type": "boolean"
                                    },
                                    "overwriteExistingTransactionSetControlNumber": {
                                      "description": "The value indicating whether to overwrite existing transaction set control number.",
                                      "type": "boolean"
                                    },
                                    "processingPriorityCode": {
                                      "description": "The processing priority code.",
                                      "type": "string"
                                    },
                                    "receiverInternalIdentification": {
                                      "description": "The receiver internal identification.",
                                      "type": "string"
                                    },
                                    "receiverInternalSubIdentification": {
                                      "description": "The receiver internal sub identification.",
                                      "type": "string"
                                    },
                                    "receiverReverseRoutingAddress": {
                                      "description": "The receiver reverse routing address.",
                                      "type": "string"
                                    },
                                    "recipientReferencePasswordQualifier": {
                                      "description": "The recipient reference password qualifier.",
                                      "type": "string"
                                    },
                                    "recipientReferencePasswordValue": {
                                      "description": "The recipient reference password value.",
                                      "type": "string"
                                    },
                                    "rolloverGroupControlNumber": {
                                      "description": "The value indicating whether to rollover group control number.",
                                      "type": "boolean"
                                    },
                                    "rolloverInterchangeControlNumber": {
                                      "description": "The value indicating whether to rollover interchange control number.",
                                      "type": "boolean"
                                    },
                                    "rolloverTransactionSetControlNumber": {
                                      "description": "The value indicating whether to rollover transaction set control number.",
                                      "type": "boolean"
                                    },
                                    "senderInternalIdentification": {
                                      "description": "The sender internal identification.",
                                      "type": "string"
                                    },
                                    "senderInternalSubIdentification": {
                                      "description": "The sender internal sub identification.",
                                      "type": "string"
                                    },
                                    "senderReverseRoutingAddress": {
                                      "description": "The sender reverse routing address.",
                                      "type": "string"
                                    },
                                    "transactionSetControlNumberLowerBound": {
                                      "description": "The transaction set control number lower bound.",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "transactionSetControlNumberPrefix": {
                                      "description": "The transaction set control number prefix.",
                                      "type": "string"
                                    },
                                    "transactionSetControlNumberSuffix": {
                                      "description": "The transaction set control number suffix.",
                                      "type": "string"
                                    },
                                    "transactionSetControlNumberUpperBound": {
                                      "description": "The transaction set control number upper bound.",
                                      "format": "int64",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "framingSettings": {
                                  "properties": {
                                    "characterEncoding": {
                                      "description": "The character encoding.",
                                      "type": "string"
                                    },
                                    "characterSet": {
                                      "enum": [
                                        "NotSpecified",
                                        "UNOB",
                                        "UNOA",
                                        "UNOC",
                                        "UNOD",
                                        "UNOE",
                                        "UNOF",
                                        "UNOG",
                                        "UNOH",
                                        "UNOI",
                                        "UNOJ",
                                        "UNOK",
                                        "UNOX",
                                        "UNOY",
                                        "KECA"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "EdifactCharacterSet"
                                      }
                                    },
                                    "componentSeparator": {
                                      "description": "The component separator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "dataElementSeparator": {
                                      "description": "The data element separator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "decimalPointIndicator": {
                                      "enum": [
                                        "NotSpecified",
                                        "Comma",
                                        "Decimal"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "EdifactDecimalIndicator"
                                      }
                                    },
                                    "protocolVersion": {
                                      "description": "The protocol version.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "releaseIndicator": {
                                      "description": "The release indicator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "repetitionSeparator": {
                                      "description": "The repetition separator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "segmentTerminator": {
                                      "description": "The segment terminator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "segmentTerminatorSuffix": {
                                      "enum": [
                                        "NotSpecified",
                                        "None",
                                        "CR",
                                        "LF",
                                        "CRLF"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "SegmentTerminatorSuffix"
                                      }
                                    },
                                    "serviceCodeListDirectoryVersion": {
                                      "description": "The service code list directory version.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "messageFilter": {
                                  "properties": {
                                    "messageFilterType": {
                                      "enum": [
                                        "NotSpecified",
                                        "Include",
                                        "Exclude"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "MessageFilterType"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "messageFilterList": {
                                  "description": "The EDIFACT message filter list.",
                                  "items": {
                                    "properties": {
                                      "messageId": {
                                        "description": "The message id on which this envelope settings has to be applied.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "processingSettings": {
                                  "properties": {
                                    "createEmptyXmlTagsForTrailingSeparators": {
                                      "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                      "type": "boolean"
                                    },
                                    "maskSecurityInfo": {
                                      "description": "The value indicating whether to mask security information.",
                                      "type": "boolean"
                                    },
                                    "preserveInterchange": {
                                      "description": "The value indicating whether to preserve interchange.",
                                      "type": "boolean"
                                    },
                                    "suspendInterchangeOnError": {
                                      "description": "The value indicating whether to suspend interchange on error.",
                                      "type": "boolean"
                                    },
                                    "useDotAsDecimalSeparator": {
                                      "description": "The value indicating whether to use dot as decimal separator.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schemaReferences": {
                                  "description": "The EDIFACT schema references.",
                                  "items": {
                                    "properties": {
                                      "associationAssignedCode": {
                                        "description": "The association assigned code.",
                                        "type": "string"
                                      },
                                      "messageId": {
                                        "description": "The message id.",
                                        "type": "string"
                                      },
                                      "messageRelease": {
                                        "description": "The message release version.",
                                        "type": "string"
                                      },
                                      "messageVersion": {
                                        "description": "The message version.",
                                        "type": "string"
                                      },
                                      "schemaName": {
                                        "description": "The schema name.",
                                        "type": "string"
                                      },
                                      "senderApplicationId": {
                                        "description": "The sender application id.",
                                        "type": "string"
                                      },
                                      "senderApplicationQualifier": {
                                        "description": "The sender application qualifier.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "validationOverrides": {
                                  "description": "The EDIFACT validation override settings.",
                                  "items": {
                                    "properties": {
                                      "allowLeadingAndTrailingSpacesAndZeroes": {
                                        "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                        "type": "boolean"
                                      },
                                      "enforceCharacterSet": {
                                        "description": "The value indicating whether to validate character Set.",
                                        "type": "boolean"
                                      },
                                      "messageId": {
                                        "description": "The message id on which the validation settings has to be applied.",
                                        "type": "string"
                                      },
                                      "trailingSeparatorPolicy": {
                                        "enum": [
                                          "NotSpecified",
                                          "NotAllowed",
                                          "Optional",
                                          "Mandatory"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": false,
                                          "name": "TrailingSeparatorPolicy"
                                        }
                                      },
                                      "trimLeadingAndTrailingSpacesAndZeroes": {
                                        "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                        "type": "boolean"
                                      },
                                      "validateEDITypes": {
                                        "description": "The value indicating whether to validate EDI types.",
                                        "type": "boolean"
                                      },
                                      "validateXSDTypes": {
                                        "description": "The value indicating whether to validate XSD types.",
                                        "type": "boolean"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "validationSettings": {
                                  "properties": {
                                    "allowLeadingAndTrailingSpacesAndZeroes": {
                                      "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                      "type": "boolean"
                                    },
                                    "checkDuplicateGroupControlNumber": {
                                      "description": "The value indicating whether to check for duplicate group control number.",
                                      "type": "boolean"
                                    },
                                    "checkDuplicateInterchangeControlNumber": {
                                      "description": "The value indicating whether to check for duplicate interchange control number.",
                                      "type": "boolean"
                                    },
                                    "checkDuplicateTransactionSetControlNumber": {
                                      "description": "The value indicating whether to check for duplicate transaction set control number.",
                                      "type": "boolean"
                                    },
                                    "interchangeControlNumberValidityDays": {
                                      "description": "The validity period of interchange control number.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "trailingSeparatorPolicy": {
                                      "enum": [
                                        "NotSpecified",
                                        "NotAllowed",
                                        "Optional",
                                        "Mandatory"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "TrailingSeparatorPolicy"
                                      }
                                    },
                                    "trimLeadingAndTrailingSpacesAndZeroes": {
                                      "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                      "type": "boolean"
                                    },
                                    "validateCharacterSet": {
                                      "description": "The value indicating whether to validate character set in the message.",
                                      "type": "boolean"
                                    },
                                    "validateEDITypes": {
                                      "description": "The value indicating whether to Whether to validate EDI types.",
                                      "type": "boolean"
                                    },
                                    "validateXSDTypes": {
                                      "description": "The value indicating whether to Whether to validate XSD types.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "receiverBusinessIdentity": {
                              "properties": {
                                "Qualifier": {
                                  "description": "The business identity qualifier.",
                                  "type": "string"
                                },
                                "Value": {
                                  "description": "The business identity value.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "senderBusinessIdentity": {
                              "properties": {
                                "Qualifier": {
                                  "description": "The business identity qualifier.",
                                  "type": "string"
                                },
                                "Value": {
                                  "description": "The business identity value.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "X12": {
                      "properties": {
                        "receiveAgreement": {
                          "properties": {
                            "protocolSettings": {
                              "properties": {
                                "acknowledgementSettings": {
                                  "properties": {
                                    "acknowledgementControlNumberLowerBound": {
                                      "description": "The acknowledgement control number lower bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "acknowledgementControlNumberPrefix": {
                                      "description": "The acknowledgement control number prefix.",
                                      "type": "string"
                                    },
                                    "acknowledgementControlNumberSuffix": {
                                      "description": "The acknowledgement control number suffix.",
                                      "type": "string"
                                    },
                                    "acknowledgementControlNumberUpperBound": {
                                      "description": "The acknowledgement control number upper bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "batchFunctionalAcknowledgements": {
                                      "description": "The value indicating whether to batch functional acknowledgements.",
                                      "type": "boolean"
                                    },
                                    "batchImplementationAcknowledgements": {
                                      "description": "The value indicating whether to batch implementation acknowledgements.",
                                      "type": "boolean"
                                    },
                                    "batchTechnicalAcknowledgements": {
                                      "description": "The value indicating whether to batch the technical acknowledgements.",
                                      "type": "boolean"
                                    },
                                    "functionalAcknowledgementVersion": {
                                      "description": "The functional acknowledgement version.",
                                      "type": "string"
                                    },
                                    "implementationAcknowledgementVersion": {
                                      "description": "The implementation acknowledgement version.",
                                      "type": "string"
                                    },
                                    "needFunctionalAcknowledgement": {
                                      "description": "The value indicating whether functional acknowledgement is needed.",
                                      "type": "boolean"
                                    },
                                    "needImplementationAcknowledgement": {
                                      "description": "The value indicating whether implementation acknowledgement is needed.",
                                      "type": "boolean"
                                    },
                                    "needLoopForValidMessages": {
                                      "description": "The value indicating whether a loop is needed for valid messages.",
                                      "type": "boolean"
                                    },
                                    "needTechnicalAcknowledgement": {
                                      "description": "The value indicating whether technical acknowledgement is needed.",
                                      "type": "boolean"
                                    },
                                    "rolloverAcknowledgementControlNumber": {
                                      "description": "The value indicating whether to rollover acknowledgement control number.",
                                      "type": "boolean"
                                    },
                                    "sendSynchronousAcknowledgement": {
                                      "description": "The value indicating whether to send synchronous acknowledgement.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "envelopeOverrides": {
                                  "description": "The X12 envelope override settings.",
                                  "items": {
                                    "properties": {
                                      "dateFormat": {
                                        "enum": [
                                          "NotSpecified",
                                          "CCYYMMDD",
                                          "YYMMDD"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": false,
                                          "name": "X12DateFormat"
                                        }
                                      },
                                      "functionalIdentifierCode": {
                                        "description": "The functional identifier code.",
                                        "type": "string"
                                      },
                                      "headerVersion": {
                                        "description": "The header version.",
                                        "type": "string"
                                      },
                                      "messageId": {
                                        "description": "The message id on which this envelope settings has to be applied.",
                                        "type": "string"
                                      },
                                      "protocolVersion": {
                                        "description": "The protocol version on which this envelope settings has to be applied.",
                                        "type": "string"
                                      },
                                      "receiverApplicationId": {
                                        "description": "The receiver application id.",
                                        "type": "string"
                                      },
                                      "responsibleAgencyCode": {
                                        "description": "The responsible agency code.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "senderApplicationId": {
                                        "description": "The sender application id.",
                                        "type": "string"
                                      },
                                      "targetNamespace": {
                                        "description": "The target namespace on which this envelope settings has to be applied.",
                                        "type": "string"
                                      },
                                      "timeFormat": {
                                        "enum": [
                                          "NotSpecified",
                                          "HHMM",
                                          "HHMMSS",
                                          "HHMMSSdd",
                                          "HHMMSSd"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": false,
                                          "name": "X12TimeFormat"
                                        }
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "envelopeSettings": {
                                  "properties": {
                                    "controlStandardsId": {
                                      "description": "The controls standards id.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "controlVersionNumber": {
                                      "description": "The control version number.",
                                      "type": "string"
                                    },
                                    "enableDefaultGroupHeaders": {
                                      "description": "The value indicating whether to enable default group headers.",
                                      "type": "boolean"
                                    },
                                    "functionalGroupId": {
                                      "description": "The functional group id.",
                                      "type": "string"
                                    },
                                    "groupControlNumberLowerBound": {
                                      "description": "The group control number lower bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "groupControlNumberUpperBound": {
                                      "description": "The group control number upper bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "groupHeaderAgencyCode": {
                                      "description": "The group header agency code.",
                                      "type": "string"
                                    },
                                    "groupHeaderDateFormat": {
                                      "enum": [
                                        "NotSpecified",
                                        "CCYYMMDD",
                                        "YYMMDD"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "X12DateFormat"
                                      }
                                    },
                                    "groupHeaderTimeFormat": {
                                      "enum": [
                                        "NotSpecified",
                                        "HHMM",
                                        "HHMMSS",
                                        "HHMMSSdd",
                                        "HHMMSSd"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "X12TimeFormat"
                                      }
                                    },
                                    "groupHeaderVersion": {
                                      "description": "The group header version.",
                                      "type": "string"
                                    },
                                    "interchangeControlNumberLowerBound": {
                                      "description": "The interchange  control number lower bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "interchangeControlNumberUpperBound": {
                                      "description": "The interchange  control number upper bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "overwriteExistingTransactionSetControlNumber": {
                                      "description": "The value indicating whether to overwrite existing transaction set control number.",
                                      "type": "boolean"
                                    },
                                    "receiverApplicationId": {
                                      "description": "The receiver application id.",
                                      "type": "string"
                                    },
                                    "rolloverGroupControlNumber": {
                                      "description": "The value indicating whether to rollover group control number.",
                                      "type": "boolean"
                                    },
                                    "rolloverInterchangeControlNumber": {
                                      "description": "The value indicating whether to rollover interchange control number.",
                                      "type": "boolean"
                                    },
                                    "rolloverTransactionSetControlNumber": {
                                      "description": "The value indicating whether to rollover transaction set control number.",
                                      "type": "boolean"
                                    },
                                    "senderApplicationId": {
                                      "description": "The sender application id.",
                                      "type": "string"
                                    },
                                    "transactionSetControlNumberLowerBound": {
                                      "description": "The transaction set control number lower bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "transactionSetControlNumberPrefix": {
                                      "description": "The transaction set control number prefix.",
                                      "type": "string"
                                    },
                                    "transactionSetControlNumberSuffix": {
                                      "description": "The transaction set control number suffix.",
                                      "type": "string"
                                    },
                                    "transactionSetControlNumberUpperBound": {
                                      "description": "The transaction set control number upper bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "usageIndicator": {
                                      "enum": [
                                        "NotSpecified",
                                        "Test",
                                        "Information",
                                        "Production"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "UsageIndicator"
                                      }
                                    },
                                    "useControlStandardsIdAsRepetitionCharacter": {
                                      "description": "The value indicating whether to use control standards id as repetition character.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "framingSettings": {
                                  "properties": {
                                    "characterSet": {
                                      "enum": [
                                        "NotSpecified",
                                        "Basic",
                                        "Extended",
                                        "UTF8"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "X12CharacterSet"
                                      }
                                    },
                                    "componentSeparator": {
                                      "description": "The component separator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "dataElementSeparator": {
                                      "description": "The data element separator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "replaceCharacter": {
                                      "description": "The replacement character.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "replaceSeparatorsInPayload": {
                                      "description": "The value indicating whether to replace separators in payload.",
                                      "type": "boolean"
                                    },
                                    "segmentTerminator": {
                                      "description": "The segment terminator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "segmentTerminatorSuffix": {
                                      "enum": [
                                        "NotSpecified",
                                        "None",
                                        "CR",
                                        "LF",
                                        "CRLF"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "SegmentTerminatorSuffix"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "messageFilter": {
                                  "properties": {
                                    "messageFilterType": {
                                      "enum": [
                                        "NotSpecified",
                                        "Include",
                                        "Exclude"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "MessageFilterType"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "messageFilterList": {
                                  "description": "The X12 message filter list.",
                                  "items": {
                                    "properties": {
                                      "messageId": {
                                        "description": "The message id.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "processingSettings": {
                                  "properties": {
                                    "convertImpliedDecimal": {
                                      "description": "The value indicating whether to convert numerical type to implied decimal.",
                                      "type": "boolean"
                                    },
                                    "createEmptyXmlTagsForTrailingSeparators": {
                                      "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                      "type": "boolean"
                                    },
                                    "maskSecurityInfo": {
                                      "description": "The value indicating whether to mask security information.",
                                      "type": "boolean"
                                    },
                                    "preserveInterchange": {
                                      "description": "The value indicating whether to preserve interchange.",
                                      "type": "boolean"
                                    },
                                    "suspendInterchangeOnError": {
                                      "description": "The value indicating whether to suspend interchange on error.",
                                      "type": "boolean"
                                    },
                                    "useDotAsDecimalSeparator": {
                                      "description": "The value indicating whether to use dot as decimal separator.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schemaReferences": {
                                  "description": "The X12 schema references.",
                                  "items": {
                                    "properties": {
                                      "messageId": {
                                        "description": "The message id.",
                                        "type": "string"
                                      },
                                      "schemaName": {
                                        "description": "The schema name.",
                                        "type": "string"
                                      },
                                      "schemaVersion": {
                                        "description": "The schema version.",
                                        "type": "string"
                                      },
                                      "senderApplicationId": {
                                        "description": "The sender application id.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "securitySettings": {
                                  "properties": {
                                    "authorizationQualifier": {
                                      "description": "The authorization qualifier.",
                                      "type": "string"
                                    },
                                    "authorizationValue": {
                                      "description": "The authorization value.",
                                      "type": "string"
                                    },
                                    "passwordValue": {
                                      "description": "The password value.",
                                      "type": "string"
                                    },
                                    "securityQualifier": {
                                      "description": "The security qualifier.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "validationOverrides": {
                                  "description": "The X12 validation override settings.",
                                  "items": {
                                    "properties": {
                                      "allowLeadingAndTrailingSpacesAndZeroes": {
                                        "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                        "type": "boolean"
                                      },
                                      "messageId": {
                                        "description": "The message id on which the validation settings has to be applied.",
                                        "type": "string"
                                      },
                                      "trailingSeparatorPolicy": {
                                        "enum": [
                                          "NotSpecified",
                                          "NotAllowed",
                                          "Optional",
                                          "Mandatory"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": false,
                                          "name": "TrailingSeparatorPolicy"
                                        }
                                      },
                                      "trimLeadingAndTrailingSpacesAndZeroes": {
                                        "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                        "type": "boolean"
                                      },
                                      "validateCharacterSet": {
                                        "description": "The value indicating whether to validate character Set.",
                                        "type": "boolean"
                                      },
                                      "validateEDITypes": {
                                        "description": "The value indicating whether to validate EDI types.",
                                        "type": "boolean"
                                      },
                                      "validateXSDTypes": {
                                        "description": "The value indicating whether to validate XSD types.",
                                        "type": "boolean"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "validationSettings": {
                                  "properties": {
                                    "allowLeadingAndTrailingSpacesAndZeroes": {
                                      "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                      "type": "boolean"
                                    },
                                    "checkDuplicateGroupControlNumber": {
                                      "description": "The value indicating whether to check for duplicate group control number.",
                                      "type": "boolean"
                                    },
                                    "checkDuplicateInterchangeControlNumber": {
                                      "description": "The value indicating whether to check for duplicate interchange control number.",
                                      "type": "boolean"
                                    },
                                    "checkDuplicateTransactionSetControlNumber": {
                                      "description": "The value indicating whether to check for duplicate transaction set control number.",
                                      "type": "boolean"
                                    },
                                    "interchangeControlNumberValidityDays": {
                                      "description": "The validity period of interchange control number.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "trailingSeparatorPolicy": {
                                      "enum": [
                                        "NotSpecified",
                                        "NotAllowed",
                                        "Optional",
                                        "Mandatory"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "TrailingSeparatorPolicy"
                                      }
                                    },
                                    "trimLeadingAndTrailingSpacesAndZeroes": {
                                      "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                      "type": "boolean"
                                    },
                                    "validateCharacterSet": {
                                      "description": "The value indicating whether to validate character set in the message.",
                                      "type": "boolean"
                                    },
                                    "validateEDITypes": {
                                      "description": "The value indicating whether to Whether to validate EDI types.",
                                      "type": "boolean"
                                    },
                                    "validateXSDTypes": {
                                      "description": "The value indicating whether to Whether to validate XSD types.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "x12DelimiterOverrides": {
                                  "description": "The X12 delimiter override settings.",
                                  "items": {
                                    "properties": {
                                      "componentSeparator": {
                                        "description": "The component separator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "dataElementSeparator": {
                                        "description": "The data element separator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "messageId": {
                                        "description": "The message id.",
                                        "type": "string"
                                      },
                                      "protocolVersion": {
                                        "description": "The protocol version.",
                                        "type": "string"
                                      },
                                      "replaceCharacter": {
                                        "description": "The replacement character.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "replaceSeparatorsInPayload": {
                                        "description": "The value indicating whether to replace separators in payload.",
                                        "type": "boolean"
                                      },
                                      "segmentTerminator": {
                                        "description": "The segment terminator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "segmentTerminatorSuffix": {
                                        "enum": [
                                          "NotSpecified",
                                          "None",
                                          "CR",
                                          "LF",
                                          "CRLF"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": false,
                                          "name": "SegmentTerminatorSuffix"
                                        }
                                      },
                                      "targetNamespace": {
                                        "description": "The target namespace on which this delimiter settings has to be applied.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "receiverBusinessIdentity": {
                              "properties": {
                                "Qualifier": {
                                  "description": "The business identity qualifier.",
                                  "type": "string"
                                },
                                "Value": {
                                  "description": "The business identity value.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "senderBusinessIdentity": {
                              "properties": {
                                "Qualifier": {
                                  "description": "The business identity qualifier.",
                                  "type": "string"
                                },
                                "Value": {
                                  "description": "The business identity value.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "sendAgreement": {
                          "properties": {
                            "protocolSettings": {
                              "properties": {
                                "acknowledgementSettings": {
                                  "properties": {
                                    "acknowledgementControlNumberLowerBound": {
                                      "description": "The acknowledgement control number lower bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "acknowledgementControlNumberPrefix": {
                                      "description": "The acknowledgement control number prefix.",
                                      "type": "string"
                                    },
                                    "acknowledgementControlNumberSuffix": {
                                      "description": "The acknowledgement control number suffix.",
                                      "type": "string"
                                    },
                                    "acknowledgementControlNumberUpperBound": {
                                      "description": "The acknowledgement control number upper bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "batchFunctionalAcknowledgements": {
                                      "description": "The value indicating whether to batch functional acknowledgements.",
                                      "type": "boolean"
                                    },
                                    "batchImplementationAcknowledgements": {
                                      "description": "The value indicating whether to batch implementation acknowledgements.",
                                      "type": "boolean"
                                    },
                                    "batchTechnicalAcknowledgements": {
                                      "description": "The value indicating whether to batch the technical acknowledgements.",
                                      "type": "boolean"
                                    },
                                    "functionalAcknowledgementVersion": {
                                      "description": "The functional acknowledgement version.",
                                      "type": "string"
                                    },
                                    "implementationAcknowledgementVersion": {
                                      "description": "The implementation acknowledgement version.",
                                      "type": "string"
                                    },
                                    "needFunctionalAcknowledgement": {
                                      "description": "The value indicating whether functional acknowledgement is needed.",
                                      "type": "boolean"
                                    },
                                    "needImplementationAcknowledgement": {
                                      "description": "The value indicating whether implementation acknowledgement is needed.",
                                      "type": "boolean"
                                    },
                                    "needLoopForValidMessages": {
                                      "description": "The value indicating whether a loop is needed for valid messages.",
                                      "type": "boolean"
                                    },
                                    "needTechnicalAcknowledgement": {
                                      "description": "The value indicating whether technical acknowledgement is needed.",
                                      "type": "boolean"
                                    },
                                    "rolloverAcknowledgementControlNumber": {
                                      "description": "The value indicating whether to rollover acknowledgement control number.",
                                      "type": "boolean"
                                    },
                                    "sendSynchronousAcknowledgement": {
                                      "description": "The value indicating whether to send synchronous acknowledgement.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "envelopeOverrides": {
                                  "description": "The X12 envelope override settings.",
                                  "items": {
                                    "properties": {
                                      "dateFormat": {
                                        "enum": [
                                          "NotSpecified",
                                          "CCYYMMDD",
                                          "YYMMDD"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": false,
                                          "name": "X12DateFormat"
                                        }
                                      },
                                      "functionalIdentifierCode": {
                                        "description": "The functional identifier code.",
                                        "type": "string"
                                      },
                                      "headerVersion": {
                                        "description": "The header version.",
                                        "type": "string"
                                      },
                                      "messageId": {
                                        "description": "The message id on which this envelope settings has to be applied.",
                                        "type": "string"
                                      },
                                      "protocolVersion": {
                                        "description": "The protocol version on which this envelope settings has to be applied.",
                                        "type": "string"
                                      },
                                      "receiverApplicationId": {
                                        "description": "The receiver application id.",
                                        "type": "string"
                                      },
                                      "responsibleAgencyCode": {
                                        "description": "The responsible agency code.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "senderApplicationId": {
                                        "description": "The sender application id.",
                                        "type": "string"
                                      },
                                      "targetNamespace": {
                                        "description": "The target namespace on which this envelope settings has to be applied.",
                                        "type": "string"
                                      },
                                      "timeFormat": {
                                        "enum": [
                                          "NotSpecified",
                                          "HHMM",
                                          "HHMMSS",
                                          "HHMMSSdd",
                                          "HHMMSSd"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": false,
                                          "name": "X12TimeFormat"
                                        }
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "envelopeSettings": {
                                  "properties": {
                                    "controlStandardsId": {
                                      "description": "The controls standards id.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "controlVersionNumber": {
                                      "description": "The control version number.",
                                      "type": "string"
                                    },
                                    "enableDefaultGroupHeaders": {
                                      "description": "The value indicating whether to enable default group headers.",
                                      "type": "boolean"
                                    },
                                    "functionalGroupId": {
                                      "description": "The functional group id.",
                                      "type": "string"
                                    },
                                    "groupControlNumberLowerBound": {
                                      "description": "The group control number lower bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "groupControlNumberUpperBound": {
                                      "description": "The group control number upper bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "groupHeaderAgencyCode": {
                                      "description": "The group header agency code.",
                                      "type": "string"
                                    },
                                    "groupHeaderDateFormat": {
                                      "enum": [
                                        "NotSpecified",
                                        "CCYYMMDD",
                                        "YYMMDD"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "X12DateFormat"
                                      }
                                    },
                                    "groupHeaderTimeFormat": {
                                      "enum": [
                                        "NotSpecified",
                                        "HHMM",
                                        "HHMMSS",
                                        "HHMMSSdd",
                                        "HHMMSSd"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "X12TimeFormat"
                                      }
                                    },
                                    "groupHeaderVersion": {
                                      "description": "The group header version.",
                                      "type": "string"
                                    },
                                    "interchangeControlNumberLowerBound": {
                                      "description": "The interchange  control number lower bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "interchangeControlNumberUpperBound": {
                                      "description": "The interchange  control number upper bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "overwriteExistingTransactionSetControlNumber": {
                                      "description": "The value indicating whether to overwrite existing transaction set control number.",
                                      "type": "boolean"
                                    },
                                    "receiverApplicationId": {
                                      "description": "The receiver application id.",
                                      "type": "string"
                                    },
                                    "rolloverGroupControlNumber": {
                                      "description": "The value indicating whether to rollover group control number.",
                                      "type": "boolean"
                                    },
                                    "rolloverInterchangeControlNumber": {
                                      "description": "The value indicating whether to rollover interchange control number.",
                                      "type": "boolean"
                                    },
                                    "rolloverTransactionSetControlNumber": {
                                      "description": "The value indicating whether to rollover transaction set control number.",
                                      "type": "boolean"
                                    },
                                    "senderApplicationId": {
                                      "description": "The sender application id.",
                                      "type": "string"
                                    },
                                    "transactionSetControlNumberLowerBound": {
                                      "description": "The transaction set control number lower bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "transactionSetControlNumberPrefix": {
                                      "description": "The transaction set control number prefix.",
                                      "type": "string"
                                    },
                                    "transactionSetControlNumberSuffix": {
                                      "description": "The transaction set control number suffix.",
                                      "type": "string"
                                    },
                                    "transactionSetControlNumberUpperBound": {
                                      "description": "The transaction set control number upper bound.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "usageIndicator": {
                                      "enum": [
                                        "NotSpecified",
                                        "Test",
                                        "Information",
                                        "Production"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "UsageIndicator"
                                      }
                                    },
                                    "useControlStandardsIdAsRepetitionCharacter": {
                                      "description": "The value indicating whether to use control standards id as repetition character.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "framingSettings": {
                                  "properties": {
                                    "characterSet": {
                                      "enum": [
                                        "NotSpecified",
                                        "Basic",
                                        "Extended",
                                        "UTF8"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "X12CharacterSet"
                                      }
                                    },
                                    "componentSeparator": {
                                      "description": "The component separator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "dataElementSeparator": {
                                      "description": "The data element separator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "replaceCharacter": {
                                      "description": "The replacement character.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "replaceSeparatorsInPayload": {
                                      "description": "The value indicating whether to replace separators in payload.",
                                      "type": "boolean"
                                    },
                                    "segmentTerminator": {
                                      "description": "The segment terminator.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "segmentTerminatorSuffix": {
                                      "enum": [
                                        "NotSpecified",
                                        "None",
                                        "CR",
                                        "LF",
                                        "CRLF"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "SegmentTerminatorSuffix"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "messageFilter": {
                                  "properties": {
                                    "messageFilterType": {
                                      "enum": [
                                        "NotSpecified",
                                        "Include",
                                        "Exclude"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "MessageFilterType"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "messageFilterList": {
                                  "description": "The X12 message filter list.",
                                  "items": {
                                    "properties": {
                                      "messageId": {
                                        "description": "The message id.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "processingSettings": {
                                  "properties": {
                                    "convertImpliedDecimal": {
                                      "description": "The value indicating whether to convert numerical type to implied decimal.",
                                      "type": "boolean"
                                    },
                                    "createEmptyXmlTagsForTrailingSeparators": {
                                      "description": "The value indicating whether to create empty xml tags for trailing separators.",
                                      "type": "boolean"
                                    },
                                    "maskSecurityInfo": {
                                      "description": "The value indicating whether to mask security information.",
                                      "type": "boolean"
                                    },
                                    "preserveInterchange": {
                                      "description": "The value indicating whether to preserve interchange.",
                                      "type": "boolean"
                                    },
                                    "suspendInterchangeOnError": {
                                      "description": "The value indicating whether to suspend interchange on error.",
                                      "type": "boolean"
                                    },
                                    "useDotAsDecimalSeparator": {
                                      "description": "The value indicating whether to use dot as decimal separator.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schemaReferences": {
                                  "description": "The X12 schema references.",
                                  "items": {
                                    "properties": {
                                      "messageId": {
                                        "description": "The message id.",
                                        "type": "string"
                                      },
                                      "schemaName": {
                                        "description": "The schema name.",
                                        "type": "string"
                                      },
                                      "schemaVersion": {
                                        "description": "The schema version.",
                                        "type": "string"
                                      },
                                      "senderApplicationId": {
                                        "description": "The sender application id.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "securitySettings": {
                                  "properties": {
                                    "authorizationQualifier": {
                                      "description": "The authorization qualifier.",
                                      "type": "string"
                                    },
                                    "authorizationValue": {
                                      "description": "The authorization value.",
                                      "type": "string"
                                    },
                                    "passwordValue": {
                                      "description": "The password value.",
                                      "type": "string"
                                    },
                                    "securityQualifier": {
                                      "description": "The security qualifier.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "validationOverrides": {
                                  "description": "The X12 validation override settings.",
                                  "items": {
                                    "properties": {
                                      "allowLeadingAndTrailingSpacesAndZeroes": {
                                        "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                        "type": "boolean"
                                      },
                                      "messageId": {
                                        "description": "The message id on which the validation settings has to be applied.",
                                        "type": "string"
                                      },
                                      "trailingSeparatorPolicy": {
                                        "enum": [
                                          "NotSpecified",
                                          "NotAllowed",
                                          "Optional",
                                          "Mandatory"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": false,
                                          "name": "TrailingSeparatorPolicy"
                                        }
                                      },
                                      "trimLeadingAndTrailingSpacesAndZeroes": {
                                        "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                        "type": "boolean"
                                      },
                                      "validateCharacterSet": {
                                        "description": "The value indicating whether to validate character Set.",
                                        "type": "boolean"
                                      },
                                      "validateEDITypes": {
                                        "description": "The value indicating whether to validate EDI types.",
                                        "type": "boolean"
                                      },
                                      "validateXSDTypes": {
                                        "description": "The value indicating whether to validate XSD types.",
                                        "type": "boolean"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "validationSettings": {
                                  "properties": {
                                    "allowLeadingAndTrailingSpacesAndZeroes": {
                                      "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                      "type": "boolean"
                                    },
                                    "checkDuplicateGroupControlNumber": {
                                      "description": "The value indicating whether to check for duplicate group control number.",
                                      "type": "boolean"
                                    },
                                    "checkDuplicateInterchangeControlNumber": {
                                      "description": "The value indicating whether to check for duplicate interchange control number.",
                                      "type": "boolean"
                                    },
                                    "checkDuplicateTransactionSetControlNumber": {
                                      "description": "The value indicating whether to check for duplicate transaction set control number.",
                                      "type": "boolean"
                                    },
                                    "interchangeControlNumberValidityDays": {
                                      "description": "The validity period of interchange control number.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "trailingSeparatorPolicy": {
                                      "enum": [
                                        "NotSpecified",
                                        "NotAllowed",
                                        "Optional",
                                        "Mandatory"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "TrailingSeparatorPolicy"
                                      }
                                    },
                                    "trimLeadingAndTrailingSpacesAndZeroes": {
                                      "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                      "type": "boolean"
                                    },
                                    "validateCharacterSet": {
                                      "description": "The value indicating whether to validate character set in the message.",
                                      "type": "boolean"
                                    },
                                    "validateEDITypes": {
                                      "description": "The value indicating whether to Whether to validate EDI types.",
                                      "type": "boolean"
                                    },
                                    "validateXSDTypes": {
                                      "description": "The value indicating whether to Whether to validate XSD types.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "x12DelimiterOverrides": {
                                  "description": "The X12 delimiter override settings.",
                                  "items": {
                                    "properties": {
                                      "componentSeparator": {
                                        "description": "The component separator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "dataElementSeparator": {
                                        "description": "The data element separator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "messageId": {
                                        "description": "The message id.",
                                        "type": "string"
                                      },
                                      "protocolVersion": {
                                        "description": "The protocol version.",
                                        "type": "string"
                                      },
                                      "replaceCharacter": {
                                        "description": "The replacement character.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "replaceSeparatorsInPayload": {
                                        "description": "The value indicating whether to replace separators in payload.",
                                        "type": "boolean"
                                      },
                                      "segmentTerminator": {
                                        "description": "The segment terminator.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "segmentTerminatorSuffix": {
                                        "enum": [
                                          "NotSpecified",
                                          "None",
                                          "CR",
                                          "LF",
                                          "CRLF"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": false,
                                          "name": "SegmentTerminatorSuffix"
                                        }
                                      },
                                      "targetNamespace": {
                                        "description": "The target namespace on which this delimiter settings has to be applied.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "receiverBusinessIdentity": {
                              "properties": {
                                "Qualifier": {
                                  "description": "The business identity qualifier.",
                                  "type": "string"
                                },
                                "Value": {
                                  "description": "The business identity value.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "senderBusinessIdentity": {
                              "properties": {
                                "Qualifier": {
                                  "description": "The business identity qualifier.",
                                  "type": "string"
                                },
                                "Value": {
                                  "description": "The business identity value.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "createdTime": {
                  "description": "The created time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "guestIdentity": {
                  "properties": {
                    "Qualifier": {
                      "description": "The business identity qualifier.",
                      "type": "string"
                    },
                    "Value": {
                      "description": "The business identity value.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "guestPartner": {
                  "description": "The guest partner.",
                  "type": "string"
                },
                "hostIdentity": {
                  "properties": {
                    "Qualifier": {
                      "description": "The business identity qualifier.",
                      "type": "string"
                    },
                    "Value": {
                      "description": "The business identity value.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "hostPartner": {
                  "description": "The host partner.",
                  "type": "string"
                },
                "metadata": {
                  "description": "The metadata.",
                  "properties": {},
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountAgreementProperties"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "description": "The resource id.",
                      "type": "string"
                    },
                    "location": {
                      "description": "The resource location.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The resource name.",
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "The resource tags.",
                      "type": "object"
                    },
                    "type": {
                      "description": "The resource type.",
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "properties": {
                "properties": {
                  "properties": {
                    "changedTime": {
                      "description": "The changed time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "createdTime": {
                      "description": "The created time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "key": {
                      "properties": {
                        "keyName": {
                          "description": "The private key name in key vault.",
                          "type": "string"
                        },
                        "keyVault": {
                          "description": "The key vault reference.",
                          "properties": {
                            "id": {
                              "description": "The resource id.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The resource name.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "type": {
                              "description": "The resource type.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "keyVersion": {
                          "description": "The private key version in key vault.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "metadata": {
                      "description": "The metadata.",
                      "properties": {},
                      "type": "object"
                    },
                    "publicCertificate": {
                      "description": "The public certificate.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountCertificate"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "nextLink": {
                  "description": "The URL to get the next set of results.",
                  "type": "string"
                },
                "value": {
                  "description": "The list of integration account certificates.",
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "id": {
                            "description": "The resource id.",
                            "type": "string"
                          },
                          "location": {
                            "description": "The resource location.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The resource name.",
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "The resource tags.",
                            "type": "object"
                          },
                          "type": {
                            "description": "The resource type.",
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "properties": {
                      "properties": {
                        "properties": {
                          "changedTime": {
                            "description": "The changed time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "createdTime": {
                            "description": "The created time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "key": {
                            "properties": {
                              "keyName": {
                                "description": "The private key name in key vault.",
                                "type": "string"
                              },
                              "keyVault": {
                                "description": "The key vault reference.",
                                "properties": {
                                  "id": {
                                    "description": "The resource id.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The resource name.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "The resource type.",
                                    "readOnly": true,
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "keyVersion": {
                                "description": "The private key version in key vault.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "metadata": {
                            "description": "The metadata.",
                            "properties": {},
                            "type": "object"
                          },
                          "publicCertificate": {
                            "description": "The public certificate.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountCertificateListResult"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "changedTime": {
                  "description": "The changed time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "createdTime": {
                  "description": "The created time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "key": {
                  "properties": {
                    "keyName": {
                      "description": "The private key name in key vault.",
                      "type": "string"
                    },
                    "keyVault": {
                      "description": "The key vault reference.",
                      "properties": {
                        "id": {
                          "description": "The resource id.",
                          "type": "string"
                        },
                        "name": {
                          "description": "The resource name.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "description": "The resource type.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "keyVersion": {
                      "description": "The private key version in key vault.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "metadata": {
                  "description": "The metadata.",
                  "properties": {},
                  "type": "object"
                },
                "publicCertificate": {
                  "description": "The public certificate.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountCertificateProperties"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "algorithm": {
                  "description": "The content hash algorithm.",
                  "type": "string"
                },
                "value": {
                  "description": "The content hash value.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountContentHash"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "contentHash": {
                  "properties": {
                    "algorithm": {
                      "description": "The content hash algorithm.",
                      "type": "string"
                    },
                    "value": {
                      "description": "The content hash value.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "contentSize": {
                  "description": "The content size.",
                  "format": "int64",
                  "type": "integer"
                },
                "contentVersion": {
                  "description": "The content version.",
                  "type": "string"
                },
                "metadata": {
                  "description": "The metadata.",
                  "properties": {},
                  "type": "object"
                },
                "uri": {
                  "description": "The content link URI.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountContentLink"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "nextLink": {
                  "description": "The URL to get the next set of results.",
                  "type": "string"
                },
                "value": {
                  "description": "The list of integration accounts.",
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "id": {
                            "description": "The resource id.",
                            "type": "string"
                          },
                          "location": {
                            "description": "The resource location.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The resource name.",
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "The resource tags.",
                            "type": "object"
                          },
                          "type": {
                            "description": "The resource type.",
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "properties": {
                      "properties": {
                        "type": "object"
                      },
                      "sku": {
                        "properties": {
                          "name": {
                            "enum": [
                              "NotSpecified",
                              "Free",
                              "Shared",
                              "Basic",
                              "Standard",
                              "Premium"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "SkuName"
                            }
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountListResult"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "description": "The resource id.",
                      "type": "string"
                    },
                    "location": {
                      "description": "The resource location.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The resource name.",
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "The resource tags.",
                      "type": "object"
                    },
                    "type": {
                      "description": "The resource type.",
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "properties": {
                "properties": {
                  "properties": {
                    "changedTime": {
                      "description": "The changed time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "content": {
                      "description": "The content.",
                      "properties": {},
                      "type": "object"
                    },
                    "contentLink": {
                      "properties": {
                        "contentHash": {
                          "properties": {
                            "algorithm": {
                              "description": "The content hash algorithm.",
                              "type": "string"
                            },
                            "value": {
                              "description": "The content hash value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "contentSize": {
                          "description": "The content size.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "contentVersion": {
                          "description": "The content version.",
                          "type": "string"
                        },
                        "metadata": {
                          "description": "The metadata.",
                          "properties": {},
                          "type": "object"
                        },
                        "uri": {
                          "description": "The content link URI.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "contentType": {
                      "description": "The content type.",
                      "type": "string"
                    },
                    "createdTime": {
                      "description": "The created time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "mapType": {
                      "enum": [
                        "NotSpecified",
                        "Xslt"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "MapType"
                      }
                    },
                    "metadata": {
                      "description": "The metadata.",
                      "properties": {},
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountMap"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "schemaType": {
                  "enum": [
                    "NotSpecified",
                    "Xslt"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "MapType"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountMapFilter"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "nextLink": {
                  "description": "The URL to get the next set of results.",
                  "type": "string"
                },
                "value": {
                  "description": "The list of integration account maps.",
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "id": {
                            "description": "The resource id.",
                            "type": "string"
                          },
                          "location": {
                            "description": "The resource location.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The resource name.",
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "The resource tags.",
                            "type": "object"
                          },
                          "type": {
                            "description": "The resource type.",
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "properties": {
                      "properties": {
                        "properties": {
                          "changedTime": {
                            "description": "The changed time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "content": {
                            "description": "The content.",
                            "properties": {},
                            "type": "object"
                          },
                          "contentLink": {
                            "properties": {
                              "contentHash": {
                                "properties": {
                                  "algorithm": {
                                    "description": "The content hash algorithm.",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "The content hash value.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "contentSize": {
                                "description": "The content size.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "contentVersion": {
                                "description": "The content version.",
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The metadata.",
                                "properties": {},
                                "type": "object"
                              },
                              "uri": {
                                "description": "The content link URI.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "contentType": {
                            "description": "The content type.",
                            "type": "string"
                          },
                          "createdTime": {
                            "description": "The created time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "mapType": {
                            "enum": [
                              "NotSpecified",
                              "Xslt"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "MapType"
                            }
                          },
                          "metadata": {
                            "description": "The metadata.",
                            "properties": {},
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountMapListResult"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "changedTime": {
                  "description": "The changed time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "content": {
                  "description": "The content.",
                  "properties": {},
                  "type": "object"
                },
                "contentLink": {
                  "properties": {
                    "contentHash": {
                      "properties": {
                        "algorithm": {
                          "description": "The content hash algorithm.",
                          "type": "string"
                        },
                        "value": {
                          "description": "The content hash value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "contentSize": {
                      "description": "The content size.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "contentVersion": {
                      "description": "The content version.",
                      "type": "string"
                    },
                    "metadata": {
                      "description": "The metadata.",
                      "properties": {},
                      "type": "object"
                    },
                    "uri": {
                      "description": "The content link URI.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "contentType": {
                  "description": "The content type.",
                  "type": "string"
                },
                "createdTime": {
                  "description": "The created time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "mapType": {
                  "enum": [
                    "NotSpecified",
                    "Xslt"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "MapType"
                  }
                },
                "metadata": {
                  "description": "The metadata.",
                  "properties": {},
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountMapProperties"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "description": "The resource id.",
                      "type": "string"
                    },
                    "location": {
                      "description": "The resource location.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The resource name.",
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "The resource tags.",
                      "type": "object"
                    },
                    "type": {
                      "description": "The resource type.",
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "properties": {
                "properties": {
                  "properties": {
                    "changedTime": {
                      "description": "The changed time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "content": {
                      "properties": {
                        "b2b": {
                          "properties": {
                            "businessIdentities": {
                              "description": "The list of partner business identities.",
                              "items": {
                                "properties": {
                                  "Qualifier": {
                                    "description": "The business identity qualifier.",
                                    "type": "string"
                                  },
                                  "Value": {
                                    "description": "The business identity value.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "createdTime": {
                      "description": "The created time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "metadata": {
                      "description": "The metadata.",
                      "properties": {},
                      "type": "object"
                    },
                    "partnerType": {
                      "enum": [
                        "NotSpecified",
                        "B2B"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "PartnerType"
                      }
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountPartner"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "partnerType": {
                  "enum": [
                    "NotSpecified",
                    "B2B"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "PartnerType"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountPartnerFilter"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "nextLink": {
                  "description": "The URL to get the next set of results.",
                  "type": "string"
                },
                "value": {
                  "description": "The list of integration account partners.",
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "id": {
                            "description": "The resource id.",
                            "type": "string"
                          },
                          "location": {
                            "description": "The resource location.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The resource name.",
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "The resource tags.",
                            "type": "object"
                          },
                          "type": {
                            "description": "The resource type.",
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "properties": {
                      "properties": {
                        "properties": {
                          "changedTime": {
                            "description": "The changed time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "content": {
                            "properties": {
                              "b2b": {
                                "properties": {
                                  "businessIdentities": {
                                    "description": "The list of partner business identities.",
                                    "items": {
                                      "properties": {
                                        "Qualifier": {
                                          "description": "The business identity qualifier.",
                                          "type": "string"
                                        },
                                        "Value": {
                                          "description": "The business identity value.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "createdTime": {
                            "description": "The created time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "metadata": {
                            "description": "The metadata.",
                            "properties": {},
                            "type": "object"
                          },
                          "partnerType": {
                            "enum": [
                              "NotSpecified",
                              "B2B"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "PartnerType"
                            }
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountPartnerListResult"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "changedTime": {
                  "description": "The changed time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "content": {
                  "properties": {
                    "b2b": {
                      "properties": {
                        "businessIdentities": {
                          "description": "The list of partner business identities.",
                          "items": {
                            "properties": {
                              "Qualifier": {
                                "description": "The business identity qualifier.",
                                "type": "string"
                              },
                              "Value": {
                                "description": "The business identity value.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "createdTime": {
                  "description": "The created time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "metadata": {
                  "description": "The metadata.",
                  "properties": {},
                  "type": "object"
                },
                "partnerType": {
                  "enum": [
                    "NotSpecified",
                    "B2B"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "PartnerType"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountPartnerProperties"
          },
          {
            "oldValue": null,
            "value": {
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountProperties"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "id": {
                  "description": "The resource id.",
                  "type": "string"
                },
                "location": {
                  "description": "The resource location.",
                  "type": "string"
                },
                "name": {
                  "description": "The resource name.",
                  "type": "string"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "The resource tags.",
                  "type": "object"
                },
                "type": {
                  "description": "The resource type.",
                  "type": "string"
                }
              },
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountResource"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "description": "The resource id.",
                      "type": "string"
                    },
                    "location": {
                      "description": "The resource location.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The resource name.",
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "The resource tags.",
                      "type": "object"
                    },
                    "type": {
                      "description": "The resource type.",
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "properties": {
                "properties": {
                  "properties": {
                    "changedTime": {
                      "description": "The changed time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "content": {
                      "description": "The content.",
                      "properties": {},
                      "type": "object"
                    },
                    "contentLink": {
                      "properties": {
                        "contentHash": {
                          "properties": {
                            "algorithm": {
                              "description": "The content hash algorithm.",
                              "type": "string"
                            },
                            "value": {
                              "description": "The content hash value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "contentSize": {
                          "description": "The content size.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "contentVersion": {
                          "description": "The content version.",
                          "type": "string"
                        },
                        "metadata": {
                          "description": "The metadata.",
                          "properties": {},
                          "type": "object"
                        },
                        "uri": {
                          "description": "The content link URI.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "contentType": {
                      "description": "The content type.",
                      "type": "string"
                    },
                    "createdTime": {
                      "description": "The created time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "metadata": {
                      "description": "The metadata.",
                      "properties": {},
                      "type": "object"
                    },
                    "schemaType": {
                      "enum": [
                        "NotSpecified",
                        "Xml"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "SchemaType"
                      }
                    },
                    "targetNamespace": {
                      "description": "The target namespace.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountSchema"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "schemaType": {
                  "enum": [
                    "NotSpecified",
                    "Xml"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "SchemaType"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountSchemaFilter"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "nextLink": {
                  "description": "The URL to get the next set of results.",
                  "type": "string"
                },
                "value": {
                  "description": "The list of integration account schemas.",
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "id": {
                            "description": "The resource id.",
                            "type": "string"
                          },
                          "location": {
                            "description": "The resource location.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The resource name.",
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "The resource tags.",
                            "type": "object"
                          },
                          "type": {
                            "description": "The resource type.",
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "properties": {
                      "properties": {
                        "properties": {
                          "changedTime": {
                            "description": "The changed time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "content": {
                            "description": "The content.",
                            "properties": {},
                            "type": "object"
                          },
                          "contentLink": {
                            "properties": {
                              "contentHash": {
                                "properties": {
                                  "algorithm": {
                                    "description": "The content hash algorithm.",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "The content hash value.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "contentSize": {
                                "description": "The content size.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "contentVersion": {
                                "description": "The content version.",
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The metadata.",
                                "properties": {},
                                "type": "object"
                              },
                              "uri": {
                                "description": "The content link URI.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "contentType": {
                            "description": "The content type.",
                            "type": "string"
                          },
                          "createdTime": {
                            "description": "The created time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "metadata": {
                            "description": "The metadata.",
                            "properties": {},
                            "type": "object"
                          },
                          "schemaType": {
                            "enum": [
                              "NotSpecified",
                              "Xml"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "SchemaType"
                            }
                          },
                          "targetNamespace": {
                            "description": "The target namespace.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountSchemaListResult"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "changedTime": {
                  "description": "The changed time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "content": {
                  "description": "The content.",
                  "properties": {},
                  "type": "object"
                },
                "contentLink": {
                  "properties": {
                    "contentHash": {
                      "properties": {
                        "algorithm": {
                          "description": "The content hash algorithm.",
                          "type": "string"
                        },
                        "value": {
                          "description": "The content hash value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "contentSize": {
                      "description": "The content size.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "contentVersion": {
                      "description": "The content version.",
                      "type": "string"
                    },
                    "metadata": {
                      "description": "The metadata.",
                      "properties": {},
                      "type": "object"
                    },
                    "uri": {
                      "description": "The content link URI.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "contentType": {
                  "description": "The content type.",
                  "type": "string"
                },
                "createdTime": {
                  "description": "The created time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "metadata": {
                  "description": "The metadata.",
                  "properties": {},
                  "type": "object"
                },
                "schemaType": {
                  "enum": [
                    "NotSpecified",
                    "Xml"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "SchemaType"
                  }
                },
                "targetNamespace": {
                  "description": "The target namespace.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountSchemaProperties"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "name": {
                  "enum": [
                    "NotSpecified",
                    "Free",
                    "Shared",
                    "Basic",
                    "Standard",
                    "Premium"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "SkuName"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountSku"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "Free",
                "Shared",
                "Basic",
                "Standard",
                "Premium"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "SkuName"
              }
            },
            "op": "add",
            "from": "",
            "path": "/IntegrationAccountSkuName"
          },
          {
            "oldValue": {
              "enum": [
                "NotSpecified",
                "Primary",
                "Secondary"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "KeyType"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/KeyType"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "keyName": {
                  "description": "The private key name in key vault.",
                  "type": "string"
                },
                "keyVault": {
                  "description": "The key vault reference.",
                  "properties": {
                    "id": {
                      "description": "The resource id.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "type": {
                      "description": "The resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "keyVersion": {
                  "description": "The private key version in key vault.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/KeyVaultKeyReference"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "NotAfter": {
                  "description": "The expiry time.",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ListCallbackUrlParameters"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "Xslt"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "MapType"
              }
            },
            "op": "add",
            "from": "",
            "path": "/MapType"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "Include",
                "Exclude"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "MessageFilterType"
              }
            },
            "op": "add",
            "from": "",
            "path": "/MessageFilterType"
          },
          {
            "oldValue": {
              "properties": {},
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Object"
          },
          {
            "oldValue": {
              "enum": [
                "NotSpecified",
                "String",
                "SecureString",
                "Int",
                "Float",
                "Bool",
                "Array",
                "Object",
                "SecureObject"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "ParameterType"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ParameterType"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "b2b": {
                  "properties": {
                    "businessIdentities": {
                      "description": "The list of partner business identities.",
                      "items": {
                        "properties": {
                          "Qualifier": {
                            "description": "The business identity qualifier.",
                            "type": "string"
                          },
                          "Value": {
                            "description": "The business identity value.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/PartnerContent"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "B2B"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "PartnerType"
              }
            },
            "op": "add",
            "from": "",
            "path": "/PartnerType"
          },
          {
            "oldValue": {
              "enum": [
                "Second",
                "Minute",
                "Hour",
                "Day",
                "Week",
                "Month",
                "Year"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "RecurrenceFrequency"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RecurrenceFrequency"
          },
          {
            "oldValue": {
              "properties": {
                "keyType": {
                  "enum": [
                    "NotSpecified",
                    "Primary",
                    "Secondary"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "KeyType"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RegenerateSecretKeyParameters"
          },
          {
            "oldValue": {
              "properties": {
                "id": {
                  "description": "Gets or sets the resource id.",
                  "type": "string"
                },
                "location": {
                  "description": "Gets or sets the resource location.",
                  "type": "string"
                },
                "name": {
                  "description": "Gets the resource name.",
                  "type": "string"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Gets or sets the resource tags.",
                  "type": "object"
                },
                "type": {
                  "description": "Gets the resource type.",
                  "type": "string"
                }
              },
              "x-ms-azure-resource": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Resource"
          },
          {
            "oldValue": {
              "properties": {
                "id": {
                  "description": "Gets or sets the resource id.",
                  "type": "string"
                },
                "name": {
                  "description": "Gets the resource name.",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "Gets the resource type.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ResourceReference"
          },
          {
            "oldValue": {
              "properties": {
                "name": {
                  "description": "Gets or sets the name of workflow run trigger.",
                  "type": "string"
                },
                "outputs": {
                  "description": "Gets or sets the outputs of workflow run trigger.",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RunWorkflowParameters"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "Xml"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "SchemaType"
              }
            },
            "op": "add",
            "from": "",
            "path": "/SchemaType"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "None",
                "CR",
                "LF",
                "CRLF"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "SegmentTerminatorSuffix"
              }
            },
            "op": "add",
            "from": "",
            "path": "/SegmentTerminatorSuffix"
          },
          {
            "oldValue": {
              "properties": {
                "name": {
                  "enum": [
                    "NotSpecified",
                    "Free",
                    "Shared",
                    "Basic",
                    "Standard",
                    "Premium"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "SkuName"
                  }
                },
                "plan": {
                  "properties": {
                    "id": {
                      "description": "Gets or sets the resource id.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Gets the resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "type": {
                      "description": "Gets the resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Sku"
          },
          {
            "oldValue": {
              "enum": [
                "NotSpecified",
                "Free",
                "Shared",
                "Basic",
                "Standard",
                "Premium"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "SkuName"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SkuName"
          },
          {
            "oldValue": {
              "properties": {
                "id": {
                  "description": "Gets or sets the resource id.",
                  "type": "string"
                }
              },
              "x-ms-azure-resource": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SubResource"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "NotAllowed",
                "Optional",
                "Mandatory"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "TrailingSeparatorPolicy"
              }
            },
            "op": "add",
            "from": "",
            "path": "/TrailingSeparatorPolicy"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "Test",
                "Information",
                "Production"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "UsageIndicator"
              }
            },
            "op": "add",
            "from": "",
            "path": "/UsageIndicator"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "description": "Gets or sets the resource id.",
                      "type": "string"
                    },
                    "location": {
                      "description": "Gets or sets the resource location.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Gets the resource name.",
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Gets or sets the resource tags.",
                      "type": "object"
                    },
                    "type": {
                      "description": "Gets the resource type.",
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "properties": {
                "properties": {
                  "properties": {
                    "accessEndpoint": {
                      "description": "Gets the access endpoint.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "changedTime": {
                      "description": "Gets the changed time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "createdTime": {
                      "description": "Gets the created time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "definition": {
                      "properties": {},
                      "type": "object"
                    },
                    "definitionLink": {
                      "properties": {
                        "contentHash": {
                          "properties": {
                            "algorithm": {
                              "description": "Gets or sets the algorithm.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Gets or sets the value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "contentSize": {
                          "description": "Gets or sets the content size.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "contentVersion": {
                          "description": "Gets or sets the content version.",
                          "type": "string"
                        },
                        "metadata": {
                          "properties": {},
                          "type": "object"
                        },
                        "uri": {
                          "description": "Gets or sets the content link URI.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "parameters": {
                      "additionalProperties": {
                        "properties": {
                          "metadata": {
                            "properties": {},
                            "type": "object"
                          },
                          "type": {
                            "enum": [
                              "NotSpecified",
                              "String",
                              "SecureString",
                              "Int",
                              "Float",
                              "Bool",
                              "Array",
                              "Object",
                              "SecureObject"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ParameterType"
                            }
                          },
                          "value": {
                            "properties": {},
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "description": "Gets or sets the parameters.",
                      "type": "object"
                    },
                    "parametersLink": {
                      "properties": {
                        "contentHash": {
                          "properties": {
                            "algorithm": {
                              "description": "Gets or sets the algorithm.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Gets or sets the value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "contentSize": {
                          "description": "Gets or sets the content size.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "contentVersion": {
                          "description": "Gets or sets the content version.",
                          "type": "string"
                        },
                        "metadata": {
                          "properties": {},
                          "type": "object"
                        },
                        "uri": {
                          "description": "Gets or sets the content link URI.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "provisioningState": {
                      "enum": [
                        "NotSpecified",
                        "Moving",
                        "Succeeded"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "WorkflowProvisioningState"
                      }
                    },
                    "sku": {
                      "properties": {
                        "name": {
                          "enum": [
                            "NotSpecified",
                            "Free",
                            "Shared",
                            "Basic",
                            "Standard",
                            "Premium"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "SkuName"
                          }
                        },
                        "plan": {
                          "properties": {
                            "id": {
                              "description": "Gets or sets the resource id.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Gets the resource name.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "type": {
                              "description": "Gets the resource type.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "state": {
                      "enum": [
                        "NotSpecified",
                        "Enabled",
                        "Disabled",
                        "Deleted",
                        "Suspended"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "WorkflowState"
                      }
                    },
                    "version": {
                      "description": "Gets the version.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Workflow"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "description": "Gets or sets the resource id.",
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "properties": {
                "name": {
                  "description": "Gets the workflow access key name.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "notAfter": {
                      "description": "Gets or sets the not-after time.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "notBefore": {
                      "description": "Gets or sets the not-before time.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Gets the workflow access key type.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowAccessKey"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Gets or sets the URL to get the next set of results.",
                  "type": "string"
                },
                "value": {
                  "description": "Gets or sets a list of workflow access keys.",
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "id": {
                            "description": "Gets or sets the resource id.",
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "properties": {
                      "name": {
                        "description": "Gets the workflow access key name.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "properties": {
                          "notAfter": {
                            "description": "Gets or sets the not-after time.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "notBefore": {
                            "description": "Gets or sets the not-before time.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Gets the workflow access key type.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowAccessKeyListResult"
          },
          {
            "oldValue": {
              "properties": {
                "notAfter": {
                  "description": "Gets or sets the not-after time.",
                  "format": "date-time",
                  "type": "string"
                },
                "notBefore": {
                  "description": "Gets or sets the not-before time.",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowAccessKeyProperties"
          },
          {
            "oldValue": {
              "properties": {
                "state": {
                  "enum": [
                    "NotSpecified",
                    "Enabled",
                    "Disabled",
                    "Deleted",
                    "Suspended"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WorkflowState"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowFilter"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Gets or sets the URL to get the next set of results.",
                  "type": "string"
                },
                "value": {
                  "description": "Gets or sets the list of workflows.",
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "id": {
                            "description": "Gets or sets the resource id.",
                            "type": "string"
                          },
                          "location": {
                            "description": "Gets or sets the resource location.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Gets the resource name.",
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Gets or sets the resource tags.",
                            "type": "object"
                          },
                          "type": {
                            "description": "Gets the resource type.",
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "properties": {
                      "properties": {
                        "properties": {
                          "accessEndpoint": {
                            "description": "Gets the access endpoint.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "changedTime": {
                            "description": "Gets the changed time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "createdTime": {
                            "description": "Gets the created time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "definition": {
                            "properties": {},
                            "type": "object"
                          },
                          "definitionLink": {
                            "properties": {
                              "contentHash": {
                                "properties": {
                                  "algorithm": {
                                    "description": "Gets or sets the algorithm.",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Gets or sets the value.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "contentSize": {
                                "description": "Gets or sets the content size.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "contentVersion": {
                                "description": "Gets or sets the content version.",
                                "type": "string"
                              },
                              "metadata": {
                                "properties": {},
                                "type": "object"
                              },
                              "uri": {
                                "description": "Gets or sets the content link URI.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "parameters": {
                            "additionalProperties": {
                              "properties": {
                                "metadata": {
                                  "properties": {},
                                  "type": "object"
                                },
                                "type": {
                                  "enum": [
                                    "NotSpecified",
                                    "String",
                                    "SecureString",
                                    "Int",
                                    "Float",
                                    "Bool",
                                    "Array",
                                    "Object",
                                    "SecureObject"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "ParameterType"
                                  }
                                },
                                "value": {
                                  "properties": {},
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "description": "Gets or sets the parameters.",
                            "type": "object"
                          },
                          "parametersLink": {
                            "properties": {
                              "contentHash": {
                                "properties": {
                                  "algorithm": {
                                    "description": "Gets or sets the algorithm.",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Gets or sets the value.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "contentSize": {
                                "description": "Gets or sets the content size.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "contentVersion": {
                                "description": "Gets or sets the content version.",
                                "type": "string"
                              },
                              "metadata": {
                                "properties": {},
                                "type": "object"
                              },
                              "uri": {
                                "description": "Gets or sets the content link URI.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "provisioningState": {
                            "enum": [
                              "NotSpecified",
                              "Moving",
                              "Succeeded"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "WorkflowProvisioningState"
                            }
                          },
                          "sku": {
                            "properties": {
                              "name": {
                                "enum": [
                                  "NotSpecified",
                                  "Free",
                                  "Shared",
                                  "Basic",
                                  "Standard",
                                  "Premium"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "SkuName"
                                }
                              },
                              "plan": {
                                "properties": {
                                  "id": {
                                    "description": "Gets or sets the resource id.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Gets the resource name.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "Gets the resource type.",
                                    "readOnly": true,
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "state": {
                            "enum": [
                              "NotSpecified",
                              "Enabled",
                              "Disabled",
                              "Deleted",
                              "Suspended"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "WorkflowState"
                            }
                          },
                          "version": {
                            "description": "Gets the version.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowListResult"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "properties": {
                    "metadata": {
                      "properties": {},
                      "type": "object"
                    },
                    "type": {
                      "enum": [
                        "NotSpecified",
                        "String",
                        "SecureString",
                        "Int",
                        "Float",
                        "Bool",
                        "Array",
                        "Object",
                        "SecureObject"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ParameterType"
                      }
                    },
                    "value": {
                      "properties": {},
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "properties": {
                "error": {
                  "properties": {},
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowOutputParameter"
          },
          {
            "oldValue": {
              "properties": {
                "metadata": {
                  "properties": {},
                  "type": "object"
                },
                "type": {
                  "enum": [
                    "NotSpecified",
                    "String",
                    "SecureString",
                    "Int",
                    "Float",
                    "Bool",
                    "Array",
                    "Object",
                    "SecureObject"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ParameterType"
                  }
                },
                "value": {
                  "properties": {},
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowParameter"
          },
          {
            "oldValue": {
              "properties": {
                "accessEndpoint": {
                  "description": "Gets the access endpoint.",
                  "readOnly": true,
                  "type": "string"
                },
                "changedTime": {
                  "description": "Gets the changed time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "createdTime": {
                  "description": "Gets the created time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "definition": {
                  "properties": {},
                  "type": "object"
                },
                "definitionLink": {
                  "properties": {
                    "contentHash": {
                      "properties": {
                        "algorithm": {
                          "description": "Gets or sets the algorithm.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Gets or sets the value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "contentSize": {
                      "description": "Gets or sets the content size.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "contentVersion": {
                      "description": "Gets or sets the content version.",
                      "type": "string"
                    },
                    "metadata": {
                      "properties": {},
                      "type": "object"
                    },
                    "uri": {
                      "description": "Gets or sets the content link URI.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "parameters": {
                  "additionalProperties": {
                    "properties": {
                      "metadata": {
                        "properties": {},
                        "type": "object"
                      },
                      "type": {
                        "enum": [
                          "NotSpecified",
                          "String",
                          "SecureString",
                          "Int",
                          "Float",
                          "Bool",
                          "Array",
                          "Object",
                          "SecureObject"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "ParameterType"
                        }
                      },
                      "value": {
                        "properties": {},
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "description": "Gets or sets the parameters.",
                  "type": "object"
                },
                "parametersLink": {
                  "properties": {
                    "contentHash": {
                      "properties": {
                        "algorithm": {
                          "description": "Gets or sets the algorithm.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Gets or sets the value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "contentSize": {
                      "description": "Gets or sets the content size.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "contentVersion": {
                      "description": "Gets or sets the content version.",
                      "type": "string"
                    },
                    "metadata": {
                      "properties": {},
                      "type": "object"
                    },
                    "uri": {
                      "description": "Gets or sets the content link URI.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "provisioningState": {
                  "enum": [
                    "NotSpecified",
                    "Moving",
                    "Succeeded"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WorkflowProvisioningState"
                  }
                },
                "sku": {
                  "properties": {
                    "name": {
                      "enum": [
                        "NotSpecified",
                        "Free",
                        "Shared",
                        "Basic",
                        "Standard",
                        "Premium"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "SkuName"
                      }
                    },
                    "plan": {
                      "properties": {
                        "id": {
                          "description": "Gets or sets the resource id.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Gets the resource name.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "description": "Gets the resource type.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "state": {
                  "enum": [
                    "NotSpecified",
                    "Enabled",
                    "Disabled",
                    "Deleted",
                    "Suspended"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WorkflowState"
                  }
                },
                "version": {
                  "description": "Gets the version.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowProperties"
          },
          {
            "oldValue": {
              "enum": [
                "NotSpecified",
                "Moving",
                "Succeeded"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "WorkflowProvisioningState"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowProvisioningState"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "description": "Gets or sets the resource id.",
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "properties": {
                "name": {
                  "description": "Gets the workflow run name.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "code": {
                      "description": "Gets the code.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "correlationId": {
                      "description": "Gets the correlation id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "endTime": {
                      "description": "Gets the end time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "error": {
                      "properties": {},
                      "type": "object"
                    },
                    "outputs": {
                      "additionalProperties": {
                        "allOf": [
                          {
                            "properties": {
                              "metadata": {
                                "properties": {},
                                "type": "object"
                              },
                              "type": {
                                "enum": [
                                  "NotSpecified",
                                  "String",
                                  "SecureString",
                                  "Int",
                                  "Float",
                                  "Bool",
                                  "Array",
                                  "Object",
                                  "SecureObject"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "ParameterType"
                                }
                              },
                              "value": {
                                "properties": {},
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "properties": {
                          "error": {
                            "properties": {},
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "description": "Gets the outputs.",
                      "readOnly": true,
                      "type": "object"
                    },
                    "startTime": {
                      "description": "Gets the start time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "status": {
                      "enum": [
                        "NotSpecified",
                        "Paused",
                        "Running",
                        "Waiting",
                        "Succeeded",
                        "Skipped",
                        "Suspended",
                        "Cancelled",
                        "Failed",
                        "Faulted",
                        "TimedOut",
                        "Aborted"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "WorkflowStatus"
                      }
                    },
                    "trigger": {
                      "properties": {
                        "code": {
                          "description": "Gets the code.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "endTime": {
                          "description": "Gets the end time.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "error": {
                          "properties": {},
                          "type": "object"
                        },
                        "inputs": {
                          "properties": {},
                          "type": "object"
                        },
                        "inputsLink": {
                          "properties": {
                            "contentHash": {
                              "properties": {
                                "algorithm": {
                                  "description": "Gets or sets the algorithm.",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Gets or sets the value.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "contentSize": {
                              "description": "Gets or sets the content size.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "contentVersion": {
                              "description": "Gets or sets the content version.",
                              "type": "string"
                            },
                            "metadata": {
                              "properties": {},
                              "type": "object"
                            },
                            "uri": {
                              "description": "Gets or sets the content link URI.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "name": {
                          "description": "Gets the name.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "outputs": {
                          "properties": {},
                          "type": "object"
                        },
                        "outputsLink": {
                          "properties": {
                            "contentHash": {
                              "properties": {
                                "algorithm": {
                                  "description": "Gets or sets the algorithm.",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Gets or sets the value.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "contentSize": {
                              "description": "Gets or sets the content size.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "contentVersion": {
                              "description": "Gets or sets the content version.",
                              "type": "string"
                            },
                            "metadata": {
                              "properties": {},
                              "type": "object"
                            },
                            "uri": {
                              "description": "Gets or sets the content link URI.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "startTime": {
                          "description": "Gets the start time.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "status": {
                          "enum": [
                            "NotSpecified",
                            "Paused",
                            "Running",
                            "Waiting",
                            "Succeeded",
                            "Skipped",
                            "Suspended",
                            "Cancelled",
                            "Failed",
                            "Faulted",
                            "TimedOut",
                            "Aborted"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "WorkflowStatus"
                          }
                        },
                        "trackingId": {
                          "description": "Gets the trackingId.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "workflow": {
                      "properties": {
                        "id": {
                          "description": "Gets or sets the resource id.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Gets the resource name.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "description": "Gets the resource type.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Gets the workflow run type.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowRun"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "description": "Gets or sets the resource id.",
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "properties": {
                "name": {
                  "description": "Gets the workflow run action name.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "code": {
                      "description": "Gets the code.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "endTime": {
                      "description": "Gets the end time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "error": {
                      "properties": {},
                      "type": "object"
                    },
                    "inputsLink": {
                      "properties": {
                        "contentHash": {
                          "properties": {
                            "algorithm": {
                              "description": "Gets or sets the algorithm.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Gets or sets the value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "contentSize": {
                          "description": "Gets or sets the content size.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "contentVersion": {
                          "description": "Gets or sets the content version.",
                          "type": "string"
                        },
                        "metadata": {
                          "properties": {},
                          "type": "object"
                        },
                        "uri": {
                          "description": "Gets or sets the content link URI.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "outputsLink": {
                      "properties": {
                        "contentHash": {
                          "properties": {
                            "algorithm": {
                              "description": "Gets or sets the algorithm.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Gets or sets the value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "contentSize": {
                          "description": "Gets or sets the content size.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "contentVersion": {
                          "description": "Gets or sets the content version.",
                          "type": "string"
                        },
                        "metadata": {
                          "properties": {},
                          "type": "object"
                        },
                        "uri": {
                          "description": "Gets or sets the content link URI.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "startTime": {
                      "description": "Gets the start time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "status": {
                      "enum": [
                        "NotSpecified",
                        "Paused",
                        "Running",
                        "Waiting",
                        "Succeeded",
                        "Skipped",
                        "Suspended",
                        "Cancelled",
                        "Failed",
                        "Faulted",
                        "TimedOut",
                        "Aborted"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "WorkflowStatus"
                      }
                    },
                    "trackingId": {
                      "description": "Gets the trackingId.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Gets the workflow run action type.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowRunAction"
          },
          {
            "oldValue": {
              "properties": {
                "status": {
                  "enum": [
                    "NotSpecified",
                    "Paused",
                    "Running",
                    "Waiting",
                    "Succeeded",
                    "Skipped",
                    "Suspended",
                    "Cancelled",
                    "Failed",
                    "Faulted",
                    "TimedOut",
                    "Aborted"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WorkflowStatus"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowRunActionFilter"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Gets or sets the URL to get the next set of results.",
                  "type": "string"
                },
                "value": {
                  "description": "Gets or sets a list of workflow run actions.",
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "id": {
                            "description": "Gets or sets the resource id.",
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "properties": {
                      "name": {
                        "description": "Gets the workflow run action name.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "properties": {
                          "code": {
                            "description": "Gets the code.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "endTime": {
                            "description": "Gets the end time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "error": {
                            "properties": {},
                            "type": "object"
                          },
                          "inputsLink": {
                            "properties": {
                              "contentHash": {
                                "properties": {
                                  "algorithm": {
                                    "description": "Gets or sets the algorithm.",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Gets or sets the value.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "contentSize": {
                                "description": "Gets or sets the content size.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "contentVersion": {
                                "description": "Gets or sets the content version.",
                                "type": "string"
                              },
                              "metadata": {
                                "properties": {},
                                "type": "object"
                              },
                              "uri": {
                                "description": "Gets or sets the content link URI.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "outputsLink": {
                            "properties": {
                              "contentHash": {
                                "properties": {
                                  "algorithm": {
                                    "description": "Gets or sets the algorithm.",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Gets or sets the value.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "contentSize": {
                                "description": "Gets or sets the content size.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "contentVersion": {
                                "description": "Gets or sets the content version.",
                                "type": "string"
                              },
                              "metadata": {
                                "properties": {},
                                "type": "object"
                              },
                              "uri": {
                                "description": "Gets or sets the content link URI.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "startTime": {
                            "description": "Gets the start time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "status": {
                            "enum": [
                              "NotSpecified",
                              "Paused",
                              "Running",
                              "Waiting",
                              "Succeeded",
                              "Skipped",
                              "Suspended",
                              "Cancelled",
                              "Failed",
                              "Faulted",
                              "TimedOut",
                              "Aborted"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "WorkflowStatus"
                            }
                          },
                          "trackingId": {
                            "description": "Gets the trackingId.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Gets the workflow run action type.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowRunActionListResult"
          },
          {
            "oldValue": {
              "properties": {
                "code": {
                  "description": "Gets the code.",
                  "readOnly": true,
                  "type": "string"
                },
                "endTime": {
                  "description": "Gets the end time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "error": {
                  "properties": {},
                  "type": "object"
                },
                "inputsLink": {
                  "properties": {
                    "contentHash": {
                      "properties": {
                        "algorithm": {
                          "description": "Gets or sets the algorithm.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Gets or sets the value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "contentSize": {
                      "description": "Gets or sets the content size.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "contentVersion": {
                      "description": "Gets or sets the content version.",
                      "type": "string"
                    },
                    "metadata": {
                      "properties": {},
                      "type": "object"
                    },
                    "uri": {
                      "description": "Gets or sets the content link URI.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "outputsLink": {
                  "properties": {
                    "contentHash": {
                      "properties": {
                        "algorithm": {
                          "description": "Gets or sets the algorithm.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Gets or sets the value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "contentSize": {
                      "description": "Gets or sets the content size.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "contentVersion": {
                      "description": "Gets or sets the content version.",
                      "type": "string"
                    },
                    "metadata": {
                      "properties": {},
                      "type": "object"
                    },
                    "uri": {
                      "description": "Gets or sets the content link URI.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "startTime": {
                  "description": "Gets the start time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "status": {
                  "enum": [
                    "NotSpecified",
                    "Paused",
                    "Running",
                    "Waiting",
                    "Succeeded",
                    "Skipped",
                    "Suspended",
                    "Cancelled",
                    "Failed",
                    "Faulted",
                    "TimedOut",
                    "Aborted"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WorkflowStatus"
                  }
                },
                "trackingId": {
                  "description": "Gets the trackingId.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowRunActionProperties"
          },
          {
            "oldValue": {
              "properties": {
                "status": {
                  "enum": [
                    "NotSpecified",
                    "Paused",
                    "Running",
                    "Waiting",
                    "Succeeded",
                    "Skipped",
                    "Suspended",
                    "Cancelled",
                    "Failed",
                    "Faulted",
                    "TimedOut",
                    "Aborted"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WorkflowStatus"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowRunFilter"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Gets or sets the URL to get the next set of results.",
                  "type": "string"
                },
                "value": {
                  "description": "Gets or sets a list of workflow runs.",
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "id": {
                            "description": "Gets or sets the resource id.",
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "properties": {
                      "name": {
                        "description": "Gets the workflow run name.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "properties": {
                          "code": {
                            "description": "Gets the code.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "correlationId": {
                            "description": "Gets the correlation id.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "endTime": {
                            "description": "Gets the end time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "error": {
                            "properties": {},
                            "type": "object"
                          },
                          "outputs": {
                            "additionalProperties": {
                              "allOf": [
                                {
                                  "properties": {
                                    "metadata": {
                                      "properties": {},
                                      "type": "object"
                                    },
                                    "type": {
                                      "enum": [
                                        "NotSpecified",
                                        "String",
                                        "SecureString",
                                        "Int",
                                        "Float",
                                        "Bool",
                                        "Array",
                                        "Object",
                                        "SecureObject"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "ParameterType"
                                      }
                                    },
                                    "value": {
                                      "properties": {},
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              ],
                              "properties": {
                                "error": {
                                  "properties": {},
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "description": "Gets the outputs.",
                            "readOnly": true,
                            "type": "object"
                          },
                          "startTime": {
                            "description": "Gets the start time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "status": {
                            "enum": [
                              "NotSpecified",
                              "Paused",
                              "Running",
                              "Waiting",
                              "Succeeded",
                              "Skipped",
                              "Suspended",
                              "Cancelled",
                              "Failed",
                              "Faulted",
                              "TimedOut",
                              "Aborted"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "WorkflowStatus"
                            }
                          },
                          "trigger": {
                            "properties": {
                              "code": {
                                "description": "Gets the code.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "endTime": {
                                "description": "Gets the end time.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "error": {
                                "properties": {},
                                "type": "object"
                              },
                              "inputs": {
                                "properties": {},
                                "type": "object"
                              },
                              "inputsLink": {
                                "properties": {
                                  "contentHash": {
                                    "properties": {
                                      "algorithm": {
                                        "description": "Gets or sets the algorithm.",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "Gets or sets the value.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "contentSize": {
                                    "description": "Gets or sets the content size.",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "contentVersion": {
                                    "description": "Gets or sets the content version.",
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "properties": {},
                                    "type": "object"
                                  },
                                  "uri": {
                                    "description": "Gets or sets the content link URI.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "name": {
                                "description": "Gets the name.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "outputs": {
                                "properties": {},
                                "type": "object"
                              },
                              "outputsLink": {
                                "properties": {
                                  "contentHash": {
                                    "properties": {
                                      "algorithm": {
                                        "description": "Gets or sets the algorithm.",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "Gets or sets the value.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "contentSize": {
                                    "description": "Gets or sets the content size.",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "contentVersion": {
                                    "description": "Gets or sets the content version.",
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "properties": {},
                                    "type": "object"
                                  },
                                  "uri": {
                                    "description": "Gets or sets the content link URI.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "startTime": {
                                "description": "Gets the start time.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "status": {
                                "enum": [
                                  "NotSpecified",
                                  "Paused",
                                  "Running",
                                  "Waiting",
                                  "Succeeded",
                                  "Skipped",
                                  "Suspended",
                                  "Cancelled",
                                  "Failed",
                                  "Faulted",
                                  "TimedOut",
                                  "Aborted"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "WorkflowStatus"
                                }
                              },
                              "trackingId": {
                                "description": "Gets the trackingId.",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "workflow": {
                            "properties": {
                              "id": {
                                "description": "Gets or sets the resource id.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Gets the resource name.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "type": {
                                "description": "Gets the resource type.",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Gets the workflow run type.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowRunListResult"
          },
          {
            "oldValue": {
              "properties": {
                "code": {
                  "description": "Gets the code.",
                  "readOnly": true,
                  "type": "string"
                },
                "correlationId": {
                  "description": "Gets the correlation id.",
                  "readOnly": true,
                  "type": "string"
                },
                "endTime": {
                  "description": "Gets the end time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "error": {
                  "properties": {},
                  "type": "object"
                },
                "outputs": {
                  "additionalProperties": {
                    "allOf": [
                      {
                        "properties": {
                          "metadata": {
                            "properties": {},
                            "type": "object"
                          },
                          "type": {
                            "enum": [
                              "NotSpecified",
                              "String",
                              "SecureString",
                              "Int",
                              "Float",
                              "Bool",
                              "Array",
                              "Object",
                              "SecureObject"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ParameterType"
                            }
                          },
                          "value": {
                            "properties": {},
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "properties": {
                      "error": {
                        "properties": {},
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "description": "Gets the outputs.",
                  "readOnly": true,
                  "type": "object"
                },
                "startTime": {
                  "description": "Gets the start time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "status": {
                  "enum": [
                    "NotSpecified",
                    "Paused",
                    "Running",
                    "Waiting",
                    "Succeeded",
                    "Skipped",
                    "Suspended",
                    "Cancelled",
                    "Failed",
                    "Faulted",
                    "TimedOut",
                    "Aborted"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WorkflowStatus"
                  }
                },
                "trigger": {
                  "properties": {
                    "code": {
                      "description": "Gets the code.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "endTime": {
                      "description": "Gets the end time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "error": {
                      "properties": {},
                      "type": "object"
                    },
                    "inputs": {
                      "properties": {},
                      "type": "object"
                    },
                    "inputsLink": {
                      "properties": {
                        "contentHash": {
                          "properties": {
                            "algorithm": {
                              "description": "Gets or sets the algorithm.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Gets or sets the value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "contentSize": {
                          "description": "Gets or sets the content size.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "contentVersion": {
                          "description": "Gets or sets the content version.",
                          "type": "string"
                        },
                        "metadata": {
                          "properties": {},
                          "type": "object"
                        },
                        "uri": {
                          "description": "Gets or sets the content link URI.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "name": {
                      "description": "Gets the name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "outputs": {
                      "properties": {},
                      "type": "object"
                    },
                    "outputsLink": {
                      "properties": {
                        "contentHash": {
                          "properties": {
                            "algorithm": {
                              "description": "Gets or sets the algorithm.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Gets or sets the value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "contentSize": {
                          "description": "Gets or sets the content size.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "contentVersion": {
                          "description": "Gets or sets the content version.",
                          "type": "string"
                        },
                        "metadata": {
                          "properties": {},
                          "type": "object"
                        },
                        "uri": {
                          "description": "Gets or sets the content link URI.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "startTime": {
                      "description": "Gets the start time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "status": {
                      "enum": [
                        "NotSpecified",
                        "Paused",
                        "Running",
                        "Waiting",
                        "Succeeded",
                        "Skipped",
                        "Suspended",
                        "Cancelled",
                        "Failed",
                        "Faulted",
                        "TimedOut",
                        "Aborted"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "WorkflowStatus"
                      }
                    },
                    "trackingId": {
                      "description": "Gets the trackingId.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "workflow": {
                  "properties": {
                    "id": {
                      "description": "Gets or sets the resource id.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Gets the resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "type": {
                      "description": "Gets the resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowRunProperties"
          },
          {
            "oldValue": {
              "properties": {
                "code": {
                  "description": "Gets the code.",
                  "readOnly": true,
                  "type": "string"
                },
                "endTime": {
                  "description": "Gets the end time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "error": {
                  "properties": {},
                  "type": "object"
                },
                "inputs": {
                  "properties": {},
                  "type": "object"
                },
                "inputsLink": {
                  "properties": {
                    "contentHash": {
                      "properties": {
                        "algorithm": {
                          "description": "Gets or sets the algorithm.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Gets or sets the value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "contentSize": {
                      "description": "Gets or sets the content size.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "contentVersion": {
                      "description": "Gets or sets the content version.",
                      "type": "string"
                    },
                    "metadata": {
                      "properties": {},
                      "type": "object"
                    },
                    "uri": {
                      "description": "Gets or sets the content link URI.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "name": {
                  "description": "Gets the name.",
                  "readOnly": true,
                  "type": "string"
                },
                "outputs": {
                  "properties": {},
                  "type": "object"
                },
                "outputsLink": {
                  "properties": {
                    "contentHash": {
                      "properties": {
                        "algorithm": {
                          "description": "Gets or sets the algorithm.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Gets or sets the value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "contentSize": {
                      "description": "Gets or sets the content size.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "contentVersion": {
                      "description": "Gets or sets the content version.",
                      "type": "string"
                    },
                    "metadata": {
                      "properties": {},
                      "type": "object"
                    },
                    "uri": {
                      "description": "Gets or sets the content link URI.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "startTime": {
                  "description": "Gets the start time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "status": {
                  "enum": [
                    "NotSpecified",
                    "Paused",
                    "Running",
                    "Waiting",
                    "Succeeded",
                    "Skipped",
                    "Suspended",
                    "Cancelled",
                    "Failed",
                    "Faulted",
                    "TimedOut",
                    "Aborted"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WorkflowStatus"
                  }
                },
                "trackingId": {
                  "description": "Gets the trackingId.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowRunTrigger"
          },
          {
            "oldValue": {
              "properties": {
                "primarySecretKey": {
                  "description": "Gets the primary secret key.",
                  "readOnly": true,
                  "type": "string"
                },
                "secondarySecretKey": {
                  "description": "Gets the secondary secret key.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowSecretKeys"
          },
          {
            "oldValue": {
              "enum": [
                "NotSpecified",
                "Enabled",
                "Disabled",
                "Deleted",
                "Suspended"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "WorkflowState"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowState"
          },
          {
            "oldValue": {
              "enum": [
                "NotSpecified",
                "Paused",
                "Running",
                "Waiting",
                "Succeeded",
                "Skipped",
                "Suspended",
                "Cancelled",
                "Failed",
                "Faulted",
                "TimedOut",
                "Aborted"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "WorkflowStatus"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowStatus"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "description": "Gets or sets the resource id.",
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "properties": {
                "name": {
                  "description": "Gets the workflow trigger name.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "changedTime": {
                      "description": "Gets the changed time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "createdTime": {
                      "description": "Gets the created time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "lastExecutionTime": {
                      "description": "Gets the last execution time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "nextExecutionTime": {
                      "description": "Gets the next execution time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "provisioningState": {
                      "enum": [
                        "NotSpecified",
                        "Creating",
                        "Succeeded",
                        "Updating"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "WorkflowTriggerProvisioningState"
                      }
                    },
                    "recurrence": {
                      "properties": {
                        "frequency": {
                          "enum": [
                            "Second",
                            "Minute",
                            "Hour",
                            "Day",
                            "Week",
                            "Month",
                            "Year"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "RecurrenceFrequency"
                          }
                        },
                        "interval": {
                          "description": "Gets or sets the interval.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "startTime": {
                          "description": "Gets or sets the start time.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "timeZone": {
                          "description": "Gets or sets the time zone.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "state": {
                      "enum": [
                        "NotSpecified",
                        "Enabled",
                        "Disabled",
                        "Deleted",
                        "Suspended"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "WorkflowState"
                      }
                    },
                    "status": {
                      "enum": [
                        "NotSpecified",
                        "Paused",
                        "Running",
                        "Waiting",
                        "Succeeded",
                        "Skipped",
                        "Suspended",
                        "Cancelled",
                        "Failed",
                        "Faulted",
                        "TimedOut",
                        "Aborted"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "WorkflowStatus"
                      }
                    },
                    "workflow": {
                      "properties": {
                        "id": {
                          "description": "Gets or sets the resource id.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Gets the resource name.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "description": "Gets the resource type.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Gets the workflow trigger type.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowTrigger"
          },
          {
            "oldValue": {
              "properties": {
                "state": {
                  "enum": [
                    "NotSpecified",
                    "Enabled",
                    "Disabled",
                    "Deleted",
                    "Suspended"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WorkflowState"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowTriggerFilter"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "description": "Gets or sets the resource id.",
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "properties": {
                "name": {
                  "description": "Gets the workflow trigger history name.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "code": {
                      "description": "Gets the code.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "endTime": {
                      "description": "Gets the end time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "error": {
                      "properties": {},
                      "type": "object"
                    },
                    "fired": {
                      "description": "Gets a value indicating whether trigger was fired.",
                      "readOnly": true,
                      "type": "boolean"
                    },
                    "inputsLink": {
                      "properties": {
                        "contentHash": {
                          "properties": {
                            "algorithm": {
                              "description": "Gets or sets the algorithm.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Gets or sets the value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "contentSize": {
                          "description": "Gets or sets the content size.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "contentVersion": {
                          "description": "Gets or sets the content version.",
                          "type": "string"
                        },
                        "metadata": {
                          "properties": {},
                          "type": "object"
                        },
                        "uri": {
                          "description": "Gets or sets the content link URI.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "outputsLink": {
                      "properties": {
                        "contentHash": {
                          "properties": {
                            "algorithm": {
                              "description": "Gets or sets the algorithm.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Gets or sets the value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "contentSize": {
                          "description": "Gets or sets the content size.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "contentVersion": {
                          "description": "Gets or sets the content version.",
                          "type": "string"
                        },
                        "metadata": {
                          "properties": {},
                          "type": "object"
                        },
                        "uri": {
                          "description": "Gets or sets the content link URI.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "run": {
                      "properties": {
                        "id": {
                          "description": "Gets or sets the resource id.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Gets the resource name.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "description": "Gets the resource type.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "startTime": {
                      "description": "Gets the start time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "status": {
                      "enum": [
                        "NotSpecified",
                        "Paused",
                        "Running",
                        "Waiting",
                        "Succeeded",
                        "Skipped",
                        "Suspended",
                        "Cancelled",
                        "Failed",
                        "Faulted",
                        "TimedOut",
                        "Aborted"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "WorkflowStatus"
                      }
                    },
                    "trackingId": {
                      "description": "Gets the tracking id.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Gets the workflow trigger history type.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowTriggerHistory"
          },
          {
            "oldValue": {
              "properties": {
                "status": {
                  "enum": [
                    "NotSpecified",
                    "Paused",
                    "Running",
                    "Waiting",
                    "Succeeded",
                    "Skipped",
                    "Suspended",
                    "Cancelled",
                    "Failed",
                    "Faulted",
                    "TimedOut",
                    "Aborted"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WorkflowStatus"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowTriggerHistoryFilter"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Gets or sets the URL to get the next set of results.",
                  "type": "string"
                },
                "value": {
                  "description": "Gets or sets a list of workflow trigger histories.",
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "id": {
                            "description": "Gets or sets the resource id.",
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "properties": {
                      "name": {
                        "description": "Gets the workflow trigger history name.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "properties": {
                          "code": {
                            "description": "Gets the code.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "endTime": {
                            "description": "Gets the end time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "error": {
                            "properties": {},
                            "type": "object"
                          },
                          "fired": {
                            "description": "Gets a value indicating whether trigger was fired.",
                            "readOnly": true,
                            "type": "boolean"
                          },
                          "inputsLink": {
                            "properties": {
                              "contentHash": {
                                "properties": {
                                  "algorithm": {
                                    "description": "Gets or sets the algorithm.",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Gets or sets the value.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "contentSize": {
                                "description": "Gets or sets the content size.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "contentVersion": {
                                "description": "Gets or sets the content version.",
                                "type": "string"
                              },
                              "metadata": {
                                "properties": {},
                                "type": "object"
                              },
                              "uri": {
                                "description": "Gets or sets the content link URI.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "outputsLink": {
                            "properties": {
                              "contentHash": {
                                "properties": {
                                  "algorithm": {
                                    "description": "Gets or sets the algorithm.",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Gets or sets the value.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "contentSize": {
                                "description": "Gets or sets the content size.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "contentVersion": {
                                "description": "Gets or sets the content version.",
                                "type": "string"
                              },
                              "metadata": {
                                "properties": {},
                                "type": "object"
                              },
                              "uri": {
                                "description": "Gets or sets the content link URI.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "run": {
                            "properties": {
                              "id": {
                                "description": "Gets or sets the resource id.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Gets the resource name.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "type": {
                                "description": "Gets the resource type.",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "startTime": {
                            "description": "Gets the start time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "status": {
                            "enum": [
                              "NotSpecified",
                              "Paused",
                              "Running",
                              "Waiting",
                              "Succeeded",
                              "Skipped",
                              "Suspended",
                              "Cancelled",
                              "Failed",
                              "Faulted",
                              "TimedOut",
                              "Aborted"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "WorkflowStatus"
                            }
                          },
                          "trackingId": {
                            "description": "Gets the tracking id.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Gets the workflow trigger history type.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowTriggerHistoryListResult"
          },
          {
            "oldValue": {
              "properties": {
                "code": {
                  "description": "Gets the code.",
                  "readOnly": true,
                  "type": "string"
                },
                "endTime": {
                  "description": "Gets the end time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "error": {
                  "properties": {},
                  "type": "object"
                },
                "fired": {
                  "description": "Gets a value indicating whether trigger was fired.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "inputsLink": {
                  "properties": {
                    "contentHash": {
                      "properties": {
                        "algorithm": {
                          "description": "Gets or sets the algorithm.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Gets or sets the value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "contentSize": {
                      "description": "Gets or sets the content size.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "contentVersion": {
                      "description": "Gets or sets the content version.",
                      "type": "string"
                    },
                    "metadata": {
                      "properties": {},
                      "type": "object"
                    },
                    "uri": {
                      "description": "Gets or sets the content link URI.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "outputsLink": {
                  "properties": {
                    "contentHash": {
                      "properties": {
                        "algorithm": {
                          "description": "Gets or sets the algorithm.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Gets or sets the value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "contentSize": {
                      "description": "Gets or sets the content size.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "contentVersion": {
                      "description": "Gets or sets the content version.",
                      "type": "string"
                    },
                    "metadata": {
                      "properties": {},
                      "type": "object"
                    },
                    "uri": {
                      "description": "Gets or sets the content link URI.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "run": {
                  "properties": {
                    "id": {
                      "description": "Gets or sets the resource id.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Gets the resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "type": {
                      "description": "Gets the resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "startTime": {
                  "description": "Gets the start time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "status": {
                  "enum": [
                    "NotSpecified",
                    "Paused",
                    "Running",
                    "Waiting",
                    "Succeeded",
                    "Skipped",
                    "Suspended",
                    "Cancelled",
                    "Failed",
                    "Faulted",
                    "TimedOut",
                    "Aborted"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WorkflowStatus"
                  }
                },
                "trackingId": {
                  "description": "Gets the tracking id.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowTriggerHistoryProperties"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Gets or sets the URL to get the next set of results.",
                  "type": "string"
                },
                "value": {
                  "description": "Gets or sets a list of workflow triggers.",
                  "items": {
                    "allOf": [
                      {
                        "properties": {
                          "id": {
                            "description": "Gets or sets the resource id.",
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "properties": {
                      "name": {
                        "description": "Gets the workflow trigger name.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "properties": {
                          "changedTime": {
                            "description": "Gets the changed time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "createdTime": {
                            "description": "Gets the created time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "lastExecutionTime": {
                            "description": "Gets the last execution time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "nextExecutionTime": {
                            "description": "Gets the next execution time.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "provisioningState": {
                            "enum": [
                              "NotSpecified",
                              "Creating",
                              "Succeeded",
                              "Updating"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "WorkflowTriggerProvisioningState"
                            }
                          },
                          "recurrence": {
                            "properties": {
                              "frequency": {
                                "enum": [
                                  "Second",
                                  "Minute",
                                  "Hour",
                                  "Day",
                                  "Week",
                                  "Month",
                                  "Year"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "RecurrenceFrequency"
                                }
                              },
                              "interval": {
                                "description": "Gets or sets the interval.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "startTime": {
                                "description": "Gets or sets the start time.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "timeZone": {
                                "description": "Gets or sets the time zone.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "state": {
                            "enum": [
                              "NotSpecified",
                              "Enabled",
                              "Disabled",
                              "Deleted",
                              "Suspended"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "WorkflowState"
                            }
                          },
                          "status": {
                            "enum": [
                              "NotSpecified",
                              "Paused",
                              "Running",
                              "Waiting",
                              "Succeeded",
                              "Skipped",
                              "Suspended",
                              "Cancelled",
                              "Failed",
                              "Faulted",
                              "TimedOut",
                              "Aborted"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "WorkflowStatus"
                            }
                          },
                          "workflow": {
                            "properties": {
                              "id": {
                                "description": "Gets or sets the resource id.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Gets the resource name.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "type": {
                                "description": "Gets the resource type.",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Gets the workflow trigger type.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowTriggerListResult"
          },
          {
            "oldValue": {
              "properties": {
                "changedTime": {
                  "description": "Gets the changed time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "createdTime": {
                  "description": "Gets the created time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "lastExecutionTime": {
                  "description": "Gets the last execution time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "nextExecutionTime": {
                  "description": "Gets the next execution time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "provisioningState": {
                  "enum": [
                    "NotSpecified",
                    "Creating",
                    "Succeeded",
                    "Updating"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WorkflowTriggerProvisioningState"
                  }
                },
                "recurrence": {
                  "properties": {
                    "frequency": {
                      "enum": [
                        "Second",
                        "Minute",
                        "Hour",
                        "Day",
                        "Week",
                        "Month",
                        "Year"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "RecurrenceFrequency"
                      }
                    },
                    "interval": {
                      "description": "Gets or sets the interval.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "startTime": {
                      "description": "Gets or sets the start time.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "timeZone": {
                      "description": "Gets or sets the time zone.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "state": {
                  "enum": [
                    "NotSpecified",
                    "Enabled",
                    "Disabled",
                    "Deleted",
                    "Suspended"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WorkflowState"
                  }
                },
                "status": {
                  "enum": [
                    "NotSpecified",
                    "Paused",
                    "Running",
                    "Waiting",
                    "Succeeded",
                    "Skipped",
                    "Suspended",
                    "Cancelled",
                    "Failed",
                    "Faulted",
                    "TimedOut",
                    "Aborted"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WorkflowStatus"
                  }
                },
                "workflow": {
                  "properties": {
                    "id": {
                      "description": "Gets or sets the resource id.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Gets the resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "type": {
                      "description": "Gets the resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowTriggerProperties"
          },
          {
            "oldValue": {
              "enum": [
                "NotSpecified",
                "Creating",
                "Succeeded",
                "Updating"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "WorkflowTriggerProvisioningState"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowTriggerProvisioningState"
          },
          {
            "oldValue": {
              "properties": {
                "frequency": {
                  "enum": [
                    "Second",
                    "Minute",
                    "Hour",
                    "Day",
                    "Week",
                    "Month",
                    "Year"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "RecurrenceFrequency"
                  }
                },
                "interval": {
                  "description": "Gets or sets the interval.",
                  "format": "int32",
                  "type": "integer"
                },
                "startTime": {
                  "description": "Gets or sets the start time.",
                  "format": "date-time",
                  "type": "string"
                },
                "timeZone": {
                  "description": "Gets or sets the time zone.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowTriggerRecurrence"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "properties": {
                    "id": {
                      "description": "Gets or sets the resource id.",
                      "type": "string"
                    },
                    "location": {
                      "description": "Gets or sets the resource location.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Gets the resource name.",
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Gets or sets the resource tags.",
                      "type": "object"
                    },
                    "type": {
                      "description": "Gets the resource type.",
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "properties": {
                "properties": {
                  "properties": {
                    "accessEndpoint": {
                      "description": "Gets the access endpoint.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "changedTime": {
                      "description": "Gets the changed time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "createdTime": {
                      "description": "Gets the created time.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "definition": {
                      "properties": {},
                      "type": "object"
                    },
                    "definitionLink": {
                      "properties": {
                        "contentHash": {
                          "properties": {
                            "algorithm": {
                              "description": "Gets or sets the algorithm.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Gets or sets the value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "contentSize": {
                          "description": "Gets or sets the content size.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "contentVersion": {
                          "description": "Gets or sets the content version.",
                          "type": "string"
                        },
                        "metadata": {
                          "properties": {},
                          "type": "object"
                        },
                        "uri": {
                          "description": "Gets or sets the content link URI.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "parameters": {
                      "additionalProperties": {
                        "properties": {
                          "metadata": {
                            "properties": {},
                            "type": "object"
                          },
                          "type": {
                            "enum": [
                              "NotSpecified",
                              "String",
                              "SecureString",
                              "Int",
                              "Float",
                              "Bool",
                              "Array",
                              "Object",
                              "SecureObject"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ParameterType"
                            }
                          },
                          "value": {
                            "properties": {},
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "description": "Gets or sets the parameters.",
                      "type": "object"
                    },
                    "parametersLink": {
                      "properties": {
                        "contentHash": {
                          "properties": {
                            "algorithm": {
                              "description": "Gets or sets the algorithm.",
                              "type": "string"
                            },
                            "value": {
                              "description": "Gets or sets the value.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "contentSize": {
                          "description": "Gets or sets the content size.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "contentVersion": {
                          "description": "Gets or sets the content version.",
                          "type": "string"
                        },
                        "metadata": {
                          "properties": {},
                          "type": "object"
                        },
                        "uri": {
                          "description": "Gets or sets the content link URI.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "sku": {
                      "properties": {
                        "name": {
                          "enum": [
                            "NotSpecified",
                            "Free",
                            "Shared",
                            "Basic",
                            "Standard",
                            "Premium"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "SkuName"
                          }
                        },
                        "plan": {
                          "properties": {
                            "id": {
                              "description": "Gets or sets the resource id.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Gets the resource name.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "type": {
                              "description": "Gets the resource type.",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "state": {
                      "enum": [
                        "NotSpecified",
                        "Enabled",
                        "Disabled",
                        "Deleted",
                        "Suspended"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "WorkflowState"
                      }
                    },
                    "version": {
                      "description": "Gets the version.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowVersion"
          },
          {
            "oldValue": {
              "properties": {
                "accessEndpoint": {
                  "description": "Gets the access endpoint.",
                  "readOnly": true,
                  "type": "string"
                },
                "changedTime": {
                  "description": "Gets the changed time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "createdTime": {
                  "description": "Gets the created time.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "definition": {
                  "properties": {},
                  "type": "object"
                },
                "definitionLink": {
                  "properties": {
                    "contentHash": {
                      "properties": {
                        "algorithm": {
                          "description": "Gets or sets the algorithm.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Gets or sets the value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "contentSize": {
                      "description": "Gets or sets the content size.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "contentVersion": {
                      "description": "Gets or sets the content version.",
                      "type": "string"
                    },
                    "metadata": {
                      "properties": {},
                      "type": "object"
                    },
                    "uri": {
                      "description": "Gets or sets the content link URI.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "parameters": {
                  "additionalProperties": {
                    "properties": {
                      "metadata": {
                        "properties": {},
                        "type": "object"
                      },
                      "type": {
                        "enum": [
                          "NotSpecified",
                          "String",
                          "SecureString",
                          "Int",
                          "Float",
                          "Bool",
                          "Array",
                          "Object",
                          "SecureObject"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "ParameterType"
                        }
                      },
                      "value": {
                        "properties": {},
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "description": "Gets or sets the parameters.",
                  "type": "object"
                },
                "parametersLink": {
                  "properties": {
                    "contentHash": {
                      "properties": {
                        "algorithm": {
                          "description": "Gets or sets the algorithm.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Gets or sets the value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "contentSize": {
                      "description": "Gets or sets the content size.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "contentVersion": {
                      "description": "Gets or sets the content version.",
                      "type": "string"
                    },
                    "metadata": {
                      "properties": {},
                      "type": "object"
                    },
                    "uri": {
                      "description": "Gets or sets the content link URI.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "sku": {
                  "properties": {
                    "name": {
                      "enum": [
                        "NotSpecified",
                        "Free",
                        "Shared",
                        "Basic",
                        "Standard",
                        "Premium"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "SkuName"
                      }
                    },
                    "plan": {
                      "properties": {
                        "id": {
                          "description": "Gets or sets the resource id.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Gets the resource name.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "description": "Gets the resource type.",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "state": {
                  "enum": [
                    "NotSpecified",
                    "Enabled",
                    "Disabled",
                    "Deleted",
                    "Suspended"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "WorkflowState"
                  }
                },
                "version": {
                  "description": "Gets the version.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WorkflowVersionProperties"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "acknowledgementControlNumberLowerBound": {
                  "description": "The acknowledgement control number lower bound.",
                  "format": "int32",
                  "type": "integer"
                },
                "acknowledgementControlNumberPrefix": {
                  "description": "The acknowledgement control number prefix.",
                  "type": "string"
                },
                "acknowledgementControlNumberSuffix": {
                  "description": "The acknowledgement control number suffix.",
                  "type": "string"
                },
                "acknowledgementControlNumberUpperBound": {
                  "description": "The acknowledgement control number upper bound.",
                  "format": "int32",
                  "type": "integer"
                },
                "batchFunctionalAcknowledgements": {
                  "description": "The value indicating whether to batch functional acknowledgements.",
                  "type": "boolean"
                },
                "batchImplementationAcknowledgements": {
                  "description": "The value indicating whether to batch implementation acknowledgements.",
                  "type": "boolean"
                },
                "batchTechnicalAcknowledgements": {
                  "description": "The value indicating whether to batch the technical acknowledgements.",
                  "type": "boolean"
                },
                "functionalAcknowledgementVersion": {
                  "description": "The functional acknowledgement version.",
                  "type": "string"
                },
                "implementationAcknowledgementVersion": {
                  "description": "The implementation acknowledgement version.",
                  "type": "string"
                },
                "needFunctionalAcknowledgement": {
                  "description": "The value indicating whether functional acknowledgement is needed.",
                  "type": "boolean"
                },
                "needImplementationAcknowledgement": {
                  "description": "The value indicating whether implementation acknowledgement is needed.",
                  "type": "boolean"
                },
                "needLoopForValidMessages": {
                  "description": "The value indicating whether a loop is needed for valid messages.",
                  "type": "boolean"
                },
                "needTechnicalAcknowledgement": {
                  "description": "The value indicating whether technical acknowledgement is needed.",
                  "type": "boolean"
                },
                "rolloverAcknowledgementControlNumber": {
                  "description": "The value indicating whether to rollover acknowledgement control number.",
                  "type": "boolean"
                },
                "sendSynchronousAcknowledgement": {
                  "description": "The value indicating whether to send synchronous acknowledgement.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/X12AcknowledgementSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "receiveAgreement": {
                  "properties": {
                    "protocolSettings": {
                      "properties": {
                        "acknowledgementSettings": {
                          "properties": {
                            "acknowledgementControlNumberLowerBound": {
                              "description": "The acknowledgement control number lower bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "acknowledgementControlNumberPrefix": {
                              "description": "The acknowledgement control number prefix.",
                              "type": "string"
                            },
                            "acknowledgementControlNumberSuffix": {
                              "description": "The acknowledgement control number suffix.",
                              "type": "string"
                            },
                            "acknowledgementControlNumberUpperBound": {
                              "description": "The acknowledgement control number upper bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "batchFunctionalAcknowledgements": {
                              "description": "The value indicating whether to batch functional acknowledgements.",
                              "type": "boolean"
                            },
                            "batchImplementationAcknowledgements": {
                              "description": "The value indicating whether to batch implementation acknowledgements.",
                              "type": "boolean"
                            },
                            "batchTechnicalAcknowledgements": {
                              "description": "The value indicating whether to batch the technical acknowledgements.",
                              "type": "boolean"
                            },
                            "functionalAcknowledgementVersion": {
                              "description": "The functional acknowledgement version.",
                              "type": "string"
                            },
                            "implementationAcknowledgementVersion": {
                              "description": "The implementation acknowledgement version.",
                              "type": "string"
                            },
                            "needFunctionalAcknowledgement": {
                              "description": "The value indicating whether functional acknowledgement is needed.",
                              "type": "boolean"
                            },
                            "needImplementationAcknowledgement": {
                              "description": "The value indicating whether implementation acknowledgement is needed.",
                              "type": "boolean"
                            },
                            "needLoopForValidMessages": {
                              "description": "The value indicating whether a loop is needed for valid messages.",
                              "type": "boolean"
                            },
                            "needTechnicalAcknowledgement": {
                              "description": "The value indicating whether technical acknowledgement is needed.",
                              "type": "boolean"
                            },
                            "rolloverAcknowledgementControlNumber": {
                              "description": "The value indicating whether to rollover acknowledgement control number.",
                              "type": "boolean"
                            },
                            "sendSynchronousAcknowledgement": {
                              "description": "The value indicating whether to send synchronous acknowledgement.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "envelopeOverrides": {
                          "description": "The X12 envelope override settings.",
                          "items": {
                            "properties": {
                              "dateFormat": {
                                "enum": [
                                  "NotSpecified",
                                  "CCYYMMDD",
                                  "YYMMDD"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "X12DateFormat"
                                }
                              },
                              "functionalIdentifierCode": {
                                "description": "The functional identifier code.",
                                "type": "string"
                              },
                              "headerVersion": {
                                "description": "The header version.",
                                "type": "string"
                              },
                              "messageId": {
                                "description": "The message id on which this envelope settings has to be applied.",
                                "type": "string"
                              },
                              "protocolVersion": {
                                "description": "The protocol version on which this envelope settings has to be applied.",
                                "type": "string"
                              },
                              "receiverApplicationId": {
                                "description": "The receiver application id.",
                                "type": "string"
                              },
                              "responsibleAgencyCode": {
                                "description": "The responsible agency code.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "senderApplicationId": {
                                "description": "The sender application id.",
                                "type": "string"
                              },
                              "targetNamespace": {
                                "description": "The target namespace on which this envelope settings has to be applied.",
                                "type": "string"
                              },
                              "timeFormat": {
                                "enum": [
                                  "NotSpecified",
                                  "HHMM",
                                  "HHMMSS",
                                  "HHMMSSdd",
                                  "HHMMSSd"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "X12TimeFormat"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "envelopeSettings": {
                          "properties": {
                            "controlStandardsId": {
                              "description": "The controls standards id.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "controlVersionNumber": {
                              "description": "The control version number.",
                              "type": "string"
                            },
                            "enableDefaultGroupHeaders": {
                              "description": "The value indicating whether to enable default group headers.",
                              "type": "boolean"
                            },
                            "functionalGroupId": {
                              "description": "The functional group id.",
                              "type": "string"
                            },
                            "groupControlNumberLowerBound": {
                              "description": "The group control number lower bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "groupControlNumberUpperBound": {
                              "description": "The group control number upper bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "groupHeaderAgencyCode": {
                              "description": "The group header agency code.",
                              "type": "string"
                            },
                            "groupHeaderDateFormat": {
                              "enum": [
                                "NotSpecified",
                                "CCYYMMDD",
                                "YYMMDD"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "X12DateFormat"
                              }
                            },
                            "groupHeaderTimeFormat": {
                              "enum": [
                                "NotSpecified",
                                "HHMM",
                                "HHMMSS",
                                "HHMMSSdd",
                                "HHMMSSd"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "X12TimeFormat"
                              }
                            },
                            "groupHeaderVersion": {
                              "description": "The group header version.",
                              "type": "string"
                            },
                            "interchangeControlNumberLowerBound": {
                              "description": "The interchange  control number lower bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "interchangeControlNumberUpperBound": {
                              "description": "The interchange  control number upper bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "overwriteExistingTransactionSetControlNumber": {
                              "description": "The value indicating whether to overwrite existing transaction set control number.",
                              "type": "boolean"
                            },
                            "receiverApplicationId": {
                              "description": "The receiver application id.",
                              "type": "string"
                            },
                            "rolloverGroupControlNumber": {
                              "description": "The value indicating whether to rollover group control number.",
                              "type": "boolean"
                            },
                            "rolloverInterchangeControlNumber": {
                              "description": "The value indicating whether to rollover interchange control number.",
                              "type": "boolean"
                            },
                            "rolloverTransactionSetControlNumber": {
                              "description": "The value indicating whether to rollover transaction set control number.",
                              "type": "boolean"
                            },
                            "senderApplicationId": {
                              "description": "The sender application id.",
                              "type": "string"
                            },
                            "transactionSetControlNumberLowerBound": {
                              "description": "The transaction set control number lower bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "transactionSetControlNumberPrefix": {
                              "description": "The transaction set control number prefix.",
                              "type": "string"
                            },
                            "transactionSetControlNumberSuffix": {
                              "description": "The transaction set control number suffix.",
                              "type": "string"
                            },
                            "transactionSetControlNumberUpperBound": {
                              "description": "The transaction set control number upper bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "usageIndicator": {
                              "enum": [
                                "NotSpecified",
                                "Test",
                                "Information",
                                "Production"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "UsageIndicator"
                              }
                            },
                            "useControlStandardsIdAsRepetitionCharacter": {
                              "description": "The value indicating whether to use control standards id as repetition character.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "framingSettings": {
                          "properties": {
                            "characterSet": {
                              "enum": [
                                "NotSpecified",
                                "Basic",
                                "Extended",
                                "UTF8"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "X12CharacterSet"
                              }
                            },
                            "componentSeparator": {
                              "description": "The component separator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "dataElementSeparator": {
                              "description": "The data element separator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "replaceCharacter": {
                              "description": "The replacement character.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "replaceSeparatorsInPayload": {
                              "description": "The value indicating whether to replace separators in payload.",
                              "type": "boolean"
                            },
                            "segmentTerminator": {
                              "description": "The segment terminator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "segmentTerminatorSuffix": {
                              "enum": [
                                "NotSpecified",
                                "None",
                                "CR",
                                "LF",
                                "CRLF"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "SegmentTerminatorSuffix"
                              }
                            }
                          },
                          "type": "object"
                        },
                        "messageFilter": {
                          "properties": {
                            "messageFilterType": {
                              "enum": [
                                "NotSpecified",
                                "Include",
                                "Exclude"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "MessageFilterType"
                              }
                            }
                          },
                          "type": "object"
                        },
                        "messageFilterList": {
                          "description": "The X12 message filter list.",
                          "items": {
                            "properties": {
                              "messageId": {
                                "description": "The message id.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "processingSettings": {
                          "properties": {
                            "convertImpliedDecimal": {
                              "description": "The value indicating whether to convert numerical type to implied decimal.",
                              "type": "boolean"
                            },
                            "createEmptyXmlTagsForTrailingSeparators": {
                              "description": "The value indicating whether to create empty xml tags for trailing separators.",
                              "type": "boolean"
                            },
                            "maskSecurityInfo": {
                              "description": "The value indicating whether to mask security information.",
                              "type": "boolean"
                            },
                            "preserveInterchange": {
                              "description": "The value indicating whether to preserve interchange.",
                              "type": "boolean"
                            },
                            "suspendInterchangeOnError": {
                              "description": "The value indicating whether to suspend interchange on error.",
                              "type": "boolean"
                            },
                            "useDotAsDecimalSeparator": {
                              "description": "The value indicating whether to use dot as decimal separator.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "schemaReferences": {
                          "description": "The X12 schema references.",
                          "items": {
                            "properties": {
                              "messageId": {
                                "description": "The message id.",
                                "type": "string"
                              },
                              "schemaName": {
                                "description": "The schema name.",
                                "type": "string"
                              },
                              "schemaVersion": {
                                "description": "The schema version.",
                                "type": "string"
                              },
                              "senderApplicationId": {
                                "description": "The sender application id.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "securitySettings": {
                          "properties": {
                            "authorizationQualifier": {
                              "description": "The authorization qualifier.",
                              "type": "string"
                            },
                            "authorizationValue": {
                              "description": "The authorization value.",
                              "type": "string"
                            },
                            "passwordValue": {
                              "description": "The password value.",
                              "type": "string"
                            },
                            "securityQualifier": {
                              "description": "The security qualifier.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "validationOverrides": {
                          "description": "The X12 validation override settings.",
                          "items": {
                            "properties": {
                              "allowLeadingAndTrailingSpacesAndZeroes": {
                                "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                "type": "boolean"
                              },
                              "messageId": {
                                "description": "The message id on which the validation settings has to be applied.",
                                "type": "string"
                              },
                              "trailingSeparatorPolicy": {
                                "enum": [
                                  "NotSpecified",
                                  "NotAllowed",
                                  "Optional",
                                  "Mandatory"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "TrailingSeparatorPolicy"
                                }
                              },
                              "trimLeadingAndTrailingSpacesAndZeroes": {
                                "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                "type": "boolean"
                              },
                              "validateCharacterSet": {
                                "description": "The value indicating whether to validate character Set.",
                                "type": "boolean"
                              },
                              "validateEDITypes": {
                                "description": "The value indicating whether to validate EDI types.",
                                "type": "boolean"
                              },
                              "validateXSDTypes": {
                                "description": "The value indicating whether to validate XSD types.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "validationSettings": {
                          "properties": {
                            "allowLeadingAndTrailingSpacesAndZeroes": {
                              "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                              "type": "boolean"
                            },
                            "checkDuplicateGroupControlNumber": {
                              "description": "The value indicating whether to check for duplicate group control number.",
                              "type": "boolean"
                            },
                            "checkDuplicateInterchangeControlNumber": {
                              "description": "The value indicating whether to check for duplicate interchange control number.",
                              "type": "boolean"
                            },
                            "checkDuplicateTransactionSetControlNumber": {
                              "description": "The value indicating whether to check for duplicate transaction set control number.",
                              "type": "boolean"
                            },
                            "interchangeControlNumberValidityDays": {
                              "description": "The validity period of interchange control number.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "trailingSeparatorPolicy": {
                              "enum": [
                                "NotSpecified",
                                "NotAllowed",
                                "Optional",
                                "Mandatory"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "TrailingSeparatorPolicy"
                              }
                            },
                            "trimLeadingAndTrailingSpacesAndZeroes": {
                              "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                              "type": "boolean"
                            },
                            "validateCharacterSet": {
                              "description": "The value indicating whether to validate character set in the message.",
                              "type": "boolean"
                            },
                            "validateEDITypes": {
                              "description": "The value indicating whether to Whether to validate EDI types.",
                              "type": "boolean"
                            },
                            "validateXSDTypes": {
                              "description": "The value indicating whether to Whether to validate XSD types.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "x12DelimiterOverrides": {
                          "description": "The X12 delimiter override settings.",
                          "items": {
                            "properties": {
                              "componentSeparator": {
                                "description": "The component separator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "dataElementSeparator": {
                                "description": "The data element separator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "messageId": {
                                "description": "The message id.",
                                "type": "string"
                              },
                              "protocolVersion": {
                                "description": "The protocol version.",
                                "type": "string"
                              },
                              "replaceCharacter": {
                                "description": "The replacement character.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "replaceSeparatorsInPayload": {
                                "description": "The value indicating whether to replace separators in payload.",
                                "type": "boolean"
                              },
                              "segmentTerminator": {
                                "description": "The segment terminator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "segmentTerminatorSuffix": {
                                "enum": [
                                  "NotSpecified",
                                  "None",
                                  "CR",
                                  "LF",
                                  "CRLF"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "SegmentTerminatorSuffix"
                                }
                              },
                              "targetNamespace": {
                                "description": "The target namespace on which this delimiter settings has to be applied.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "receiverBusinessIdentity": {
                      "properties": {
                        "Qualifier": {
                          "description": "The business identity qualifier.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "The business identity value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "senderBusinessIdentity": {
                      "properties": {
                        "Qualifier": {
                          "description": "The business identity qualifier.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "The business identity value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "sendAgreement": {
                  "properties": {
                    "protocolSettings": {
                      "properties": {
                        "acknowledgementSettings": {
                          "properties": {
                            "acknowledgementControlNumberLowerBound": {
                              "description": "The acknowledgement control number lower bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "acknowledgementControlNumberPrefix": {
                              "description": "The acknowledgement control number prefix.",
                              "type": "string"
                            },
                            "acknowledgementControlNumberSuffix": {
                              "description": "The acknowledgement control number suffix.",
                              "type": "string"
                            },
                            "acknowledgementControlNumberUpperBound": {
                              "description": "The acknowledgement control number upper bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "batchFunctionalAcknowledgements": {
                              "description": "The value indicating whether to batch functional acknowledgements.",
                              "type": "boolean"
                            },
                            "batchImplementationAcknowledgements": {
                              "description": "The value indicating whether to batch implementation acknowledgements.",
                              "type": "boolean"
                            },
                            "batchTechnicalAcknowledgements": {
                              "description": "The value indicating whether to batch the technical acknowledgements.",
                              "type": "boolean"
                            },
                            "functionalAcknowledgementVersion": {
                              "description": "The functional acknowledgement version.",
                              "type": "string"
                            },
                            "implementationAcknowledgementVersion": {
                              "description": "The implementation acknowledgement version.",
                              "type": "string"
                            },
                            "needFunctionalAcknowledgement": {
                              "description": "The value indicating whether functional acknowledgement is needed.",
                              "type": "boolean"
                            },
                            "needImplementationAcknowledgement": {
                              "description": "The value indicating whether implementation acknowledgement is needed.",
                              "type": "boolean"
                            },
                            "needLoopForValidMessages": {
                              "description": "The value indicating whether a loop is needed for valid messages.",
                              "type": "boolean"
                            },
                            "needTechnicalAcknowledgement": {
                              "description": "The value indicating whether technical acknowledgement is needed.",
                              "type": "boolean"
                            },
                            "rolloverAcknowledgementControlNumber": {
                              "description": "The value indicating whether to rollover acknowledgement control number.",
                              "type": "boolean"
                            },
                            "sendSynchronousAcknowledgement": {
                              "description": "The value indicating whether to send synchronous acknowledgement.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "envelopeOverrides": {
                          "description": "The X12 envelope override settings.",
                          "items": {
                            "properties": {
                              "dateFormat": {
                                "enum": [
                                  "NotSpecified",
                                  "CCYYMMDD",
                                  "YYMMDD"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "X12DateFormat"
                                }
                              },
                              "functionalIdentifierCode": {
                                "description": "The functional identifier code.",
                                "type": "string"
                              },
                              "headerVersion": {
                                "description": "The header version.",
                                "type": "string"
                              },
                              "messageId": {
                                "description": "The message id on which this envelope settings has to be applied.",
                                "type": "string"
                              },
                              "protocolVersion": {
                                "description": "The protocol version on which this envelope settings has to be applied.",
                                "type": "string"
                              },
                              "receiverApplicationId": {
                                "description": "The receiver application id.",
                                "type": "string"
                              },
                              "responsibleAgencyCode": {
                                "description": "The responsible agency code.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "senderApplicationId": {
                                "description": "The sender application id.",
                                "type": "string"
                              },
                              "targetNamespace": {
                                "description": "The target namespace on which this envelope settings has to be applied.",
                                "type": "string"
                              },
                              "timeFormat": {
                                "enum": [
                                  "NotSpecified",
                                  "HHMM",
                                  "HHMMSS",
                                  "HHMMSSdd",
                                  "HHMMSSd"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "X12TimeFormat"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "envelopeSettings": {
                          "properties": {
                            "controlStandardsId": {
                              "description": "The controls standards id.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "controlVersionNumber": {
                              "description": "The control version number.",
                              "type": "string"
                            },
                            "enableDefaultGroupHeaders": {
                              "description": "The value indicating whether to enable default group headers.",
                              "type": "boolean"
                            },
                            "functionalGroupId": {
                              "description": "The functional group id.",
                              "type": "string"
                            },
                            "groupControlNumberLowerBound": {
                              "description": "The group control number lower bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "groupControlNumberUpperBound": {
                              "description": "The group control number upper bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "groupHeaderAgencyCode": {
                              "description": "The group header agency code.",
                              "type": "string"
                            },
                            "groupHeaderDateFormat": {
                              "enum": [
                                "NotSpecified",
                                "CCYYMMDD",
                                "YYMMDD"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "X12DateFormat"
                              }
                            },
                            "groupHeaderTimeFormat": {
                              "enum": [
                                "NotSpecified",
                                "HHMM",
                                "HHMMSS",
                                "HHMMSSdd",
                                "HHMMSSd"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "X12TimeFormat"
                              }
                            },
                            "groupHeaderVersion": {
                              "description": "The group header version.",
                              "type": "string"
                            },
                            "interchangeControlNumberLowerBound": {
                              "description": "The interchange  control number lower bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "interchangeControlNumberUpperBound": {
                              "description": "The interchange  control number upper bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "overwriteExistingTransactionSetControlNumber": {
                              "description": "The value indicating whether to overwrite existing transaction set control number.",
                              "type": "boolean"
                            },
                            "receiverApplicationId": {
                              "description": "The receiver application id.",
                              "type": "string"
                            },
                            "rolloverGroupControlNumber": {
                              "description": "The value indicating whether to rollover group control number.",
                              "type": "boolean"
                            },
                            "rolloverInterchangeControlNumber": {
                              "description": "The value indicating whether to rollover interchange control number.",
                              "type": "boolean"
                            },
                            "rolloverTransactionSetControlNumber": {
                              "description": "The value indicating whether to rollover transaction set control number.",
                              "type": "boolean"
                            },
                            "senderApplicationId": {
                              "description": "The sender application id.",
                              "type": "string"
                            },
                            "transactionSetControlNumberLowerBound": {
                              "description": "The transaction set control number lower bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "transactionSetControlNumberPrefix": {
                              "description": "The transaction set control number prefix.",
                              "type": "string"
                            },
                            "transactionSetControlNumberSuffix": {
                              "description": "The transaction set control number suffix.",
                              "type": "string"
                            },
                            "transactionSetControlNumberUpperBound": {
                              "description": "The transaction set control number upper bound.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "usageIndicator": {
                              "enum": [
                                "NotSpecified",
                                "Test",
                                "Information",
                                "Production"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "UsageIndicator"
                              }
                            },
                            "useControlStandardsIdAsRepetitionCharacter": {
                              "description": "The value indicating whether to use control standards id as repetition character.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "framingSettings": {
                          "properties": {
                            "characterSet": {
                              "enum": [
                                "NotSpecified",
                                "Basic",
                                "Extended",
                                "UTF8"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "X12CharacterSet"
                              }
                            },
                            "componentSeparator": {
                              "description": "The component separator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "dataElementSeparator": {
                              "description": "The data element separator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "replaceCharacter": {
                              "description": "The replacement character.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "replaceSeparatorsInPayload": {
                              "description": "The value indicating whether to replace separators in payload.",
                              "type": "boolean"
                            },
                            "segmentTerminator": {
                              "description": "The segment terminator.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "segmentTerminatorSuffix": {
                              "enum": [
                                "NotSpecified",
                                "None",
                                "CR",
                                "LF",
                                "CRLF"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "SegmentTerminatorSuffix"
                              }
                            }
                          },
                          "type": "object"
                        },
                        "messageFilter": {
                          "properties": {
                            "messageFilterType": {
                              "enum": [
                                "NotSpecified",
                                "Include",
                                "Exclude"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "MessageFilterType"
                              }
                            }
                          },
                          "type": "object"
                        },
                        "messageFilterList": {
                          "description": "The X12 message filter list.",
                          "items": {
                            "properties": {
                              "messageId": {
                                "description": "The message id.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "processingSettings": {
                          "properties": {
                            "convertImpliedDecimal": {
                              "description": "The value indicating whether to convert numerical type to implied decimal.",
                              "type": "boolean"
                            },
                            "createEmptyXmlTagsForTrailingSeparators": {
                              "description": "The value indicating whether to create empty xml tags for trailing separators.",
                              "type": "boolean"
                            },
                            "maskSecurityInfo": {
                              "description": "The value indicating whether to mask security information.",
                              "type": "boolean"
                            },
                            "preserveInterchange": {
                              "description": "The value indicating whether to preserve interchange.",
                              "type": "boolean"
                            },
                            "suspendInterchangeOnError": {
                              "description": "The value indicating whether to suspend interchange on error.",
                              "type": "boolean"
                            },
                            "useDotAsDecimalSeparator": {
                              "description": "The value indicating whether to use dot as decimal separator.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "schemaReferences": {
                          "description": "The X12 schema references.",
                          "items": {
                            "properties": {
                              "messageId": {
                                "description": "The message id.",
                                "type": "string"
                              },
                              "schemaName": {
                                "description": "The schema name.",
                                "type": "string"
                              },
                              "schemaVersion": {
                                "description": "The schema version.",
                                "type": "string"
                              },
                              "senderApplicationId": {
                                "description": "The sender application id.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "securitySettings": {
                          "properties": {
                            "authorizationQualifier": {
                              "description": "The authorization qualifier.",
                              "type": "string"
                            },
                            "authorizationValue": {
                              "description": "The authorization value.",
                              "type": "string"
                            },
                            "passwordValue": {
                              "description": "The password value.",
                              "type": "string"
                            },
                            "securityQualifier": {
                              "description": "The security qualifier.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "validationOverrides": {
                          "description": "The X12 validation override settings.",
                          "items": {
                            "properties": {
                              "allowLeadingAndTrailingSpacesAndZeroes": {
                                "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                                "type": "boolean"
                              },
                              "messageId": {
                                "description": "The message id on which the validation settings has to be applied.",
                                "type": "string"
                              },
                              "trailingSeparatorPolicy": {
                                "enum": [
                                  "NotSpecified",
                                  "NotAllowed",
                                  "Optional",
                                  "Mandatory"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "TrailingSeparatorPolicy"
                                }
                              },
                              "trimLeadingAndTrailingSpacesAndZeroes": {
                                "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                                "type": "boolean"
                              },
                              "validateCharacterSet": {
                                "description": "The value indicating whether to validate character Set.",
                                "type": "boolean"
                              },
                              "validateEDITypes": {
                                "description": "The value indicating whether to validate EDI types.",
                                "type": "boolean"
                              },
                              "validateXSDTypes": {
                                "description": "The value indicating whether to validate XSD types.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "validationSettings": {
                          "properties": {
                            "allowLeadingAndTrailingSpacesAndZeroes": {
                              "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                              "type": "boolean"
                            },
                            "checkDuplicateGroupControlNumber": {
                              "description": "The value indicating whether to check for duplicate group control number.",
                              "type": "boolean"
                            },
                            "checkDuplicateInterchangeControlNumber": {
                              "description": "The value indicating whether to check for duplicate interchange control number.",
                              "type": "boolean"
                            },
                            "checkDuplicateTransactionSetControlNumber": {
                              "description": "The value indicating whether to check for duplicate transaction set control number.",
                              "type": "boolean"
                            },
                            "interchangeControlNumberValidityDays": {
                              "description": "The validity period of interchange control number.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "trailingSeparatorPolicy": {
                              "enum": [
                                "NotSpecified",
                                "NotAllowed",
                                "Optional",
                                "Mandatory"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": false,
                                "name": "TrailingSeparatorPolicy"
                              }
                            },
                            "trimLeadingAndTrailingSpacesAndZeroes": {
                              "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                              "type": "boolean"
                            },
                            "validateCharacterSet": {
                              "description": "The value indicating whether to validate character set in the message.",
                              "type": "boolean"
                            },
                            "validateEDITypes": {
                              "description": "The value indicating whether to Whether to validate EDI types.",
                              "type": "boolean"
                            },
                            "validateXSDTypes": {
                              "description": "The value indicating whether to Whether to validate XSD types.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "x12DelimiterOverrides": {
                          "description": "The X12 delimiter override settings.",
                          "items": {
                            "properties": {
                              "componentSeparator": {
                                "description": "The component separator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "dataElementSeparator": {
                                "description": "The data element separator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "messageId": {
                                "description": "The message id.",
                                "type": "string"
                              },
                              "protocolVersion": {
                                "description": "The protocol version.",
                                "type": "string"
                              },
                              "replaceCharacter": {
                                "description": "The replacement character.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "replaceSeparatorsInPayload": {
                                "description": "The value indicating whether to replace separators in payload.",
                                "type": "boolean"
                              },
                              "segmentTerminator": {
                                "description": "The segment terminator.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "segmentTerminatorSuffix": {
                                "enum": [
                                  "NotSpecified",
                                  "None",
                                  "CR",
                                  "LF",
                                  "CRLF"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "SegmentTerminatorSuffix"
                                }
                              },
                              "targetNamespace": {
                                "description": "The target namespace on which this delimiter settings has to be applied.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "receiverBusinessIdentity": {
                      "properties": {
                        "Qualifier": {
                          "description": "The business identity qualifier.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "The business identity value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "senderBusinessIdentity": {
                      "properties": {
                        "Qualifier": {
                          "description": "The business identity qualifier.",
                          "type": "string"
                        },
                        "Value": {
                          "description": "The business identity value.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/X12AgreementContent"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "Basic",
                "Extended",
                "UTF8"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "X12CharacterSet"
              }
            },
            "op": "add",
            "from": "",
            "path": "/X12CharacterSet"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "CCYYMMDD",
                "YYMMDD"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "X12DateFormat"
              }
            },
            "op": "add",
            "from": "",
            "path": "/X12DateFormat"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "componentSeparator": {
                  "description": "The component separator.",
                  "format": "int32",
                  "type": "integer"
                },
                "dataElementSeparator": {
                  "description": "The data element separator.",
                  "format": "int32",
                  "type": "integer"
                },
                "messageId": {
                  "description": "The message id.",
                  "type": "string"
                },
                "protocolVersion": {
                  "description": "The protocol version.",
                  "type": "string"
                },
                "replaceCharacter": {
                  "description": "The replacement character.",
                  "format": "int32",
                  "type": "integer"
                },
                "replaceSeparatorsInPayload": {
                  "description": "The value indicating whether to replace separators in payload.",
                  "type": "boolean"
                },
                "segmentTerminator": {
                  "description": "The segment terminator.",
                  "format": "int32",
                  "type": "integer"
                },
                "segmentTerminatorSuffix": {
                  "enum": [
                    "NotSpecified",
                    "None",
                    "CR",
                    "LF",
                    "CRLF"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "SegmentTerminatorSuffix"
                  }
                },
                "targetNamespace": {
                  "description": "The target namespace on which this delimiter settings has to be applied.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/X12DelimiterOverrides"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "dateFormat": {
                  "enum": [
                    "NotSpecified",
                    "CCYYMMDD",
                    "YYMMDD"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "X12DateFormat"
                  }
                },
                "functionalIdentifierCode": {
                  "description": "The functional identifier code.",
                  "type": "string"
                },
                "headerVersion": {
                  "description": "The header version.",
                  "type": "string"
                },
                "messageId": {
                  "description": "The message id on which this envelope settings has to be applied.",
                  "type": "string"
                },
                "protocolVersion": {
                  "description": "The protocol version on which this envelope settings has to be applied.",
                  "type": "string"
                },
                "receiverApplicationId": {
                  "description": "The receiver application id.",
                  "type": "string"
                },
                "responsibleAgencyCode": {
                  "description": "The responsible agency code.",
                  "format": "int32",
                  "type": "integer"
                },
                "senderApplicationId": {
                  "description": "The sender application id.",
                  "type": "string"
                },
                "targetNamespace": {
                  "description": "The target namespace on which this envelope settings has to be applied.",
                  "type": "string"
                },
                "timeFormat": {
                  "enum": [
                    "NotSpecified",
                    "HHMM",
                    "HHMMSS",
                    "HHMMSSdd",
                    "HHMMSSd"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "X12TimeFormat"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/X12EnvelopeOverride"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "controlStandardsId": {
                  "description": "The controls standards id.",
                  "format": "int32",
                  "type": "integer"
                },
                "controlVersionNumber": {
                  "description": "The control version number.",
                  "type": "string"
                },
                "enableDefaultGroupHeaders": {
                  "description": "The value indicating whether to enable default group headers.",
                  "type": "boolean"
                },
                "functionalGroupId": {
                  "description": "The functional group id.",
                  "type": "string"
                },
                "groupControlNumberLowerBound": {
                  "description": "The group control number lower bound.",
                  "format": "int32",
                  "type": "integer"
                },
                "groupControlNumberUpperBound": {
                  "description": "The group control number upper bound.",
                  "format": "int32",
                  "type": "integer"
                },
                "groupHeaderAgencyCode": {
                  "description": "The group header agency code.",
                  "type": "string"
                },
                "groupHeaderDateFormat": {
                  "enum": [
                    "NotSpecified",
                    "CCYYMMDD",
                    "YYMMDD"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "X12DateFormat"
                  }
                },
                "groupHeaderTimeFormat": {
                  "enum": [
                    "NotSpecified",
                    "HHMM",
                    "HHMMSS",
                    "HHMMSSdd",
                    "HHMMSSd"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "X12TimeFormat"
                  }
                },
                "groupHeaderVersion": {
                  "description": "The group header version.",
                  "type": "string"
                },
                "interchangeControlNumberLowerBound": {
                  "description": "The interchange  control number lower bound.",
                  "format": "int32",
                  "type": "integer"
                },
                "interchangeControlNumberUpperBound": {
                  "description": "The interchange  control number upper bound.",
                  "format": "int32",
                  "type": "integer"
                },
                "overwriteExistingTransactionSetControlNumber": {
                  "description": "The value indicating whether to overwrite existing transaction set control number.",
                  "type": "boolean"
                },
                "receiverApplicationId": {
                  "description": "The receiver application id.",
                  "type": "string"
                },
                "rolloverGroupControlNumber": {
                  "description": "The value indicating whether to rollover group control number.",
                  "type": "boolean"
                },
                "rolloverInterchangeControlNumber": {
                  "description": "The value indicating whether to rollover interchange control number.",
                  "type": "boolean"
                },
                "rolloverTransactionSetControlNumber": {
                  "description": "The value indicating whether to rollover transaction set control number.",
                  "type": "boolean"
                },
                "senderApplicationId": {
                  "description": "The sender application id.",
                  "type": "string"
                },
                "transactionSetControlNumberLowerBound": {
                  "description": "The transaction set control number lower bound.",
                  "format": "int32",
                  "type": "integer"
                },
                "transactionSetControlNumberPrefix": {
                  "description": "The transaction set control number prefix.",
                  "type": "string"
                },
                "transactionSetControlNumberSuffix": {
                  "description": "The transaction set control number suffix.",
                  "type": "string"
                },
                "transactionSetControlNumberUpperBound": {
                  "description": "The transaction set control number upper bound.",
                  "format": "int32",
                  "type": "integer"
                },
                "usageIndicator": {
                  "enum": [
                    "NotSpecified",
                    "Test",
                    "Information",
                    "Production"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "UsageIndicator"
                  }
                },
                "useControlStandardsIdAsRepetitionCharacter": {
                  "description": "The value indicating whether to use control standards id as repetition character.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/X12EnvelopeSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "characterSet": {
                  "enum": [
                    "NotSpecified",
                    "Basic",
                    "Extended",
                    "UTF8"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "X12CharacterSet"
                  }
                },
                "componentSeparator": {
                  "description": "The component separator.",
                  "format": "int32",
                  "type": "integer"
                },
                "dataElementSeparator": {
                  "description": "The data element separator.",
                  "format": "int32",
                  "type": "integer"
                },
                "replaceCharacter": {
                  "description": "The replacement character.",
                  "format": "int32",
                  "type": "integer"
                },
                "replaceSeparatorsInPayload": {
                  "description": "The value indicating whether to replace separators in payload.",
                  "type": "boolean"
                },
                "segmentTerminator": {
                  "description": "The segment terminator.",
                  "format": "int32",
                  "type": "integer"
                },
                "segmentTerminatorSuffix": {
                  "enum": [
                    "NotSpecified",
                    "None",
                    "CR",
                    "LF",
                    "CRLF"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "SegmentTerminatorSuffix"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/X12FramingSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "messageFilterType": {
                  "enum": [
                    "NotSpecified",
                    "Include",
                    "Exclude"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "MessageFilterType"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/X12MessageFilter"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "messageId": {
                  "description": "The message id.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/X12MessageIdentifier"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "protocolSettings": {
                  "properties": {
                    "acknowledgementSettings": {
                      "properties": {
                        "acknowledgementControlNumberLowerBound": {
                          "description": "The acknowledgement control number lower bound.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "acknowledgementControlNumberPrefix": {
                          "description": "The acknowledgement control number prefix.",
                          "type": "string"
                        },
                        "acknowledgementControlNumberSuffix": {
                          "description": "The acknowledgement control number suffix.",
                          "type": "string"
                        },
                        "acknowledgementControlNumberUpperBound": {
                          "description": "The acknowledgement control number upper bound.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "batchFunctionalAcknowledgements": {
                          "description": "The value indicating whether to batch functional acknowledgements.",
                          "type": "boolean"
                        },
                        "batchImplementationAcknowledgements": {
                          "description": "The value indicating whether to batch implementation acknowledgements.",
                          "type": "boolean"
                        },
                        "batchTechnicalAcknowledgements": {
                          "description": "The value indicating whether to batch the technical acknowledgements.",
                          "type": "boolean"
                        },
                        "functionalAcknowledgementVersion": {
                          "description": "The functional acknowledgement version.",
                          "type": "string"
                        },
                        "implementationAcknowledgementVersion": {
                          "description": "The implementation acknowledgement version.",
                          "type": "string"
                        },
                        "needFunctionalAcknowledgement": {
                          "description": "The value indicating whether functional acknowledgement is needed.",
                          "type": "boolean"
                        },
                        "needImplementationAcknowledgement": {
                          "description": "The value indicating whether implementation acknowledgement is needed.",
                          "type": "boolean"
                        },
                        "needLoopForValidMessages": {
                          "description": "The value indicating whether a loop is needed for valid messages.",
                          "type": "boolean"
                        },
                        "needTechnicalAcknowledgement": {
                          "description": "The value indicating whether technical acknowledgement is needed.",
                          "type": "boolean"
                        },
                        "rolloverAcknowledgementControlNumber": {
                          "description": "The value indicating whether to rollover acknowledgement control number.",
                          "type": "boolean"
                        },
                        "sendSynchronousAcknowledgement": {
                          "description": "The value indicating whether to send synchronous acknowledgement.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "envelopeOverrides": {
                      "description": "The X12 envelope override settings.",
                      "items": {
                        "properties": {
                          "dateFormat": {
                            "enum": [
                              "NotSpecified",
                              "CCYYMMDD",
                              "YYMMDD"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "X12DateFormat"
                            }
                          },
                          "functionalIdentifierCode": {
                            "description": "The functional identifier code.",
                            "type": "string"
                          },
                          "headerVersion": {
                            "description": "The header version.",
                            "type": "string"
                          },
                          "messageId": {
                            "description": "The message id on which this envelope settings has to be applied.",
                            "type": "string"
                          },
                          "protocolVersion": {
                            "description": "The protocol version on which this envelope settings has to be applied.",
                            "type": "string"
                          },
                          "receiverApplicationId": {
                            "description": "The receiver application id.",
                            "type": "string"
                          },
                          "responsibleAgencyCode": {
                            "description": "The responsible agency code.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "senderApplicationId": {
                            "description": "The sender application id.",
                            "type": "string"
                          },
                          "targetNamespace": {
                            "description": "The target namespace on which this envelope settings has to be applied.",
                            "type": "string"
                          },
                          "timeFormat": {
                            "enum": [
                              "NotSpecified",
                              "HHMM",
                              "HHMMSS",
                              "HHMMSSdd",
                              "HHMMSSd"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "X12TimeFormat"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "envelopeSettings": {
                      "properties": {
                        "controlStandardsId": {
                          "description": "The controls standards id.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "controlVersionNumber": {
                          "description": "The control version number.",
                          "type": "string"
                        },
                        "enableDefaultGroupHeaders": {
                          "description": "The value indicating whether to enable default group headers.",
                          "type": "boolean"
                        },
                        "functionalGroupId": {
                          "description": "The functional group id.",
                          "type": "string"
                        },
                        "groupControlNumberLowerBound": {
                          "description": "The group control number lower bound.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "groupControlNumberUpperBound": {
                          "description": "The group control number upper bound.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "groupHeaderAgencyCode": {
                          "description": "The group header agency code.",
                          "type": "string"
                        },
                        "groupHeaderDateFormat": {
                          "enum": [
                            "NotSpecified",
                            "CCYYMMDD",
                            "YYMMDD"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "X12DateFormat"
                          }
                        },
                        "groupHeaderTimeFormat": {
                          "enum": [
                            "NotSpecified",
                            "HHMM",
                            "HHMMSS",
                            "HHMMSSdd",
                            "HHMMSSd"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "X12TimeFormat"
                          }
                        },
                        "groupHeaderVersion": {
                          "description": "The group header version.",
                          "type": "string"
                        },
                        "interchangeControlNumberLowerBound": {
                          "description": "The interchange  control number lower bound.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "interchangeControlNumberUpperBound": {
                          "description": "The interchange  control number upper bound.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "overwriteExistingTransactionSetControlNumber": {
                          "description": "The value indicating whether to overwrite existing transaction set control number.",
                          "type": "boolean"
                        },
                        "receiverApplicationId": {
                          "description": "The receiver application id.",
                          "type": "string"
                        },
                        "rolloverGroupControlNumber": {
                          "description": "The value indicating whether to rollover group control number.",
                          "type": "boolean"
                        },
                        "rolloverInterchangeControlNumber": {
                          "description": "The value indicating whether to rollover interchange control number.",
                          "type": "boolean"
                        },
                        "rolloverTransactionSetControlNumber": {
                          "description": "The value indicating whether to rollover transaction set control number.",
                          "type": "boolean"
                        },
                        "senderApplicationId": {
                          "description": "The sender application id.",
                          "type": "string"
                        },
                        "transactionSetControlNumberLowerBound": {
                          "description": "The transaction set control number lower bound.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "transactionSetControlNumberPrefix": {
                          "description": "The transaction set control number prefix.",
                          "type": "string"
                        },
                        "transactionSetControlNumberSuffix": {
                          "description": "The transaction set control number suffix.",
                          "type": "string"
                        },
                        "transactionSetControlNumberUpperBound": {
                          "description": "The transaction set control number upper bound.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "usageIndicator": {
                          "enum": [
                            "NotSpecified",
                            "Test",
                            "Information",
                            "Production"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "UsageIndicator"
                          }
                        },
                        "useControlStandardsIdAsRepetitionCharacter": {
                          "description": "The value indicating whether to use control standards id as repetition character.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "framingSettings": {
                      "properties": {
                        "characterSet": {
                          "enum": [
                            "NotSpecified",
                            "Basic",
                            "Extended",
                            "UTF8"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "X12CharacterSet"
                          }
                        },
                        "componentSeparator": {
                          "description": "The component separator.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "dataElementSeparator": {
                          "description": "The data element separator.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "replaceCharacter": {
                          "description": "The replacement character.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "replaceSeparatorsInPayload": {
                          "description": "The value indicating whether to replace separators in payload.",
                          "type": "boolean"
                        },
                        "segmentTerminator": {
                          "description": "The segment terminator.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "segmentTerminatorSuffix": {
                          "enum": [
                            "NotSpecified",
                            "None",
                            "CR",
                            "LF",
                            "CRLF"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "SegmentTerminatorSuffix"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "messageFilter": {
                      "properties": {
                        "messageFilterType": {
                          "enum": [
                            "NotSpecified",
                            "Include",
                            "Exclude"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "MessageFilterType"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "messageFilterList": {
                      "description": "The X12 message filter list.",
                      "items": {
                        "properties": {
                          "messageId": {
                            "description": "The message id.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "processingSettings": {
                      "properties": {
                        "convertImpliedDecimal": {
                          "description": "The value indicating whether to convert numerical type to implied decimal.",
                          "type": "boolean"
                        },
                        "createEmptyXmlTagsForTrailingSeparators": {
                          "description": "The value indicating whether to create empty xml tags for trailing separators.",
                          "type": "boolean"
                        },
                        "maskSecurityInfo": {
                          "description": "The value indicating whether to mask security information.",
                          "type": "boolean"
                        },
                        "preserveInterchange": {
                          "description": "The value indicating whether to preserve interchange.",
                          "type": "boolean"
                        },
                        "suspendInterchangeOnError": {
                          "description": "The value indicating whether to suspend interchange on error.",
                          "type": "boolean"
                        },
                        "useDotAsDecimalSeparator": {
                          "description": "The value indicating whether to use dot as decimal separator.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "schemaReferences": {
                      "description": "The X12 schema references.",
                      "items": {
                        "properties": {
                          "messageId": {
                            "description": "The message id.",
                            "type": "string"
                          },
                          "schemaName": {
                            "description": "The schema name.",
                            "type": "string"
                          },
                          "schemaVersion": {
                            "description": "The schema version.",
                            "type": "string"
                          },
                          "senderApplicationId": {
                            "description": "The sender application id.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "securitySettings": {
                      "properties": {
                        "authorizationQualifier": {
                          "description": "The authorization qualifier.",
                          "type": "string"
                        },
                        "authorizationValue": {
                          "description": "The authorization value.",
                          "type": "string"
                        },
                        "passwordValue": {
                          "description": "The password value.",
                          "type": "string"
                        },
                        "securityQualifier": {
                          "description": "The security qualifier.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "validationOverrides": {
                      "description": "The X12 validation override settings.",
                      "items": {
                        "properties": {
                          "allowLeadingAndTrailingSpacesAndZeroes": {
                            "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                            "type": "boolean"
                          },
                          "messageId": {
                            "description": "The message id on which the validation settings has to be applied.",
                            "type": "string"
                          },
                          "trailingSeparatorPolicy": {
                            "enum": [
                              "NotSpecified",
                              "NotAllowed",
                              "Optional",
                              "Mandatory"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "TrailingSeparatorPolicy"
                            }
                          },
                          "trimLeadingAndTrailingSpacesAndZeroes": {
                            "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                            "type": "boolean"
                          },
                          "validateCharacterSet": {
                            "description": "The value indicating whether to validate character Set.",
                            "type": "boolean"
                          },
                          "validateEDITypes": {
                            "description": "The value indicating whether to validate EDI types.",
                            "type": "boolean"
                          },
                          "validateXSDTypes": {
                            "description": "The value indicating whether to validate XSD types.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "validationSettings": {
                      "properties": {
                        "allowLeadingAndTrailingSpacesAndZeroes": {
                          "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                          "type": "boolean"
                        },
                        "checkDuplicateGroupControlNumber": {
                          "description": "The value indicating whether to check for duplicate group control number.",
                          "type": "boolean"
                        },
                        "checkDuplicateInterchangeControlNumber": {
                          "description": "The value indicating whether to check for duplicate interchange control number.",
                          "type": "boolean"
                        },
                        "checkDuplicateTransactionSetControlNumber": {
                          "description": "The value indicating whether to check for duplicate transaction set control number.",
                          "type": "boolean"
                        },
                        "interchangeControlNumberValidityDays": {
                          "description": "The validity period of interchange control number.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "trailingSeparatorPolicy": {
                          "enum": [
                            "NotSpecified",
                            "NotAllowed",
                            "Optional",
                            "Mandatory"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "TrailingSeparatorPolicy"
                          }
                        },
                        "trimLeadingAndTrailingSpacesAndZeroes": {
                          "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                          "type": "boolean"
                        },
                        "validateCharacterSet": {
                          "description": "The value indicating whether to validate character set in the message.",
                          "type": "boolean"
                        },
                        "validateEDITypes": {
                          "description": "The value indicating whether to Whether to validate EDI types.",
                          "type": "boolean"
                        },
                        "validateXSDTypes": {
                          "description": "The value indicating whether to Whether to validate XSD types.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "x12DelimiterOverrides": {
                      "description": "The X12 delimiter override settings.",
                      "items": {
                        "properties": {
                          "componentSeparator": {
                            "description": "The component separator.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "dataElementSeparator": {
                            "description": "The data element separator.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "messageId": {
                            "description": "The message id.",
                            "type": "string"
                          },
                          "protocolVersion": {
                            "description": "The protocol version.",
                            "type": "string"
                          },
                          "replaceCharacter": {
                            "description": "The replacement character.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "replaceSeparatorsInPayload": {
                            "description": "The value indicating whether to replace separators in payload.",
                            "type": "boolean"
                          },
                          "segmentTerminator": {
                            "description": "The segment terminator.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "segmentTerminatorSuffix": {
                            "enum": [
                              "NotSpecified",
                              "None",
                              "CR",
                              "LF",
                              "CRLF"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "SegmentTerminatorSuffix"
                            }
                          },
                          "targetNamespace": {
                            "description": "The target namespace on which this delimiter settings has to be applied.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "receiverBusinessIdentity": {
                  "properties": {
                    "Qualifier": {
                      "description": "The business identity qualifier.",
                      "type": "string"
                    },
                    "Value": {
                      "description": "The business identity value.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "senderBusinessIdentity": {
                  "properties": {
                    "Qualifier": {
                      "description": "The business identity qualifier.",
                      "type": "string"
                    },
                    "Value": {
                      "description": "The business identity value.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/X12OneWayAgreement"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "convertImpliedDecimal": {
                  "description": "The value indicating whether to convert numerical type to implied decimal.",
                  "type": "boolean"
                },
                "createEmptyXmlTagsForTrailingSeparators": {
                  "description": "The value indicating whether to create empty xml tags for trailing separators.",
                  "type": "boolean"
                },
                "maskSecurityInfo": {
                  "description": "The value indicating whether to mask security information.",
                  "type": "boolean"
                },
                "preserveInterchange": {
                  "description": "The value indicating whether to preserve interchange.",
                  "type": "boolean"
                },
                "suspendInterchangeOnError": {
                  "description": "The value indicating whether to suspend interchange on error.",
                  "type": "boolean"
                },
                "useDotAsDecimalSeparator": {
                  "description": "The value indicating whether to use dot as decimal separator.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/X12ProcessingSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "acknowledgementSettings": {
                  "properties": {
                    "acknowledgementControlNumberLowerBound": {
                      "description": "The acknowledgement control number lower bound.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "acknowledgementControlNumberPrefix": {
                      "description": "The acknowledgement control number prefix.",
                      "type": "string"
                    },
                    "acknowledgementControlNumberSuffix": {
                      "description": "The acknowledgement control number suffix.",
                      "type": "string"
                    },
                    "acknowledgementControlNumberUpperBound": {
                      "description": "The acknowledgement control number upper bound.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "batchFunctionalAcknowledgements": {
                      "description": "The value indicating whether to batch functional acknowledgements.",
                      "type": "boolean"
                    },
                    "batchImplementationAcknowledgements": {
                      "description": "The value indicating whether to batch implementation acknowledgements.",
                      "type": "boolean"
                    },
                    "batchTechnicalAcknowledgements": {
                      "description": "The value indicating whether to batch the technical acknowledgements.",
                      "type": "boolean"
                    },
                    "functionalAcknowledgementVersion": {
                      "description": "The functional acknowledgement version.",
                      "type": "string"
                    },
                    "implementationAcknowledgementVersion": {
                      "description": "The implementation acknowledgement version.",
                      "type": "string"
                    },
                    "needFunctionalAcknowledgement": {
                      "description": "The value indicating whether functional acknowledgement is needed.",
                      "type": "boolean"
                    },
                    "needImplementationAcknowledgement": {
                      "description": "The value indicating whether implementation acknowledgement is needed.",
                      "type": "boolean"
                    },
                    "needLoopForValidMessages": {
                      "description": "The value indicating whether a loop is needed for valid messages.",
                      "type": "boolean"
                    },
                    "needTechnicalAcknowledgement": {
                      "description": "The value indicating whether technical acknowledgement is needed.",
                      "type": "boolean"
                    },
                    "rolloverAcknowledgementControlNumber": {
                      "description": "The value indicating whether to rollover acknowledgement control number.",
                      "type": "boolean"
                    },
                    "sendSynchronousAcknowledgement": {
                      "description": "The value indicating whether to send synchronous acknowledgement.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "envelopeOverrides": {
                  "description": "The X12 envelope override settings.",
                  "items": {
                    "properties": {
                      "dateFormat": {
                        "enum": [
                          "NotSpecified",
                          "CCYYMMDD",
                          "YYMMDD"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "X12DateFormat"
                        }
                      },
                      "functionalIdentifierCode": {
                        "description": "The functional identifier code.",
                        "type": "string"
                      },
                      "headerVersion": {
                        "description": "The header version.",
                        "type": "string"
                      },
                      "messageId": {
                        "description": "The message id on which this envelope settings has to be applied.",
                        "type": "string"
                      },
                      "protocolVersion": {
                        "description": "The protocol version on which this envelope settings has to be applied.",
                        "type": "string"
                      },
                      "receiverApplicationId": {
                        "description": "The receiver application id.",
                        "type": "string"
                      },
                      "responsibleAgencyCode": {
                        "description": "The responsible agency code.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "senderApplicationId": {
                        "description": "The sender application id.",
                        "type": "string"
                      },
                      "targetNamespace": {
                        "description": "The target namespace on which this envelope settings has to be applied.",
                        "type": "string"
                      },
                      "timeFormat": {
                        "enum": [
                          "NotSpecified",
                          "HHMM",
                          "HHMMSS",
                          "HHMMSSdd",
                          "HHMMSSd"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "X12TimeFormat"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "envelopeSettings": {
                  "properties": {
                    "controlStandardsId": {
                      "description": "The controls standards id.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "controlVersionNumber": {
                      "description": "The control version number.",
                      "type": "string"
                    },
                    "enableDefaultGroupHeaders": {
                      "description": "The value indicating whether to enable default group headers.",
                      "type": "boolean"
                    },
                    "functionalGroupId": {
                      "description": "The functional group id.",
                      "type": "string"
                    },
                    "groupControlNumberLowerBound": {
                      "description": "The group control number lower bound.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "groupControlNumberUpperBound": {
                      "description": "The group control number upper bound.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "groupHeaderAgencyCode": {
                      "description": "The group header agency code.",
                      "type": "string"
                    },
                    "groupHeaderDateFormat": {
                      "enum": [
                        "NotSpecified",
                        "CCYYMMDD",
                        "YYMMDD"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "X12DateFormat"
                      }
                    },
                    "groupHeaderTimeFormat": {
                      "enum": [
                        "NotSpecified",
                        "HHMM",
                        "HHMMSS",
                        "HHMMSSdd",
                        "HHMMSSd"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "X12TimeFormat"
                      }
                    },
                    "groupHeaderVersion": {
                      "description": "The group header version.",
                      "type": "string"
                    },
                    "interchangeControlNumberLowerBound": {
                      "description": "The interchange  control number lower bound.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "interchangeControlNumberUpperBound": {
                      "description": "The interchange  control number upper bound.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "overwriteExistingTransactionSetControlNumber": {
                      "description": "The value indicating whether to overwrite existing transaction set control number.",
                      "type": "boolean"
                    },
                    "receiverApplicationId": {
                      "description": "The receiver application id.",
                      "type": "string"
                    },
                    "rolloverGroupControlNumber": {
                      "description": "The value indicating whether to rollover group control number.",
                      "type": "boolean"
                    },
                    "rolloverInterchangeControlNumber": {
                      "description": "The value indicating whether to rollover interchange control number.",
                      "type": "boolean"
                    },
                    "rolloverTransactionSetControlNumber": {
                      "description": "The value indicating whether to rollover transaction set control number.",
                      "type": "boolean"
                    },
                    "senderApplicationId": {
                      "description": "The sender application id.",
                      "type": "string"
                    },
                    "transactionSetControlNumberLowerBound": {
                      "description": "The transaction set control number lower bound.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "transactionSetControlNumberPrefix": {
                      "description": "The transaction set control number prefix.",
                      "type": "string"
                    },
                    "transactionSetControlNumberSuffix": {
                      "description": "The transaction set control number suffix.",
                      "type": "string"
                    },
                    "transactionSetControlNumberUpperBound": {
                      "description": "The transaction set control number upper bound.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "usageIndicator": {
                      "enum": [
                        "NotSpecified",
                        "Test",
                        "Information",
                        "Production"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "UsageIndicator"
                      }
                    },
                    "useControlStandardsIdAsRepetitionCharacter": {
                      "description": "The value indicating whether to use control standards id as repetition character.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "framingSettings": {
                  "properties": {
                    "characterSet": {
                      "enum": [
                        "NotSpecified",
                        "Basic",
                        "Extended",
                        "UTF8"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "X12CharacterSet"
                      }
                    },
                    "componentSeparator": {
                      "description": "The component separator.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "dataElementSeparator": {
                      "description": "The data element separator.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "replaceCharacter": {
                      "description": "The replacement character.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "replaceSeparatorsInPayload": {
                      "description": "The value indicating whether to replace separators in payload.",
                      "type": "boolean"
                    },
                    "segmentTerminator": {
                      "description": "The segment terminator.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "segmentTerminatorSuffix": {
                      "enum": [
                        "NotSpecified",
                        "None",
                        "CR",
                        "LF",
                        "CRLF"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "SegmentTerminatorSuffix"
                      }
                    }
                  },
                  "type": "object"
                },
                "messageFilter": {
                  "properties": {
                    "messageFilterType": {
                      "enum": [
                        "NotSpecified",
                        "Include",
                        "Exclude"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "MessageFilterType"
                      }
                    }
                  },
                  "type": "object"
                },
                "messageFilterList": {
                  "description": "The X12 message filter list.",
                  "items": {
                    "properties": {
                      "messageId": {
                        "description": "The message id.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "processingSettings": {
                  "properties": {
                    "convertImpliedDecimal": {
                      "description": "The value indicating whether to convert numerical type to implied decimal.",
                      "type": "boolean"
                    },
                    "createEmptyXmlTagsForTrailingSeparators": {
                      "description": "The value indicating whether to create empty xml tags for trailing separators.",
                      "type": "boolean"
                    },
                    "maskSecurityInfo": {
                      "description": "The value indicating whether to mask security information.",
                      "type": "boolean"
                    },
                    "preserveInterchange": {
                      "description": "The value indicating whether to preserve interchange.",
                      "type": "boolean"
                    },
                    "suspendInterchangeOnError": {
                      "description": "The value indicating whether to suspend interchange on error.",
                      "type": "boolean"
                    },
                    "useDotAsDecimalSeparator": {
                      "description": "The value indicating whether to use dot as decimal separator.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "schemaReferences": {
                  "description": "The X12 schema references.",
                  "items": {
                    "properties": {
                      "messageId": {
                        "description": "The message id.",
                        "type": "string"
                      },
                      "schemaName": {
                        "description": "The schema name.",
                        "type": "string"
                      },
                      "schemaVersion": {
                        "description": "The schema version.",
                        "type": "string"
                      },
                      "senderApplicationId": {
                        "description": "The sender application id.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "securitySettings": {
                  "properties": {
                    "authorizationQualifier": {
                      "description": "The authorization qualifier.",
                      "type": "string"
                    },
                    "authorizationValue": {
                      "description": "The authorization value.",
                      "type": "string"
                    },
                    "passwordValue": {
                      "description": "The password value.",
                      "type": "string"
                    },
                    "securityQualifier": {
                      "description": "The security qualifier.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "validationOverrides": {
                  "description": "The X12 validation override settings.",
                  "items": {
                    "properties": {
                      "allowLeadingAndTrailingSpacesAndZeroes": {
                        "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                        "type": "boolean"
                      },
                      "messageId": {
                        "description": "The message id on which the validation settings has to be applied.",
                        "type": "string"
                      },
                      "trailingSeparatorPolicy": {
                        "enum": [
                          "NotSpecified",
                          "NotAllowed",
                          "Optional",
                          "Mandatory"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "TrailingSeparatorPolicy"
                        }
                      },
                      "trimLeadingAndTrailingSpacesAndZeroes": {
                        "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                        "type": "boolean"
                      },
                      "validateCharacterSet": {
                        "description": "The value indicating whether to validate character Set.",
                        "type": "boolean"
                      },
                      "validateEDITypes": {
                        "description": "The value indicating whether to validate EDI types.",
                        "type": "boolean"
                      },
                      "validateXSDTypes": {
                        "description": "The value indicating whether to validate XSD types.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "validationSettings": {
                  "properties": {
                    "allowLeadingAndTrailingSpacesAndZeroes": {
                      "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                      "type": "boolean"
                    },
                    "checkDuplicateGroupControlNumber": {
                      "description": "The value indicating whether to check for duplicate group control number.",
                      "type": "boolean"
                    },
                    "checkDuplicateInterchangeControlNumber": {
                      "description": "The value indicating whether to check for duplicate interchange control number.",
                      "type": "boolean"
                    },
                    "checkDuplicateTransactionSetControlNumber": {
                      "description": "The value indicating whether to check for duplicate transaction set control number.",
                      "type": "boolean"
                    },
                    "interchangeControlNumberValidityDays": {
                      "description": "The validity period of interchange control number.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "trailingSeparatorPolicy": {
                      "enum": [
                        "NotSpecified",
                        "NotAllowed",
                        "Optional",
                        "Mandatory"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "TrailingSeparatorPolicy"
                      }
                    },
                    "trimLeadingAndTrailingSpacesAndZeroes": {
                      "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                      "type": "boolean"
                    },
                    "validateCharacterSet": {
                      "description": "The value indicating whether to validate character set in the message.",
                      "type": "boolean"
                    },
                    "validateEDITypes": {
                      "description": "The value indicating whether to Whether to validate EDI types.",
                      "type": "boolean"
                    },
                    "validateXSDTypes": {
                      "description": "The value indicating whether to Whether to validate XSD types.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "x12DelimiterOverrides": {
                  "description": "The X12 delimiter override settings.",
                  "items": {
                    "properties": {
                      "componentSeparator": {
                        "description": "The component separator.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "dataElementSeparator": {
                        "description": "The data element separator.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "messageId": {
                        "description": "The message id.",
                        "type": "string"
                      },
                      "protocolVersion": {
                        "description": "The protocol version.",
                        "type": "string"
                      },
                      "replaceCharacter": {
                        "description": "The replacement character.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "replaceSeparatorsInPayload": {
                        "description": "The value indicating whether to replace separators in payload.",
                        "type": "boolean"
                      },
                      "segmentTerminator": {
                        "description": "The segment terminator.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "segmentTerminatorSuffix": {
                        "enum": [
                          "NotSpecified",
                          "None",
                          "CR",
                          "LF",
                          "CRLF"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "SegmentTerminatorSuffix"
                        }
                      },
                      "targetNamespace": {
                        "description": "The target namespace on which this delimiter settings has to be applied.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/X12ProtocolSettings"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "messageId": {
                  "description": "The message id.",
                  "type": "string"
                },
                "schemaName": {
                  "description": "The schema name.",
                  "type": "string"
                },
                "schemaVersion": {
                  "description": "The schema version.",
                  "type": "string"
                },
                "senderApplicationId": {
                  "description": "The sender application id.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/X12SchemaReference"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "authorizationQualifier": {
                  "description": "The authorization qualifier.",
                  "type": "string"
                },
                "authorizationValue": {
                  "description": "The authorization value.",
                  "type": "string"
                },
                "passwordValue": {
                  "description": "The password value.",
                  "type": "string"
                },
                "securityQualifier": {
                  "description": "The security qualifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/X12SecuritySettings"
          },
          {
            "oldValue": null,
            "value": {
              "enum": [
                "NotSpecified",
                "HHMM",
                "HHMMSS",
                "HHMMSSdd",
                "HHMMSSd"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "X12TimeFormat"
              }
            },
            "op": "add",
            "from": "",
            "path": "/X12TimeFormat"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "allowLeadingAndTrailingSpacesAndZeroes": {
                  "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                  "type": "boolean"
                },
                "messageId": {
                  "description": "The message id on which the validation settings has to be applied.",
                  "type": "string"
                },
                "trailingSeparatorPolicy": {
                  "enum": [
                    "NotSpecified",
                    "NotAllowed",
                    "Optional",
                    "Mandatory"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "TrailingSeparatorPolicy"
                  }
                },
                "trimLeadingAndTrailingSpacesAndZeroes": {
                  "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                  "type": "boolean"
                },
                "validateCharacterSet": {
                  "description": "The value indicating whether to validate character Set.",
                  "type": "boolean"
                },
                "validateEDITypes": {
                  "description": "The value indicating whether to validate EDI types.",
                  "type": "boolean"
                },
                "validateXSDTypes": {
                  "description": "The value indicating whether to validate XSD types.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/X12ValidationOverride"
          },
          {
            "oldValue": null,
            "value": {
              "properties": {
                "allowLeadingAndTrailingSpacesAndZeroes": {
                  "description": "The value indicating whether to allow leading and trailing spaces and zeroes.",
                  "type": "boolean"
                },
                "checkDuplicateGroupControlNumber": {
                  "description": "The value indicating whether to check for duplicate group control number.",
                  "type": "boolean"
                },
                "checkDuplicateInterchangeControlNumber": {
                  "description": "The value indicating whether to check for duplicate interchange control number.",
                  "type": "boolean"
                },
                "checkDuplicateTransactionSetControlNumber": {
                  "description": "The value indicating whether to check for duplicate transaction set control number.",
                  "type": "boolean"
                },
                "interchangeControlNumberValidityDays": {
                  "description": "The validity period of interchange control number.",
                  "format": "int32",
                  "type": "integer"
                },
                "trailingSeparatorPolicy": {
                  "enum": [
                    "NotSpecified",
                    "NotAllowed",
                    "Optional",
                    "Mandatory"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "TrailingSeparatorPolicy"
                  }
                },
                "trimLeadingAndTrailingSpacesAndZeroes": {
                  "description": "The value indicating whether to trim leading and trailing spaces and zeroes.",
                  "type": "boolean"
                },
                "validateCharacterSet": {
                  "description": "The value indicating whether to validate character set in the message.",
                  "type": "boolean"
                },
                "validateEDITypes": {
                  "description": "The value indicating whether to Whether to validate EDI types.",
                  "type": "boolean"
                },
                "validateXSDTypes": {
                  "description": "The value indicating whether to Whether to validate XSD types.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/X12ValidationSettings"
          }
        ]
      }
    },
    "info": {
      "version": {
        "from": "2015-02-01-preview",
        "to": "2015-08-01-preview"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates/{certificateName}",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationAccounts",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/listCallbackUrl",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas/{schemaName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners"
      ],
      "deleted": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys/{accessKeyName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/histories/{historyName}",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/workflows",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/histories",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys/{accessKeyName}/regenerate",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/enable",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys/{accessKeyName}/list",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/cancel",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/validate",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/disable",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/versions/{versionId}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/run",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/run",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions"
      ]
    },
    "security": {
      "deleted": [
        "azure_auth"
      ]
    }
  },
  "tools_a": {
    "Workflows_ListBySubscription": "FunctionDef(\n  name='Workflows_ListBySubscription',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a list of workflows by subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Workflows_ListBySubscription')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of workflows by subscription.'))])],\n  type_params=[])",
    "Workflows_ListByResourceGroup": "FunctionDef(\n  name='Workflows_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a list of workflows by resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Workflows_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of workflows by resource group.'))])],\n  type_params=[])",
    "Workflows_Get": "FunctionDef(\n  name='Workflows_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a workflow.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Workflows_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a workflow.'))])],\n  type_params=[])",
    "Workflows_CreateOrUpdate": "FunctionDef(\n  name='Workflows_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Creates or updates a workflow.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Workflows_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Creates or updates a workflow.'))])],\n  type_params=[])",
    "Workflows_Update": "FunctionDef(\n  name='Workflows_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Updates a workflow.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Workflows_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Updates a workflow.'))])],\n  type_params=[])",
    "Workflows_Delete": "FunctionDef(\n  name='Workflows_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes a workflow.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Workflows_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes a workflow.'))])],\n  type_params=[])",
    "Workflows_Run": "FunctionDef(\n  name='Workflows_Run',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Runs a workflow.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/run')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Workflows_Run')),\n        keyword(\n          arg='description',\n          value=Constant(value='Runs a workflow.'))])],\n  type_params=[])",
    "Workflows_Disable": "FunctionDef(\n  name='Workflows_Disable',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Disables a workflow.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/disable')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Workflows_Disable')),\n        keyword(\n          arg='description',\n          value=Constant(value='Disables a workflow.'))])],\n  type_params=[])",
    "Workflows_Enable": "FunctionDef(\n  name='Workflows_Enable',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Enables a workflow.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/enable')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Workflows_Enable')),\n        keyword(\n          arg='description',\n          value=Constant(value='Enables a workflow.'))])],\n  type_params=[])",
    "Workflows_Validate": "FunctionDef(\n  name='Workflows_Validate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Validates a workflow.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/validate')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Workflows_Validate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Validates a workflow.'))])],\n  type_params=[])",
    "WorkflowVersions_Get": "FunctionDef(\n  name='WorkflowVersions_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='versionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a workflow version.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/versions/'),\n          FormattedValue(\n            value=Name(id='versionId', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='versionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: versionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowVersions_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a workflow version.'))])],\n  type_params=[])",
    "WorkflowAccessKeys_List": "FunctionDef(\n  name='WorkflowAccessKeys_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a list of workflow access keys.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accessKeys')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowAccessKeys_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of workflow access keys.'))])],\n  type_params=[])",
    "WorkflowAccessKeys_Get": "FunctionDef(\n  name='WorkflowAccessKeys_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accessKeyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a workflow access key.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accessKeys/'),\n          FormattedValue(\n            value=Name(id='accessKeyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accessKeyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accessKeyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowAccessKeys_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a workflow access key.'))])],\n  type_params=[])",
    "WorkflowAccessKeys_CreateOrUpdate": "FunctionDef(\n  name='WorkflowAccessKeys_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accessKeyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Creates or updates a workflow access key.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accessKeys/'),\n          FormattedValue(\n            value=Name(id='accessKeyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accessKeyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accessKeyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowAccessKeys_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Creates or updates a workflow access key.'))])],\n  type_params=[])",
    "WorkflowAccessKeys_Delete": "FunctionDef(\n  name='WorkflowAccessKeys_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accessKeyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes a workflow access key.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accessKeys/'),\n          FormattedValue(\n            value=Name(id='accessKeyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accessKeyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accessKeyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowAccessKeys_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes a workflow access key.'))])],\n  type_params=[])",
    "WorkflowAccessKeys_ListSecretKeys": "FunctionDef(\n  name='WorkflowAccessKeys_ListSecretKeys',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accessKeyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists secret keys.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accessKeys/'),\n          FormattedValue(\n            value=Name(id='accessKeyName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/list')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accessKeyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accessKeyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowAccessKeys_ListSecretKeys')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists secret keys.'))])],\n  type_params=[])",
    "WorkflowAccessKeys_RegenerateSecretKey": "FunctionDef(\n  name='WorkflowAccessKeys_RegenerateSecretKey',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accessKeyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Regenerates secret key.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accessKeys/'),\n          FormattedValue(\n            value=Name(id='accessKeyName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/regenerate')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accessKeyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accessKeyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowAccessKeys_RegenerateSecretKey')),\n        keyword(\n          arg='description',\n          value=Constant(value='Regenerates secret key.'))])],\n  type_params=[])",
    "WorkflowTriggers_List": "FunctionDef(\n  name='WorkflowTriggers_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a list of workflow triggers.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/triggers/')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowTriggers_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of workflow triggers.'))])],\n  type_params=[])",
    "WorkflowTriggers_Get": "FunctionDef(\n  name='WorkflowTriggers_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='triggerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a workflow trigger.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/triggers/'),\n          FormattedValue(\n            value=Name(id='triggerName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='triggerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: triggerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowTriggers_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a workflow trigger.'))])],\n  type_params=[])",
    "WorkflowTriggers_Run": "FunctionDef(\n  name='WorkflowTriggers_Run',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='triggerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Runs a workflow trigger.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/triggers/'),\n          FormattedValue(\n            value=Name(id='triggerName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/run')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='triggerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: triggerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowTriggers_Run')),\n        keyword(\n          arg='description',\n          value=Constant(value='Runs a workflow trigger.'))])],\n  type_params=[])",
    "WorkflowTriggerHistories_List": "FunctionDef(\n  name='WorkflowTriggerHistories_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='triggerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a list of workflow trigger histories.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/triggers/'),\n          FormattedValue(\n            value=Name(id='triggerName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/histories')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='triggerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: triggerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowTriggerHistories_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of workflow trigger histories.'))])],\n  type_params=[])",
    "WorkflowTriggerHistories_Get": "FunctionDef(\n  name='WorkflowTriggerHistories_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='triggerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='historyName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a workflow trigger history.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/triggers/'),\n          FormattedValue(\n            value=Name(id='triggerName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/histories/'),\n          FormattedValue(\n            value=Name(id='historyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='triggerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: triggerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='historyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: historyName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowTriggerHistories_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a workflow trigger history.'))])],\n  type_params=[])",
    "WorkflowRuns_List": "FunctionDef(\n  name='WorkflowRuns_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a list of workflow runs.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/runs')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowRuns_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of workflow runs.'))])],\n  type_params=[])",
    "WorkflowRuns_Get": "FunctionDef(\n  name='WorkflowRuns_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='runName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a workflow run.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/runs/'),\n          FormattedValue(\n            value=Name(id='runName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='runName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: runName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowRuns_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a workflow run.'))])],\n  type_params=[])",
    "WorkflowRuns_Cancel": "FunctionDef(\n  name='WorkflowRuns_Cancel',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='runName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Cancels a workflow run.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/runs/'),\n          FormattedValue(\n            value=Name(id='runName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/cancel')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='runName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: runName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowRuns_Cancel')),\n        keyword(\n          arg='description',\n          value=Constant(value='Cancels a workflow run.'))])],\n  type_params=[])",
    "WorkflowRunActions_List": "FunctionDef(\n  name='WorkflowRunActions_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='runName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a list of workflow run actions.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/runs/'),\n          FormattedValue(\n            value=Name(id='runName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/actions')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='runName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: runName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowRunActions_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of workflow run actions.'))])],\n  type_params=[])",
    "WorkflowRunActions_Get": "FunctionDef(\n  name='WorkflowRunActions_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='workflowName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='runName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='actionName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a workflow run action.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/workflows/'),\n          FormattedValue(\n            value=Name(id='workflowName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/runs/'),\n          FormattedValue(\n            value=Name(id='runName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/actions/'),\n          FormattedValue(\n            value=Name(id='actionName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='workflowName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: workflowName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='runName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: runName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='actionName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: actionName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='WorkflowRunActions_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a workflow run action.'))])],\n  type_params=[])"
  },
  "tools_b": {
    "IntegrationAccounts_ListBySubscription": "FunctionDef(\n  name='IntegrationAccounts_ListBySubscription',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a list of integration accounts by subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccounts_ListBySubscription')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of integration accounts by subscription.'))])],\n  type_params=[])",
    "IntegrationAccounts_ListByResourceGroup": "FunctionDef(\n  name='IntegrationAccounts_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a list of integration accounts by resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccounts_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of integration accounts by resource group.'))])],\n  type_params=[])",
    "IntegrationAccounts_Get": "FunctionDef(\n  name='IntegrationAccounts_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets an integration account.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccounts_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets an integration account.'))])],\n  type_params=[])",
    "IntegrationAccounts_CreateOrUpdate": "FunctionDef(\n  name='IntegrationAccounts_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Creates or updates an integration account.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccounts_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Creates or updates an integration account.'))])],\n  type_params=[])",
    "IntegrationAccounts_Update": "FunctionDef(\n  name='IntegrationAccounts_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Updates an integration account.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccounts_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Updates an integration account.'))])],\n  type_params=[])",
    "IntegrationAccounts_Delete": "FunctionDef(\n  name='IntegrationAccounts_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes an integration account.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccounts_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes an integration account.'))])],\n  type_params=[])",
    "IntegrationAccounts_ListCallbackUrl": "FunctionDef(\n  name='IntegrationAccounts_ListCallbackUrl',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the integration account callback URL.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/listCallbackUrl')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccounts_ListCallbackUrl')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the integration account callback URL.'))])],\n  type_params=[])",
    "IntegrationAccountSchemas_List": "FunctionDef(\n  name='IntegrationAccountSchemas_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a list of integration account schemas.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/schemas')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountSchemas_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of integration account schemas.'))])],\n  type_params=[])",
    "IntegrationAccountSchemas_Get": "FunctionDef(\n  name='IntegrationAccountSchemas_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='schemaName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets an integration account schema.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/schemas/'),\n          FormattedValue(\n            value=Name(id='schemaName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='schemaName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: schemaName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountSchemas_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets an integration account schema.'))])],\n  type_params=[])",
    "IntegrationAccountSchemas_CreateOrUpdate": "FunctionDef(\n  name='IntegrationAccountSchemas_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='schemaName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Creates or updates an integration account schema.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/schemas/'),\n          FormattedValue(\n            value=Name(id='schemaName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='schemaName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: schemaName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountSchemas_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Creates or updates an integration account schema.'))])],\n  type_params=[])",
    "IntegrationAccountSchemas_Delete": "FunctionDef(\n  name='IntegrationAccountSchemas_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='schemaName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes an integration account schema.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/schemas/'),\n          FormattedValue(\n            value=Name(id='schemaName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='schemaName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: schemaName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountSchemas_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes an integration account schema.'))])],\n  type_params=[])",
    "IntegrationAccountMaps_List": "FunctionDef(\n  name='IntegrationAccountMaps_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a list of integration account maps.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/maps')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountMaps_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of integration account maps.'))])],\n  type_params=[])",
    "IntegrationAccountMaps_Get": "FunctionDef(\n  name='IntegrationAccountMaps_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='mapName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets an integration account map.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/maps/'),\n          FormattedValue(\n            value=Name(id='mapName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='mapName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: mapName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountMaps_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets an integration account map.'))])],\n  type_params=[])",
    "IntegrationAccountMaps_CreateOrUpdate": "FunctionDef(\n  name='IntegrationAccountMaps_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='mapName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Creates or updates an integration account map.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/maps/'),\n          FormattedValue(\n            value=Name(id='mapName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='mapName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: mapName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountMaps_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Creates or updates an integration account map.'))])],\n  type_params=[])",
    "IntegrationAccountMaps_Delete": "FunctionDef(\n  name='IntegrationAccountMaps_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='mapName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes an integration account map.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/maps/'),\n          FormattedValue(\n            value=Name(id='mapName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='mapName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: mapName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountMaps_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes an integration account map.'))])],\n  type_params=[])",
    "IntegrationAccountPartners_List": "FunctionDef(\n  name='IntegrationAccountPartners_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a list of integration account partners.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/partners')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountPartners_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of integration account partners.'))])],\n  type_params=[])",
    "IntegrationAccountPartners_Get": "FunctionDef(\n  name='IntegrationAccountPartners_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='partnerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets an integration account partner.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/partners/'),\n          FormattedValue(\n            value=Name(id='partnerName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='partnerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: partnerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountPartners_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets an integration account partner.'))])],\n  type_params=[])",
    "IntegrationAccountPartners_CreateOrUpdate": "FunctionDef(\n  name='IntegrationAccountPartners_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='partnerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Creates or updates an integration account partner.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/partners/'),\n          FormattedValue(\n            value=Name(id='partnerName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='partnerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: partnerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountPartners_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Creates or updates an integration account partner.'))])],\n  type_params=[])",
    "IntegrationAccountPartners_Delete": "FunctionDef(\n  name='IntegrationAccountPartners_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='partnerName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes an integration account partner.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/partners/'),\n          FormattedValue(\n            value=Name(id='partnerName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='partnerName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: partnerName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountPartners_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes an integration account partner.'))])],\n  type_params=[])",
    "IntegrationAccountAgreements_List": "FunctionDef(\n  name='IntegrationAccountAgreements_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a list of integration account agreements.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/agreements')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountAgreements_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of integration account agreements.'))])],\n  type_params=[])",
    "IntegrationAccountAgreements_Get": "FunctionDef(\n  name='IntegrationAccountAgreements_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='agreementName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets an integration account agreement.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/agreements/'),\n          FormattedValue(\n            value=Name(id='agreementName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='agreementName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: agreementName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountAgreements_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets an integration account agreement.'))])],\n  type_params=[])",
    "IntegrationAccountAgreements_CreateOrUpdate": "FunctionDef(\n  name='IntegrationAccountAgreements_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='agreementName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Creates or updates an integration account agreement.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/agreements/'),\n          FormattedValue(\n            value=Name(id='agreementName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='agreementName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: agreementName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountAgreements_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Creates or updates an integration account agreement.'))])],\n  type_params=[])",
    "IntegrationAccountAgreements_Delete": "FunctionDef(\n  name='IntegrationAccountAgreements_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='agreementName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes an integration account agreement.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/agreements/'),\n          FormattedValue(\n            value=Name(id='agreementName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='agreementName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: agreementName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountAgreements_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes an integration account agreement.'))])],\n  type_params=[])",
    "IntegrationAccountCertificates_List": "FunctionDef(\n  name='IntegrationAccountCertificates_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets a list of integration account certificates.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/certificates')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountCertificates_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets a list of integration account certificates.'))])],\n  type_params=[])",
    "IntegrationAccountCertificates_Get": "FunctionDef(\n  name='IntegrationAccountCertificates_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='certificateName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets an integration account certificate.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/certificates/'),\n          FormattedValue(\n            value=Name(id='certificateName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='certificateName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: certificateName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountCertificates_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets an integration account certificate.'))])],\n  type_params=[])",
    "IntegrationAccountCertificates_CreateOrUpdate": "FunctionDef(\n  name='IntegrationAccountCertificates_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='certificateName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Creates or updates an integration account certificate.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/certificates/'),\n          FormattedValue(\n            value=Name(id='certificateName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='certificateName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: certificateName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountCertificates_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Creates or updates an integration account certificate.'))])],\n  type_params=[])",
    "IntegrationAccountCertificates_Delete": "FunctionDef(\n  name='IntegrationAccountCertificates_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='integrationAccountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='certificateName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes an integration account certificate.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Logic/integrationAccounts/'),\n          FormattedValue(\n            value=Name(id='integrationAccountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/certificates/'),\n          FormattedValue(\n            value=Name(id='certificateName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='integrationAccountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: integrationAccountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='certificateName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: certificateName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='IntegrationAccountCertificates_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes an integration account certificate.'))])],\n  type_params=[])"
  }
}