{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": null,
            "value": {
              "description": "The actions for auto quota increase.",
              "properties": {
                "emailActions": {
                  "description": "The email actions.",
                  "properties": {
                    "emailAddresses": {
                      "description": "The list of email actions.",
                      "items": {
                        "description": "Email Action.",
                        "properties": {
                          "emailAddress": {
                            "description": "The email address for the action.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/Actions"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Url to get the next page of reservations",
                  "type": "string"
                },
                "value": {
                  "items": {
                    "description": "Reservation resource Id. \"/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}\"",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedReservationList"
          },
          {
            "oldValue": {
              "properties": {
                "id": {
                  "description": "Identifier of the applied reservations",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "Name of resource",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "reservationOrderIds": {
                      "properties": {
                        "nextLink": {
                          "description": "Url to get the next page of reservations",
                          "type": "string"
                        },
                        "value": {
                          "items": {
                            "description": "Reservation resource Id. \"/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}\"",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Type of resource. \"Microsoft.Capacity/AppliedReservations\"",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedReservations"
          },
          {
            "oldValue": {
              "properties": {
                "reservationOrderIds": {
                  "properties": {
                    "nextLink": {
                      "description": "Url to get the next page of reservations",
                      "type": "string"
                    },
                    "value": {
                      "items": {
                        "description": "Reservation resource Id. \"/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}\"",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedReservationsProperties"
          },
          {
            "oldValue": {
              "properties": {
                "displayName": {
                  "description": "Management group display name",
                  "type": "string"
                },
                "managementGroupId": {
                  "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                  "type": "string"
                },
                "tenantId": {
                  "description": "Tenant ID of the applied scope type",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedScopeProperties"
          },
          {
            "oldValue": {
              "description": "Type of the Applied Scope.",
              "enum": [
                "Single",
                "Shared"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "AppliedScopeType"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedScopeType"
          },
          {
            "oldValue": {
              "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
              "items": {
                "maxItems": 1,
                "minItems": 1,
                "type": "string"
              },
              "type": "array"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedScopes"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Auto quota increase feature state - enabled: feature is enabled, disabled: feature is disabled.",
              "enum": [
                "enabled",
                "disabled"
              ],
              "x-ms-enum": {
                "modelAsString": true,
                "name": "AqiStateType"
              }
            },
            "op": "add",
            "from": "",
            "path": "/AqiState"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Auto Quota Increase settings.",
              "properties": {
                "id": {
                  "description": "The subscription Id.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the auto quota increase.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Actions for auto quota increase.",
                  "properties": {
                    "onFailure": {
                      "description": "The actions for auto quota increase.",
                      "properties": {
                        "emailActions": {
                          "description": "The email actions.",
                          "properties": {
                            "emailAddresses": {
                              "description": "The list of email actions.",
                              "items": {
                                "description": "Email Action.",
                                "properties": {
                                  "emailAddress": {
                                    "description": "The email address for the action.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          }
                        }
                      },
                      "type": "object"
                    },
                    "onSuccess": {
                      "description": "The actions for auto quota increase.",
                      "properties": {
                        "emailActions": {
                          "description": "The email actions.",
                          "properties": {
                            "emailAddresses": {
                              "description": "The list of email actions.",
                              "items": {
                                "description": "Email Action.",
                                "properties": {
                                  "emailAddress": {
                                    "description": "The email address for the action.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          }
                        }
                      },
                      "type": "object"
                    },
                    "settings": {
                      "description": "Settings for auto quota increase.",
                      "properties": {
                        "autoQuotaIncreaseState": {
                          "description": "The Auto quota increase feature state - enabled: feature is enabled, disabled: feature is disabled.",
                          "enum": [
                            "enabled",
                            "disabled"
                          ],
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "AqiStateType"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "supportTicketAction": {
                      "description": "The SupportRequest action.",
                      "properties": {
                        "alternateEmailAddresses": {
                          "description": "The alternate email address of the recipient.",
                          "items": {
                            "description": "The email recipients.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "country": {
                          "description": "The country of the recipient.",
                          "type": "string"
                        },
                        "firstName": {
                          "description": "The first name of the recipient.",
                          "type": "string"
                        },
                        "lastName": {
                          "description": "The last name of the recipient.",
                          "type": "string"
                        },
                        "phoneNumber": {
                          "description": "The phone number of the recipient.",
                          "type": "string"
                        },
                        "preferredContactMethod": {
                          "description": "The contact method - Email: Contact using provided email, Phone: contact using provided phone number.",
                          "enum": [
                            "Email",
                            "Phone"
                          ],
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ContactMethodType"
                          }
                        },
                        "primaryEmailAddress": {
                          "description": "The primary email addresses of the recipients.",
                          "type": "string"
                        },
                        "severity": {
                          "description": "The Severity types.",
                          "enum": [
                            "Critical",
                            "Moderate",
                            "Minimal"
                          ],
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "SeverityType"
                          }
                        },
                        "supportLanguage": {
                          "description": "The support language.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "The type of the resource",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/AutoQuotaIncreaseDetail"
          },
          {
            "oldValue": {
              "properties": {
                "properties": {
                  "description": "List of scopes for which availability should be checked",
                  "properties": {
                    "scopes": {
                      "description": "Scopes to be checked for availability",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AvailableScopeRequest"
          },
          {
            "oldValue": {
              "description": "List of scopes for which availability should be checked",
              "properties": {
                "scopes": {
                  "description": "Scopes to be checked for availability",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AvailableScopeRequestProperties"
          },
          {
            "oldValue": {
              "description": "Subscription that will be charged for purchasing Reservation",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/BillingScopeId"
          },
          {
            "oldValue": {
              "properties": {
                "properties": {
                  "properties": {
                    "billingCurrencyTotal": {
                      "description": "Currency and amount that customer will be charged in customer's local currency. Tax is not included.",
                      "properties": {
                        "amount": {
                          "type": "number"
                        },
                        "currencyCode": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "grandTotal": {
                      "description": "Grand Total",
                      "type": "number"
                    },
                    "isBillingPartnerManaged": {
                      "description": "True if billing is managed by Microsoft Partner. Used only for CSP accounts.",
                      "type": "boolean"
                    },
                    "netTotal": {
                      "description": "Net total",
                      "type": "number"
                    },
                    "paymentSchedule": {
                      "items": {
                        "description": "Information about payment related to a reservation order.",
                        "properties": {
                          "billingAccount": {
                            "description": "Shows the Account that is charged for this payment.",
                            "type": "string"
                          },
                          "billingCurrencyTotal": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "dueDate": {
                            "description": "Date when the payment needs to be done.",
                            "format": "date",
                            "type": "string"
                          },
                          "extendedStatusInfo": {
                            "properties": {
                              "message": {
                                "description": "The message giving detailed information about the status code.",
                                "type": "string"
                              },
                              "statusCode": {
                                "enum": [
                                  "None",
                                  "Pending",
                                  "Active",
                                  "PurchaseError",
                                  "PaymentInstrumentError",
                                  "Split",
                                  "Merged",
                                  "Expired",
                                  "Succeeded"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationStatusCode"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "paymentDate": {
                            "description": "Date when the transaction is completed. Is null when it is scheduled.",
                            "format": "date",
                            "type": "string"
                          },
                          "pricingCurrencyTotal": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "status": {
                            "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Scheduled",
                              "Cancelled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "PaymentStatus"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "pricingCurrencyTotal": {
                      "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included.",
                      "properties": {
                        "amount": {
                          "type": "number"
                        },
                        "currencyCode": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "reservationOrderId": {
                      "description": "GUID that represents reservation order that can be placed after calculating price.",
                      "type": "string"
                    },
                    "skuDescription": {
                      "description": "Description of SKU that is being purchased.",
                      "type": "string"
                    },
                    "skuTitle": {
                      "description": "Title of SKU that is being purchased.",
                      "type": "string"
                    },
                    "taxTotal": {
                      "description": "Tax total",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CalculatePriceResponse"
          },
          {
            "oldValue": {
              "properties": {
                "billingCurrencyTotal": {
                  "description": "Currency and amount that customer will be charged in customer's local currency. Tax is not included.",
                  "properties": {
                    "amount": {
                      "type": "number"
                    },
                    "currencyCode": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "grandTotal": {
                  "description": "Grand Total",
                  "type": "number"
                },
                "isBillingPartnerManaged": {
                  "description": "True if billing is managed by Microsoft Partner. Used only for CSP accounts.",
                  "type": "boolean"
                },
                "netTotal": {
                  "description": "Net total",
                  "type": "number"
                },
                "paymentSchedule": {
                  "items": {
                    "description": "Information about payment related to a reservation order.",
                    "properties": {
                      "billingAccount": {
                        "description": "Shows the Account that is charged for this payment.",
                        "type": "string"
                      },
                      "billingCurrencyTotal": {
                        "properties": {
                          "amount": {
                            "format": "double",
                            "type": "number"
                          },
                          "currencyCode": {
                            "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "dueDate": {
                        "description": "Date when the payment needs to be done.",
                        "format": "date",
                        "type": "string"
                      },
                      "extendedStatusInfo": {
                        "properties": {
                          "message": {
                            "description": "The message giving detailed information about the status code.",
                            "type": "string"
                          },
                          "statusCode": {
                            "enum": [
                              "None",
                              "Pending",
                              "Active",
                              "PurchaseError",
                              "PaymentInstrumentError",
                              "Split",
                              "Merged",
                              "Expired",
                              "Succeeded"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationStatusCode"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "paymentDate": {
                        "description": "Date when the transaction is completed. Is null when it is scheduled.",
                        "format": "date",
                        "type": "string"
                      },
                      "pricingCurrencyTotal": {
                        "properties": {
                          "amount": {
                            "format": "double",
                            "type": "number"
                          },
                          "currencyCode": {
                            "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "status": {
                        "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
                        "enum": [
                          "Succeeded",
                          "Failed",
                          "Scheduled",
                          "Cancelled"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "PaymentStatus"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "pricingCurrencyTotal": {
                  "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included.",
                  "properties": {
                    "amount": {
                      "type": "number"
                    },
                    "currencyCode": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "reservationOrderId": {
                  "description": "GUID that represents reservation order that can be placed after calculating price.",
                  "type": "string"
                },
                "skuDescription": {
                  "description": "Description of SKU that is being purchased.",
                  "type": "string"
                },
                "skuTitle": {
                  "description": "Title of SKU that is being purchased.",
                  "type": "string"
                },
                "taxTotal": {
                  "description": "Tax total",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CalculatePriceResponseProperties"
          },
          {
            "oldValue": {
              "properties": {
                "billingPlans": {
                  "additionalProperties": {
                    "items": {
                      "description": "Represent the billing plans.",
                      "enum": [
                        "Upfront",
                        "Monthly"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationBillingPlan"
                      }
                    },
                    "type": "array"
                  },
                  "description": "The billing plan options available for this SKU.",
                  "type": "object"
                },
                "locations": {
                  "items": {
                    "description": "The set of locations that the SKU is available. If not specified, the SKU is available in all locations.",
                    "type": "string"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "msrp": {
                  "additionalProperties": {
                    "items": {
                      "properties": {
                        "amount": {
                          "description": "Represents the amount of money in the currency.",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "Represents the currency code - 3 character ISO.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "object"
                  },
                  "description": "The sku's MSRP values for each term",
                  "type": "object"
                },
                "name": {
                  "description": "The name of SKU",
                  "readOnly": true,
                  "type": "string"
                },
                "resourceType": {
                  "description": "The type of resource the SKU applies to.",
                  "readOnly": true,
                  "type": "string"
                },
                "restrictions": {
                  "items": {
                    "properties": {
                      "reasonCode": {
                        "description": "The reason for restriction.",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of restrictions.",
                        "type": "string"
                      },
                      "values": {
                        "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "skuProperties": {
                  "items": {
                    "properties": {
                      "name": {
                        "description": "An invariant to describe the feature.",
                        "type": "string"
                      },
                      "value": {
                        "description": "An invariant if the feature is measured by quantity.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "terms": {
                  "description": "Available reservation terms for this resource",
                  "items": {
                    "description": "Represent the term of Reservation.",
                    "enum": [
                      "P1Y",
                      "P3Y"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "ReservationTerm"
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Catalog"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The contact method - Email: Contact using provided email, Phone: contact using provided phone number.",
              "enum": [
                "Email",
                "Phone"
              ],
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ContactMethodType"
              }
            },
            "op": "add",
            "from": "",
            "path": "/ContactMethod"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota change requests information.",
              "properties": {
                "value": {
                  "description": "Quota change requests.",
                  "items": {
                    "description": "Quota limits.",
                    "properties": {
                      "properties": {
                        "description": "Quota properties for the resource.",
                        "properties": {
                          "currentValue": {
                            "description": "The current resource usages information.",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "limit": {
                            "description": "The quota limit.",
                            "type": "integer"
                          },
                          "name": {
                            "description": "Name of the resource provide by the resource Provider. Please use this name property for quotaRequests.",
                            "properties": {
                              "localizedValue": {
                                "description": "Resource display name.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": {
                                "description": "Resource name.",
                                "readOnly": false,
                                "type": "string"
                              }
                            }
                          },
                          "properties": {
                            "description": "Additional properties for the specific resource provider.",
                            "type": "object"
                          },
                          "quotaPeriod": {
                            "description": "The quota period over which the usage values are summarized, such as - P1D (Per one day), PT1M (Per one minute), PT1S (Per one second). This parameter is optional because, for some resources like compute, the period doesn’t matter.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "resourceType": {
                            "description": "The resource types.",
                            "enum": [
                              "standard",
                              "dedicated",
                              "lowPriority",
                              "shared",
                              "serviceSpecific"
                            ],
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ResourceType"
                            }
                          },
                          "unit": {
                            "description": " The units of the limit, such as - Count, Bytes, etc. Use the unit field provided in the Get quota response.",
                            "readOnly": false,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/CreateGenericQuotaRequestParameters"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota limits.",
              "properties": {
                "properties": {
                  "description": "The quota request status details.",
                  "properties": {
                    "message": {
                      "description": "A user friendly message.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "provisioningState": {
                      "description": "The quota request status.",
                      "enum": [
                        "Accepted",
                        "Invalid",
                        "Succeeded",
                        "Failed",
                        "InProgress"
                      ],
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "QuotaRequestState"
                      }
                    }
                  },
                  "type": "object"
                },
                "quotaInformation": {
                  "description": "Quota limits.",
                  "properties": {
                    "properties": {
                      "description": "Quota properties for the resource.",
                      "properties": {
                        "currentValue": {
                          "description": "The current resource usages information.",
                          "readOnly": true,
                          "type": "integer"
                        },
                        "limit": {
                          "description": "The quota limit.",
                          "type": "integer"
                        },
                        "name": {
                          "description": "Name of the resource provide by the resource Provider. Please use this name property for quotaRequests.",
                          "properties": {
                            "localizedValue": {
                              "description": "Resource display name.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "value": {
                              "description": "Resource name.",
                              "readOnly": false,
                              "type": "string"
                            }
                          }
                        },
                        "properties": {
                          "description": "Additional properties for the specific resource provider.",
                          "type": "object"
                        },
                        "quotaPeriod": {
                          "description": "The quota period over which the usage values are summarized, such as - P1D (Per one day), PT1M (Per one minute), PT1S (Per one second). This parameter is optional because, for some resources like compute, the period doesn’t matter.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "resourceType": {
                          "description": "The resource types.",
                          "enum": [
                            "standard",
                            "dedicated",
                            "lowPriority",
                            "shared",
                            "serviceSpecific"
                          ],
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ResourceType"
                          }
                        },
                        "unit": {
                          "description": " The units of the limit, such as - Count, Bytes, etc. Use the unit field provided in the Get quota response.",
                          "readOnly": false,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object",
                  "x-ms-azure-resource": true
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/CurrentQuotaLimit"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota limits.",
              "properties": {
                "properties": {
                  "description": "Quota properties for the resource.",
                  "properties": {
                    "currentValue": {
                      "description": "The current resource usages information.",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "limit": {
                      "description": "The quota limit.",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Name of the resource provide by the resource Provider. Please use this name property for quotaRequests.",
                      "properties": {
                        "localizedValue": {
                          "description": "Resource display name.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "value": {
                          "description": "Resource name.",
                          "readOnly": false,
                          "type": "string"
                        }
                      }
                    },
                    "properties": {
                      "description": "Additional properties for the specific resource provider.",
                      "type": "object"
                    },
                    "quotaPeriod": {
                      "description": "The quota period over which the usage values are summarized, such as - P1D (Per one day), PT1M (Per one minute), PT1S (Per one second). This parameter is optional because, for some resources like compute, the period doesn’t matter.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "resourceType": {
                      "description": "The resource types.",
                      "enum": [
                        "standard",
                        "dedicated",
                        "lowPriority",
                        "shared",
                        "serviceSpecific"
                      ],
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ResourceType"
                      }
                    },
                    "unit": {
                      "description": " The units of the limit, such as - Count, Bytes, etc. Use the unit field provided in the Get quota response.",
                      "readOnly": false,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/CurrentQuotaLimitBase"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Email Action.",
              "properties": {
                "emailAddress": {
                  "description": "The email address for the action.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EmailAction"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The email actions.",
              "properties": {
                "emailAddresses": {
                  "description": "The list of email actions.",
                  "items": {
                    "description": "Email Action.",
                    "properties": {
                      "emailAddress": {
                        "description": "The email address for the action.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/EmailActions"
          },
          {
            "oldValue": {
              "properties": {
                "error": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NotSpecified",
                        "InternalServerError",
                        "ServerTimeout",
                        "AuthorizationFailed",
                        "BadRequest",
                        "ClientCertificateThumbprintNotSet",
                        "InvalidRequestContent",
                        "OperationFailed",
                        "HttpMethodNotSupported",
                        "InvalidRequestUri",
                        "MissingTenantId",
                        "InvalidTenantId",
                        "InvalidReservationOrderId",
                        "InvalidReservationId",
                        "ReservationIdNotInReservationOrder",
                        "ReservationOrderNotFound",
                        "InvalidSubscriptionId",
                        "InvalidAccessToken",
                        "InvalidLocationId",
                        "UnauthenticatedRequestsThrottled",
                        "InvalidHealthCheckType",
                        "Forbidden",
                        "BillingScopeIdCannotBeChanged",
                        "AppliedScopesNotAssociatedWithCommerceAccount",
                        "PatchValuesSameAsExisting",
                        "RoleAssignmentCreationFailed",
                        "ReservationOrderCreationFailed",
                        "ReservationOrderNotEnabled",
                        "CapacityUpdateScopesFailed",
                        "UnsupportedReservationTerm",
                        "ReservationOrderIdAlreadyExists",
                        "RiskCheckFailed",
                        "CreateQuoteFailed",
                        "ActivateQuoteFailed",
                        "NonsupportedAccountId",
                        "PaymentInstrumentNotFound",
                        "MissingAppliedScopesForSingle",
                        "NoValidReservationsToReRate",
                        "ReRateOnlyAllowedForEA",
                        "OperationCannotBePerformedInCurrentState",
                        "InvalidSingleAppliedScopesCount",
                        "InvalidFulfillmentRequestParameters",
                        "NotSupportedCountry",
                        "InvalidRefundQuantity",
                        "PurchaseError",
                        "BillingCustomerInputError",
                        "BillingPaymentInstrumentSoftError",
                        "BillingPaymentInstrumentHardError",
                        "BillingTransientError",
                        "BillingError",
                        "FulfillmentConfigurationError",
                        "FulfillmentOutOfStockError",
                        "FulfillmentTransientError",
                        "FulfillmentError",
                        "CalculatePriceFailed"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ErrorResponseCode"
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Error"
          },
          {
            "oldValue": {
              "enum": [
                "NotSpecified",
                "InternalServerError",
                "ServerTimeout",
                "AuthorizationFailed",
                "BadRequest",
                "ClientCertificateThumbprintNotSet",
                "InvalidRequestContent",
                "OperationFailed",
                "HttpMethodNotSupported",
                "InvalidRequestUri",
                "MissingTenantId",
                "InvalidTenantId",
                "InvalidReservationOrderId",
                "InvalidReservationId",
                "ReservationIdNotInReservationOrder",
                "ReservationOrderNotFound",
                "InvalidSubscriptionId",
                "InvalidAccessToken",
                "InvalidLocationId",
                "UnauthenticatedRequestsThrottled",
                "InvalidHealthCheckType",
                "Forbidden",
                "BillingScopeIdCannotBeChanged",
                "AppliedScopesNotAssociatedWithCommerceAccount",
                "PatchValuesSameAsExisting",
                "RoleAssignmentCreationFailed",
                "ReservationOrderCreationFailed",
                "ReservationOrderNotEnabled",
                "CapacityUpdateScopesFailed",
                "UnsupportedReservationTerm",
                "ReservationOrderIdAlreadyExists",
                "RiskCheckFailed",
                "CreateQuoteFailed",
                "ActivateQuoteFailed",
                "NonsupportedAccountId",
                "PaymentInstrumentNotFound",
                "MissingAppliedScopesForSingle",
                "NoValidReservationsToReRate",
                "ReRateOnlyAllowedForEA",
                "OperationCannotBePerformedInCurrentState",
                "InvalidSingleAppliedScopesCount",
                "InvalidFulfillmentRequestParameters",
                "NotSupportedCountry",
                "InvalidRefundQuantity",
                "PurchaseError",
                "BillingCustomerInputError",
                "BillingPaymentInstrumentSoftError",
                "BillingPaymentInstrumentHardError",
                "BillingTransientError",
                "BillingError",
                "FulfillmentConfigurationError",
                "FulfillmentOutOfStockError",
                "FulfillmentTransientError",
                "FulfillmentError",
                "CalculatePriceFailed"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ErrorResponseCode"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ErrorResponseCode"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The api error.",
              "properties": {
                "error": {
                  "description": "The api error details.",
                  "properties": {
                    "code": {
                      "description": "The error code.",
                      "type": "string"
                    },
                    "details": {
                      "description": "The list of error details.",
                      "items": {
                        "description": "The error details.",
                        "properties": {
                          "code": {
                            "description": "The error code.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "message": {
                            "description": "The error message.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "message": {
                      "description": "The error message.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ExceptionResponse"
          },
          {
            "oldValue": {
              "properties": {
                "code": {
                  "enum": [
                    "NotSpecified",
                    "InternalServerError",
                    "ServerTimeout",
                    "AuthorizationFailed",
                    "BadRequest",
                    "ClientCertificateThumbprintNotSet",
                    "InvalidRequestContent",
                    "OperationFailed",
                    "HttpMethodNotSupported",
                    "InvalidRequestUri",
                    "MissingTenantId",
                    "InvalidTenantId",
                    "InvalidReservationOrderId",
                    "InvalidReservationId",
                    "ReservationIdNotInReservationOrder",
                    "ReservationOrderNotFound",
                    "InvalidSubscriptionId",
                    "InvalidAccessToken",
                    "InvalidLocationId",
                    "UnauthenticatedRequestsThrottled",
                    "InvalidHealthCheckType",
                    "Forbidden",
                    "BillingScopeIdCannotBeChanged",
                    "AppliedScopesNotAssociatedWithCommerceAccount",
                    "PatchValuesSameAsExisting",
                    "RoleAssignmentCreationFailed",
                    "ReservationOrderCreationFailed",
                    "ReservationOrderNotEnabled",
                    "CapacityUpdateScopesFailed",
                    "UnsupportedReservationTerm",
                    "ReservationOrderIdAlreadyExists",
                    "RiskCheckFailed",
                    "CreateQuoteFailed",
                    "ActivateQuoteFailed",
                    "NonsupportedAccountId",
                    "PaymentInstrumentNotFound",
                    "MissingAppliedScopesForSingle",
                    "NoValidReservationsToReRate",
                    "ReRateOnlyAllowedForEA",
                    "OperationCannotBePerformedInCurrentState",
                    "InvalidSingleAppliedScopesCount",
                    "InvalidFulfillmentRequestParameters",
                    "NotSupportedCountry",
                    "InvalidRefundQuantity",
                    "PurchaseError",
                    "BillingCustomerInputError",
                    "BillingPaymentInstrumentSoftError",
                    "BillingPaymentInstrumentHardError",
                    "BillingTransientError",
                    "BillingError",
                    "FulfillmentConfigurationError",
                    "FulfillmentOutOfStockError",
                    "FulfillmentTransientError",
                    "FulfillmentError",
                    "CalculatePriceFailed"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ErrorResponseCode"
                  }
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ExtendedErrorInfo"
          },
          {
            "oldValue": {
              "properties": {
                "message": {
                  "description": "The message giving detailed information about the status code.",
                  "type": "string"
                },
                "statusCode": {
                  "enum": [
                    "None",
                    "Pending",
                    "Active",
                    "PurchaseError",
                    "PaymentInstrumentError",
                    "Split",
                    "Merged",
                    "Expired",
                    "Succeeded"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationStatusCode"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ExtendedStatusInfo"
          },
          {
            "oldValue": {
              "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
              "enum": [
                "On",
                "Off"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "InstanceFlexibility"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/InstanceFlexibility"
          },
          {
            "oldValue": {
              "properties": {
                "sources": {
                  "description": "Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MergeProperties"
          },
          {
            "oldValue": {
              "properties": {
                "properties": {
                  "properties": {
                    "sources": {
                      "description": "Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MergeRequest"
          },
          {
            "oldValue": {
              "properties": {
                "amount": {
                  "description": "Represents the amount of money in the currency.",
                  "type": "number"
                },
                "currencyCode": {
                  "description": "Represents the currency code - 3 character ISO.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MsrpProperty"
          },
          {
            "oldValue": {
              "properties": {
                "description": {
                  "type": "string"
                },
                "operation": {
                  "type": "string"
                },
                "provider": {
                  "type": "string"
                },
                "resource": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationDisplay"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Url to get the next page of items.",
                  "type": "string"
                },
                "value": {
                  "items": {
                    "properties": {
                      "display": {
                        "properties": {
                          "description": {
                            "type": "string"
                          },
                          "operation": {
                            "type": "string"
                          },
                          "provider": {
                            "type": "string"
                          },
                          "resource": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      },
                      "origin": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationList"
          },
          {
            "oldValue": {
              "properties": {
                "display": {
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "operation": {
                      "type": "string"
                    },
                    "provider": {
                      "type": "string"
                    },
                    "resource": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "name": {
                  "type": "string"
                },
                "origin": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationResponse"
          },
          {
            "oldValue": {
              "properties": {
                "properties": {
                  "properties": {
                    "appliedScopeType": {
                      "description": "Type of the Applied Scope.",
                      "enum": [
                        "Single",
                        "Shared"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "AppliedScopeType"
                      }
                    },
                    "appliedScopes": {
                      "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                      "items": {
                        "maxItems": 1,
                        "minItems": 1,
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "instanceFlexibility": {
                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                      "enum": [
                        "On",
                        "Off"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "InstanceFlexibility"
                      }
                    },
                    "name": {
                      "description": "Name of the Reservation",
                      "type": "string"
                    },
                    "renew": {
                      "default": false,
                      "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                      "type": "boolean"
                    },
                    "renewProperties": {
                      "properties": {
                        "purchaseProperties": {
                          "properties": {
                            "location": {
                              "description": "The Azure Region where the reserved resource lives.",
                              "type": "string"
                            },
                            "properties": {
                              "properties": {
                                "appliedScopeType": {
                                  "description": "Type of the Applied Scope.",
                                  "enum": [
                                    "Single",
                                    "Shared"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "AppliedScopeType"
                                  }
                                },
                                "appliedScopes": {
                                  "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                  "items": {
                                    "maxItems": 1,
                                    "minItems": 1,
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "billingPlan": {
                                  "description": "Represent the billing plans.",
                                  "enum": [
                                    "Upfront",
                                    "Monthly"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReservationBillingPlan"
                                  }
                                },
                                "billingScopeId": {
                                  "description": "Subscription that will be charged for purchasing Reservation",
                                  "type": "string"
                                },
                                "displayName": {
                                  "description": "Friendly name of the Reservation",
                                  "type": "string"
                                },
                                "instanceFlexibility": {
                                  "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                  "enum": [
                                    "On",
                                    "Off"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "InstanceFlexibility"
                                  }
                                },
                                "quantity": {
                                  "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "renew": {
                                  "default": false,
                                  "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                  "type": "boolean"
                                },
                                "reservedResourceProperties": {
                                  "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                  "properties": {
                                    "instanceFlexibility": {
                                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                      "enum": [
                                        "On",
                                        "Off"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "InstanceFlexibility"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "reservedResourceType": {
                                  "description": "The type of the resource that is being reserved.",
                                  "enum": [
                                    "VirtualMachines",
                                    "SqlDatabases",
                                    "SuseLinux",
                                    "CosmosDb",
                                    "RedHat",
                                    "SqlDataWarehouse",
                                    "VMwareCloudSimple",
                                    "RedHatOsa",
                                    "Databricks",
                                    "AppService",
                                    "ManagedDisk",
                                    "BlockBlob",
                                    "RedisCache",
                                    "AzureDataExplorer",
                                    "MySql",
                                    "MariaDb",
                                    "PostgreSql",
                                    "DedicatedHost",
                                    "SapHana",
                                    "SqlAzureHybridBenefit"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReservedResourceType"
                                  }
                                },
                                "term": {
                                  "description": "Represent the term of Reservation.",
                                  "enum": [
                                    "P1Y",
                                    "P3Y"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReservationTerm"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "sku": {
                              "properties": {
                                "name": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Patch"
          },
          {
            "oldValue": {
              "properties": {
                "appliedScopeType": {
                  "description": "Type of the Applied Scope.",
                  "enum": [
                    "Single",
                    "Shared"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "AppliedScopeType"
                  }
                },
                "appliedScopes": {
                  "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                  "items": {
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "instanceFlexibility": {
                  "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                  "enum": [
                    "On",
                    "Off"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "InstanceFlexibility"
                  }
                },
                "name": {
                  "description": "Name of the Reservation",
                  "type": "string"
                },
                "renew": {
                  "default": false,
                  "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                  "type": "boolean"
                },
                "renewProperties": {
                  "properties": {
                    "purchaseProperties": {
                      "properties": {
                        "location": {
                          "description": "The Azure Region where the reserved resource lives.",
                          "type": "string"
                        },
                        "properties": {
                          "properties": {
                            "appliedScopeType": {
                              "description": "Type of the Applied Scope.",
                              "enum": [
                                "Single",
                                "Shared"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "AppliedScopeType"
                              }
                            },
                            "appliedScopes": {
                              "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                              "items": {
                                "maxItems": 1,
                                "minItems": 1,
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "billingPlan": {
                              "description": "Represent the billing plans.",
                              "enum": [
                                "Upfront",
                                "Monthly"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ReservationBillingPlan"
                              }
                            },
                            "billingScopeId": {
                              "description": "Subscription that will be charged for purchasing Reservation",
                              "type": "string"
                            },
                            "displayName": {
                              "description": "Friendly name of the Reservation",
                              "type": "string"
                            },
                            "instanceFlexibility": {
                              "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                              "enum": [
                                "On",
                                "Off"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "InstanceFlexibility"
                              }
                            },
                            "quantity": {
                              "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "renew": {
                              "default": false,
                              "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                              "type": "boolean"
                            },
                            "reservedResourceProperties": {
                              "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                              "properties": {
                                "instanceFlexibility": {
                                  "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                  "enum": [
                                    "On",
                                    "Off"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "InstanceFlexibility"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "reservedResourceType": {
                              "description": "The type of the resource that is being reserved.",
                              "enum": [
                                "VirtualMachines",
                                "SqlDatabases",
                                "SuseLinux",
                                "CosmosDb",
                                "RedHat",
                                "SqlDataWarehouse",
                                "VMwareCloudSimple",
                                "RedHatOsa",
                                "Databricks",
                                "AppService",
                                "ManagedDisk",
                                "BlockBlob",
                                "RedisCache",
                                "AzureDataExplorer",
                                "MySql",
                                "MariaDb",
                                "PostgreSql",
                                "DedicatedHost",
                                "SapHana",
                                "SqlAzureHybridBenefit"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ReservedResourceType"
                              }
                            },
                            "term": {
                              "description": "Represent the term of Reservation.",
                              "enum": [
                                "P1Y",
                                "P3Y"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ReservationTerm"
                              }
                            }
                          },
                          "type": "object"
                        },
                        "sku": {
                          "properties": {
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PatchProperties"
          },
          {
            "oldValue": {
              "description": "Information about payment related to a reservation order.",
              "properties": {
                "billingAccount": {
                  "description": "Shows the Account that is charged for this payment.",
                  "type": "string"
                },
                "billingCurrencyTotal": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "dueDate": {
                  "description": "Date when the payment needs to be done.",
                  "format": "date",
                  "type": "string"
                },
                "extendedStatusInfo": {
                  "properties": {
                    "message": {
                      "description": "The message giving detailed information about the status code.",
                      "type": "string"
                    },
                    "statusCode": {
                      "enum": [
                        "None",
                        "Pending",
                        "Active",
                        "PurchaseError",
                        "PaymentInstrumentError",
                        "Split",
                        "Merged",
                        "Expired",
                        "Succeeded"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationStatusCode"
                      }
                    }
                  },
                  "type": "object"
                },
                "paymentDate": {
                  "description": "Date when the transaction is completed. Is null when it is scheduled.",
                  "format": "date",
                  "type": "string"
                },
                "pricingCurrencyTotal": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "status": {
                  "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
                  "enum": [
                    "Succeeded",
                    "Failed",
                    "Scheduled",
                    "Cancelled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "PaymentStatus"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PaymentDetail"
          },
          {
            "oldValue": {
              "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
              "enum": [
                "Succeeded",
                "Failed",
                "Scheduled",
                "Cancelled"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "PaymentStatus"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PaymentStatus"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Phone Action.",
              "properties": {
                "phoneNumber": {
                  "description": "The phone number for the action.",
                  "type": "string"
                },
                "preferredChannel": {
                  "description": "The contact method - Email: Contact using provided email, Phone: contact using provided phone number.",
                  "enum": [
                    "Email",
                    "Phone"
                  ],
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ContactMethodType"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/PhoneAction"
          },
          {
            "oldValue": {
              "properties": {
                "amount": {
                  "format": "double",
                  "type": "number"
                },
                "currencyCode": {
                  "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Price"
          },
          {
            "oldValue": {
              "properties": {
                "properties": {
                  "properties": {
                    "scopes": {
                      "items": {
                        "properties": {
                          "reason": {
                            "type": "string"
                          },
                          "scope": {
                            "type": "string"
                          },
                          "valid": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Properties"
          },
          {
            "oldValue": {
              "properties": {
                "location": {
                  "description": "The Azure Region where the reserved resource lives.",
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "appliedScopeType": {
                      "description": "Type of the Applied Scope.",
                      "enum": [
                        "Single",
                        "Shared"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "AppliedScopeType"
                      }
                    },
                    "appliedScopes": {
                      "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                      "items": {
                        "maxItems": 1,
                        "minItems": 1,
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "billingPlan": {
                      "description": "Represent the billing plans.",
                      "enum": [
                        "Upfront",
                        "Monthly"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationBillingPlan"
                      }
                    },
                    "billingScopeId": {
                      "description": "Subscription that will be charged for purchasing Reservation",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "Friendly name of the Reservation",
                      "type": "string"
                    },
                    "instanceFlexibility": {
                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                      "enum": [
                        "On",
                        "Off"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "InstanceFlexibility"
                      }
                    },
                    "quantity": {
                      "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "renew": {
                      "default": false,
                      "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                      "type": "boolean"
                    },
                    "reservedResourceProperties": {
                      "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                      "properties": {
                        "instanceFlexibility": {
                          "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                          "enum": [
                            "On",
                            "Off"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "InstanceFlexibility"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "reservedResourceType": {
                      "description": "The type of the resource that is being reserved.",
                      "enum": [
                        "VirtualMachines",
                        "SqlDatabases",
                        "SuseLinux",
                        "CosmosDb",
                        "RedHat",
                        "SqlDataWarehouse",
                        "VMwareCloudSimple",
                        "RedHatOsa",
                        "Databricks",
                        "AppService",
                        "ManagedDisk",
                        "BlockBlob",
                        "RedisCache",
                        "AzureDataExplorer",
                        "MySql",
                        "MariaDb",
                        "PostgreSql",
                        "DedicatedHost",
                        "SapHana",
                        "SqlAzureHybridBenefit"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservedResourceType"
                      }
                    },
                    "term": {
                      "description": "Represent the term of Reservation.",
                      "enum": [
                        "P1Y",
                        "P3Y"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationTerm"
                      }
                    }
                  },
                  "type": "object"
                },
                "sku": {
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PurchaseRequest"
          },
          {
            "oldValue": {
              "properties": {
                "appliedScopeType": {
                  "description": "Type of the Applied Scope.",
                  "enum": [
                    "Single",
                    "Shared"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "AppliedScopeType"
                  }
                },
                "appliedScopes": {
                  "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                  "items": {
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "billingPlan": {
                  "description": "Represent the billing plans.",
                  "enum": [
                    "Upfront",
                    "Monthly"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationBillingPlan"
                  }
                },
                "billingScopeId": {
                  "description": "Subscription that will be charged for purchasing Reservation",
                  "type": "string"
                },
                "displayName": {
                  "description": "Friendly name of the Reservation",
                  "type": "string"
                },
                "instanceFlexibility": {
                  "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                  "enum": [
                    "On",
                    "Off"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "InstanceFlexibility"
                  }
                },
                "quantity": {
                  "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                  "format": "int32",
                  "type": "integer"
                },
                "renew": {
                  "default": false,
                  "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                  "type": "boolean"
                },
                "reservedResourceProperties": {
                  "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                  "properties": {
                    "instanceFlexibility": {
                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                      "enum": [
                        "On",
                        "Off"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "InstanceFlexibility"
                      }
                    }
                  },
                  "type": "object"
                },
                "reservedResourceType": {
                  "description": "The type of the resource that is being reserved.",
                  "enum": [
                    "VirtualMachines",
                    "SqlDatabases",
                    "SuseLinux",
                    "CosmosDb",
                    "RedHat",
                    "SqlDataWarehouse",
                    "VMwareCloudSimple",
                    "RedHatOsa",
                    "Databricks",
                    "AppService",
                    "ManagedDisk",
                    "BlockBlob",
                    "RedisCache",
                    "AzureDataExplorer",
                    "MySql",
                    "MariaDb",
                    "PostgreSql",
                    "DedicatedHost",
                    "SapHana",
                    "SqlAzureHybridBenefit"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservedResourceType"
                  }
                },
                "term": {
                  "description": "Represent the term of Reservation.",
                  "enum": [
                    "P1Y",
                    "P3Y"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationTerm"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PurchaseRequestProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota limits.",
              "properties": {
                "nextLink": {
                  "description": "The uri to fetch the next page of quota limits. When there are no more pages, this is null.",
                  "type": "string"
                },
                "value": {
                  "description": "List of Quota limits.",
                  "items": {
                    "description": "Quota limits.",
                    "properties": {
                      "properties": {
                        "description": "Quota properties for the resource.",
                        "properties": {
                          "currentValue": {
                            "description": "The current resource usages information.",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "limit": {
                            "description": "The quota limit.",
                            "type": "integer"
                          },
                          "name": {
                            "description": "Name of the resource provide by the resource Provider. Please use this name property for quotaRequests.",
                            "properties": {
                              "localizedValue": {
                                "description": "Resource display name.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": {
                                "description": "Resource name.",
                                "readOnly": false,
                                "type": "string"
                              }
                            }
                          },
                          "properties": {
                            "description": "Additional properties for the specific resource provider.",
                            "type": "object"
                          },
                          "quotaPeriod": {
                            "description": "The quota period over which the usage values are summarized, such as - P1D (Per one day), PT1M (Per one minute), PT1S (Per one second). This parameter is optional because, for some resources like compute, the period doesn’t matter.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "resourceType": {
                            "description": "The resource types.",
                            "enum": [
                              "standard",
                              "dedicated",
                              "lowPriority",
                              "shared",
                              "serviceSpecific"
                            ],
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ResourceType"
                            }
                          },
                          "unit": {
                            "description": " The units of the limit, such as - Count, Bytes, etc. Use the unit field provided in the Get quota response.",
                            "readOnly": false,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/QuotaLimits"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota limits request response.",
              "properties": {
                "nextLink": {
                  "description": "The uri to fetch the next page of quota limits. When there are no more pages, this is null.",
                  "type": "string"
                },
                "value": {
                  "description": "List of Quota limits with the quota request status.",
                  "items": {
                    "description": "Quota limits.",
                    "properties": {
                      "properties": {
                        "description": "The quota request status details.",
                        "properties": {
                          "message": {
                            "description": "A user friendly message.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "provisioningState": {
                            "description": "The quota request status.",
                            "enum": [
                              "Accepted",
                              "Invalid",
                              "Succeeded",
                              "Failed",
                              "InProgress"
                            ],
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "QuotaRequestState"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "quotaInformation": {
                        "description": "Quota limits.",
                        "properties": {
                          "properties": {
                            "description": "Quota properties for the resource.",
                            "properties": {
                              "currentValue": {
                                "description": "The current resource usages information.",
                                "readOnly": true,
                                "type": "integer"
                              },
                              "limit": {
                                "description": "The quota limit.",
                                "type": "integer"
                              },
                              "name": {
                                "description": "Name of the resource provide by the resource Provider. Please use this name property for quotaRequests.",
                                "properties": {
                                  "localizedValue": {
                                    "description": "Resource display name.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Resource name.",
                                    "readOnly": false,
                                    "type": "string"
                                  }
                                }
                              },
                              "properties": {
                                "description": "Additional properties for the specific resource provider.",
                                "type": "object"
                              },
                              "quotaPeriod": {
                                "description": "The quota period over which the usage values are summarized, such as - P1D (Per one day), PT1M (Per one minute), PT1S (Per one second). This parameter is optional because, for some resources like compute, the period doesn’t matter.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "resourceType": {
                                "description": "The resource types.",
                                "enum": [
                                  "standard",
                                  "dedicated",
                                  "lowPriority",
                                  "shared",
                                  "serviceSpecific"
                                ],
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ResourceType"
                                }
                              },
                              "unit": {
                                "description": " The units of the limit, such as - Count, Bytes, etc. Use the unit field provided in the Get quota response.",
                                "readOnly": false,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object",
                        "x-ms-azure-resource": true
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/QuotaLimitsResponse"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota properties for the resource.",
              "properties": {
                "currentValue": {
                  "description": "The current resource usages information.",
                  "readOnly": true,
                  "type": "integer"
                },
                "limit": {
                  "description": "The quota limit.",
                  "type": "integer"
                },
                "name": {
                  "description": "Name of the resource provide by the resource Provider. Please use this name property for quotaRequests.",
                  "properties": {
                    "localizedValue": {
                      "description": "Resource display name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "value": {
                      "description": "Resource name.",
                      "readOnly": false,
                      "type": "string"
                    }
                  }
                },
                "properties": {
                  "description": "Additional properties for the specific resource provider.",
                  "type": "object"
                },
                "quotaPeriod": {
                  "description": "The quota period over which the usage values are summarized, such as - P1D (Per one day), PT1M (Per one minute), PT1S (Per one second). This parameter is optional because, for some resources like compute, the period doesn’t matter.",
                  "readOnly": true,
                  "type": "string"
                },
                "resourceType": {
                  "description": "The resource types.",
                  "enum": [
                    "standard",
                    "dedicated",
                    "lowPriority",
                    "shared",
                    "serviceSpecific"
                  ],
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ResourceType"
                  }
                },
                "unit": {
                  "description": " The units of the limit, such as - Count, Bytes, etc. Use the unit field provided in the Get quota response.",
                  "readOnly": false,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The details of the quota Request.",
              "properties": {
                "id": {
                  "description": "The quota request Id.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the quota request.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "The details of quota request.",
                  "properties": {
                    "message": {
                      "description": "User friendly status message.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "provisioningState": {
                      "description": "The quota request status.",
                      "enum": [
                        "Accepted",
                        "Invalid",
                        "Succeeded",
                        "Failed",
                        "InProgress"
                      ],
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "QuotaRequestState"
                      }
                    },
                    "requestSubmitTime": {
                      "description": "The quota request submit time. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "value": {
                      "description": "The quotaRequests.",
                      "items": {
                        "description": "The sub-request submitted with the quota request.",
                        "properties": {
                          "limit": {
                            "description": "The Resource limit.",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "message": {
                            "description": "User friendly status message.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the resource provide by the resource Provider. Please use this name property for quotaRequests.",
                            "properties": {
                              "localizedValue": {
                                "description": "Resource display name.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": {
                                "description": "Resource name.",
                                "readOnly": false,
                                "type": "string"
                              }
                            }
                          },
                          "provisioningState": {
                            "description": "The quota request status.",
                            "enum": [
                              "Accepted",
                              "Invalid",
                              "Succeeded",
                              "Failed",
                              "InProgress"
                            ],
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "QuotaRequestState"
                            }
                          },
                          "resourceType": {
                            "description": "Resource type for which the quota check was made.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "subRequestId": {
                            "description": "Sub request id for individual request.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "unit": {
                            "description": " The units of the limit, such as - Count, Bytes, etc. Use the unit field provided in the Get quota response.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Type of resource. \"Microsoft.Capacity/ServiceLimits\"",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestDetails"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota requests information.",
              "properties": {
                "nextLink": {
                  "description": "The uri to fetch the next page of quota limits. When there are no more pages, this is null.",
                  "type": "string"
                },
                "value": {
                  "description": "The quota Requests.",
                  "items": {
                    "description": "The details of the quota Request.",
                    "properties": {
                      "id": {
                        "description": "The quota request Id.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the quota request.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "The details of quota request.",
                        "properties": {
                          "message": {
                            "description": "User friendly status message.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "provisioningState": {
                            "description": "The quota request status.",
                            "enum": [
                              "Accepted",
                              "Invalid",
                              "Succeeded",
                              "Failed",
                              "InProgress"
                            ],
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "QuotaRequestState"
                            }
                          },
                          "requestSubmitTime": {
                            "description": "The quota request submit time. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "value": {
                            "description": "The quotaRequests.",
                            "items": {
                              "description": "The sub-request submitted with the quota request.",
                              "properties": {
                                "limit": {
                                  "description": "The Resource limit.",
                                  "readOnly": true,
                                  "type": "integer"
                                },
                                "message": {
                                  "description": "User friendly status message.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the resource provide by the resource Provider. Please use this name property for quotaRequests.",
                                  "properties": {
                                    "localizedValue": {
                                      "description": "Resource display name.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Resource name.",
                                      "readOnly": false,
                                      "type": "string"
                                    }
                                  }
                                },
                                "provisioningState": {
                                  "description": "The quota request status.",
                                  "enum": [
                                    "Accepted",
                                    "Invalid",
                                    "Succeeded",
                                    "Failed",
                                    "InProgress"
                                  ],
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "QuotaRequestState"
                                  }
                                },
                                "resourceType": {
                                  "description": "Resource type for which the quota check was made.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "subRequestId": {
                                  "description": "Sub request id for individual request.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "unit": {
                                  "description": " The units of the limit, such as - Count, Bytes, etc. Use the unit field provided in the Get quota response.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Type of resource. \"Microsoft.Capacity/ServiceLimits\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestDetailsList"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota submit request response",
              "properties": {
                "id": {
                  "description": "The quota request Id.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the quota request.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "The details of quota request.",
                  "properties": {
                    "message": {
                      "description": "User friendly status message.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "properties": {
                      "description": "Quota limits.",
                      "properties": {
                        "properties": {
                          "description": "Quota properties for the resource.",
                          "properties": {
                            "currentValue": {
                              "description": "The current resource usages information.",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "limit": {
                              "description": "The quota limit.",
                              "type": "integer"
                            },
                            "name": {
                              "description": "Name of the resource provide by the resource Provider. Please use this name property for quotaRequests.",
                              "properties": {
                                "localizedValue": {
                                  "description": "Resource display name.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Resource name.",
                                  "readOnly": false,
                                  "type": "string"
                                }
                              }
                            },
                            "properties": {
                              "description": "Additional properties for the specific resource provider.",
                              "type": "object"
                            },
                            "quotaPeriod": {
                              "description": "The quota period over which the usage values are summarized, such as - P1D (Per one day), PT1M (Per one minute), PT1S (Per one second). This parameter is optional because, for some resources like compute, the period doesn’t matter.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "resourceType": {
                              "description": "The resource types.",
                              "enum": [
                                "standard",
                                "dedicated",
                                "lowPriority",
                                "shared",
                                "serviceSpecific"
                              ],
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ResourceType"
                              }
                            },
                            "unit": {
                              "description": " The units of the limit, such as - Count, Bytes, etc. Use the unit field provided in the Get quota response.",
                              "readOnly": false,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object",
                      "x-ms-azure-resource": true
                    },
                    "provisioningState": {
                      "description": "The quota request status.",
                      "enum": [
                        "Accepted",
                        "Invalid",
                        "Succeeded",
                        "Failed",
                        "InProgress"
                      ],
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "QuotaRequestState"
                      }
                    },
                    "requestSubmitTime": {
                      "description": "The quota request submit time. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Type of resource. \"Microsoft.Capacity/ServiceLimits\"",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestOneResourceSubmitResponse"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The details of quota request.",
              "properties": {
                "message": {
                  "description": "User friendly status message.",
                  "readOnly": true,
                  "type": "string"
                },
                "provisioningState": {
                  "description": "The quota request status.",
                  "enum": [
                    "Accepted",
                    "Invalid",
                    "Succeeded",
                    "Failed",
                    "InProgress"
                  ],
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "QuotaRequestState"
                  }
                },
                "requestSubmitTime": {
                  "description": "The quota request submit time. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "The quotaRequests.",
                  "items": {
                    "description": "The sub-request submitted with the quota request.",
                    "properties": {
                      "limit": {
                        "description": "The Resource limit.",
                        "readOnly": true,
                        "type": "integer"
                      },
                      "message": {
                        "description": "User friendly status message.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the resource provide by the resource Provider. Please use this name property for quotaRequests.",
                        "properties": {
                          "localizedValue": {
                            "description": "Resource display name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "value": {
                            "description": "Resource name.",
                            "readOnly": false,
                            "type": "string"
                          }
                        }
                      },
                      "provisioningState": {
                        "description": "The quota request status.",
                        "enum": [
                          "Accepted",
                          "Invalid",
                          "Succeeded",
                          "Failed",
                          "InProgress"
                        ],
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "QuotaRequestState"
                        }
                      },
                      "resourceType": {
                        "description": "Resource type for which the quota check was made.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "subRequestId": {
                        "description": "Sub request id for individual request.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "unit": {
                        "description": " The units of the limit, such as - Count, Bytes, etc. Use the unit field provided in the Get quota response.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The quota request status.",
              "enum": [
                "Accepted",
                "Invalid",
                "Succeeded",
                "Failed",
                "InProgress"
              ],
              "x-ms-enum": {
                "modelAsString": true,
                "name": "QuotaRequestState"
              }
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestState"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The quota request status details.",
              "properties": {
                "message": {
                  "description": "A user friendly message.",
                  "readOnly": true,
                  "type": "string"
                },
                "provisioningState": {
                  "description": "The quota request status.",
                  "enum": [
                    "Accepted",
                    "Invalid",
                    "Succeeded",
                    "Failed",
                    "InProgress"
                  ],
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "QuotaRequestState"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestStatusDetails"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota submit request response",
              "properties": {
                "id": {
                  "description": "The quota request Id.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the quota request.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "The details of quota request.",
                  "properties": {
                    "message": {
                      "description": "User friendly status message.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "provisioningState": {
                      "description": "The quota request status.",
                      "enum": [
                        "Accepted",
                        "Invalid",
                        "Succeeded",
                        "Failed",
                        "InProgress"
                      ],
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "QuotaRequestState"
                      }
                    },
                    "requestSubmitTime": {
                      "description": "The quota request submit time. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "value": {
                      "description": "The quotaRequests.",
                      "items": {
                        "description": "The sub-request submitted with the quota request.",
                        "properties": {
                          "limit": {
                            "description": "The Resource limit.",
                            "readOnly": true,
                            "type": "integer"
                          },
                          "message": {
                            "description": "User friendly status message.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the resource provide by the resource Provider. Please use this name property for quotaRequests.",
                            "properties": {
                              "localizedValue": {
                                "description": "Resource display name.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": {
                                "description": "Resource name.",
                                "readOnly": false,
                                "type": "string"
                              }
                            }
                          },
                          "provisioningState": {
                            "description": "The quota request status.",
                            "enum": [
                              "Accepted",
                              "Invalid",
                              "Succeeded",
                              "Failed",
                              "InProgress"
                            ],
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "QuotaRequestState"
                            }
                          },
                          "resourceType": {
                            "description": "Resource type for which the quota check was made.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "subRequestId": {
                            "description": "Sub request id for individual request.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "unit": {
                            "description": " The units of the limit, such as - Count, Bytes, etc. Use the unit field provided in the Get quota response.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Type of resource. \"Microsoft.Capacity/serviceLimits\"",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestSubmitResponse"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The quota request submit response with request id.",
              "properties": {
                "id": {
                  "description": "The quota request id. Please use the requestId to check the request status.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "The operation Id",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "The quota request status details.",
                  "properties": {
                    "message": {
                      "description": "A user friendly message.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "provisioningState": {
                      "description": "The quota request status.",
                      "enum": [
                        "Accepted",
                        "Invalid",
                        "Succeeded",
                        "Failed",
                        "InProgress"
                      ],
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "QuotaRequestState"
                      }
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "The resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/QuotaRequestSubmitResponse201"
          },
          {
            "oldValue": {
              "default": false,
              "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
              "type": "boolean"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Renew"
          },
          {
            "oldValue": {
              "properties": {
                "billingCurrencyTotal": {
                  "description": "Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.",
                  "properties": {
                    "amount": {
                      "type": "number"
                    },
                    "currencyCode": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "pricingCurrencyTotal": {
                  "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry.",
                  "properties": {
                    "amount": {
                      "type": "number"
                    },
                    "currencyCode": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "purchaseProperties": {
                  "properties": {
                    "location": {
                      "description": "The Azure Region where the reserved resource lives.",
                      "type": "string"
                    },
                    "properties": {
                      "properties": {
                        "appliedScopeType": {
                          "description": "Type of the Applied Scope.",
                          "enum": [
                            "Single",
                            "Shared"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "AppliedScopeType"
                          }
                        },
                        "appliedScopes": {
                          "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                          "items": {
                            "maxItems": 1,
                            "minItems": 1,
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "billingPlan": {
                          "description": "Represent the billing plans.",
                          "enum": [
                            "Upfront",
                            "Monthly"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservationBillingPlan"
                          }
                        },
                        "billingScopeId": {
                          "description": "Subscription that will be charged for purchasing Reservation",
                          "type": "string"
                        },
                        "displayName": {
                          "description": "Friendly name of the Reservation",
                          "type": "string"
                        },
                        "instanceFlexibility": {
                          "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                          "enum": [
                            "On",
                            "Off"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "InstanceFlexibility"
                          }
                        },
                        "quantity": {
                          "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "renew": {
                          "default": false,
                          "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                          "type": "boolean"
                        },
                        "reservedResourceProperties": {
                          "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                          "properties": {
                            "instanceFlexibility": {
                              "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                              "enum": [
                                "On",
                                "Off"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "InstanceFlexibility"
                              }
                            }
                          },
                          "type": "object"
                        },
                        "reservedResourceType": {
                          "description": "The type of the resource that is being reserved.",
                          "enum": [
                            "VirtualMachines",
                            "SqlDatabases",
                            "SuseLinux",
                            "CosmosDb",
                            "RedHat",
                            "SqlDataWarehouse",
                            "VMwareCloudSimple",
                            "RedHatOsa",
                            "Databricks",
                            "AppService",
                            "ManagedDisk",
                            "BlockBlob",
                            "RedisCache",
                            "AzureDataExplorer",
                            "MySql",
                            "MariaDb",
                            "PostgreSql",
                            "DedicatedHost",
                            "SapHana",
                            "SqlAzureHybridBenefit"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservedResourceType"
                          }
                        },
                        "term": {
                          "description": "Represent the term of Reservation.",
                          "enum": [
                            "P1Y",
                            "P3Y"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservationTerm"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "sku": {
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RenewPropertiesResponse"
          },
          {
            "oldValue": {
              "description": "Represent the billing plans.",
              "enum": [
                "Upfront",
                "Monthly"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ReservationBillingPlan"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationBillingPlan"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Url to get the next page of reservations.",
                  "type": "string"
                },
                "value": {
                  "items": {
                    "properties": {
                      "etag": {
                        "type": "integer"
                      },
                      "id": {
                        "description": "Identifier of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The Azure Region where the reserved resource lives.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "properties": {
                          "appliedScopeProperties": {
                            "properties": {
                              "displayName": {
                                "description": "Management group display name",
                                "type": "string"
                              },
                              "managementGroupId": {
                                "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                "type": "string"
                              },
                              "tenantId": {
                                "description": "Tenant ID of the applied scope type",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "appliedScopeType": {
                            "description": "Type of the Applied Scope.",
                            "enum": [
                              "Single",
                              "Shared"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "AppliedScopeType"
                            }
                          },
                          "appliedScopes": {
                            "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                            "items": {
                              "maxItems": 1,
                              "minItems": 1,
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "archived": {
                            "description": "Property to determine if a reservation is archived or not",
                            "type": "boolean"
                          },
                          "benefitStartTime": {
                            "description": "This is the DateTime when the reservation benefit started.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "billingPlan": {
                            "description": "Represent the billing plans.",
                            "enum": [
                              "Upfront",
                              "Monthly"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationBillingPlan"
                            }
                          },
                          "billingScopeId": {
                            "description": "Subscription that will be charged for purchasing Reservation",
                            "type": "string"
                          },
                          "capabilities": {
                            "description": "List the Capabilities of a reservation",
                            "type": "string"
                          },
                          "displayName": {
                            "description": "Friendly name for user to easily identify the reservation",
                            "type": "string"
                          },
                          "effectiveDateTime": {
                            "description": "DateTime of the Reservation starting when this version is effective from.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "expiryDate": {
                            "description": "This is the date when the Reservation will expire.",
                            "format": "date",
                            "type": "string"
                          },
                          "extendedStatusInfo": {
                            "properties": {
                              "message": {
                                "description": "The message giving detailed information about the status code.",
                                "type": "string"
                              },
                              "statusCode": {
                                "enum": [
                                  "None",
                                  "Pending",
                                  "Active",
                                  "PurchaseError",
                                  "PaymentInstrumentError",
                                  "Split",
                                  "Merged",
                                  "Expired",
                                  "Succeeded"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationStatusCode"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "instanceFlexibility": {
                            "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                            "enum": [
                              "On",
                              "Off"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "InstanceFlexibility"
                            }
                          },
                          "lastUpdatedDateTime": {
                            "description": "DateTime of the last time the Reservation was updated.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "mergeProperties": {
                            "properties": {
                              "mergeDestination": {
                                "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              },
                              "mergeSources": {
                                "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "provisioningState": {
                            "description": "Current state of the reservation.",
                            "type": "string"
                          },
                          "quantity": {
                            "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "renew": {
                            "default": false,
                            "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                            "type": "boolean"
                          },
                          "renewDestination": {
                            "description": "Reservation Id of the reservation which is purchased because of renew. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                            "type": "string"
                          },
                          "renewProperties": {
                            "properties": {
                              "billingCurrencyTotal": {
                                "description": "Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.",
                                "properties": {
                                  "amount": {
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "pricingCurrencyTotal": {
                                "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry.",
                                "properties": {
                                  "amount": {
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "purchaseProperties": {
                                "properties": {
                                  "location": {
                                    "description": "The Azure Region where the reserved resource lives.",
                                    "type": "string"
                                  },
                                  "properties": {
                                    "properties": {
                                      "appliedScopeType": {
                                        "description": "Type of the Applied Scope.",
                                        "enum": [
                                          "Single",
                                          "Shared"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "AppliedScopeType"
                                        }
                                      },
                                      "appliedScopes": {
                                        "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                        "items": {
                                          "maxItems": 1,
                                          "minItems": 1,
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "billingPlan": {
                                        "description": "Represent the billing plans.",
                                        "enum": [
                                          "Upfront",
                                          "Monthly"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReservationBillingPlan"
                                        }
                                      },
                                      "billingScopeId": {
                                        "description": "Subscription that will be charged for purchasing Reservation",
                                        "type": "string"
                                      },
                                      "displayName": {
                                        "description": "Friendly name of the Reservation",
                                        "type": "string"
                                      },
                                      "instanceFlexibility": {
                                        "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                        "enum": [
                                          "On",
                                          "Off"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "InstanceFlexibility"
                                        }
                                      },
                                      "quantity": {
                                        "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "renew": {
                                        "default": false,
                                        "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                        "type": "boolean"
                                      },
                                      "reservedResourceProperties": {
                                        "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                        "properties": {
                                          "instanceFlexibility": {
                                            "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                            "enum": [
                                              "On",
                                              "Off"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "InstanceFlexibility"
                                            }
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "reservedResourceType": {
                                        "description": "The type of the resource that is being reserved.",
                                        "enum": [
                                          "VirtualMachines",
                                          "SqlDatabases",
                                          "SuseLinux",
                                          "CosmosDb",
                                          "RedHat",
                                          "SqlDataWarehouse",
                                          "VMwareCloudSimple",
                                          "RedHatOsa",
                                          "Databricks",
                                          "AppService",
                                          "ManagedDisk",
                                          "BlockBlob",
                                          "RedisCache",
                                          "AzureDataExplorer",
                                          "MySql",
                                          "MariaDb",
                                          "PostgreSql",
                                          "DedicatedHost",
                                          "SapHana",
                                          "SqlAzureHybridBenefit"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReservedResourceType"
                                        }
                                      },
                                      "term": {
                                        "description": "Represent the term of Reservation.",
                                        "enum": [
                                          "P1Y",
                                          "P3Y"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReservationTerm"
                                        }
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "sku": {
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "renewSource": {
                            "description": "Reservation Id of the reservation from which this reservation is renewed. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                            "type": "string"
                          },
                          "reservedResourceType": {
                            "description": "The type of the resource that is being reserved.",
                            "enum": [
                              "VirtualMachines",
                              "SqlDatabases",
                              "SuseLinux",
                              "CosmosDb",
                              "RedHat",
                              "SqlDataWarehouse",
                              "VMwareCloudSimple",
                              "RedHatOsa",
                              "Databricks",
                              "AppService",
                              "ManagedDisk",
                              "BlockBlob",
                              "RedisCache",
                              "AzureDataExplorer",
                              "MySql",
                              "MariaDb",
                              "PostgreSql",
                              "DedicatedHost",
                              "SapHana",
                              "SqlAzureHybridBenefit"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservedResourceType"
                            }
                          },
                          "skuDescription": {
                            "description": "Description of the SKU in english.",
                            "type": "string"
                          },
                          "splitProperties": {
                            "properties": {
                              "splitDestinations": {
                                "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "splitSource": {
                                "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "swapProperties": {
                            "properties": {
                              "swapDestination": {
                                "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              },
                              "swapSource": {
                                "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "term": {
                            "description": "Represent the term of Reservation.",
                            "enum": [
                              "P1Y",
                              "P3Y"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationTerm"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "sku": {
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationList"
          },
          {
            "oldValue": {
              "properties": {
                "mergeDestination": {
                  "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                },
                "mergeSources": {
                  "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationMergeProperties"
          },
          {
            "oldValue": {
              "description": "Information describing the type of billing plan for this reservation.",
              "properties": {
                "nextPaymentDueDate": {
                  "description": "For recurring billing plans, indicates the date when next payment will be processed. Null when total is paid off.",
                  "format": "date",
                  "type": "string"
                },
                "pricingCurrencyTotal": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "startDate": {
                  "description": "Date when the billing plan has started.",
                  "format": "date",
                  "type": "string"
                },
                "transactions": {
                  "items": {
                    "description": "Information about payment related to a reservation order.",
                    "properties": {
                      "billingAccount": {
                        "description": "Shows the Account that is charged for this payment.",
                        "type": "string"
                      },
                      "billingCurrencyTotal": {
                        "properties": {
                          "amount": {
                            "format": "double",
                            "type": "number"
                          },
                          "currencyCode": {
                            "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "dueDate": {
                        "description": "Date when the payment needs to be done.",
                        "format": "date",
                        "type": "string"
                      },
                      "extendedStatusInfo": {
                        "properties": {
                          "message": {
                            "description": "The message giving detailed information about the status code.",
                            "type": "string"
                          },
                          "statusCode": {
                            "enum": [
                              "None",
                              "Pending",
                              "Active",
                              "PurchaseError",
                              "PaymentInstrumentError",
                              "Split",
                              "Merged",
                              "Expired",
                              "Succeeded"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationStatusCode"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "paymentDate": {
                        "description": "Date when the transaction is completed. Is null when it is scheduled.",
                        "format": "date",
                        "type": "string"
                      },
                      "pricingCurrencyTotal": {
                        "properties": {
                          "amount": {
                            "format": "double",
                            "type": "number"
                          },
                          "currencyCode": {
                            "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "status": {
                        "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
                        "enum": [
                          "Succeeded",
                          "Failed",
                          "Scheduled",
                          "Cancelled"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "PaymentStatus"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationOrderBillingPlanInformation"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Url to get the next page of reservationOrders.",
                  "type": "string"
                },
                "value": {
                  "items": {
                    "properties": {
                      "etag": {
                        "type": "integer"
                      },
                      "id": {
                        "description": "Identifier of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "properties": {
                          "benefitStartTime": {
                            "description": "This is the DateTime when the reservation benefit started.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "billingPlan": {
                            "description": "Represent the billing plans.",
                            "enum": [
                              "Upfront",
                              "Monthly"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationBillingPlan"
                            }
                          },
                          "createdDateTime": {
                            "description": "This is the DateTime when the reservation was created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "displayName": {
                            "description": "Friendly name for user to easily identified the reservation.",
                            "type": "string"
                          },
                          "expiryDate": {
                            "description": "This is the date when the Reservation will expire.",
                            "format": "date",
                            "type": "string"
                          },
                          "originalQuantity": {
                            "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "planInformation": {
                            "description": "Information describing the type of billing plan for this reservation.",
                            "properties": {
                              "nextPaymentDueDate": {
                                "description": "For recurring billing plans, indicates the date when next payment will be processed. Null when total is paid off.",
                                "format": "date",
                                "type": "string"
                              },
                              "pricingCurrencyTotal": {
                                "properties": {
                                  "amount": {
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "startDate": {
                                "description": "Date when the billing plan has started.",
                                "format": "date",
                                "type": "string"
                              },
                              "transactions": {
                                "items": {
                                  "description": "Information about payment related to a reservation order.",
                                  "properties": {
                                    "billingAccount": {
                                      "description": "Shows the Account that is charged for this payment.",
                                      "type": "string"
                                    },
                                    "billingCurrencyTotal": {
                                      "properties": {
                                        "amount": {
                                          "format": "double",
                                          "type": "number"
                                        },
                                        "currencyCode": {
                                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "dueDate": {
                                      "description": "Date when the payment needs to be done.",
                                      "format": "date",
                                      "type": "string"
                                    },
                                    "extendedStatusInfo": {
                                      "properties": {
                                        "message": {
                                          "description": "The message giving detailed information about the status code.",
                                          "type": "string"
                                        },
                                        "statusCode": {
                                          "enum": [
                                            "None",
                                            "Pending",
                                            "Active",
                                            "PurchaseError",
                                            "PaymentInstrumentError",
                                            "Split",
                                            "Merged",
                                            "Expired",
                                            "Succeeded"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "ReservationStatusCode"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "paymentDate": {
                                      "description": "Date when the transaction is completed. Is null when it is scheduled.",
                                      "format": "date",
                                      "type": "string"
                                    },
                                    "pricingCurrencyTotal": {
                                      "properties": {
                                        "amount": {
                                          "format": "double",
                                          "type": "number"
                                        },
                                        "currencyCode": {
                                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "status": {
                                      "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
                                      "enum": [
                                        "Succeeded",
                                        "Failed",
                                        "Scheduled",
                                        "Cancelled"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "PaymentStatus"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "provisioningState": {
                            "description": "Current state of the reservation.",
                            "type": "string"
                          },
                          "requestDateTime": {
                            "description": "This is the DateTime when the reservation was initially requested for purchase.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "reservations": {
                            "items": {
                              "properties": {
                                "etag": {
                                  "type": "integer"
                                },
                                "id": {
                                  "description": "Identifier of the reservation",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "location": {
                                  "description": "The Azure Region where the reserved resource lives.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the reservation",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "properties": {
                                  "properties": {
                                    "appliedScopeProperties": {
                                      "properties": {
                                        "displayName": {
                                          "description": "Management group display name",
                                          "type": "string"
                                        },
                                        "managementGroupId": {
                                          "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                          "type": "string"
                                        },
                                        "tenantId": {
                                          "description": "Tenant ID of the applied scope type",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "appliedScopeType": {
                                      "description": "Type of the Applied Scope.",
                                      "enum": [
                                        "Single",
                                        "Shared"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "AppliedScopeType"
                                      }
                                    },
                                    "appliedScopes": {
                                      "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                      "items": {
                                        "maxItems": 1,
                                        "minItems": 1,
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "archived": {
                                      "description": "Property to determine if a reservation is archived or not",
                                      "type": "boolean"
                                    },
                                    "benefitStartTime": {
                                      "description": "This is the DateTime when the reservation benefit started.",
                                      "format": "date-time",
                                      "type": "string"
                                    },
                                    "billingPlan": {
                                      "description": "Represent the billing plans.",
                                      "enum": [
                                        "Upfront",
                                        "Monthly"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ReservationBillingPlan"
                                      }
                                    },
                                    "billingScopeId": {
                                      "description": "Subscription that will be charged for purchasing Reservation",
                                      "type": "string"
                                    },
                                    "capabilities": {
                                      "description": "List the Capabilities of a reservation",
                                      "type": "string"
                                    },
                                    "displayName": {
                                      "description": "Friendly name for user to easily identify the reservation",
                                      "type": "string"
                                    },
                                    "effectiveDateTime": {
                                      "description": "DateTime of the Reservation starting when this version is effective from.",
                                      "format": "date-time",
                                      "type": "string"
                                    },
                                    "expiryDate": {
                                      "description": "This is the date when the Reservation will expire.",
                                      "format": "date",
                                      "type": "string"
                                    },
                                    "extendedStatusInfo": {
                                      "properties": {
                                        "message": {
                                          "description": "The message giving detailed information about the status code.",
                                          "type": "string"
                                        },
                                        "statusCode": {
                                          "enum": [
                                            "None",
                                            "Pending",
                                            "Active",
                                            "PurchaseError",
                                            "PaymentInstrumentError",
                                            "Split",
                                            "Merged",
                                            "Expired",
                                            "Succeeded"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "ReservationStatusCode"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "instanceFlexibility": {
                                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                      "enum": [
                                        "On",
                                        "Off"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "InstanceFlexibility"
                                      }
                                    },
                                    "lastUpdatedDateTime": {
                                      "description": "DateTime of the last time the Reservation was updated.",
                                      "format": "date-time",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "mergeProperties": {
                                      "properties": {
                                        "mergeDestination": {
                                          "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "type": "string"
                                        },
                                        "mergeSources": {
                                          "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "provisioningState": {
                                      "description": "Current state of the reservation.",
                                      "type": "string"
                                    },
                                    "quantity": {
                                      "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "renew": {
                                      "default": false,
                                      "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                      "type": "boolean"
                                    },
                                    "renewDestination": {
                                      "description": "Reservation Id of the reservation which is purchased because of renew. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                                      "type": "string"
                                    },
                                    "renewProperties": {
                                      "properties": {
                                        "billingCurrencyTotal": {
                                          "description": "Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.",
                                          "properties": {
                                            "amount": {
                                              "type": "number"
                                            },
                                            "currencyCode": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "pricingCurrencyTotal": {
                                          "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry.",
                                          "properties": {
                                            "amount": {
                                              "type": "number"
                                            },
                                            "currencyCode": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "purchaseProperties": {
                                          "properties": {
                                            "location": {
                                              "description": "The Azure Region where the reserved resource lives.",
                                              "type": "string"
                                            },
                                            "properties": {
                                              "properties": {
                                                "appliedScopeType": {
                                                  "description": "Type of the Applied Scope.",
                                                  "enum": [
                                                    "Single",
                                                    "Shared"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "AppliedScopeType"
                                                  }
                                                },
                                                "appliedScopes": {
                                                  "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                                  "items": {
                                                    "maxItems": 1,
                                                    "minItems": 1,
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "billingPlan": {
                                                  "description": "Represent the billing plans.",
                                                  "enum": [
                                                    "Upfront",
                                                    "Monthly"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "ReservationBillingPlan"
                                                  }
                                                },
                                                "billingScopeId": {
                                                  "description": "Subscription that will be charged for purchasing Reservation",
                                                  "type": "string"
                                                },
                                                "displayName": {
                                                  "description": "Friendly name of the Reservation",
                                                  "type": "string"
                                                },
                                                "instanceFlexibility": {
                                                  "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                                  "enum": [
                                                    "On",
                                                    "Off"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "InstanceFlexibility"
                                                  }
                                                },
                                                "quantity": {
                                                  "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "renew": {
                                                  "default": false,
                                                  "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                                  "type": "boolean"
                                                },
                                                "reservedResourceProperties": {
                                                  "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                                  "properties": {
                                                    "instanceFlexibility": {
                                                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                                      "enum": [
                                                        "On",
                                                        "Off"
                                                      ],
                                                      "type": "string",
                                                      "x-ms-enum": {
                                                        "modelAsString": true,
                                                        "name": "InstanceFlexibility"
                                                      }
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "reservedResourceType": {
                                                  "description": "The type of the resource that is being reserved.",
                                                  "enum": [
                                                    "VirtualMachines",
                                                    "SqlDatabases",
                                                    "SuseLinux",
                                                    "CosmosDb",
                                                    "RedHat",
                                                    "SqlDataWarehouse",
                                                    "VMwareCloudSimple",
                                                    "RedHatOsa",
                                                    "Databricks",
                                                    "AppService",
                                                    "ManagedDisk",
                                                    "BlockBlob",
                                                    "RedisCache",
                                                    "AzureDataExplorer",
                                                    "MySql",
                                                    "MariaDb",
                                                    "PostgreSql",
                                                    "DedicatedHost",
                                                    "SapHana",
                                                    "SqlAzureHybridBenefit"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "ReservedResourceType"
                                                  }
                                                },
                                                "term": {
                                                  "description": "Represent the term of Reservation.",
                                                  "enum": [
                                                    "P1Y",
                                                    "P3Y"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "ReservationTerm"
                                                  }
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "sku": {
                                              "properties": {
                                                "name": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "renewSource": {
                                      "description": "Reservation Id of the reservation from which this reservation is renewed. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                                      "type": "string"
                                    },
                                    "reservedResourceType": {
                                      "description": "The type of the resource that is being reserved.",
                                      "enum": [
                                        "VirtualMachines",
                                        "SqlDatabases",
                                        "SuseLinux",
                                        "CosmosDb",
                                        "RedHat",
                                        "SqlDataWarehouse",
                                        "VMwareCloudSimple",
                                        "RedHatOsa",
                                        "Databricks",
                                        "AppService",
                                        "ManagedDisk",
                                        "BlockBlob",
                                        "RedisCache",
                                        "AzureDataExplorer",
                                        "MySql",
                                        "MariaDb",
                                        "PostgreSql",
                                        "DedicatedHost",
                                        "SapHana",
                                        "SqlAzureHybridBenefit"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ReservedResourceType"
                                      }
                                    },
                                    "skuDescription": {
                                      "description": "Description of the SKU in english.",
                                      "type": "string"
                                    },
                                    "splitProperties": {
                                      "properties": {
                                        "splitDestinations": {
                                          "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "splitSource": {
                                          "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "swapProperties": {
                                      "properties": {
                                        "swapDestination": {
                                          "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "type": "string"
                                        },
                                        "swapSource": {
                                          "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "term": {
                                      "description": "Represent the term of Reservation.",
                                      "enum": [
                                        "P1Y",
                                        "P3Y"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ReservationTerm"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "sku": {
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": {
                                  "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "x-ms-azure-resource": true
                            },
                            "type": "array"
                          },
                          "term": {
                            "description": "Represent the term of Reservation.",
                            "enum": [
                              "P1Y",
                              "P3Y"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationTerm"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Type of resource. \"Microsoft.Capacity/reservations\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationOrderList"
          },
          {
            "oldValue": {
              "properties": {
                "benefitStartTime": {
                  "description": "This is the DateTime when the reservation benefit started.",
                  "format": "date-time",
                  "type": "string"
                },
                "billingPlan": {
                  "description": "Represent the billing plans.",
                  "enum": [
                    "Upfront",
                    "Monthly"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationBillingPlan"
                  }
                },
                "createdDateTime": {
                  "description": "This is the DateTime when the reservation was created.",
                  "format": "date-time",
                  "type": "string"
                },
                "displayName": {
                  "description": "Friendly name for user to easily identified the reservation.",
                  "type": "string"
                },
                "expiryDate": {
                  "description": "This is the date when the Reservation will expire.",
                  "format": "date",
                  "type": "string"
                },
                "originalQuantity": {
                  "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                  "format": "int32",
                  "type": "integer"
                },
                "planInformation": {
                  "description": "Information describing the type of billing plan for this reservation.",
                  "properties": {
                    "nextPaymentDueDate": {
                      "description": "For recurring billing plans, indicates the date when next payment will be processed. Null when total is paid off.",
                      "format": "date",
                      "type": "string"
                    },
                    "pricingCurrencyTotal": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "startDate": {
                      "description": "Date when the billing plan has started.",
                      "format": "date",
                      "type": "string"
                    },
                    "transactions": {
                      "items": {
                        "description": "Information about payment related to a reservation order.",
                        "properties": {
                          "billingAccount": {
                            "description": "Shows the Account that is charged for this payment.",
                            "type": "string"
                          },
                          "billingCurrencyTotal": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "dueDate": {
                            "description": "Date when the payment needs to be done.",
                            "format": "date",
                            "type": "string"
                          },
                          "extendedStatusInfo": {
                            "properties": {
                              "message": {
                                "description": "The message giving detailed information about the status code.",
                                "type": "string"
                              },
                              "statusCode": {
                                "enum": [
                                  "None",
                                  "Pending",
                                  "Active",
                                  "PurchaseError",
                                  "PaymentInstrumentError",
                                  "Split",
                                  "Merged",
                                  "Expired",
                                  "Succeeded"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationStatusCode"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "paymentDate": {
                            "description": "Date when the transaction is completed. Is null when it is scheduled.",
                            "format": "date",
                            "type": "string"
                          },
                          "pricingCurrencyTotal": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "status": {
                            "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Scheduled",
                              "Cancelled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "PaymentStatus"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "provisioningState": {
                  "description": "Current state of the reservation.",
                  "type": "string"
                },
                "requestDateTime": {
                  "description": "This is the DateTime when the reservation was initially requested for purchase.",
                  "format": "date-time",
                  "type": "string"
                },
                "reservations": {
                  "items": {
                    "properties": {
                      "etag": {
                        "type": "integer"
                      },
                      "id": {
                        "description": "Identifier of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "The Azure Region where the reserved resource lives.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "properties": {
                          "appliedScopeProperties": {
                            "properties": {
                              "displayName": {
                                "description": "Management group display name",
                                "type": "string"
                              },
                              "managementGroupId": {
                                "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                "type": "string"
                              },
                              "tenantId": {
                                "description": "Tenant ID of the applied scope type",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "appliedScopeType": {
                            "description": "Type of the Applied Scope.",
                            "enum": [
                              "Single",
                              "Shared"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "AppliedScopeType"
                            }
                          },
                          "appliedScopes": {
                            "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                            "items": {
                              "maxItems": 1,
                              "minItems": 1,
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "archived": {
                            "description": "Property to determine if a reservation is archived or not",
                            "type": "boolean"
                          },
                          "benefitStartTime": {
                            "description": "This is the DateTime when the reservation benefit started.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "billingPlan": {
                            "description": "Represent the billing plans.",
                            "enum": [
                              "Upfront",
                              "Monthly"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationBillingPlan"
                            }
                          },
                          "billingScopeId": {
                            "description": "Subscription that will be charged for purchasing Reservation",
                            "type": "string"
                          },
                          "capabilities": {
                            "description": "List the Capabilities of a reservation",
                            "type": "string"
                          },
                          "displayName": {
                            "description": "Friendly name for user to easily identify the reservation",
                            "type": "string"
                          },
                          "effectiveDateTime": {
                            "description": "DateTime of the Reservation starting when this version is effective from.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "expiryDate": {
                            "description": "This is the date when the Reservation will expire.",
                            "format": "date",
                            "type": "string"
                          },
                          "extendedStatusInfo": {
                            "properties": {
                              "message": {
                                "description": "The message giving detailed information about the status code.",
                                "type": "string"
                              },
                              "statusCode": {
                                "enum": [
                                  "None",
                                  "Pending",
                                  "Active",
                                  "PurchaseError",
                                  "PaymentInstrumentError",
                                  "Split",
                                  "Merged",
                                  "Expired",
                                  "Succeeded"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationStatusCode"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "instanceFlexibility": {
                            "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                            "enum": [
                              "On",
                              "Off"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "InstanceFlexibility"
                            }
                          },
                          "lastUpdatedDateTime": {
                            "description": "DateTime of the last time the Reservation was updated.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "mergeProperties": {
                            "properties": {
                              "mergeDestination": {
                                "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              },
                              "mergeSources": {
                                "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "provisioningState": {
                            "description": "Current state of the reservation.",
                            "type": "string"
                          },
                          "quantity": {
                            "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "renew": {
                            "default": false,
                            "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                            "type": "boolean"
                          },
                          "renewDestination": {
                            "description": "Reservation Id of the reservation which is purchased because of renew. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                            "type": "string"
                          },
                          "renewProperties": {
                            "properties": {
                              "billingCurrencyTotal": {
                                "description": "Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.",
                                "properties": {
                                  "amount": {
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "pricingCurrencyTotal": {
                                "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry.",
                                "properties": {
                                  "amount": {
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "purchaseProperties": {
                                "properties": {
                                  "location": {
                                    "description": "The Azure Region where the reserved resource lives.",
                                    "type": "string"
                                  },
                                  "properties": {
                                    "properties": {
                                      "appliedScopeType": {
                                        "description": "Type of the Applied Scope.",
                                        "enum": [
                                          "Single",
                                          "Shared"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "AppliedScopeType"
                                        }
                                      },
                                      "appliedScopes": {
                                        "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                        "items": {
                                          "maxItems": 1,
                                          "minItems": 1,
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "billingPlan": {
                                        "description": "Represent the billing plans.",
                                        "enum": [
                                          "Upfront",
                                          "Monthly"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReservationBillingPlan"
                                        }
                                      },
                                      "billingScopeId": {
                                        "description": "Subscription that will be charged for purchasing Reservation",
                                        "type": "string"
                                      },
                                      "displayName": {
                                        "description": "Friendly name of the Reservation",
                                        "type": "string"
                                      },
                                      "instanceFlexibility": {
                                        "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                        "enum": [
                                          "On",
                                          "Off"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "InstanceFlexibility"
                                        }
                                      },
                                      "quantity": {
                                        "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "renew": {
                                        "default": false,
                                        "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                        "type": "boolean"
                                      },
                                      "reservedResourceProperties": {
                                        "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                        "properties": {
                                          "instanceFlexibility": {
                                            "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                            "enum": [
                                              "On",
                                              "Off"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "InstanceFlexibility"
                                            }
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "reservedResourceType": {
                                        "description": "The type of the resource that is being reserved.",
                                        "enum": [
                                          "VirtualMachines",
                                          "SqlDatabases",
                                          "SuseLinux",
                                          "CosmosDb",
                                          "RedHat",
                                          "SqlDataWarehouse",
                                          "VMwareCloudSimple",
                                          "RedHatOsa",
                                          "Databricks",
                                          "AppService",
                                          "ManagedDisk",
                                          "BlockBlob",
                                          "RedisCache",
                                          "AzureDataExplorer",
                                          "MySql",
                                          "MariaDb",
                                          "PostgreSql",
                                          "DedicatedHost",
                                          "SapHana",
                                          "SqlAzureHybridBenefit"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReservedResourceType"
                                        }
                                      },
                                      "term": {
                                        "description": "Represent the term of Reservation.",
                                        "enum": [
                                          "P1Y",
                                          "P3Y"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReservationTerm"
                                        }
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "sku": {
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "renewSource": {
                            "description": "Reservation Id of the reservation from which this reservation is renewed. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                            "type": "string"
                          },
                          "reservedResourceType": {
                            "description": "The type of the resource that is being reserved.",
                            "enum": [
                              "VirtualMachines",
                              "SqlDatabases",
                              "SuseLinux",
                              "CosmosDb",
                              "RedHat",
                              "SqlDataWarehouse",
                              "VMwareCloudSimple",
                              "RedHatOsa",
                              "Databricks",
                              "AppService",
                              "ManagedDisk",
                              "BlockBlob",
                              "RedisCache",
                              "AzureDataExplorer",
                              "MySql",
                              "MariaDb",
                              "PostgreSql",
                              "DedicatedHost",
                              "SapHana",
                              "SqlAzureHybridBenefit"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservedResourceType"
                            }
                          },
                          "skuDescription": {
                            "description": "Description of the SKU in english.",
                            "type": "string"
                          },
                          "splitProperties": {
                            "properties": {
                              "splitDestinations": {
                                "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "splitSource": {
                                "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "swapProperties": {
                            "properties": {
                              "swapDestination": {
                                "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              },
                              "swapSource": {
                                "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "term": {
                            "description": "Represent the term of Reservation.",
                            "enum": [
                              "P1Y",
                              "P3Y"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationTerm"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "sku": {
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                },
                "term": {
                  "description": "Represent the term of Reservation.",
                  "enum": [
                    "P1Y",
                    "P3Y"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationTerm"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationOrderProperties"
          },
          {
            "oldValue": {
              "properties": {
                "etag": {
                  "type": "integer"
                },
                "id": {
                  "description": "Identifier of the reservation",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "Name of the reservation",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "benefitStartTime": {
                      "description": "This is the DateTime when the reservation benefit started.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "billingPlan": {
                      "description": "Represent the billing plans.",
                      "enum": [
                        "Upfront",
                        "Monthly"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationBillingPlan"
                      }
                    },
                    "createdDateTime": {
                      "description": "This is the DateTime when the reservation was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "Friendly name for user to easily identified the reservation.",
                      "type": "string"
                    },
                    "expiryDate": {
                      "description": "This is the date when the Reservation will expire.",
                      "format": "date",
                      "type": "string"
                    },
                    "originalQuantity": {
                      "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "planInformation": {
                      "description": "Information describing the type of billing plan for this reservation.",
                      "properties": {
                        "nextPaymentDueDate": {
                          "description": "For recurring billing plans, indicates the date when next payment will be processed. Null when total is paid off.",
                          "format": "date",
                          "type": "string"
                        },
                        "pricingCurrencyTotal": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "startDate": {
                          "description": "Date when the billing plan has started.",
                          "format": "date",
                          "type": "string"
                        },
                        "transactions": {
                          "items": {
                            "description": "Information about payment related to a reservation order.",
                            "properties": {
                              "billingAccount": {
                                "description": "Shows the Account that is charged for this payment.",
                                "type": "string"
                              },
                              "billingCurrencyTotal": {
                                "properties": {
                                  "amount": {
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "dueDate": {
                                "description": "Date when the payment needs to be done.",
                                "format": "date",
                                "type": "string"
                              },
                              "extendedStatusInfo": {
                                "properties": {
                                  "message": {
                                    "description": "The message giving detailed information about the status code.",
                                    "type": "string"
                                  },
                                  "statusCode": {
                                    "enum": [
                                      "None",
                                      "Pending",
                                      "Active",
                                      "PurchaseError",
                                      "PaymentInstrumentError",
                                      "Split",
                                      "Merged",
                                      "Expired",
                                      "Succeeded"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservationStatusCode"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "paymentDate": {
                                "description": "Date when the transaction is completed. Is null when it is scheduled.",
                                "format": "date",
                                "type": "string"
                              },
                              "pricingCurrencyTotal": {
                                "properties": {
                                  "amount": {
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "status": {
                                "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
                                "enum": [
                                  "Succeeded",
                                  "Failed",
                                  "Scheduled",
                                  "Cancelled"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "PaymentStatus"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "provisioningState": {
                      "description": "Current state of the reservation.",
                      "type": "string"
                    },
                    "requestDateTime": {
                      "description": "This is the DateTime when the reservation was initially requested for purchase.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "reservations": {
                      "items": {
                        "properties": {
                          "etag": {
                            "type": "integer"
                          },
                          "id": {
                            "description": "Identifier of the reservation",
                            "readOnly": true,
                            "type": "string"
                          },
                          "location": {
                            "description": "The Azure Region where the reserved resource lives.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the reservation",
                            "readOnly": true,
                            "type": "string"
                          },
                          "properties": {
                            "properties": {
                              "appliedScopeProperties": {
                                "properties": {
                                  "displayName": {
                                    "description": "Management group display name",
                                    "type": "string"
                                  },
                                  "managementGroupId": {
                                    "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "Tenant ID of the applied scope type",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "appliedScopeType": {
                                "description": "Type of the Applied Scope.",
                                "enum": [
                                  "Single",
                                  "Shared"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "AppliedScopeType"
                                }
                              },
                              "appliedScopes": {
                                "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                "items": {
                                  "maxItems": 1,
                                  "minItems": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "archived": {
                                "description": "Property to determine if a reservation is archived or not",
                                "type": "boolean"
                              },
                              "benefitStartTime": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "billingPlan": {
                                "description": "Represent the billing plans.",
                                "enum": [
                                  "Upfront",
                                  "Monthly"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationBillingPlan"
                                }
                              },
                              "billingScopeId": {
                                "description": "Subscription that will be charged for purchasing Reservation",
                                "type": "string"
                              },
                              "capabilities": {
                                "description": "List the Capabilities of a reservation",
                                "type": "string"
                              },
                              "displayName": {
                                "description": "Friendly name for user to easily identify the reservation",
                                "type": "string"
                              },
                              "effectiveDateTime": {
                                "description": "DateTime of the Reservation starting when this version is effective from.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "expiryDate": {
                                "description": "This is the date when the Reservation will expire.",
                                "format": "date",
                                "type": "string"
                              },
                              "extendedStatusInfo": {
                                "properties": {
                                  "message": {
                                    "description": "The message giving detailed information about the status code.",
                                    "type": "string"
                                  },
                                  "statusCode": {
                                    "enum": [
                                      "None",
                                      "Pending",
                                      "Active",
                                      "PurchaseError",
                                      "PaymentInstrumentError",
                                      "Split",
                                      "Merged",
                                      "Expired",
                                      "Succeeded"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservationStatusCode"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "instanceFlexibility": {
                                "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                "enum": [
                                  "On",
                                  "Off"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "InstanceFlexibility"
                                }
                              },
                              "lastUpdatedDateTime": {
                                "description": "DateTime of the last time the Reservation was updated.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "mergeProperties": {
                                "properties": {
                                  "mergeDestination": {
                                    "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "mergeSources": {
                                    "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              },
                              "provisioningState": {
                                "description": "Current state of the reservation.",
                                "type": "string"
                              },
                              "quantity": {
                                "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "renew": {
                                "default": false,
                                "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                "type": "boolean"
                              },
                              "renewDestination": {
                                "description": "Reservation Id of the reservation which is purchased because of renew. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                                "type": "string"
                              },
                              "renewProperties": {
                                "properties": {
                                  "billingCurrencyTotal": {
                                    "description": "Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.",
                                    "properties": {
                                      "amount": {
                                        "type": "number"
                                      },
                                      "currencyCode": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "pricingCurrencyTotal": {
                                    "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry.",
                                    "properties": {
                                      "amount": {
                                        "type": "number"
                                      },
                                      "currencyCode": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "purchaseProperties": {
                                    "properties": {
                                      "location": {
                                        "description": "The Azure Region where the reserved resource lives.",
                                        "type": "string"
                                      },
                                      "properties": {
                                        "properties": {
                                          "appliedScopeType": {
                                            "description": "Type of the Applied Scope.",
                                            "enum": [
                                              "Single",
                                              "Shared"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "AppliedScopeType"
                                            }
                                          },
                                          "appliedScopes": {
                                            "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                            "items": {
                                              "maxItems": 1,
                                              "minItems": 1,
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "billingPlan": {
                                            "description": "Represent the billing plans.",
                                            "enum": [
                                              "Upfront",
                                              "Monthly"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "ReservationBillingPlan"
                                            }
                                          },
                                          "billingScopeId": {
                                            "description": "Subscription that will be charged for purchasing Reservation",
                                            "type": "string"
                                          },
                                          "displayName": {
                                            "description": "Friendly name of the Reservation",
                                            "type": "string"
                                          },
                                          "instanceFlexibility": {
                                            "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                            "enum": [
                                              "On",
                                              "Off"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "InstanceFlexibility"
                                            }
                                          },
                                          "quantity": {
                                            "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "renew": {
                                            "default": false,
                                            "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                            "type": "boolean"
                                          },
                                          "reservedResourceProperties": {
                                            "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                            "properties": {
                                              "instanceFlexibility": {
                                                "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                                "enum": [
                                                  "On",
                                                  "Off"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": true,
                                                  "name": "InstanceFlexibility"
                                                }
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "reservedResourceType": {
                                            "description": "The type of the resource that is being reserved.",
                                            "enum": [
                                              "VirtualMachines",
                                              "SqlDatabases",
                                              "SuseLinux",
                                              "CosmosDb",
                                              "RedHat",
                                              "SqlDataWarehouse",
                                              "VMwareCloudSimple",
                                              "RedHatOsa",
                                              "Databricks",
                                              "AppService",
                                              "ManagedDisk",
                                              "BlockBlob",
                                              "RedisCache",
                                              "AzureDataExplorer",
                                              "MySql",
                                              "MariaDb",
                                              "PostgreSql",
                                              "DedicatedHost",
                                              "SapHana",
                                              "SqlAzureHybridBenefit"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "ReservedResourceType"
                                            }
                                          },
                                          "term": {
                                            "description": "Represent the term of Reservation.",
                                            "enum": [
                                              "P1Y",
                                              "P3Y"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "ReservationTerm"
                                            }
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "sku": {
                                        "properties": {
                                          "name": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "renewSource": {
                                "description": "Reservation Id of the reservation from which this reservation is renewed. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                                "type": "string"
                              },
                              "reservedResourceType": {
                                "description": "The type of the resource that is being reserved.",
                                "enum": [
                                  "VirtualMachines",
                                  "SqlDatabases",
                                  "SuseLinux",
                                  "CosmosDb",
                                  "RedHat",
                                  "SqlDataWarehouse",
                                  "VMwareCloudSimple",
                                  "RedHatOsa",
                                  "Databricks",
                                  "AppService",
                                  "ManagedDisk",
                                  "BlockBlob",
                                  "RedisCache",
                                  "AzureDataExplorer",
                                  "MySql",
                                  "MariaDb",
                                  "PostgreSql",
                                  "DedicatedHost",
                                  "SapHana",
                                  "SqlAzureHybridBenefit"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservedResourceType"
                                }
                              },
                              "skuDescription": {
                                "description": "Description of the SKU in english.",
                                "type": "string"
                              },
                              "splitProperties": {
                                "properties": {
                                  "splitDestinations": {
                                    "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "splitSource": {
                                    "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "swapProperties": {
                                "properties": {
                                  "swapDestination": {
                                    "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "swapSource": {
                                    "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "term": {
                                "description": "Represent the term of Reservation.",
                                "enum": [
                                  "P1Y",
                                  "P3Y"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationTerm"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "sku": {
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "x-ms-azure-resource": true
                      },
                      "type": "array"
                    },
                    "term": {
                      "description": "Represent the term of Reservation.",
                      "enum": [
                        "P1Y",
                        "P3Y"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationTerm"
                      }
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Type of resource. \"Microsoft.Capacity/reservations\"",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationOrderResponse"
          },
          {
            "oldValue": {
              "properties": {
                "appliedScopeProperties": {
                  "properties": {
                    "displayName": {
                      "description": "Management group display name",
                      "type": "string"
                    },
                    "managementGroupId": {
                      "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                      "type": "string"
                    },
                    "tenantId": {
                      "description": "Tenant ID of the applied scope type",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "appliedScopeType": {
                  "description": "Type of the Applied Scope.",
                  "enum": [
                    "Single",
                    "Shared"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "AppliedScopeType"
                  }
                },
                "appliedScopes": {
                  "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                  "items": {
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "archived": {
                  "description": "Property to determine if a reservation is archived or not",
                  "type": "boolean"
                },
                "benefitStartTime": {
                  "description": "This is the DateTime when the reservation benefit started.",
                  "format": "date-time",
                  "type": "string"
                },
                "billingPlan": {
                  "description": "Represent the billing plans.",
                  "enum": [
                    "Upfront",
                    "Monthly"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationBillingPlan"
                  }
                },
                "billingScopeId": {
                  "description": "Subscription that will be charged for purchasing Reservation",
                  "type": "string"
                },
                "capabilities": {
                  "description": "List the Capabilities of a reservation",
                  "type": "string"
                },
                "displayName": {
                  "description": "Friendly name for user to easily identify the reservation",
                  "type": "string"
                },
                "effectiveDateTime": {
                  "description": "DateTime of the Reservation starting when this version is effective from.",
                  "format": "date-time",
                  "type": "string"
                },
                "expiryDate": {
                  "description": "This is the date when the Reservation will expire.",
                  "format": "date",
                  "type": "string"
                },
                "extendedStatusInfo": {
                  "properties": {
                    "message": {
                      "description": "The message giving detailed information about the status code.",
                      "type": "string"
                    },
                    "statusCode": {
                      "enum": [
                        "None",
                        "Pending",
                        "Active",
                        "PurchaseError",
                        "PaymentInstrumentError",
                        "Split",
                        "Merged",
                        "Expired",
                        "Succeeded"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationStatusCode"
                      }
                    }
                  },
                  "type": "object"
                },
                "instanceFlexibility": {
                  "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                  "enum": [
                    "On",
                    "Off"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "InstanceFlexibility"
                  }
                },
                "lastUpdatedDateTime": {
                  "description": "DateTime of the last time the Reservation was updated.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "mergeProperties": {
                  "properties": {
                    "mergeDestination": {
                      "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "type": "string"
                    },
                    "mergeSources": {
                      "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "provisioningState": {
                  "description": "Current state of the reservation.",
                  "type": "string"
                },
                "quantity": {
                  "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                  "format": "int32",
                  "type": "integer"
                },
                "renew": {
                  "default": false,
                  "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                  "type": "boolean"
                },
                "renewDestination": {
                  "description": "Reservation Id of the reservation which is purchased because of renew. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                  "type": "string"
                },
                "renewProperties": {
                  "properties": {
                    "billingCurrencyTotal": {
                      "description": "Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.",
                      "properties": {
                        "amount": {
                          "type": "number"
                        },
                        "currencyCode": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "pricingCurrencyTotal": {
                      "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry.",
                      "properties": {
                        "amount": {
                          "type": "number"
                        },
                        "currencyCode": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "purchaseProperties": {
                      "properties": {
                        "location": {
                          "description": "The Azure Region where the reserved resource lives.",
                          "type": "string"
                        },
                        "properties": {
                          "properties": {
                            "appliedScopeType": {
                              "description": "Type of the Applied Scope.",
                              "enum": [
                                "Single",
                                "Shared"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "AppliedScopeType"
                              }
                            },
                            "appliedScopes": {
                              "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                              "items": {
                                "maxItems": 1,
                                "minItems": 1,
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "billingPlan": {
                              "description": "Represent the billing plans.",
                              "enum": [
                                "Upfront",
                                "Monthly"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ReservationBillingPlan"
                              }
                            },
                            "billingScopeId": {
                              "description": "Subscription that will be charged for purchasing Reservation",
                              "type": "string"
                            },
                            "displayName": {
                              "description": "Friendly name of the Reservation",
                              "type": "string"
                            },
                            "instanceFlexibility": {
                              "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                              "enum": [
                                "On",
                                "Off"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "InstanceFlexibility"
                              }
                            },
                            "quantity": {
                              "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "renew": {
                              "default": false,
                              "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                              "type": "boolean"
                            },
                            "reservedResourceProperties": {
                              "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                              "properties": {
                                "instanceFlexibility": {
                                  "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                  "enum": [
                                    "On",
                                    "Off"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "InstanceFlexibility"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "reservedResourceType": {
                              "description": "The type of the resource that is being reserved.",
                              "enum": [
                                "VirtualMachines",
                                "SqlDatabases",
                                "SuseLinux",
                                "CosmosDb",
                                "RedHat",
                                "SqlDataWarehouse",
                                "VMwareCloudSimple",
                                "RedHatOsa",
                                "Databricks",
                                "AppService",
                                "ManagedDisk",
                                "BlockBlob",
                                "RedisCache",
                                "AzureDataExplorer",
                                "MySql",
                                "MariaDb",
                                "PostgreSql",
                                "DedicatedHost",
                                "SapHana",
                                "SqlAzureHybridBenefit"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ReservedResourceType"
                              }
                            },
                            "term": {
                              "description": "Represent the term of Reservation.",
                              "enum": [
                                "P1Y",
                                "P3Y"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ReservationTerm"
                              }
                            }
                          },
                          "type": "object"
                        },
                        "sku": {
                          "properties": {
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "renewSource": {
                  "description": "Reservation Id of the reservation from which this reservation is renewed. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                  "type": "string"
                },
                "reservedResourceType": {
                  "description": "The type of the resource that is being reserved.",
                  "enum": [
                    "VirtualMachines",
                    "SqlDatabases",
                    "SuseLinux",
                    "CosmosDb",
                    "RedHat",
                    "SqlDataWarehouse",
                    "VMwareCloudSimple",
                    "RedHatOsa",
                    "Databricks",
                    "AppService",
                    "ManagedDisk",
                    "BlockBlob",
                    "RedisCache",
                    "AzureDataExplorer",
                    "MySql",
                    "MariaDb",
                    "PostgreSql",
                    "DedicatedHost",
                    "SapHana",
                    "SqlAzureHybridBenefit"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservedResourceType"
                  }
                },
                "skuDescription": {
                  "description": "Description of the SKU in english.",
                  "type": "string"
                },
                "splitProperties": {
                  "properties": {
                    "splitDestinations": {
                      "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "splitSource": {
                      "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "swapProperties": {
                  "properties": {
                    "swapDestination": {
                      "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "type": "string"
                    },
                    "swapSource": {
                      "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "term": {
                  "description": "Represent the term of Reservation.",
                  "enum": [
                    "P1Y",
                    "P3Y"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationTerm"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationProperties"
          },
          {
            "oldValue": {
              "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
              "format": "int32",
              "type": "integer"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationQuantity"
          },
          {
            "oldValue": {
              "properties": {
                "etag": {
                  "type": "integer"
                },
                "id": {
                  "description": "Identifier of the reservation",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "The Azure Region where the reserved resource lives.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "Name of the reservation",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "appliedScopeProperties": {
                      "properties": {
                        "displayName": {
                          "description": "Management group display name",
                          "type": "string"
                        },
                        "managementGroupId": {
                          "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                          "type": "string"
                        },
                        "tenantId": {
                          "description": "Tenant ID of the applied scope type",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "appliedScopeType": {
                      "description": "Type of the Applied Scope.",
                      "enum": [
                        "Single",
                        "Shared"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "AppliedScopeType"
                      }
                    },
                    "appliedScopes": {
                      "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                      "items": {
                        "maxItems": 1,
                        "minItems": 1,
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "archived": {
                      "description": "Property to determine if a reservation is archived or not",
                      "type": "boolean"
                    },
                    "benefitStartTime": {
                      "description": "This is the DateTime when the reservation benefit started.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "billingPlan": {
                      "description": "Represent the billing plans.",
                      "enum": [
                        "Upfront",
                        "Monthly"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationBillingPlan"
                      }
                    },
                    "billingScopeId": {
                      "description": "Subscription that will be charged for purchasing Reservation",
                      "type": "string"
                    },
                    "capabilities": {
                      "description": "List the Capabilities of a reservation",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "Friendly name for user to easily identify the reservation",
                      "type": "string"
                    },
                    "effectiveDateTime": {
                      "description": "DateTime of the Reservation starting when this version is effective from.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "expiryDate": {
                      "description": "This is the date when the Reservation will expire.",
                      "format": "date",
                      "type": "string"
                    },
                    "extendedStatusInfo": {
                      "properties": {
                        "message": {
                          "description": "The message giving detailed information about the status code.",
                          "type": "string"
                        },
                        "statusCode": {
                          "enum": [
                            "None",
                            "Pending",
                            "Active",
                            "PurchaseError",
                            "PaymentInstrumentError",
                            "Split",
                            "Merged",
                            "Expired",
                            "Succeeded"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservationStatusCode"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "instanceFlexibility": {
                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                      "enum": [
                        "On",
                        "Off"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "InstanceFlexibility"
                      }
                    },
                    "lastUpdatedDateTime": {
                      "description": "DateTime of the last time the Reservation was updated.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "mergeProperties": {
                      "properties": {
                        "mergeDestination": {
                          "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "type": "string"
                        },
                        "mergeSources": {
                          "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "provisioningState": {
                      "description": "Current state of the reservation.",
                      "type": "string"
                    },
                    "quantity": {
                      "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "renew": {
                      "default": false,
                      "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                      "type": "boolean"
                    },
                    "renewDestination": {
                      "description": "Reservation Id of the reservation which is purchased because of renew. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                      "type": "string"
                    },
                    "renewProperties": {
                      "properties": {
                        "billingCurrencyTotal": {
                          "description": "Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.",
                          "properties": {
                            "amount": {
                              "type": "number"
                            },
                            "currencyCode": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "pricingCurrencyTotal": {
                          "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry.",
                          "properties": {
                            "amount": {
                              "type": "number"
                            },
                            "currencyCode": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "purchaseProperties": {
                          "properties": {
                            "location": {
                              "description": "The Azure Region where the reserved resource lives.",
                              "type": "string"
                            },
                            "properties": {
                              "properties": {
                                "appliedScopeType": {
                                  "description": "Type of the Applied Scope.",
                                  "enum": [
                                    "Single",
                                    "Shared"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "AppliedScopeType"
                                  }
                                },
                                "appliedScopes": {
                                  "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                  "items": {
                                    "maxItems": 1,
                                    "minItems": 1,
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "billingPlan": {
                                  "description": "Represent the billing plans.",
                                  "enum": [
                                    "Upfront",
                                    "Monthly"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReservationBillingPlan"
                                  }
                                },
                                "billingScopeId": {
                                  "description": "Subscription that will be charged for purchasing Reservation",
                                  "type": "string"
                                },
                                "displayName": {
                                  "description": "Friendly name of the Reservation",
                                  "type": "string"
                                },
                                "instanceFlexibility": {
                                  "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                  "enum": [
                                    "On",
                                    "Off"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "InstanceFlexibility"
                                  }
                                },
                                "quantity": {
                                  "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "renew": {
                                  "default": false,
                                  "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                  "type": "boolean"
                                },
                                "reservedResourceProperties": {
                                  "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                  "properties": {
                                    "instanceFlexibility": {
                                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                      "enum": [
                                        "On",
                                        "Off"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "InstanceFlexibility"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "reservedResourceType": {
                                  "description": "The type of the resource that is being reserved.",
                                  "enum": [
                                    "VirtualMachines",
                                    "SqlDatabases",
                                    "SuseLinux",
                                    "CosmosDb",
                                    "RedHat",
                                    "SqlDataWarehouse",
                                    "VMwareCloudSimple",
                                    "RedHatOsa",
                                    "Databricks",
                                    "AppService",
                                    "ManagedDisk",
                                    "BlockBlob",
                                    "RedisCache",
                                    "AzureDataExplorer",
                                    "MySql",
                                    "MariaDb",
                                    "PostgreSql",
                                    "DedicatedHost",
                                    "SapHana",
                                    "SqlAzureHybridBenefit"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReservedResourceType"
                                  }
                                },
                                "term": {
                                  "description": "Represent the term of Reservation.",
                                  "enum": [
                                    "P1Y",
                                    "P3Y"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReservationTerm"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "sku": {
                              "properties": {
                                "name": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "renewSource": {
                      "description": "Reservation Id of the reservation from which this reservation is renewed. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                      "type": "string"
                    },
                    "reservedResourceType": {
                      "description": "The type of the resource that is being reserved.",
                      "enum": [
                        "VirtualMachines",
                        "SqlDatabases",
                        "SuseLinux",
                        "CosmosDb",
                        "RedHat",
                        "SqlDataWarehouse",
                        "VMwareCloudSimple",
                        "RedHatOsa",
                        "Databricks",
                        "AppService",
                        "ManagedDisk",
                        "BlockBlob",
                        "RedisCache",
                        "AzureDataExplorer",
                        "MySql",
                        "MariaDb",
                        "PostgreSql",
                        "DedicatedHost",
                        "SapHana",
                        "SqlAzureHybridBenefit"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservedResourceType"
                      }
                    },
                    "skuDescription": {
                      "description": "Description of the SKU in english.",
                      "type": "string"
                    },
                    "splitProperties": {
                      "properties": {
                        "splitDestinations": {
                          "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "splitSource": {
                          "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "swapProperties": {
                      "properties": {
                        "swapDestination": {
                          "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "type": "string"
                        },
                        "swapSource": {
                          "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "term": {
                      "description": "Represent the term of Reservation.",
                      "enum": [
                        "P1Y",
                        "P3Y"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationTerm"
                      }
                    }
                  },
                  "type": "object"
                },
                "sku": {
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationResponse"
          },
          {
            "oldValue": {
              "properties": {
                "splitDestinations": {
                  "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "splitSource": {
                  "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationSplitProperties"
          },
          {
            "oldValue": {
              "enum": [
                "None",
                "Pending",
                "Active",
                "PurchaseError",
                "PaymentInstrumentError",
                "Split",
                "Merged",
                "Expired",
                "Succeeded"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ReservationStatusCode"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationStatusCode"
          },
          {
            "oldValue": {
              "properties": {
                "swapDestination": {
                  "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                },
                "swapSource": {
                  "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationSwapProperties"
          },
          {
            "oldValue": {
              "description": "Represent the term of Reservation.",
              "enum": [
                "P1Y",
                "P3Y"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ReservationTerm"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationTerm"
          },
          {
            "oldValue": {
              "description": "The type of the resource that is being reserved.",
              "enum": [
                "VirtualMachines",
                "SqlDatabases",
                "SuseLinux",
                "CosmosDb",
                "RedHat",
                "SqlDataWarehouse",
                "VMwareCloudSimple",
                "RedHatOsa",
                "Databricks",
                "AppService",
                "ManagedDisk",
                "BlockBlob",
                "RedisCache",
                "AzureDataExplorer",
                "MySql",
                "MariaDb",
                "PostgreSql",
                "DedicatedHost",
                "SapHana",
                "SqlAzureHybridBenefit"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ReservedResourceType"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservedResourceType"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Name of the resource provide by the resource Provider. Please use this name property for quotaRequests.",
              "properties": {
                "localizedValue": {
                  "description": "Resource display name.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "Resource name.",
                  "readOnly": false,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ResourceName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The resource types.",
              "enum": [
                "standard",
                "dedicated",
                "lowPriority",
                "shared",
                "serviceSpecific"
              ],
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ResourceType"
              }
            },
            "op": "add",
            "from": "",
            "path": "/ResourceTypesName"
          },
          {
            "oldValue": {
              "properties": {
                "reason": {
                  "type": "string"
                },
                "scope": {
                  "type": "string"
                },
                "valid": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ScopeProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The api error details.",
              "properties": {
                "code": {
                  "description": "The error code.",
                  "type": "string"
                },
                "details": {
                  "description": "The list of error details.",
                  "items": {
                    "description": "The error details.",
                    "properties": {
                      "code": {
                        "description": "The error code.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "message": {
                  "description": "The error message.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ServiceError"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The error details.",
              "properties": {
                "code": {
                  "description": "The error code.",
                  "readOnly": true,
                  "type": "string"
                },
                "message": {
                  "description": "The error message.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ServiceErrorDetail"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Severity types.",
              "enum": [
                "Critical",
                "Moderate",
                "Minimal"
              ],
              "x-ms-enum": {
                "modelAsString": true,
                "name": "SeverityType"
              }
            },
            "op": "add",
            "from": "",
            "path": "/SeverityTypes"
          },
          {
            "oldValue": {
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SkuName"
          },
          {
            "oldValue": {
              "properties": {
                "name": {
                  "description": "An invariant to describe the feature.",
                  "type": "string"
                },
                "value": {
                  "description": "An invariant if the feature is measured by quantity.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SkuProperty"
          },
          {
            "oldValue": {
              "properties": {
                "reasonCode": {
                  "description": "The reason for restriction.",
                  "type": "string"
                },
                "type": {
                  "description": "The type of restrictions.",
                  "type": "string"
                },
                "values": {
                  "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SkuRestriction"
          },
          {
            "oldValue": {
              "properties": {
                "quantities": {
                  "description": "List of the quantities in the new reservations to create.",
                  "items": {
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "integer"
                  },
                  "type": "array"
                },
                "reservationId": {
                  "description": "Resource id of the reservation to be split. Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SplitProperties"
          },
          {
            "oldValue": {
              "properties": {
                "properties": {
                  "properties": {
                    "quantities": {
                      "description": "List of the quantities in the new reservations to create.",
                      "items": {
                        "maxItems": 2,
                        "minItems": 2,
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "reservationId": {
                      "description": "Resource id of the reservation to be split. Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SplitRequest"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The sub-request submitted with the quota request.",
              "properties": {
                "limit": {
                  "description": "The Resource limit.",
                  "readOnly": true,
                  "type": "integer"
                },
                "message": {
                  "description": "User friendly status message.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "Name of the resource provide by the resource Provider. Please use this name property for quotaRequests.",
                  "properties": {
                    "localizedValue": {
                      "description": "Resource display name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "value": {
                      "description": "Resource name.",
                      "readOnly": false,
                      "type": "string"
                    }
                  }
                },
                "provisioningState": {
                  "description": "The quota request status.",
                  "enum": [
                    "Accepted",
                    "Invalid",
                    "Succeeded",
                    "Failed",
                    "InProgress"
                  ],
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "QuotaRequestState"
                  }
                },
                "resourceType": {
                  "description": "Resource type for which the quota check was made.",
                  "readOnly": true,
                  "type": "string"
                },
                "subRequestId": {
                  "description": "Sub request id for individual request.",
                  "readOnly": true,
                  "type": "string"
                },
                "unit": {
                  "description": " The units of the limit, such as - Count, Bytes, etc. Use the unit field provided in the Get quota response.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/SubRequest"
          },
          {
            "oldValue": {
              "properties": {
                "scopes": {
                  "items": {
                    "properties": {
                      "reason": {
                        "type": "string"
                      },
                      "scope": {
                        "type": "string"
                      },
                      "valid": {
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SubscriptionScopeProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The support contact types.",
              "enum": [
                "email",
                "phone",
                "chat"
              ],
              "x-ms-enum": {
                "modelAsString": true,
                "name": "SupportContactType"
              }
            },
            "op": "add",
            "from": "",
            "path": "/SupportContactTypes"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The SupportRequest action.",
              "properties": {
                "alternateEmailAddresses": {
                  "description": "The alternate email address of the recipient.",
                  "items": {
                    "description": "The email recipients.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "country": {
                  "description": "The country of the recipient.",
                  "type": "string"
                },
                "firstName": {
                  "description": "The first name of the recipient.",
                  "type": "string"
                },
                "lastName": {
                  "description": "The last name of the recipient.",
                  "type": "string"
                },
                "phoneNumber": {
                  "description": "The phone number of the recipient.",
                  "type": "string"
                },
                "preferredContactMethod": {
                  "description": "The contact method - Email: Contact using provided email, Phone: contact using provided phone number.",
                  "enum": [
                    "Email",
                    "Phone"
                  ],
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ContactMethodType"
                  }
                },
                "primaryEmailAddress": {
                  "description": "The primary email addresses of the recipients.",
                  "type": "string"
                },
                "severity": {
                  "description": "The Severity types.",
                  "enum": [
                    "Critical",
                    "Moderate",
                    "Minimal"
                  ],
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "SeverityType"
                  }
                },
                "supportLanguage": {
                  "description": "The support language.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/SupportRequestAction"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Settings for auto quota increase.",
              "properties": {
                "autoQuotaIncreaseState": {
                  "description": "The Auto quota increase feature state - enabled: feature is enabled, disabled: feature is disabled.",
                  "enum": [
                    "enabled",
                    "disabled"
                  ],
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "AqiStateType"
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/aqiSettings"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Actions for auto quota increase.",
              "properties": {
                "onFailure": {
                  "description": "The actions for auto quota increase.",
                  "properties": {
                    "emailActions": {
                      "description": "The email actions.",
                      "properties": {
                        "emailAddresses": {
                          "description": "The list of email actions.",
                          "items": {
                            "description": "Email Action.",
                            "properties": {
                              "emailAddress": {
                                "description": "The email address for the action.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    }
                  },
                  "type": "object"
                },
                "onSuccess": {
                  "description": "The actions for auto quota increase.",
                  "properties": {
                    "emailActions": {
                      "description": "The email actions.",
                      "properties": {
                        "emailAddresses": {
                          "description": "The list of email actions.",
                          "items": {
                            "description": "Email Action.",
                            "properties": {
                              "emailAddress": {
                                "description": "The email address for the action.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    }
                  },
                  "type": "object"
                },
                "settings": {
                  "description": "Settings for auto quota increase.",
                  "properties": {
                    "autoQuotaIncreaseState": {
                      "description": "The Auto quota increase feature state - enabled: feature is enabled, disabled: feature is disabled.",
                      "enum": [
                        "enabled",
                        "disabled"
                      ],
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "AqiStateType"
                      }
                    }
                  },
                  "type": "object"
                },
                "supportTicketAction": {
                  "description": "The SupportRequest action.",
                  "properties": {
                    "alternateEmailAddresses": {
                      "description": "The alternate email address of the recipient.",
                      "items": {
                        "description": "The email recipients.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "country": {
                      "description": "The country of the recipient.",
                      "type": "string"
                    },
                    "firstName": {
                      "description": "The first name of the recipient.",
                      "type": "string"
                    },
                    "lastName": {
                      "description": "The last name of the recipient.",
                      "type": "string"
                    },
                    "phoneNumber": {
                      "description": "The phone number of the recipient.",
                      "type": "string"
                    },
                    "preferredContactMethod": {
                      "description": "The contact method - Email: Contact using provided email, Phone: contact using provided phone number.",
                      "enum": [
                        "Email",
                        "Phone"
                      ],
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ContactMethodType"
                      }
                    },
                    "primaryEmailAddress": {
                      "description": "The primary email addresses of the recipients.",
                      "type": "string"
                    },
                    "severity": {
                      "description": "The Severity types.",
                      "enum": [
                        "Critical",
                        "Moderate",
                        "Minimal"
                      ],
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "SeverityType"
                      }
                    },
                    "supportLanguage": {
                      "description": "The support language.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/autoQuotaIncreaseSettings"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The details of quota request.",
              "properties": {
                "message": {
                  "description": "User friendly status message.",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Quota limits.",
                  "properties": {
                    "properties": {
                      "description": "Quota properties for the resource.",
                      "properties": {
                        "currentValue": {
                          "description": "The current resource usages information.",
                          "readOnly": true,
                          "type": "integer"
                        },
                        "limit": {
                          "description": "The quota limit.",
                          "type": "integer"
                        },
                        "name": {
                          "description": "Name of the resource provide by the resource Provider. Please use this name property for quotaRequests.",
                          "properties": {
                            "localizedValue": {
                              "description": "Resource display name.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "value": {
                              "description": "Resource name.",
                              "readOnly": false,
                              "type": "string"
                            }
                          }
                        },
                        "properties": {
                          "description": "Additional properties for the specific resource provider.",
                          "type": "object"
                        },
                        "quotaPeriod": {
                          "description": "The quota period over which the usage values are summarized, such as - P1D (Per one day), PT1M (Per one minute), PT1S (Per one second). This parameter is optional because, for some resources like compute, the period doesn’t matter.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "resourceType": {
                          "description": "The resource types.",
                          "enum": [
                            "standard",
                            "dedicated",
                            "lowPriority",
                            "shared",
                            "serviceSpecific"
                          ],
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ResourceType"
                          }
                        },
                        "unit": {
                          "description": " The units of the limit, such as - Count, Bytes, etc. Use the unit field provided in the Get quota response.",
                          "readOnly": false,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object",
                  "x-ms-azure-resource": true
                },
                "provisioningState": {
                  "description": "The quota request status.",
                  "enum": [
                    "Accepted",
                    "Invalid",
                    "Succeeded",
                    "Failed",
                    "InProgress"
                  ],
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "QuotaRequestState"
                  }
                },
                "requestSubmitTime": {
                  "description": "The quota request submit time. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/quotaRequestOneResourceProperties"
          }
        ],
        "parameters": [
          {
            "oldValue": "Supported version for this document is 2019-04-01",
            "value": "API version.",
            "op": "replace",
            "from": "",
            "path": "/ApiVersionParameter/description"
          },
          {
            "oldValue": {
              "description": "Supported value of this query is renewProperties",
              "in": "query",
              "name": "expand",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ExpandRenewPropertiesParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Azure region.",
              "in": "path",
              "name": "location",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/LocationIdInParameters"
          },
          {
            "oldValue": {
              "description": "Filters the skus based on the location specified in this parameter. This can be an azure region or global",
              "in": "query",
              "name": "location",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/LocationIdParameter"
          },
          {
            "oldValue": {
              "description": "Information needed for commercial request for a reservation",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "properties": {
                    "properties": {
                      "sources": {
                        "description": "Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MergeParameter"
          },
          {
            "oldValue": {
              "description": "Information needed to patch a reservation item",
              "in": "body",
              "name": "parameters",
              "required": true,
              "schema": {
                "properties": {
                  "properties": {
                    "properties": {
                      "appliedScopeType": {
                        "description": "Type of the Applied Scope.",
                        "enum": [
                          "Single",
                          "Shared"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "AppliedScopeType"
                        }
                      },
                      "appliedScopes": {
                        "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                        "items": {
                          "maxItems": 1,
                          "minItems": 1,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "instanceFlexibility": {
                        "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                        "enum": [
                          "On",
                          "Off"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "InstanceFlexibility"
                        }
                      },
                      "name": {
                        "description": "Name of the Reservation",
                        "type": "string"
                      },
                      "renew": {
                        "default": false,
                        "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                        "type": "boolean"
                      },
                      "renewProperties": {
                        "properties": {
                          "purchaseProperties": {
                            "properties": {
                              "location": {
                                "description": "The Azure Region where the reserved resource lives.",
                                "type": "string"
                              },
                              "properties": {
                                "properties": {
                                  "appliedScopeType": {
                                    "description": "Type of the Applied Scope.",
                                    "enum": [
                                      "Single",
                                      "Shared"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "AppliedScopeType"
                                    }
                                  },
                                  "appliedScopes": {
                                    "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                    "items": {
                                      "maxItems": 1,
                                      "minItems": 1,
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "billingPlan": {
                                    "description": "Represent the billing plans.",
                                    "enum": [
                                      "Upfront",
                                      "Monthly"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservationBillingPlan"
                                    }
                                  },
                                  "billingScopeId": {
                                    "description": "Subscription that will be charged for purchasing Reservation",
                                    "type": "string"
                                  },
                                  "displayName": {
                                    "description": "Friendly name of the Reservation",
                                    "type": "string"
                                  },
                                  "instanceFlexibility": {
                                    "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                    "enum": [
                                      "On",
                                      "Off"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "InstanceFlexibility"
                                    }
                                  },
                                  "quantity": {
                                    "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "renew": {
                                    "default": false,
                                    "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                    "type": "boolean"
                                  },
                                  "reservedResourceProperties": {
                                    "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                    "properties": {
                                      "instanceFlexibility": {
                                        "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                        "enum": [
                                          "On",
                                          "Off"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "InstanceFlexibility"
                                        }
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "reservedResourceType": {
                                    "description": "The type of the resource that is being reserved.",
                                    "enum": [
                                      "VirtualMachines",
                                      "SqlDatabases",
                                      "SuseLinux",
                                      "CosmosDb",
                                      "RedHat",
                                      "SqlDataWarehouse",
                                      "VMwareCloudSimple",
                                      "RedHatOsa",
                                      "Databricks",
                                      "AppService",
                                      "ManagedDisk",
                                      "BlockBlob",
                                      "RedisCache",
                                      "AzureDataExplorer",
                                      "MySql",
                                      "MariaDb",
                                      "PostgreSql",
                                      "DedicatedHost",
                                      "SapHana",
                                      "SqlAzureHybridBenefit"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservedResourceType"
                                    }
                                  },
                                  "term": {
                                    "description": "Represent the term of Reservation.",
                                    "enum": [
                                      "P1Y",
                                      "P3Y"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservationTerm"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "sku": {
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PatchParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Azure resource provider id.",
              "in": "path",
              "name": "providerId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/ProviderIdInParameters"
          },
          {
            "oldValue": {
              "description": "Information needed for calculate or purchase reservation",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "location": {
                    "description": "The Azure Region where the reserved resource lives.",
                    "type": "string"
                  },
                  "properties": {
                    "properties": {
                      "appliedScopeType": {
                        "description": "Type of the Applied Scope.",
                        "enum": [
                          "Single",
                          "Shared"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "AppliedScopeType"
                        }
                      },
                      "appliedScopes": {
                        "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                        "items": {
                          "maxItems": 1,
                          "minItems": 1,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "billingPlan": {
                        "description": "Represent the billing plans.",
                        "enum": [
                          "Upfront",
                          "Monthly"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ReservationBillingPlan"
                        }
                      },
                      "billingScopeId": {
                        "description": "Subscription that will be charged for purchasing Reservation",
                        "type": "string"
                      },
                      "displayName": {
                        "description": "Friendly name of the Reservation",
                        "type": "string"
                      },
                      "instanceFlexibility": {
                        "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                        "enum": [
                          "On",
                          "Off"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "InstanceFlexibility"
                        }
                      },
                      "quantity": {
                        "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "renew": {
                        "default": false,
                        "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                        "type": "boolean"
                      },
                      "reservedResourceProperties": {
                        "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                        "properties": {
                          "instanceFlexibility": {
                            "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                            "enum": [
                              "On",
                              "Off"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "InstanceFlexibility"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "reservedResourceType": {
                        "description": "The type of the resource that is being reserved.",
                        "enum": [
                          "VirtualMachines",
                          "SqlDatabases",
                          "SuseLinux",
                          "CosmosDb",
                          "RedHat",
                          "SqlDataWarehouse",
                          "VMwareCloudSimple",
                          "RedHatOsa",
                          "Databricks",
                          "AppService",
                          "ManagedDisk",
                          "BlockBlob",
                          "RedisCache",
                          "AzureDataExplorer",
                          "MySql",
                          "MariaDb",
                          "PostgreSql",
                          "DedicatedHost",
                          "SapHana",
                          "SqlAzureHybridBenefit"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ReservedResourceType"
                        }
                      },
                      "term": {
                        "description": "Represent the term of Reservation.",
                        "enum": [
                          "P1Y",
                          "P3Y"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ReservationTerm"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "sku": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PurchaseParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Quota Request id.",
              "in": "path",
              "name": "id",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/RequestIdInParameters"
          },
          {
            "oldValue": {
              "description": "Id of the Reservation Item",
              "in": "path",
              "name": "reservationId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationIdParameter"
          },
          {
            "oldValue": {
              "description": "Order Id of the reservation",
              "in": "path",
              "name": "reservationOrderId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationOrderIdParameter"
          },
          {
            "oldValue": {
              "description": "The type of the resource for which the skus should be provided.",
              "in": "query",
              "name": "reservedResourceType",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservedResourceTypeIdParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The resource name for a resource provider, such as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for Microsoft.MachineLearningServices",
              "in": "path",
              "name": "resourceName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/ResourceNameInParameters"
          },
          {
            "oldValue": {
              "description": "Parameter for listing the available scopes",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "properties": {
                    "description": "List of scopes for which availability should be checked",
                    "properties": {
                      "scopes": {
                        "description": "Scopes to be checked for availability",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ScopeParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls",
              "in": "query",
              "name": "$skiptoken",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/SkipTokenParameter"
          },
          {
            "oldValue": {
              "description": "Information needed to Split a reservation item",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "properties": {
                    "properties": {
                      "quantities": {
                        "description": "List of the quantities in the new reservations to create.",
                        "items": {
                          "maxItems": 2,
                          "minItems": 2,
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "reservationId": {
                        "description": "Resource id of the reservation to be split. Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SplitParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Azure subscription id.",
              "in": "path",
              "name": "subscriptionId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/SubscriptionIdInParameters"
          },
          {
            "oldValue": {
              "description": "Id of the subscription",
              "in": "path",
              "name": "subscriptionId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SubscriptionIdParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Number of records to return.",
              "format": "int32",
              "in": "query",
              "minimum": 1,
              "name": "$top",
              "required": false,
              "type": "integer",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/TopQueryParameter"
          }
        ]
      }
    },
    "info": {
      "description": {
        "from": "This API describe Azure Reservation",
        "to": "Microsoft Azure Quota Resource Provider."
      },
      "version": {
        "from": "2019-04-01",
        "to": "2019-07-19-preview"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits/{resourceName}",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimitsRequests",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimitsRequests/{id}",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/autoQuotaIncrease"
      ],
      "deleted": [
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/catalogs",
        "/providers/Microsoft.Capacity/operations",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/merge",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/unarchive",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/archive",
        "/providers/Microsoft.Capacity/calculatePrice",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/split",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/revisions",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/appliedReservations",
        "/providers/Microsoft.Capacity/reservationOrders",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/availableScopes"
      ]
    },
    "security": {
      "added": [
        "azure_auth"
      ]
    }
  },
  "tools_a": {},
  "tools_b": {
    "Quota_Get": "FunctionDef(\n  name='Quota_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='providerId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the current service limits (quotas) and usage of a resource. The response from Get API can be leveraged to submit quota update requests.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/resourceProviders/'),\n          FormattedValue(\n            value=Name(id='providerId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/serviceLimits/'),\n          FormattedValue(\n            value=Name(id='resourceName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='providerId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: providerId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Quota_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the current service limits (quotas) and usage of a resource. The response from Get API can be leveraged to submit quota update requests.'))])],\n  type_params=[])",
    "Quota_CreateOrUpdate": "FunctionDef(\n  name='Quota_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='providerId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update the service limits (quota) of a resource to requested value.  Steps:    1. Make the Get request to get the quota information for specific resource.    2. To increase the quota, update the limit field in the response from Get request to new value.    3. Submit the JSON to the quota request API to update the quota.    The Create quota request may be constructed as follows. The PUT operation can be used to update the quota.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/resourceProviders/'),\n          FormattedValue(\n            value=Name(id='providerId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/serviceLimits/'),\n          FormattedValue(\n            value=Name(id='resourceName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='providerId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: providerId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Quota_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or update the service limits (quota) of a resource to requested value.\\n Steps:\\r\\n  1. Make the Get request to get the quota information for specific resource.\\r\\n  2. To increase the quota, update the limit field in the response from Get request to new value.\\r\\n  3. Submit the JSON to the quota request API to update the quota.\\r\\n  The Create quota request may be constructed as follows. The PUT operation can be used to update the quota.'))])],\n  type_params=[])",
    "Quota_Update": "FunctionDef(\n  name='Quota_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='providerId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Update the service limits (quota) of a resource to requested value.  Steps:    1. Make the Get request to get the quota information for specific resource.    2. To increase the quota, update the limit field in the response from Get request to new value.    3. Submit the JSON to the quota request API to update the quota.    The Update quota request may be constructed as follows. The PATCH operation can be used to update the quota.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/resourceProviders/'),\n          FormattedValue(\n            value=Name(id='providerId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/serviceLimits/'),\n          FormattedValue(\n            value=Name(id='resourceName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='providerId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: providerId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Quota_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update the service limits (quota) of a resource to requested value.\\n Steps:\\r\\n  1. Make the Get request to get the quota information for specific resource.\\r\\n  2. To increase the quota, update the limit field in the response from Get request to new value.\\r\\n  3. Submit the JSON to the quota request API to update the quota.\\r\\n  The Update quota request may be constructed as follows. The PATCH operation can be used to update the quota.'))])],\n  type_params=[])",
    "Quota_List": "FunctionDef(\n  name='Quota_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='providerId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get a list of current service limits (quota) and usages of all the resources. The response from List API can be leveraged to submit quota update requests.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/resourceProviders/'),\n          FormattedValue(\n            value=Name(id='providerId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/serviceLimits')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='providerId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: providerId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Quota_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a list of current service limits (quota) and usages of all the resources. The response from List API can be leveraged to submit quota update requests.'))])],\n  type_params=[])",
    "QuotaRequestStatus_Get": "FunctionDef(\n  name='QuotaRequestStatus_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='providerId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='id',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the QuotaRequest details and status by the quota request Id for the resources for the resource provider at a specific location. The requestId is returned as response to the Put requests for serviceLimits.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/resourceProviders/'),\n          FormattedValue(\n            value=Name(id='providerId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/serviceLimitsRequests/'),\n          FormattedValue(\n            value=Name(id='id', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='providerId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: providerId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='id', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: id')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='QuotaRequestStatus_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the QuotaRequest details and status by the quota request Id for the resources for the resource provider at a specific location. The requestId is returned as response to the Put requests for serviceLimits.'))])],\n  type_params=[])",
    "QuotaRequestStatus_List": "FunctionDef(\n  name='QuotaRequestStatus_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='providerId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_skiptoken',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/resourceProviders/'),\n          FormattedValue(\n            value=Name(id='providerId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/serviceLimitsRequests')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='providerId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: providerId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_skiptoken', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$skiptoken'),\n              ctx=Store())],\n          value=Name(id='_skiptoken', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='QuotaRequestStatus_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='For the specified location and Resource provider gets the current quota requests under the subscription over the time period of one year ago from now to one year back. oData filter can be used to select quota requests.'))])],\n  type_params=[])",
    "AutoQuotaIncrease_GetProperties": "FunctionDef(\n  name='AutoQuotaIncrease_GetProperties',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the Auto Quota Increase enrollment details for the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/autoQuotaIncrease')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='AutoQuotaIncrease_GetProperties')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets the Auto Quota Increase enrollment details for the specified subscription.'))])],\n  type_params=[])",
    "AutoQuotaIncrease_Create": "FunctionDef(\n  name='AutoQuotaIncrease_Create',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Sets the Auto Quota Increase enrollment properties for the specified subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/autoQuotaIncrease')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='AutoQuotaIncrease_Create')),\n        keyword(\n          arg='description',\n          value=Constant(value='Sets the Auto Quota Increase enrollment properties for the specified subscription.'))])],\n  type_params=[])"
  }
}