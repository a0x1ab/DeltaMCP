{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": null,
            "value": {
              "description": "The action detail",
              "properties": {
                "Detail": {
                  "description": "The detail of the friendly error message",
                  "type": "string"
                },
                "MechanismType": {
                  "description": "The mechanism type",
                  "type": "string"
                },
                "Name": {
                  "description": "The name of the action",
                  "type": "string"
                },
                "SendTime": {
                  "description": "The send time",
                  "type": "string"
                },
                "Status": {
                  "description": "The status of the action",
                  "type": "string"
                },
                "SubState": {
                  "description": "The substatus of the action",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ActionDetail"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An Azure action group.",
              "properties": {
                "armRoleReceivers": {
                  "description": "The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are supported.",
                  "items": {
                    "description": "An arm role receiver.",
                    "properties": {
                      "name": {
                        "description": "The name of the arm role receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "roleId": {
                        "description": "The arm role id.",
                        "type": "string"
                      },
                      "useCommonAlertSchema": {
                        "default": false,
                        "description": "Indicates whether to use common alert schema.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "roleId"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "automationRunbookReceivers": {
                  "description": "The list of AutomationRunbook receivers that are part of this action group.",
                  "items": {
                    "description": "The Azure Automation Runbook notification receiver.",
                    "properties": {
                      "automationAccountId": {
                        "description": "The Azure automation account Id which holds this runbook and authenticate to Azure resource.",
                        "type": "string"
                      },
                      "isGlobalRunbook": {
                        "description": "Indicates whether this instance is global runbook.",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Indicates name of the webhook.",
                        "type": "string"
                      },
                      "runbookName": {
                        "description": "The name for this runbook.",
                        "type": "string"
                      },
                      "serviceUri": {
                        "description": "The URI where webhooks should be sent.",
                        "type": "string"
                      },
                      "useCommonAlertSchema": {
                        "default": false,
                        "description": "Indicates whether to use common alert schema.",
                        "type": "boolean"
                      },
                      "webhookResourceId": {
                        "description": "The resource id for webhook linked to this runbook.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "automationAccountId",
                      "runbookName",
                      "webhookResourceId",
                      "isGlobalRunbook"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "azureAppPushReceivers": {
                  "description": "The list of AzureAppPush receivers that are part of this action group.",
                  "items": {
                    "description": "The Azure mobile App push notification receiver.",
                    "properties": {
                      "emailAddress": {
                        "description": "The email address registered for the Azure mobile app.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "emailAddress"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "azureFunctionReceivers": {
                  "description": "The list of azure function receivers that are part of this action group.",
                  "items": {
                    "description": "An azure function receiver.",
                    "properties": {
                      "functionAppResourceId": {
                        "description": "The azure resource id of the function app.",
                        "type": "string"
                      },
                      "functionName": {
                        "description": "The function name in the function app.",
                        "type": "string"
                      },
                      "httpTriggerUrl": {
                        "description": "The http trigger url where http request sent to.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the azure function receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "useCommonAlertSchema": {
                        "default": false,
                        "description": "Indicates whether to use common alert schema.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "functionAppResourceId",
                      "functionName",
                      "httpTriggerUrl"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "emailReceivers": {
                  "description": "The list of email receivers that are part of this action group.",
                  "items": {
                    "description": "An email receiver.",
                    "properties": {
                      "emailAddress": {
                        "description": "The email address of this receiver.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the email receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "status": {
                        "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                        "enum": [
                          "NotSpecified",
                          "Enabled",
                          "Disabled"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "ReceiverStatus"
                        }
                      },
                      "useCommonAlertSchema": {
                        "default": false,
                        "description": "Indicates whether to use common alert schema.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "emailAddress"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "enabled": {
                  "default": true,
                  "description": "Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications.",
                  "type": "boolean"
                },
                "eventHubReceivers": {
                  "description": "The list of event hub receivers that are part of this action group.",
                  "items": {
                    "description": "An Event hub receiver.",
                    "properties": {
                      "eventHubName": {
                        "description": "The name of the specific Event Hub queue",
                        "type": "string"
                      },
                      "eventHubNameSpace": {
                        "description": "The Event Hub namespace",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the Event hub receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "subscriptionId": {
                        "description": "The Id for the subscription containing this event hub",
                        "type": "string"
                      },
                      "tenantId": {
                        "description": "The tenant Id for the subscription containing this event hub",
                        "type": "string"
                      },
                      "useCommonAlertSchema": {
                        "default": false,
                        "description": "Indicates whether to use common alert schema.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "eventHubNameSpace",
                      "eventHubName",
                      "subscriptionId"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "groupShortName": {
                  "description": "The short name of the action group. This will be used in SMS messages.",
                  "maxLength": 12,
                  "type": "string"
                },
                "itsmReceivers": {
                  "description": "The list of ITSM receivers that are part of this action group.",
                  "items": {
                    "description": "An Itsm receiver.",
                    "properties": {
                      "connectionId": {
                        "description": "Unique identification of ITSM connection among multiple defined in above workspace.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the Itsm receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "region": {
                        "description": "Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'",
                        "type": "string"
                      },
                      "ticketConfiguration": {
                        "description": "JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.",
                        "type": "string"
                      },
                      "workspaceId": {
                        "description": "OMS LA instance identifier.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "workspaceId",
                      "connectionId",
                      "ticketConfiguration",
                      "region"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "logicAppReceivers": {
                  "description": "The list of logic app receivers that are part of this action group.",
                  "items": {
                    "description": "A logic app receiver.",
                    "properties": {
                      "callbackUrl": {
                        "description": "The callback url where http request sent to.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the logic app receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "resourceId": {
                        "description": "The azure resource id of the logic app receiver.",
                        "type": "string"
                      },
                      "useCommonAlertSchema": {
                        "default": false,
                        "description": "Indicates whether to use common alert schema.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "resourceId",
                      "callbackUrl"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "smsReceivers": {
                  "description": "The list of SMS receivers that are part of this action group.",
                  "items": {
                    "description": "An SMS receiver.",
                    "properties": {
                      "countryCode": {
                        "description": "The country code of the SMS receiver.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the SMS receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "phoneNumber": {
                        "description": "The phone number of the SMS receiver.",
                        "type": "string"
                      },
                      "status": {
                        "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                        "enum": [
                          "NotSpecified",
                          "Enabled",
                          "Disabled"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "ReceiverStatus"
                        }
                      }
                    },
                    "required": [
                      "name",
                      "countryCode",
                      "phoneNumber"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "voiceReceivers": {
                  "description": "The list of voice receivers that are part of this action group.",
                  "items": {
                    "description": "A voice receiver.",
                    "properties": {
                      "countryCode": {
                        "description": "The country code of the voice receiver.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the voice receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "phoneNumber": {
                        "description": "The phone number of the voice receiver.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "countryCode",
                      "phoneNumber"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "webhookReceivers": {
                  "description": "The list of webhook receivers that are part of this action group.",
                  "items": {
                    "description": "A webhook receiver.",
                    "properties": {
                      "identifierUri": {
                        "description": "Indicates the identifier uri for aad auth.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the webhook receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "objectId": {
                        "description": "Indicates the webhook app object Id for aad auth.",
                        "type": "string"
                      },
                      "serviceUri": {
                        "description": "The URI where webhooks should be sent.",
                        "type": "string"
                      },
                      "tenantId": {
                        "description": "Indicates the tenant id for aad auth.",
                        "type": "string"
                      },
                      "useAadAuth": {
                        "default": false,
                        "description": "Indicates whether or not use AAD authentication.",
                        "type": "boolean"
                      },
                      "useCommonAlertSchema": {
                        "default": false,
                        "description": "Indicates whether to use common alert schema.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "serviceUri"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                }
              },
              "required": [
                "groupShortName",
                "enabled"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ActionGroup"
          },
          {
            "oldValue": null,
            "value": {
              "description": "A list of action groups.",
              "properties": {
                "nextLink": {
                  "description": "Provides the link to retrieve the next set of elements.",
                  "type": "string"
                },
                "value": {
                  "description": "The list of action groups.",
                  "items": {
                    "allOf": [
                      {
                        "description": "An azure resource object",
                        "properties": {
                          "id": {
                            "description": "Azure resource Id",
                            "readOnly": true,
                            "type": "string"
                          },
                          "location": {
                            "description": "Resource location",
                            "type": "string",
                            "x-ms-mutability": [
                              "create",
                              "read"
                            ]
                          },
                          "name": {
                            "description": "Azure resource name",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags",
                            "type": "object"
                          },
                          "type": {
                            "description": "Azure resource type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "location"
                        ],
                        "type": "object",
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "An action group resource.",
                    "properties": {
                      "properties": {
                        "description": "An Azure action group.",
                        "properties": {
                          "armRoleReceivers": {
                            "description": "The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are supported.",
                            "items": {
                              "description": "An arm role receiver.",
                              "properties": {
                                "name": {
                                  "description": "The name of the arm role receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                },
                                "roleId": {
                                  "description": "The arm role id.",
                                  "type": "string"
                                },
                                "useCommonAlertSchema": {
                                  "default": false,
                                  "description": "Indicates whether to use common alert schema.",
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "name",
                                "roleId"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          },
                          "automationRunbookReceivers": {
                            "description": "The list of AutomationRunbook receivers that are part of this action group.",
                            "items": {
                              "description": "The Azure Automation Runbook notification receiver.",
                              "properties": {
                                "automationAccountId": {
                                  "description": "The Azure automation account Id which holds this runbook and authenticate to Azure resource.",
                                  "type": "string"
                                },
                                "isGlobalRunbook": {
                                  "description": "Indicates whether this instance is global runbook.",
                                  "type": "boolean"
                                },
                                "name": {
                                  "description": "Indicates name of the webhook.",
                                  "type": "string"
                                },
                                "runbookName": {
                                  "description": "The name for this runbook.",
                                  "type": "string"
                                },
                                "serviceUri": {
                                  "description": "The URI where webhooks should be sent.",
                                  "type": "string"
                                },
                                "useCommonAlertSchema": {
                                  "default": false,
                                  "description": "Indicates whether to use common alert schema.",
                                  "type": "boolean"
                                },
                                "webhookResourceId": {
                                  "description": "The resource id for webhook linked to this runbook.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "automationAccountId",
                                "runbookName",
                                "webhookResourceId",
                                "isGlobalRunbook"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          },
                          "azureAppPushReceivers": {
                            "description": "The list of AzureAppPush receivers that are part of this action group.",
                            "items": {
                              "description": "The Azure mobile App push notification receiver.",
                              "properties": {
                                "emailAddress": {
                                  "description": "The email address registered for the Azure mobile app.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "emailAddress"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          },
                          "azureFunctionReceivers": {
                            "description": "The list of azure function receivers that are part of this action group.",
                            "items": {
                              "description": "An azure function receiver.",
                              "properties": {
                                "functionAppResourceId": {
                                  "description": "The azure resource id of the function app.",
                                  "type": "string"
                                },
                                "functionName": {
                                  "description": "The function name in the function app.",
                                  "type": "string"
                                },
                                "httpTriggerUrl": {
                                  "description": "The http trigger url where http request sent to.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the azure function receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                },
                                "useCommonAlertSchema": {
                                  "default": false,
                                  "description": "Indicates whether to use common alert schema.",
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "name",
                                "functionAppResourceId",
                                "functionName",
                                "httpTriggerUrl"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          },
                          "emailReceivers": {
                            "description": "The list of email receivers that are part of this action group.",
                            "items": {
                              "description": "An email receiver.",
                              "properties": {
                                "emailAddress": {
                                  "description": "The email address of this receiver.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the email receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                },
                                "status": {
                                  "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                                  "enum": [
                                    "NotSpecified",
                                    "Enabled",
                                    "Disabled"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "ReceiverStatus"
                                  }
                                },
                                "useCommonAlertSchema": {
                                  "default": false,
                                  "description": "Indicates whether to use common alert schema.",
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "name",
                                "emailAddress"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          },
                          "enabled": {
                            "default": true,
                            "description": "Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications.",
                            "type": "boolean"
                          },
                          "eventHubReceivers": {
                            "description": "The list of event hub receivers that are part of this action group.",
                            "items": {
                              "description": "An Event hub receiver.",
                              "properties": {
                                "eventHubName": {
                                  "description": "The name of the specific Event Hub queue",
                                  "type": "string"
                                },
                                "eventHubNameSpace": {
                                  "description": "The Event Hub namespace",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the Event hub receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                },
                                "subscriptionId": {
                                  "description": "The Id for the subscription containing this event hub",
                                  "type": "string"
                                },
                                "tenantId": {
                                  "description": "The tenant Id for the subscription containing this event hub",
                                  "type": "string"
                                },
                                "useCommonAlertSchema": {
                                  "default": false,
                                  "description": "Indicates whether to use common alert schema.",
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "name",
                                "eventHubNameSpace",
                                "eventHubName",
                                "subscriptionId"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          },
                          "groupShortName": {
                            "description": "The short name of the action group. This will be used in SMS messages.",
                            "maxLength": 12,
                            "type": "string"
                          },
                          "itsmReceivers": {
                            "description": "The list of ITSM receivers that are part of this action group.",
                            "items": {
                              "description": "An Itsm receiver.",
                              "properties": {
                                "connectionId": {
                                  "description": "Unique identification of ITSM connection among multiple defined in above workspace.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the Itsm receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                },
                                "region": {
                                  "description": "Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'",
                                  "type": "string"
                                },
                                "ticketConfiguration": {
                                  "description": "JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.",
                                  "type": "string"
                                },
                                "workspaceId": {
                                  "description": "OMS LA instance identifier.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "workspaceId",
                                "connectionId",
                                "ticketConfiguration",
                                "region"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          },
                          "logicAppReceivers": {
                            "description": "The list of logic app receivers that are part of this action group.",
                            "items": {
                              "description": "A logic app receiver.",
                              "properties": {
                                "callbackUrl": {
                                  "description": "The callback url where http request sent to.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the logic app receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                },
                                "resourceId": {
                                  "description": "The azure resource id of the logic app receiver.",
                                  "type": "string"
                                },
                                "useCommonAlertSchema": {
                                  "default": false,
                                  "description": "Indicates whether to use common alert schema.",
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "name",
                                "resourceId",
                                "callbackUrl"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          },
                          "smsReceivers": {
                            "description": "The list of SMS receivers that are part of this action group.",
                            "items": {
                              "description": "An SMS receiver.",
                              "properties": {
                                "countryCode": {
                                  "description": "The country code of the SMS receiver.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the SMS receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                },
                                "phoneNumber": {
                                  "description": "The phone number of the SMS receiver.",
                                  "type": "string"
                                },
                                "status": {
                                  "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                                  "enum": [
                                    "NotSpecified",
                                    "Enabled",
                                    "Disabled"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "ReceiverStatus"
                                  }
                                }
                              },
                              "required": [
                                "name",
                                "countryCode",
                                "phoneNumber"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          },
                          "voiceReceivers": {
                            "description": "The list of voice receivers that are part of this action group.",
                            "items": {
                              "description": "A voice receiver.",
                              "properties": {
                                "countryCode": {
                                  "description": "The country code of the voice receiver.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the voice receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                },
                                "phoneNumber": {
                                  "description": "The phone number of the voice receiver.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "countryCode",
                                "phoneNumber"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          },
                          "webhookReceivers": {
                            "description": "The list of webhook receivers that are part of this action group.",
                            "items": {
                              "description": "A webhook receiver.",
                              "properties": {
                                "identifierUri": {
                                  "description": "Indicates the identifier uri for aad auth.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the webhook receiver. Names must be unique across all receivers within an action group.",
                                  "type": "string"
                                },
                                "objectId": {
                                  "description": "Indicates the webhook app object Id for aad auth.",
                                  "type": "string"
                                },
                                "serviceUri": {
                                  "description": "The URI where webhooks should be sent.",
                                  "type": "string"
                                },
                                "tenantId": {
                                  "description": "Indicates the tenant id for aad auth.",
                                  "type": "string"
                                },
                                "useAadAuth": {
                                  "default": false,
                                  "description": "Indicates whether or not use AAD authentication.",
                                  "type": "boolean"
                                },
                                "useCommonAlertSchema": {
                                  "default": false,
                                  "description": "Indicates whether to use common alert schema.",
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "name",
                                "serviceUri"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "groupShortName",
                          "enabled"
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ActionGroupList"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An Azure action group for patch operations.",
              "properties": {
                "enabled": {
                  "default": true,
                  "description": "Indicates whether this action group is enabled. If an action group is not enabled, then none of its actions will be activated.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ActionGroupPatch"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An action group object for the body of patch operations.",
              "properties": {
                "properties": {
                  "description": "An Azure action group for patch operations.",
                  "properties": {
                    "enabled": {
                      "default": true,
                      "description": "Indicates whether this action group is enabled. If an action group is not enabled, then none of its actions will be activated.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ActionGroupPatchBody"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "An azure resource object",
                  "properties": {
                    "id": {
                      "description": "Azure resource Id",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Resource location",
                      "type": "string",
                      "x-ms-mutability": [
                        "create",
                        "read"
                      ]
                    },
                    "name": {
                      "description": "Azure resource name",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags",
                      "type": "object"
                    },
                    "type": {
                      "description": "Azure resource type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "required": [
                    "location"
                  ],
                  "type": "object",
                  "x-ms-azure-resource": true
                }
              ],
              "description": "An action group resource.",
              "properties": {
                "properties": {
                  "description": "An Azure action group.",
                  "properties": {
                    "armRoleReceivers": {
                      "description": "The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are supported.",
                      "items": {
                        "description": "An arm role receiver.",
                        "properties": {
                          "name": {
                            "description": "The name of the arm role receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          },
                          "roleId": {
                            "description": "The arm role id.",
                            "type": "string"
                          },
                          "useCommonAlertSchema": {
                            "default": false,
                            "description": "Indicates whether to use common alert schema.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "name",
                          "roleId"
                        ],
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    },
                    "automationRunbookReceivers": {
                      "description": "The list of AutomationRunbook receivers that are part of this action group.",
                      "items": {
                        "description": "The Azure Automation Runbook notification receiver.",
                        "properties": {
                          "automationAccountId": {
                            "description": "The Azure automation account Id which holds this runbook and authenticate to Azure resource.",
                            "type": "string"
                          },
                          "isGlobalRunbook": {
                            "description": "Indicates whether this instance is global runbook.",
                            "type": "boolean"
                          },
                          "name": {
                            "description": "Indicates name of the webhook.",
                            "type": "string"
                          },
                          "runbookName": {
                            "description": "The name for this runbook.",
                            "type": "string"
                          },
                          "serviceUri": {
                            "description": "The URI where webhooks should be sent.",
                            "type": "string"
                          },
                          "useCommonAlertSchema": {
                            "default": false,
                            "description": "Indicates whether to use common alert schema.",
                            "type": "boolean"
                          },
                          "webhookResourceId": {
                            "description": "The resource id for webhook linked to this runbook.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "automationAccountId",
                          "runbookName",
                          "webhookResourceId",
                          "isGlobalRunbook"
                        ],
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    },
                    "azureAppPushReceivers": {
                      "description": "The list of AzureAppPush receivers that are part of this action group.",
                      "items": {
                        "description": "The Azure mobile App push notification receiver.",
                        "properties": {
                          "emailAddress": {
                            "description": "The email address registered for the Azure mobile app.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "emailAddress"
                        ],
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    },
                    "azureFunctionReceivers": {
                      "description": "The list of azure function receivers that are part of this action group.",
                      "items": {
                        "description": "An azure function receiver.",
                        "properties": {
                          "functionAppResourceId": {
                            "description": "The azure resource id of the function app.",
                            "type": "string"
                          },
                          "functionName": {
                            "description": "The function name in the function app.",
                            "type": "string"
                          },
                          "httpTriggerUrl": {
                            "description": "The http trigger url where http request sent to.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the azure function receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          },
                          "useCommonAlertSchema": {
                            "default": false,
                            "description": "Indicates whether to use common alert schema.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "name",
                          "functionAppResourceId",
                          "functionName",
                          "httpTriggerUrl"
                        ],
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    },
                    "emailReceivers": {
                      "description": "The list of email receivers that are part of this action group.",
                      "items": {
                        "description": "An email receiver.",
                        "properties": {
                          "emailAddress": {
                            "description": "The email address of this receiver.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the email receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          },
                          "status": {
                            "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                            "enum": [
                              "NotSpecified",
                              "Enabled",
                              "Disabled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ReceiverStatus"
                            }
                          },
                          "useCommonAlertSchema": {
                            "default": false,
                            "description": "Indicates whether to use common alert schema.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "name",
                          "emailAddress"
                        ],
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    },
                    "enabled": {
                      "default": true,
                      "description": "Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications.",
                      "type": "boolean"
                    },
                    "eventHubReceivers": {
                      "description": "The list of event hub receivers that are part of this action group.",
                      "items": {
                        "description": "An Event hub receiver.",
                        "properties": {
                          "eventHubName": {
                            "description": "The name of the specific Event Hub queue",
                            "type": "string"
                          },
                          "eventHubNameSpace": {
                            "description": "The Event Hub namespace",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the Event hub receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          },
                          "subscriptionId": {
                            "description": "The Id for the subscription containing this event hub",
                            "type": "string"
                          },
                          "tenantId": {
                            "description": "The tenant Id for the subscription containing this event hub",
                            "type": "string"
                          },
                          "useCommonAlertSchema": {
                            "default": false,
                            "description": "Indicates whether to use common alert schema.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "name",
                          "eventHubNameSpace",
                          "eventHubName",
                          "subscriptionId"
                        ],
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    },
                    "groupShortName": {
                      "description": "The short name of the action group. This will be used in SMS messages.",
                      "maxLength": 12,
                      "type": "string"
                    },
                    "itsmReceivers": {
                      "description": "The list of ITSM receivers that are part of this action group.",
                      "items": {
                        "description": "An Itsm receiver.",
                        "properties": {
                          "connectionId": {
                            "description": "Unique identification of ITSM connection among multiple defined in above workspace.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the Itsm receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          },
                          "region": {
                            "description": "Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'",
                            "type": "string"
                          },
                          "ticketConfiguration": {
                            "description": "JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.",
                            "type": "string"
                          },
                          "workspaceId": {
                            "description": "OMS LA instance identifier.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "workspaceId",
                          "connectionId",
                          "ticketConfiguration",
                          "region"
                        ],
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    },
                    "logicAppReceivers": {
                      "description": "The list of logic app receivers that are part of this action group.",
                      "items": {
                        "description": "A logic app receiver.",
                        "properties": {
                          "callbackUrl": {
                            "description": "The callback url where http request sent to.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the logic app receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          },
                          "resourceId": {
                            "description": "The azure resource id of the logic app receiver.",
                            "type": "string"
                          },
                          "useCommonAlertSchema": {
                            "default": false,
                            "description": "Indicates whether to use common alert schema.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "name",
                          "resourceId",
                          "callbackUrl"
                        ],
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    },
                    "smsReceivers": {
                      "description": "The list of SMS receivers that are part of this action group.",
                      "items": {
                        "description": "An SMS receiver.",
                        "properties": {
                          "countryCode": {
                            "description": "The country code of the SMS receiver.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the SMS receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          },
                          "phoneNumber": {
                            "description": "The phone number of the SMS receiver.",
                            "type": "string"
                          },
                          "status": {
                            "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                            "enum": [
                              "NotSpecified",
                              "Enabled",
                              "Disabled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ReceiverStatus"
                            }
                          }
                        },
                        "required": [
                          "name",
                          "countryCode",
                          "phoneNumber"
                        ],
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    },
                    "voiceReceivers": {
                      "description": "The list of voice receivers that are part of this action group.",
                      "items": {
                        "description": "A voice receiver.",
                        "properties": {
                          "countryCode": {
                            "description": "The country code of the voice receiver.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the voice receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          },
                          "phoneNumber": {
                            "description": "The phone number of the voice receiver.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "countryCode",
                          "phoneNumber"
                        ],
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    },
                    "webhookReceivers": {
                      "description": "The list of webhook receivers that are part of this action group.",
                      "items": {
                        "description": "A webhook receiver.",
                        "properties": {
                          "identifierUri": {
                            "description": "Indicates the identifier uri for aad auth.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the webhook receiver. Names must be unique across all receivers within an action group.",
                            "type": "string"
                          },
                          "objectId": {
                            "description": "Indicates the webhook app object Id for aad auth.",
                            "type": "string"
                          },
                          "serviceUri": {
                            "description": "The URI where webhooks should be sent.",
                            "type": "string"
                          },
                          "tenantId": {
                            "description": "Indicates the tenant id for aad auth.",
                            "type": "string"
                          },
                          "useAadAuth": {
                            "default": false,
                            "description": "Indicates whether or not use AAD authentication.",
                            "type": "boolean"
                          },
                          "useCommonAlertSchema": {
                            "default": false,
                            "description": "Indicates whether to use common alert schema.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "name",
                          "serviceUri"
                        ],
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    }
                  },
                  "required": [
                    "groupShortName",
                    "enabled"
                  ],
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ActionGroupResource"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An arm role receiver.",
              "properties": {
                "name": {
                  "description": "The name of the arm role receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                },
                "roleId": {
                  "description": "The arm role id.",
                  "type": "string"
                },
                "useCommonAlertSchema": {
                  "default": false,
                  "description": "Indicates whether to use common alert schema.",
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "roleId"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ArmRoleReceiver"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Azure Automation Runbook notification receiver.",
              "properties": {
                "automationAccountId": {
                  "description": "The Azure automation account Id which holds this runbook and authenticate to Azure resource.",
                  "type": "string"
                },
                "isGlobalRunbook": {
                  "description": "Indicates whether this instance is global runbook.",
                  "type": "boolean"
                },
                "name": {
                  "description": "Indicates name of the webhook.",
                  "type": "string"
                },
                "runbookName": {
                  "description": "The name for this runbook.",
                  "type": "string"
                },
                "serviceUri": {
                  "description": "The URI where webhooks should be sent.",
                  "type": "string"
                },
                "useCommonAlertSchema": {
                  "default": false,
                  "description": "Indicates whether to use common alert schema.",
                  "type": "boolean"
                },
                "webhookResourceId": {
                  "description": "The resource id for webhook linked to this runbook.",
                  "type": "string"
                }
              },
              "required": [
                "automationAccountId",
                "runbookName",
                "webhookResourceId",
                "isGlobalRunbook"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/AutomationRunbookReceiver"
          },
          {
            "oldValue": {
              "description": "Describes the format of Error response.",
              "properties": {
                "error": {
                  "description": "The error object.",
                  "properties": {
                    "code": {
                      "description": "One of a server-defined set of error codes.",
                      "type": "string"
                    },
                    "details": {
                      "description": "A human-readable representation of the error's details.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human-readable representation of the error.",
                      "type": "string"
                    },
                    "target": {
                      "description": "The target of the particular error.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "systemData": {
                  "description": "Metadata pertaining to creation and last modification of the resource.",
                  "properties": {
                    "createdAt": {
                      "description": "The timestamp of resource creation (UTC).",
                      "format": "date-time",
                      "type": "string"
                    },
                    "createdBy": {
                      "description": "The identity that created the resource.",
                      "type": "string"
                    },
                    "createdByType": {
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "createdByType"
                      }
                    },
                    "lastModifiedAt": {
                      "description": "The timestamp of resource last modification (UTC)",
                      "format": "date-time",
                      "type": "string"
                    },
                    "lastModifiedBy": {
                      "description": "The identity that last modified the resource.",
                      "type": "string"
                    },
                    "lastModifiedByType": {
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "createdByType"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AutoscaleErrorResponse"
          },
          {
            "oldValue": {
              "description": "Autoscale notification.",
              "properties": {
                "email": {
                  "description": "Email notification of an autoscale event.",
                  "properties": {
                    "customEmails": {
                      "description": "the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "sendToSubscriptionAdministrator": {
                      "default": false,
                      "description": "a value indicating whether to send email to subscription administrator.",
                      "type": "boolean"
                    },
                    "sendToSubscriptionCoAdministrators": {
                      "default": false,
                      "description": "a value indicating whether to send email to subscription co-administrators.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "operation": {
                  "description": "the operation associated with the notification and its value must be \"scale\"",
                  "enum": [
                    "Scale"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "OperationType"
                  }
                },
                "webhooks": {
                  "description": "the collection of webhook notifications.",
                  "items": {
                    "description": "Webhook notification of an autoscale event.",
                    "properties": {
                      "properties": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "a property bag of settings. This value can be empty.",
                        "type": "object"
                      },
                      "serviceUri": {
                        "description": "the service address to receive the notification.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                }
              },
              "required": [
                "operation"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AutoscaleNotification"
          },
          {
            "oldValue": {
              "description": "Autoscale profile.",
              "properties": {
                "capacity": {
                  "description": "The number of instances that can be used during this profile.",
                  "properties": {
                    "default": {
                      "description": "the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.",
                      "type": "string"
                    },
                    "maximum": {
                      "description": "the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.",
                      "type": "string"
                    },
                    "minimum": {
                      "description": "the minimum number of instances for the resource.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "minimum",
                    "maximum",
                    "default"
                  ],
                  "type": "object"
                },
                "fixedDate": {
                  "description": "A specific date-time for the profile.",
                  "properties": {
                    "end": {
                      "description": "the end time for the profile in ISO 8601 format.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "start": {
                      "description": "the start time for the profile in ISO 8601 format.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "timeZone": {
                      "description": "the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time",
                      "type": "string"
                    }
                  },
                  "required": [
                    "start",
                    "end"
                  ],
                  "type": "object"
                },
                "name": {
                  "description": "the name of the profile.",
                  "type": "string"
                },
                "recurrence": {
                  "description": "The repeating times at which this profile begins. This element is not used if the FixedDate element is used.",
                  "properties": {
                    "frequency": {
                      "description": "the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.",
                      "enum": [
                        "None",
                        "Second",
                        "Minute",
                        "Hour",
                        "Day",
                        "Week",
                        "Month",
                        "Year"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "RecurrenceFrequency"
                      }
                    },
                    "schedule": {
                      "description": "The scheduling constraints for when the profile begins.",
                      "properties": {
                        "days": {
                          "description": "the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "hours": {
                          "description": "A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).",
                          "items": {
                            "format": "int32",
                            "type": "integer"
                          },
                          "type": "array"
                        },
                        "minutes": {
                          "description": "A collection of minutes at which the profile takes effect at.",
                          "items": {
                            "format": "int32",
                            "type": "integer"
                          },
                          "type": "array"
                        },
                        "timeZone": {
                          "description": "the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time",
                          "type": "string"
                        }
                      },
                      "required": [
                        "timeZone",
                        "days",
                        "hours",
                        "minutes"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "frequency",
                    "schedule"
                  ],
                  "type": "object"
                },
                "rules": {
                  "description": "the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.",
                  "items": {
                    "description": "A rule that provide the triggers and parameters for the scaling action.",
                    "properties": {
                      "metricTrigger": {
                        "description": "The trigger that results in a scaling action.",
                        "properties": {
                          "dimensions": {
                            "description": "List of dimension conditions. For example: [{\"DimensionName\":\"AppName\",\"Operator\":\"Equals\",\"Values\":[\"App1\"]},{\"DimensionName\":\"Deployment\",\"Operator\":\"Equals\",\"Values\":[\"default\"]}].",
                            "items": {
                              "description": "Specifies an auto scale rule metric dimension.",
                              "properties": {
                                "DimensionName": {
                                  "description": "Name of the dimension.",
                                  "type": "string"
                                },
                                "Operator": {
                                  "description": "the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values",
                                  "enum": [
                                    "Equals",
                                    "NotEquals"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ScaleRuleMetricDimensionOperationType"
                                  }
                                },
                                "Values": {
                                  "description": "list of dimension values. For example: [\"App1\",\"App2\"].",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "DimensionName",
                                "Operator",
                                "Values"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          },
                          "dividePerInstance": {
                            "description": "a value indicating whether metric should divide per instance.",
                            "type": "boolean"
                          },
                          "metricName": {
                            "description": "the name of the metric that defines what the rule monitors.",
                            "type": "string"
                          },
                          "metricNamespace": {
                            "description": "the namespace of the metric that defines what the rule monitors.",
                            "type": "string"
                          },
                          "metricResourceLocation": {
                            "description": "the location of the resource the rule monitors.",
                            "type": "string"
                          },
                          "metricResourceUri": {
                            "description": "the resource identifier of the resource the rule monitors.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "the operator that is used to compare the metric data and the threshold.",
                            "enum": [
                              "Equals",
                              "NotEquals",
                              "GreaterThan",
                              "GreaterThanOrEqual",
                              "LessThan",
                              "LessThanOrEqual"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ComparisonOperationType"
                            }
                          },
                          "statistic": {
                            "description": "the metric statistic type. How the metrics from multiple instances are combined.",
                            "enum": [
                              "Average",
                              "Min",
                              "Max",
                              "Sum",
                              "Count"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "MetricStatisticType"
                            }
                          },
                          "threshold": {
                            "description": "the threshold of the metric that triggers the scale action.",
                            "format": "double",
                            "type": "number"
                          },
                          "timeAggregation": {
                            "description": "time aggregation type. How the data that is collected should be combined over time. The default value is Average.",
                            "enum": [
                              "Average",
                              "Minimum",
                              "Maximum",
                              "Total",
                              "Count",
                              "Last"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "TimeAggregationType"
                            }
                          },
                          "timeGrain": {
                            "description": "the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.",
                            "format": "duration",
                            "type": "string"
                          },
                          "timeWindow": {
                            "description": "the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.",
                            "format": "duration",
                            "type": "string"
                          }
                        },
                        "required": [
                          "metricName",
                          "metricResourceUri",
                          "timeGrain",
                          "statistic",
                          "timeWindow",
                          "timeAggregation",
                          "operator",
                          "threshold"
                        ],
                        "type": "object"
                      },
                      "scaleAction": {
                        "description": "The parameters for the scaling action.",
                        "properties": {
                          "cooldown": {
                            "description": "the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.",
                            "format": "duration",
                            "type": "string"
                          },
                          "direction": {
                            "description": "the scale direction. Whether the scaling action increases or decreases the number of instances.",
                            "enum": [
                              "None",
                              "Increase",
                              "Decrease"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ScaleDirection"
                            }
                          },
                          "type": {
                            "description": "the type of action that should occur when the scale rule fires.",
                            "enum": [
                              "ChangeCount",
                              "PercentChangeCount",
                              "ExactCount",
                              "ServiceAllowedNextValue"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "ScaleType"
                            }
                          },
                          "value": {
                            "default": "1",
                            "description": "the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "direction",
                          "type",
                          "cooldown"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "scaleAction",
                      "metricTrigger"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                }
              },
              "required": [
                "rules",
                "name",
                "capacity"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AutoscaleProfile"
          },
          {
            "oldValue": {
              "description": "A setting that contains all of the configuration for the automatic scaling of a resource.",
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "the enabled flag. Specifies whether automatic scaling is enabled for the resource. The default value is 'false'.",
                  "type": "boolean"
                },
                "name": {
                  "description": "the name of the autoscale setting.",
                  "type": "string"
                },
                "notifications": {
                  "description": "the collection of notifications.",
                  "items": {
                    "description": "Autoscale notification.",
                    "properties": {
                      "email": {
                        "description": "Email notification of an autoscale event.",
                        "properties": {
                          "customEmails": {
                            "description": "the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "sendToSubscriptionAdministrator": {
                            "default": false,
                            "description": "a value indicating whether to send email to subscription administrator.",
                            "type": "boolean"
                          },
                          "sendToSubscriptionCoAdministrators": {
                            "default": false,
                            "description": "a value indicating whether to send email to subscription co-administrators.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "operation": {
                        "description": "the operation associated with the notification and its value must be \"scale\"",
                        "enum": [
                          "Scale"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "OperationType"
                        }
                      },
                      "webhooks": {
                        "description": "the collection of webhook notifications.",
                        "items": {
                          "description": "Webhook notification of an autoscale event.",
                          "properties": {
                            "properties": {
                              "additionalProperties": {
                                "type": "string"
                              },
                              "description": "a property bag of settings. This value can be empty.",
                              "type": "object"
                            },
                            "serviceUri": {
                              "description": "the service address to receive the notification.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array",
                        "x-ms-identifiers": []
                      }
                    },
                    "required": [
                      "operation"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "predictiveAutoscalePolicy": {
                  "description": "The parameters for enabling predictive autoscale.",
                  "properties": {
                    "scaleLookAheadTime": {
                      "description": "the amount of time to specify by which instances are launched in advance. It must be between 1 minute and 60 minutes in ISO 8601 format.",
                      "format": "duration",
                      "type": "string"
                    },
                    "scaleMode": {
                      "description": "the predictive autoscale mode",
                      "enum": [
                        "Disabled",
                        "ForecastOnly",
                        "Enabled"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "PredictiveAutoscalePolicyScaleMode"
                      }
                    }
                  },
                  "required": [
                    "scaleMode"
                  ],
                  "type": "object"
                },
                "profiles": {
                  "description": "the collection of automatic scaling profiles that specify different scaling parameters for different time periods. A maximum of 20 profiles can be specified.",
                  "items": {
                    "description": "Autoscale profile.",
                    "properties": {
                      "capacity": {
                        "description": "The number of instances that can be used during this profile.",
                        "properties": {
                          "default": {
                            "description": "the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.",
                            "type": "string"
                          },
                          "maximum": {
                            "description": "the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.",
                            "type": "string"
                          },
                          "minimum": {
                            "description": "the minimum number of instances for the resource.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "minimum",
                          "maximum",
                          "default"
                        ],
                        "type": "object"
                      },
                      "fixedDate": {
                        "description": "A specific date-time for the profile.",
                        "properties": {
                          "end": {
                            "description": "the end time for the profile in ISO 8601 format.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "start": {
                            "description": "the start time for the profile in ISO 8601 format.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "timeZone": {
                            "description": "the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "start",
                          "end"
                        ],
                        "type": "object"
                      },
                      "name": {
                        "description": "the name of the profile.",
                        "type": "string"
                      },
                      "recurrence": {
                        "description": "The repeating times at which this profile begins. This element is not used if the FixedDate element is used.",
                        "properties": {
                          "frequency": {
                            "description": "the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.",
                            "enum": [
                              "None",
                              "Second",
                              "Minute",
                              "Hour",
                              "Day",
                              "Week",
                              "Month",
                              "Year"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "RecurrenceFrequency"
                            }
                          },
                          "schedule": {
                            "description": "The scheduling constraints for when the profile begins.",
                            "properties": {
                              "days": {
                                "description": "the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "hours": {
                                "description": "A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).",
                                "items": {
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "type": "array"
                              },
                              "minutes": {
                                "description": "A collection of minutes at which the profile takes effect at.",
                                "items": {
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "type": "array"
                              },
                              "timeZone": {
                                "description": "the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time",
                                "type": "string"
                              }
                            },
                            "required": [
                              "timeZone",
                              "days",
                              "hours",
                              "minutes"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "frequency",
                          "schedule"
                        ],
                        "type": "object"
                      },
                      "rules": {
                        "description": "the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.",
                        "items": {
                          "description": "A rule that provide the triggers and parameters for the scaling action.",
                          "properties": {
                            "metricTrigger": {
                              "description": "The trigger that results in a scaling action.",
                              "properties": {
                                "dimensions": {
                                  "description": "List of dimension conditions. For example: [{\"DimensionName\":\"AppName\",\"Operator\":\"Equals\",\"Values\":[\"App1\"]},{\"DimensionName\":\"Deployment\",\"Operator\":\"Equals\",\"Values\":[\"default\"]}].",
                                  "items": {
                                    "description": "Specifies an auto scale rule metric dimension.",
                                    "properties": {
                                      "DimensionName": {
                                        "description": "Name of the dimension.",
                                        "type": "string"
                                      },
                                      "Operator": {
                                        "description": "the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values",
                                        "enum": [
                                          "Equals",
                                          "NotEquals"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ScaleRuleMetricDimensionOperationType"
                                        }
                                      },
                                      "Values": {
                                        "description": "list of dimension values. For example: [\"App1\",\"App2\"].",
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "DimensionName",
                                      "Operator",
                                      "Values"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array",
                                  "x-ms-identifiers": []
                                },
                                "dividePerInstance": {
                                  "description": "a value indicating whether metric should divide per instance.",
                                  "type": "boolean"
                                },
                                "metricName": {
                                  "description": "the name of the metric that defines what the rule monitors.",
                                  "type": "string"
                                },
                                "metricNamespace": {
                                  "description": "the namespace of the metric that defines what the rule monitors.",
                                  "type": "string"
                                },
                                "metricResourceLocation": {
                                  "description": "the location of the resource the rule monitors.",
                                  "type": "string"
                                },
                                "metricResourceUri": {
                                  "description": "the resource identifier of the resource the rule monitors.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "the operator that is used to compare the metric data and the threshold.",
                                  "enum": [
                                    "Equals",
                                    "NotEquals",
                                    "GreaterThan",
                                    "GreaterThanOrEqual",
                                    "LessThan",
                                    "LessThanOrEqual"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "ComparisonOperationType"
                                  }
                                },
                                "statistic": {
                                  "description": "the metric statistic type. How the metrics from multiple instances are combined.",
                                  "enum": [
                                    "Average",
                                    "Min",
                                    "Max",
                                    "Sum",
                                    "Count"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "MetricStatisticType"
                                  }
                                },
                                "threshold": {
                                  "description": "the threshold of the metric that triggers the scale action.",
                                  "format": "double",
                                  "type": "number"
                                },
                                "timeAggregation": {
                                  "description": "time aggregation type. How the data that is collected should be combined over time. The default value is Average.",
                                  "enum": [
                                    "Average",
                                    "Minimum",
                                    "Maximum",
                                    "Total",
                                    "Count",
                                    "Last"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "TimeAggregationType"
                                  }
                                },
                                "timeGrain": {
                                  "description": "the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.",
                                  "format": "duration",
                                  "type": "string"
                                },
                                "timeWindow": {
                                  "description": "the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.",
                                  "format": "duration",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "metricName",
                                "metricResourceUri",
                                "timeGrain",
                                "statistic",
                                "timeWindow",
                                "timeAggregation",
                                "operator",
                                "threshold"
                              ],
                              "type": "object"
                            },
                            "scaleAction": {
                              "description": "The parameters for the scaling action.",
                              "properties": {
                                "cooldown": {
                                  "description": "the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.",
                                  "format": "duration",
                                  "type": "string"
                                },
                                "direction": {
                                  "description": "the scale direction. Whether the scaling action increases or decreases the number of instances.",
                                  "enum": [
                                    "None",
                                    "Increase",
                                    "Decrease"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "ScaleDirection"
                                  }
                                },
                                "type": {
                                  "description": "the type of action that should occur when the scale rule fires.",
                                  "enum": [
                                    "ChangeCount",
                                    "PercentChangeCount",
                                    "ExactCount",
                                    "ServiceAllowedNextValue"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "ScaleType"
                                  }
                                },
                                "value": {
                                  "default": "1",
                                  "description": "the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "direction",
                                "type",
                                "cooldown"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "scaleAction",
                            "metricTrigger"
                          ],
                          "type": "object"
                        },
                        "type": "array",
                        "x-ms-identifiers": []
                      }
                    },
                    "required": [
                      "rules",
                      "name",
                      "capacity"
                    ],
                    "type": "object"
                  },
                  "maxItems": 20,
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "targetResourceLocation": {
                  "description": "the location of the resource that the autoscale setting should be added to.",
                  "type": "string"
                },
                "targetResourceUri": {
                  "description": "the resource identifier of the resource that the autoscale setting should be added to.",
                  "type": "string"
                }
              },
              "required": [
                "profiles"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AutoscaleSetting"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "The autoscale setting resource.",
                  "properties": {
                    "id": {
                      "description": "Azure resource Id",
                      "readOnly": true,
                      "type": "string"
                    },
                    "location": {
                      "description": "Resource location",
                      "type": "string",
                      "x-ms-mutability": [
                        "create",
                        "read"
                      ]
                    },
                    "name": {
                      "description": "Azure resource name",
                      "readOnly": true,
                      "type": "string"
                    },
                    "systemData": {
                      "description": "Metadata pertaining to creation and last modification of the resource.",
                      "properties": {
                        "createdAt": {
                          "description": "The timestamp of resource creation (UTC).",
                          "format": "date-time",
                          "type": "string"
                        },
                        "createdBy": {
                          "description": "The identity that created the resource.",
                          "type": "string"
                        },
                        "createdByType": {
                          "description": "The type of identity that created the resource.",
                          "enum": [
                            "User",
                            "Application",
                            "ManagedIdentity",
                            "Key"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "createdByType"
                          }
                        },
                        "lastModifiedAt": {
                          "description": "The timestamp of resource last modification (UTC)",
                          "format": "date-time",
                          "type": "string"
                        },
                        "lastModifiedBy": {
                          "description": "The identity that last modified the resource.",
                          "type": "string"
                        },
                        "lastModifiedByType": {
                          "description": "The type of identity that last modified the resource.",
                          "enum": [
                            "User",
                            "Application",
                            "ManagedIdentity",
                            "Key"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "createdByType"
                          }
                        }
                      },
                      "readOnly": true,
                      "type": "object"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than 256 characters.",
                      "type": "object"
                    },
                    "type": {
                      "description": "Azure resource type",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "required": [
                    "location"
                  ],
                  "type": "object",
                  "x-ms-azure-resource": true
                }
              ],
              "description": "The autoscale setting resource.",
              "properties": {
                "properties": {
                  "description": "A setting that contains all of the configuration for the automatic scaling of a resource.",
                  "properties": {
                    "enabled": {
                      "default": false,
                      "description": "the enabled flag. Specifies whether automatic scaling is enabled for the resource. The default value is 'false'.",
                      "type": "boolean"
                    },
                    "name": {
                      "description": "the name of the autoscale setting.",
                      "type": "string"
                    },
                    "notifications": {
                      "description": "the collection of notifications.",
                      "items": {
                        "description": "Autoscale notification.",
                        "properties": {
                          "email": {
                            "description": "Email notification of an autoscale event.",
                            "properties": {
                              "customEmails": {
                                "description": "the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "sendToSubscriptionAdministrator": {
                                "default": false,
                                "description": "a value indicating whether to send email to subscription administrator.",
                                "type": "boolean"
                              },
                              "sendToSubscriptionCoAdministrators": {
                                "default": false,
                                "description": "a value indicating whether to send email to subscription co-administrators.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "operation": {
                            "description": "the operation associated with the notification and its value must be \"scale\"",
                            "enum": [
                              "Scale"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "OperationType"
                            }
                          },
                          "webhooks": {
                            "description": "the collection of webhook notifications.",
                            "items": {
                              "description": "Webhook notification of an autoscale event.",
                              "properties": {
                                "properties": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "a property bag of settings. This value can be empty.",
                                  "type": "object"
                                },
                                "serviceUri": {
                                  "description": "the service address to receive the notification.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "operation"
                        ],
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    },
                    "predictiveAutoscalePolicy": {
                      "description": "The parameters for enabling predictive autoscale.",
                      "properties": {
                        "scaleLookAheadTime": {
                          "description": "the amount of time to specify by which instances are launched in advance. It must be between 1 minute and 60 minutes in ISO 8601 format.",
                          "format": "duration",
                          "type": "string"
                        },
                        "scaleMode": {
                          "description": "the predictive autoscale mode",
                          "enum": [
                            "Disabled",
                            "ForecastOnly",
                            "Enabled"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "PredictiveAutoscalePolicyScaleMode"
                          }
                        }
                      },
                      "required": [
                        "scaleMode"
                      ],
                      "type": "object"
                    },
                    "profiles": {
                      "description": "the collection of automatic scaling profiles that specify different scaling parameters for different time periods. A maximum of 20 profiles can be specified.",
                      "items": {
                        "description": "Autoscale profile.",
                        "properties": {
                          "capacity": {
                            "description": "The number of instances that can be used during this profile.",
                            "properties": {
                              "default": {
                                "description": "the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.",
                                "type": "string"
                              },
                              "maximum": {
                                "description": "the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.",
                                "type": "string"
                              },
                              "minimum": {
                                "description": "the minimum number of instances for the resource.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "minimum",
                              "maximum",
                              "default"
                            ],
                            "type": "object"
                          },
                          "fixedDate": {
                            "description": "A specific date-time for the profile.",
                            "properties": {
                              "end": {
                                "description": "the end time for the profile in ISO 8601 format.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "start": {
                                "description": "the start time for the profile in ISO 8601 format.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "timeZone": {
                                "description": "the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time",
                                "type": "string"
                              }
                            },
                            "required": [
                              "start",
                              "end"
                            ],
                            "type": "object"
                          },
                          "name": {
                            "description": "the name of the profile.",
                            "type": "string"
                          },
                          "recurrence": {
                            "description": "The repeating times at which this profile begins. This element is not used if the FixedDate element is used.",
                            "properties": {
                              "frequency": {
                                "description": "the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.",
                                "enum": [
                                  "None",
                                  "Second",
                                  "Minute",
                                  "Hour",
                                  "Day",
                                  "Week",
                                  "Month",
                                  "Year"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "RecurrenceFrequency"
                                }
                              },
                              "schedule": {
                                "description": "The scheduling constraints for when the profile begins.",
                                "properties": {
                                  "days": {
                                    "description": "the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "hours": {
                                    "description": "A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).",
                                    "items": {
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "minutes": {
                                    "description": "A collection of minutes at which the profile takes effect at.",
                                    "items": {
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "timeZone": {
                                    "description": "the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "timeZone",
                                  "days",
                                  "hours",
                                  "minutes"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "frequency",
                              "schedule"
                            ],
                            "type": "object"
                          },
                          "rules": {
                            "description": "the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.",
                            "items": {
                              "description": "A rule that provide the triggers and parameters for the scaling action.",
                              "properties": {
                                "metricTrigger": {
                                  "description": "The trigger that results in a scaling action.",
                                  "properties": {
                                    "dimensions": {
                                      "description": "List of dimension conditions. For example: [{\"DimensionName\":\"AppName\",\"Operator\":\"Equals\",\"Values\":[\"App1\"]},{\"DimensionName\":\"Deployment\",\"Operator\":\"Equals\",\"Values\":[\"default\"]}].",
                                      "items": {
                                        "description": "Specifies an auto scale rule metric dimension.",
                                        "properties": {
                                          "DimensionName": {
                                            "description": "Name of the dimension.",
                                            "type": "string"
                                          },
                                          "Operator": {
                                            "description": "the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values",
                                            "enum": [
                                              "Equals",
                                              "NotEquals"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "ScaleRuleMetricDimensionOperationType"
                                            }
                                          },
                                          "Values": {
                                            "description": "list of dimension values. For example: [\"App1\",\"App2\"].",
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "DimensionName",
                                          "Operator",
                                          "Values"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array",
                                      "x-ms-identifiers": []
                                    },
                                    "dividePerInstance": {
                                      "description": "a value indicating whether metric should divide per instance.",
                                      "type": "boolean"
                                    },
                                    "metricName": {
                                      "description": "the name of the metric that defines what the rule monitors.",
                                      "type": "string"
                                    },
                                    "metricNamespace": {
                                      "description": "the namespace of the metric that defines what the rule monitors.",
                                      "type": "string"
                                    },
                                    "metricResourceLocation": {
                                      "description": "the location of the resource the rule monitors.",
                                      "type": "string"
                                    },
                                    "metricResourceUri": {
                                      "description": "the resource identifier of the resource the rule monitors.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "the operator that is used to compare the metric data and the threshold.",
                                      "enum": [
                                        "Equals",
                                        "NotEquals",
                                        "GreaterThan",
                                        "GreaterThanOrEqual",
                                        "LessThan",
                                        "LessThanOrEqual"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "ComparisonOperationType"
                                      }
                                    },
                                    "statistic": {
                                      "description": "the metric statistic type. How the metrics from multiple instances are combined.",
                                      "enum": [
                                        "Average",
                                        "Min",
                                        "Max",
                                        "Sum",
                                        "Count"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "MetricStatisticType"
                                      }
                                    },
                                    "threshold": {
                                      "description": "the threshold of the metric that triggers the scale action.",
                                      "format": "double",
                                      "type": "number"
                                    },
                                    "timeAggregation": {
                                      "description": "time aggregation type. How the data that is collected should be combined over time. The default value is Average.",
                                      "enum": [
                                        "Average",
                                        "Minimum",
                                        "Maximum",
                                        "Total",
                                        "Count",
                                        "Last"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "TimeAggregationType"
                                      }
                                    },
                                    "timeGrain": {
                                      "description": "the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.",
                                      "format": "duration",
                                      "type": "string"
                                    },
                                    "timeWindow": {
                                      "description": "the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.",
                                      "format": "duration",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "metricName",
                                    "metricResourceUri",
                                    "timeGrain",
                                    "statistic",
                                    "timeWindow",
                                    "timeAggregation",
                                    "operator",
                                    "threshold"
                                  ],
                                  "type": "object"
                                },
                                "scaleAction": {
                                  "description": "The parameters for the scaling action.",
                                  "properties": {
                                    "cooldown": {
                                      "description": "the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.",
                                      "format": "duration",
                                      "type": "string"
                                    },
                                    "direction": {
                                      "description": "the scale direction. Whether the scaling action increases or decreases the number of instances.",
                                      "enum": [
                                        "None",
                                        "Increase",
                                        "Decrease"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "ScaleDirection"
                                      }
                                    },
                                    "type": {
                                      "description": "the type of action that should occur when the scale rule fires.",
                                      "enum": [
                                        "ChangeCount",
                                        "PercentChangeCount",
                                        "ExactCount",
                                        "ServiceAllowedNextValue"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "ScaleType"
                                      }
                                    },
                                    "value": {
                                      "default": "1",
                                      "description": "the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "direction",
                                    "type",
                                    "cooldown"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "scaleAction",
                                "metricTrigger"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "rules",
                          "name",
                          "capacity"
                        ],
                        "type": "object"
                      },
                      "maxItems": 20,
                      "type": "array",
                      "x-ms-identifiers": []
                    },
                    "targetResourceLocation": {
                      "description": "the location of the resource that the autoscale setting should be added to.",
                      "type": "string"
                    },
                    "targetResourceUri": {
                      "description": "the resource identifier of the resource that the autoscale setting should be added to.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "profiles"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "properties"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AutoscaleSettingResource"
          },
          {
            "oldValue": {
              "description": "Represents a collection of autoscale setting resources.",
              "properties": {
                "nextLink": {
                  "description": "URL to get the next set of results.",
                  "type": "string"
                },
                "value": {
                  "description": "the values for the autoscale setting resources.",
                  "items": {
                    "allOf": [
                      {
                        "description": "The autoscale setting resource.",
                        "properties": {
                          "id": {
                            "description": "Azure resource Id",
                            "readOnly": true,
                            "type": "string"
                          },
                          "location": {
                            "description": "Resource location",
                            "type": "string",
                            "x-ms-mutability": [
                              "create",
                              "read"
                            ]
                          },
                          "name": {
                            "description": "Azure resource name",
                            "readOnly": true,
                            "type": "string"
                          },
                          "systemData": {
                            "description": "Metadata pertaining to creation and last modification of the resource.",
                            "properties": {
                              "createdAt": {
                                "description": "The timestamp of resource creation (UTC).",
                                "format": "date-time",
                                "type": "string"
                              },
                              "createdBy": {
                                "description": "The identity that created the resource.",
                                "type": "string"
                              },
                              "createdByType": {
                                "description": "The type of identity that created the resource.",
                                "enum": [
                                  "User",
                                  "Application",
                                  "ManagedIdentity",
                                  "Key"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "createdByType"
                                }
                              },
                              "lastModifiedAt": {
                                "description": "The timestamp of resource last modification (UTC)",
                                "format": "date-time",
                                "type": "string"
                              },
                              "lastModifiedBy": {
                                "description": "The identity that last modified the resource.",
                                "type": "string"
                              },
                              "lastModifiedByType": {
                                "description": "The type of identity that last modified the resource.",
                                "enum": [
                                  "User",
                                  "Application",
                                  "ManagedIdentity",
                                  "Key"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "createdByType"
                                }
                              }
                            },
                            "readOnly": true,
                            "type": "object"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than 256 characters.",
                            "type": "object"
                          },
                          "type": {
                            "description": "Azure resource type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "location"
                        ],
                        "type": "object",
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "The autoscale setting resource.",
                    "properties": {
                      "properties": {
                        "description": "A setting that contains all of the configuration for the automatic scaling of a resource.",
                        "properties": {
                          "enabled": {
                            "default": false,
                            "description": "the enabled flag. Specifies whether automatic scaling is enabled for the resource. The default value is 'false'.",
                            "type": "boolean"
                          },
                          "name": {
                            "description": "the name of the autoscale setting.",
                            "type": "string"
                          },
                          "notifications": {
                            "description": "the collection of notifications.",
                            "items": {
                              "description": "Autoscale notification.",
                              "properties": {
                                "email": {
                                  "description": "Email notification of an autoscale event.",
                                  "properties": {
                                    "customEmails": {
                                      "description": "the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "sendToSubscriptionAdministrator": {
                                      "default": false,
                                      "description": "a value indicating whether to send email to subscription administrator.",
                                      "type": "boolean"
                                    },
                                    "sendToSubscriptionCoAdministrators": {
                                      "default": false,
                                      "description": "a value indicating whether to send email to subscription co-administrators.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "operation": {
                                  "description": "the operation associated with the notification and its value must be \"scale\"",
                                  "enum": [
                                    "Scale"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "OperationType"
                                  }
                                },
                                "webhooks": {
                                  "description": "the collection of webhook notifications.",
                                  "items": {
                                    "description": "Webhook notification of an autoscale event.",
                                    "properties": {
                                      "properties": {
                                        "additionalProperties": {
                                          "type": "string"
                                        },
                                        "description": "a property bag of settings. This value can be empty.",
                                        "type": "object"
                                      },
                                      "serviceUri": {
                                        "description": "the service address to receive the notification.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array",
                                  "x-ms-identifiers": []
                                }
                              },
                              "required": [
                                "operation"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          },
                          "predictiveAutoscalePolicy": {
                            "description": "The parameters for enabling predictive autoscale.",
                            "properties": {
                              "scaleLookAheadTime": {
                                "description": "the amount of time to specify by which instances are launched in advance. It must be between 1 minute and 60 minutes in ISO 8601 format.",
                                "format": "duration",
                                "type": "string"
                              },
                              "scaleMode": {
                                "description": "the predictive autoscale mode",
                                "enum": [
                                  "Disabled",
                                  "ForecastOnly",
                                  "Enabled"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "PredictiveAutoscalePolicyScaleMode"
                                }
                              }
                            },
                            "required": [
                              "scaleMode"
                            ],
                            "type": "object"
                          },
                          "profiles": {
                            "description": "the collection of automatic scaling profiles that specify different scaling parameters for different time periods. A maximum of 20 profiles can be specified.",
                            "items": {
                              "description": "Autoscale profile.",
                              "properties": {
                                "capacity": {
                                  "description": "The number of instances that can be used during this profile.",
                                  "properties": {
                                    "default": {
                                      "description": "the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.",
                                      "type": "string"
                                    },
                                    "maximum": {
                                      "description": "the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.",
                                      "type": "string"
                                    },
                                    "minimum": {
                                      "description": "the minimum number of instances for the resource.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "minimum",
                                    "maximum",
                                    "default"
                                  ],
                                  "type": "object"
                                },
                                "fixedDate": {
                                  "description": "A specific date-time for the profile.",
                                  "properties": {
                                    "end": {
                                      "description": "the end time for the profile in ISO 8601 format.",
                                      "format": "date-time",
                                      "type": "string"
                                    },
                                    "start": {
                                      "description": "the start time for the profile in ISO 8601 format.",
                                      "format": "date-time",
                                      "type": "string"
                                    },
                                    "timeZone": {
                                      "description": "the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "start",
                                    "end"
                                  ],
                                  "type": "object"
                                },
                                "name": {
                                  "description": "the name of the profile.",
                                  "type": "string"
                                },
                                "recurrence": {
                                  "description": "The repeating times at which this profile begins. This element is not used if the FixedDate element is used.",
                                  "properties": {
                                    "frequency": {
                                      "description": "the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.",
                                      "enum": [
                                        "None",
                                        "Second",
                                        "Minute",
                                        "Hour",
                                        "Day",
                                        "Week",
                                        "Month",
                                        "Year"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "RecurrenceFrequency"
                                      }
                                    },
                                    "schedule": {
                                      "description": "The scheduling constraints for when the profile begins.",
                                      "properties": {
                                        "days": {
                                          "description": "the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.",
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "hours": {
                                          "description": "A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).",
                                          "items": {
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "type": "array"
                                        },
                                        "minutes": {
                                          "description": "A collection of minutes at which the profile takes effect at.",
                                          "items": {
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "type": "array"
                                        },
                                        "timeZone": {
                                          "description": "the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "timeZone",
                                        "days",
                                        "hours",
                                        "minutes"
                                      ],
                                      "type": "object"
                                    }
                                  },
                                  "required": [
                                    "frequency",
                                    "schedule"
                                  ],
                                  "type": "object"
                                },
                                "rules": {
                                  "description": "the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.",
                                  "items": {
                                    "description": "A rule that provide the triggers and parameters for the scaling action.",
                                    "properties": {
                                      "metricTrigger": {
                                        "description": "The trigger that results in a scaling action.",
                                        "properties": {
                                          "dimensions": {
                                            "description": "List of dimension conditions. For example: [{\"DimensionName\":\"AppName\",\"Operator\":\"Equals\",\"Values\":[\"App1\"]},{\"DimensionName\":\"Deployment\",\"Operator\":\"Equals\",\"Values\":[\"default\"]}].",
                                            "items": {
                                              "description": "Specifies an auto scale rule metric dimension.",
                                              "properties": {
                                                "DimensionName": {
                                                  "description": "Name of the dimension.",
                                                  "type": "string"
                                                },
                                                "Operator": {
                                                  "description": "the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values",
                                                  "enum": [
                                                    "Equals",
                                                    "NotEquals"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "ScaleRuleMetricDimensionOperationType"
                                                  }
                                                },
                                                "Values": {
                                                  "description": "list of dimension values. For example: [\"App1\",\"App2\"].",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                }
                                              },
                                              "required": [
                                                "DimensionName",
                                                "Operator",
                                                "Values"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array",
                                            "x-ms-identifiers": []
                                          },
                                          "dividePerInstance": {
                                            "description": "a value indicating whether metric should divide per instance.",
                                            "type": "boolean"
                                          },
                                          "metricName": {
                                            "description": "the name of the metric that defines what the rule monitors.",
                                            "type": "string"
                                          },
                                          "metricNamespace": {
                                            "description": "the namespace of the metric that defines what the rule monitors.",
                                            "type": "string"
                                          },
                                          "metricResourceLocation": {
                                            "description": "the location of the resource the rule monitors.",
                                            "type": "string"
                                          },
                                          "metricResourceUri": {
                                            "description": "the resource identifier of the resource the rule monitors.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "the operator that is used to compare the metric data and the threshold.",
                                            "enum": [
                                              "Equals",
                                              "NotEquals",
                                              "GreaterThan",
                                              "GreaterThanOrEqual",
                                              "LessThan",
                                              "LessThanOrEqual"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "ComparisonOperationType"
                                            }
                                          },
                                          "statistic": {
                                            "description": "the metric statistic type. How the metrics from multiple instances are combined.",
                                            "enum": [
                                              "Average",
                                              "Min",
                                              "Max",
                                              "Sum",
                                              "Count"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "MetricStatisticType"
                                            }
                                          },
                                          "threshold": {
                                            "description": "the threshold of the metric that triggers the scale action.",
                                            "format": "double",
                                            "type": "number"
                                          },
                                          "timeAggregation": {
                                            "description": "time aggregation type. How the data that is collected should be combined over time. The default value is Average.",
                                            "enum": [
                                              "Average",
                                              "Minimum",
                                              "Maximum",
                                              "Total",
                                              "Count",
                                              "Last"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "TimeAggregationType"
                                            }
                                          },
                                          "timeGrain": {
                                            "description": "the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.",
                                            "format": "duration",
                                            "type": "string"
                                          },
                                          "timeWindow": {
                                            "description": "the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.",
                                            "format": "duration",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "metricName",
                                          "metricResourceUri",
                                          "timeGrain",
                                          "statistic",
                                          "timeWindow",
                                          "timeAggregation",
                                          "operator",
                                          "threshold"
                                        ],
                                        "type": "object"
                                      },
                                      "scaleAction": {
                                        "description": "The parameters for the scaling action.",
                                        "properties": {
                                          "cooldown": {
                                            "description": "the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.",
                                            "format": "duration",
                                            "type": "string"
                                          },
                                          "direction": {
                                            "description": "the scale direction. Whether the scaling action increases or decreases the number of instances.",
                                            "enum": [
                                              "None",
                                              "Increase",
                                              "Decrease"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "ScaleDirection"
                                            }
                                          },
                                          "type": {
                                            "description": "the type of action that should occur when the scale rule fires.",
                                            "enum": [
                                              "ChangeCount",
                                              "PercentChangeCount",
                                              "ExactCount",
                                              "ServiceAllowedNextValue"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": false,
                                              "name": "ScaleType"
                                            }
                                          },
                                          "value": {
                                            "default": "1",
                                            "description": "the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "direction",
                                          "type",
                                          "cooldown"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "scaleAction",
                                      "metricTrigger"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array",
                                  "x-ms-identifiers": []
                                }
                              },
                              "required": [
                                "rules",
                                "name",
                                "capacity"
                              ],
                              "type": "object"
                            },
                            "maxItems": 20,
                            "type": "array",
                            "x-ms-identifiers": []
                          },
                          "targetResourceLocation": {
                            "description": "the location of the resource that the autoscale setting should be added to.",
                            "type": "string"
                          },
                          "targetResourceUri": {
                            "description": "the resource identifier of the resource that the autoscale setting should be added to.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "profiles"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "properties"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "value"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AutoscaleSettingResourceCollection"
          },
          {
            "oldValue": {
              "description": "The autoscale setting object for patch operations.",
              "properties": {
                "properties": {
                  "description": "A setting that contains all of the configuration for the automatic scaling of a resource.",
                  "properties": {
                    "enabled": {
                      "default": false,
                      "description": "the enabled flag. Specifies whether automatic scaling is enabled for the resource. The default value is 'false'.",
                      "type": "boolean"
                    },
                    "name": {
                      "description": "the name of the autoscale setting.",
                      "type": "string"
                    },
                    "notifications": {
                      "description": "the collection of notifications.",
                      "items": {
                        "description": "Autoscale notification.",
                        "properties": {
                          "email": {
                            "description": "Email notification of an autoscale event.",
                            "properties": {
                              "customEmails": {
                                "description": "the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "sendToSubscriptionAdministrator": {
                                "default": false,
                                "description": "a value indicating whether to send email to subscription administrator.",
                                "type": "boolean"
                              },
                              "sendToSubscriptionCoAdministrators": {
                                "default": false,
                                "description": "a value indicating whether to send email to subscription co-administrators.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "operation": {
                            "description": "the operation associated with the notification and its value must be \"scale\"",
                            "enum": [
                              "Scale"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "OperationType"
                            }
                          },
                          "webhooks": {
                            "description": "the collection of webhook notifications.",
                            "items": {
                              "description": "Webhook notification of an autoscale event.",
                              "properties": {
                                "properties": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "a property bag of settings. This value can be empty.",
                                  "type": "object"
                                },
                                "serviceUri": {
                                  "description": "the service address to receive the notification.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "operation"
                        ],
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    },
                    "predictiveAutoscalePolicy": {
                      "description": "The parameters for enabling predictive autoscale.",
                      "properties": {
                        "scaleLookAheadTime": {
                          "description": "the amount of time to specify by which instances are launched in advance. It must be between 1 minute and 60 minutes in ISO 8601 format.",
                          "format": "duration",
                          "type": "string"
                        },
                        "scaleMode": {
                          "description": "the predictive autoscale mode",
                          "enum": [
                            "Disabled",
                            "ForecastOnly",
                            "Enabled"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": false,
                            "name": "PredictiveAutoscalePolicyScaleMode"
                          }
                        }
                      },
                      "required": [
                        "scaleMode"
                      ],
                      "type": "object"
                    },
                    "profiles": {
                      "description": "the collection of automatic scaling profiles that specify different scaling parameters for different time periods. A maximum of 20 profiles can be specified.",
                      "items": {
                        "description": "Autoscale profile.",
                        "properties": {
                          "capacity": {
                            "description": "The number of instances that can be used during this profile.",
                            "properties": {
                              "default": {
                                "description": "the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.",
                                "type": "string"
                              },
                              "maximum": {
                                "description": "the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.",
                                "type": "string"
                              },
                              "minimum": {
                                "description": "the minimum number of instances for the resource.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "minimum",
                              "maximum",
                              "default"
                            ],
                            "type": "object"
                          },
                          "fixedDate": {
                            "description": "A specific date-time for the profile.",
                            "properties": {
                              "end": {
                                "description": "the end time for the profile in ISO 8601 format.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "start": {
                                "description": "the start time for the profile in ISO 8601 format.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "timeZone": {
                                "description": "the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time",
                                "type": "string"
                              }
                            },
                            "required": [
                              "start",
                              "end"
                            ],
                            "type": "object"
                          },
                          "name": {
                            "description": "the name of the profile.",
                            "type": "string"
                          },
                          "recurrence": {
                            "description": "The repeating times at which this profile begins. This element is not used if the FixedDate element is used.",
                            "properties": {
                              "frequency": {
                                "description": "the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.",
                                "enum": [
                                  "None",
                                  "Second",
                                  "Minute",
                                  "Hour",
                                  "Day",
                                  "Week",
                                  "Month",
                                  "Year"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": false,
                                  "name": "RecurrenceFrequency"
                                }
                              },
                              "schedule": {
                                "description": "The scheduling constraints for when the profile begins.",
                                "properties": {
                                  "days": {
                                    "description": "the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "hours": {
                                    "description": "A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).",
                                    "items": {
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "minutes": {
                                    "description": "A collection of minutes at which the profile takes effect at.",
                                    "items": {
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "timeZone": {
                                    "description": "the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "timeZone",
                                  "days",
                                  "hours",
                                  "minutes"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "frequency",
                              "schedule"
                            ],
                            "type": "object"
                          },
                          "rules": {
                            "description": "the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.",
                            "items": {
                              "description": "A rule that provide the triggers and parameters for the scaling action.",
                              "properties": {
                                "metricTrigger": {
                                  "description": "The trigger that results in a scaling action.",
                                  "properties": {
                                    "dimensions": {
                                      "description": "List of dimension conditions. For example: [{\"DimensionName\":\"AppName\",\"Operator\":\"Equals\",\"Values\":[\"App1\"]},{\"DimensionName\":\"Deployment\",\"Operator\":\"Equals\",\"Values\":[\"default\"]}].",
                                      "items": {
                                        "description": "Specifies an auto scale rule metric dimension.",
                                        "properties": {
                                          "DimensionName": {
                                            "description": "Name of the dimension.",
                                            "type": "string"
                                          },
                                          "Operator": {
                                            "description": "the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values",
                                            "enum": [
                                              "Equals",
                                              "NotEquals"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "ScaleRuleMetricDimensionOperationType"
                                            }
                                          },
                                          "Values": {
                                            "description": "list of dimension values. For example: [\"App1\",\"App2\"].",
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "DimensionName",
                                          "Operator",
                                          "Values"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array",
                                      "x-ms-identifiers": []
                                    },
                                    "dividePerInstance": {
                                      "description": "a value indicating whether metric should divide per instance.",
                                      "type": "boolean"
                                    },
                                    "metricName": {
                                      "description": "the name of the metric that defines what the rule monitors.",
                                      "type": "string"
                                    },
                                    "metricNamespace": {
                                      "description": "the namespace of the metric that defines what the rule monitors.",
                                      "type": "string"
                                    },
                                    "metricResourceLocation": {
                                      "description": "the location of the resource the rule monitors.",
                                      "type": "string"
                                    },
                                    "metricResourceUri": {
                                      "description": "the resource identifier of the resource the rule monitors.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "the operator that is used to compare the metric data and the threshold.",
                                      "enum": [
                                        "Equals",
                                        "NotEquals",
                                        "GreaterThan",
                                        "GreaterThanOrEqual",
                                        "LessThan",
                                        "LessThanOrEqual"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "ComparisonOperationType"
                                      }
                                    },
                                    "statistic": {
                                      "description": "the metric statistic type. How the metrics from multiple instances are combined.",
                                      "enum": [
                                        "Average",
                                        "Min",
                                        "Max",
                                        "Sum",
                                        "Count"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "MetricStatisticType"
                                      }
                                    },
                                    "threshold": {
                                      "description": "the threshold of the metric that triggers the scale action.",
                                      "format": "double",
                                      "type": "number"
                                    },
                                    "timeAggregation": {
                                      "description": "time aggregation type. How the data that is collected should be combined over time. The default value is Average.",
                                      "enum": [
                                        "Average",
                                        "Minimum",
                                        "Maximum",
                                        "Total",
                                        "Count",
                                        "Last"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "TimeAggregationType"
                                      }
                                    },
                                    "timeGrain": {
                                      "description": "the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.",
                                      "format": "duration",
                                      "type": "string"
                                    },
                                    "timeWindow": {
                                      "description": "the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.",
                                      "format": "duration",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "metricName",
                                    "metricResourceUri",
                                    "timeGrain",
                                    "statistic",
                                    "timeWindow",
                                    "timeAggregation",
                                    "operator",
                                    "threshold"
                                  ],
                                  "type": "object"
                                },
                                "scaleAction": {
                                  "description": "The parameters for the scaling action.",
                                  "properties": {
                                    "cooldown": {
                                      "description": "the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.",
                                      "format": "duration",
                                      "type": "string"
                                    },
                                    "direction": {
                                      "description": "the scale direction. Whether the scaling action increases or decreases the number of instances.",
                                      "enum": [
                                        "None",
                                        "Increase",
                                        "Decrease"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "ScaleDirection"
                                      }
                                    },
                                    "type": {
                                      "description": "the type of action that should occur when the scale rule fires.",
                                      "enum": [
                                        "ChangeCount",
                                        "PercentChangeCount",
                                        "ExactCount",
                                        "ServiceAllowedNextValue"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": false,
                                        "name": "ScaleType"
                                      }
                                    },
                                    "value": {
                                      "default": "1",
                                      "description": "the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "direction",
                                    "type",
                                    "cooldown"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "scaleAction",
                                "metricTrigger"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "rules",
                          "name",
                          "capacity"
                        ],
                        "type": "object"
                      },
                      "maxItems": 20,
                      "type": "array",
                      "x-ms-identifiers": []
                    },
                    "targetResourceLocation": {
                      "description": "the location of the resource that the autoscale setting should be added to.",
                      "type": "string"
                    },
                    "targetResourceUri": {
                      "description": "the resource identifier of the resource that the autoscale setting should be added to.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "profiles"
                  ],
                  "type": "object"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AutoscaleSettingResourcePatch"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Azure mobile App push notification receiver.",
              "properties": {
                "emailAddress": {
                  "description": "The email address registered for the Azure mobile app.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "emailAddress"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/AzureAppPushReceiver"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An azure function receiver.",
              "properties": {
                "functionAppResourceId": {
                  "description": "The azure resource id of the function app.",
                  "type": "string"
                },
                "functionName": {
                  "description": "The function name in the function app.",
                  "type": "string"
                },
                "httpTriggerUrl": {
                  "description": "The http trigger url where http request sent to.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the azure function receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                },
                "useCommonAlertSchema": {
                  "default": false,
                  "description": "Indicates whether to use common alert schema.",
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "functionAppResourceId",
                "functionName",
                "httpTriggerUrl"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/AzureFunctionReceiver"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An azure resource object",
              "properties": {
                "id": {
                  "description": "Azure resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "create",
                    "read"
                  ]
                },
                "name": {
                  "description": "Azure resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags",
                  "type": "object"
                },
                "type": {
                  "description": "Azure resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "location"
              ],
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/AzureResource"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The context info",
              "properties": {
                "contextType": {
                  "description": "The context id type",
                  "type": "string"
                },
                "notificationSource": {
                  "description": "The source of the notification request",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/Context"
          },
          {
            "oldValue": {
              "description": "Email notification of an autoscale event.",
              "properties": {
                "customEmails": {
                  "description": "the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "sendToSubscriptionAdministrator": {
                  "default": false,
                  "description": "a value indicating whether to send email to subscription administrator.",
                  "type": "boolean"
                },
                "sendToSubscriptionCoAdministrators": {
                  "default": false,
                  "description": "a value indicating whether to send email to subscription co-administrators.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/EmailNotification"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An email receiver.",
              "properties": {
                "emailAddress": {
                  "description": "The email address of this receiver.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the email receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                },
                "status": {
                  "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                  "enum": [
                    "NotSpecified",
                    "Enabled",
                    "Disabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ReceiverStatus"
                  }
                },
                "useCommonAlertSchema": {
                  "default": false,
                  "description": "Indicates whether to use common alert schema.",
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "emailAddress"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EmailReceiver"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Describes a receiver that should be resubscribed.",
              "properties": {
                "receiverName": {
                  "description": "The name of the receiver to resubscribe.",
                  "type": "string"
                }
              },
              "required": [
                "receiverName"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EnableRequest"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Describes the format of Error response.",
              "properties": {
                "code": {
                  "description": "Error code",
                  "type": "string"
                },
                "message": {
                  "description": "Error message indicating why the operation failed.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ErrorResponse"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An Event hub receiver.",
              "properties": {
                "eventHubName": {
                  "description": "The name of the specific Event Hub queue",
                  "type": "string"
                },
                "eventHubNameSpace": {
                  "description": "The Event Hub namespace",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the Event hub receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                },
                "subscriptionId": {
                  "description": "The Id for the subscription containing this event hub",
                  "type": "string"
                },
                "tenantId": {
                  "description": "The tenant Id for the subscription containing this event hub",
                  "type": "string"
                },
                "useCommonAlertSchema": {
                  "default": false,
                  "description": "Indicates whether to use common alert schema.",
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "eventHubNameSpace",
                "eventHubName",
                "subscriptionId"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/EventHubReceiver"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An Itsm receiver.",
              "properties": {
                "connectionId": {
                  "description": "Unique identification of ITSM connection among multiple defined in above workspace.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the Itsm receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                },
                "region": {
                  "description": "Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'",
                  "type": "string"
                },
                "ticketConfiguration": {
                  "description": "JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.",
                  "type": "string"
                },
                "workspaceId": {
                  "description": "OMS LA instance identifier.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "workspaceId",
                "connectionId",
                "ticketConfiguration",
                "region"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ItsmReceiver"
          },
          {
            "oldValue": null,
            "value": {
              "description": "A logic app receiver.",
              "properties": {
                "callbackUrl": {
                  "description": "The callback url where http request sent to.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the logic app receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                },
                "resourceId": {
                  "description": "The azure resource id of the logic app receiver.",
                  "type": "string"
                },
                "useCommonAlertSchema": {
                  "default": false,
                  "description": "Indicates whether to use common alert schema.",
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "resourceId",
                "callbackUrl"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/LogicAppReceiver"
          },
          {
            "oldValue": {
              "description": "The trigger that results in a scaling action.",
              "properties": {
                "dimensions": {
                  "description": "List of dimension conditions. For example: [{\"DimensionName\":\"AppName\",\"Operator\":\"Equals\",\"Values\":[\"App1\"]},{\"DimensionName\":\"Deployment\",\"Operator\":\"Equals\",\"Values\":[\"default\"]}].",
                  "items": {
                    "description": "Specifies an auto scale rule metric dimension.",
                    "properties": {
                      "DimensionName": {
                        "description": "Name of the dimension.",
                        "type": "string"
                      },
                      "Operator": {
                        "description": "the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values",
                        "enum": [
                          "Equals",
                          "NotEquals"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ScaleRuleMetricDimensionOperationType"
                        }
                      },
                      "Values": {
                        "description": "list of dimension values. For example: [\"App1\",\"App2\"].",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "DimensionName",
                      "Operator",
                      "Values"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "dividePerInstance": {
                  "description": "a value indicating whether metric should divide per instance.",
                  "type": "boolean"
                },
                "metricName": {
                  "description": "the name of the metric that defines what the rule monitors.",
                  "type": "string"
                },
                "metricNamespace": {
                  "description": "the namespace of the metric that defines what the rule monitors.",
                  "type": "string"
                },
                "metricResourceLocation": {
                  "description": "the location of the resource the rule monitors.",
                  "type": "string"
                },
                "metricResourceUri": {
                  "description": "the resource identifier of the resource the rule monitors.",
                  "type": "string"
                },
                "operator": {
                  "description": "the operator that is used to compare the metric data and the threshold.",
                  "enum": [
                    "Equals",
                    "NotEquals",
                    "GreaterThan",
                    "GreaterThanOrEqual",
                    "LessThan",
                    "LessThanOrEqual"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ComparisonOperationType"
                  }
                },
                "statistic": {
                  "description": "the metric statistic type. How the metrics from multiple instances are combined.",
                  "enum": [
                    "Average",
                    "Min",
                    "Max",
                    "Sum",
                    "Count"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "MetricStatisticType"
                  }
                },
                "threshold": {
                  "description": "the threshold of the metric that triggers the scale action.",
                  "format": "double",
                  "type": "number"
                },
                "timeAggregation": {
                  "description": "time aggregation type. How the data that is collected should be combined over time. The default value is Average.",
                  "enum": [
                    "Average",
                    "Minimum",
                    "Maximum",
                    "Total",
                    "Count",
                    "Last"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "TimeAggregationType"
                  }
                },
                "timeGrain": {
                  "description": "the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.",
                  "format": "duration",
                  "type": "string"
                },
                "timeWindow": {
                  "description": "the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.",
                  "format": "duration",
                  "type": "string"
                }
              },
              "required": [
                "metricName",
                "metricResourceUri",
                "timeGrain",
                "statistic",
                "timeWindow",
                "timeAggregation",
                "operator",
                "threshold"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MetricTrigger"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The request body which contain contact detail metadata",
              "properties": {
                "alertType": {
                  "description": "The value of the supported alert type. Supported alert type values are: servicehealth, metricstaticthreshold, metricsdynamicthreshold, logalertv2, smartalert, webtestalert, logalertv1numresult, logalertv1metricmeasurement, resourcehealth, activitylog, actualcostbudget, forecastedbudget",
                  "maxLength": 30,
                  "type": "string"
                },
                "armRoleReceivers": {
                  "description": "The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are supported.",
                  "items": {
                    "description": "An arm role receiver.",
                    "properties": {
                      "name": {
                        "description": "The name of the arm role receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "roleId": {
                        "description": "The arm role id.",
                        "type": "string"
                      },
                      "useCommonAlertSchema": {
                        "default": false,
                        "description": "Indicates whether to use common alert schema.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "roleId"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "automationRunbookReceivers": {
                  "description": "The list of AutomationRunbook receivers that are part of this action group.",
                  "items": {
                    "description": "The Azure Automation Runbook notification receiver.",
                    "properties": {
                      "automationAccountId": {
                        "description": "The Azure automation account Id which holds this runbook and authenticate to Azure resource.",
                        "type": "string"
                      },
                      "isGlobalRunbook": {
                        "description": "Indicates whether this instance is global runbook.",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Indicates name of the webhook.",
                        "type": "string"
                      },
                      "runbookName": {
                        "description": "The name for this runbook.",
                        "type": "string"
                      },
                      "serviceUri": {
                        "description": "The URI where webhooks should be sent.",
                        "type": "string"
                      },
                      "useCommonAlertSchema": {
                        "default": false,
                        "description": "Indicates whether to use common alert schema.",
                        "type": "boolean"
                      },
                      "webhookResourceId": {
                        "description": "The resource id for webhook linked to this runbook.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "automationAccountId",
                      "runbookName",
                      "webhookResourceId",
                      "isGlobalRunbook"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "azureAppPushReceivers": {
                  "description": "The list of AzureAppPush receivers that are part of this action group.",
                  "items": {
                    "description": "The Azure mobile App push notification receiver.",
                    "properties": {
                      "emailAddress": {
                        "description": "The email address registered for the Azure mobile app.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "emailAddress"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "azureFunctionReceivers": {
                  "description": "The list of azure function receivers that are part of this action group.",
                  "items": {
                    "description": "An azure function receiver.",
                    "properties": {
                      "functionAppResourceId": {
                        "description": "The azure resource id of the function app.",
                        "type": "string"
                      },
                      "functionName": {
                        "description": "The function name in the function app.",
                        "type": "string"
                      },
                      "httpTriggerUrl": {
                        "description": "The http trigger url where http request sent to.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the azure function receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "useCommonAlertSchema": {
                        "default": false,
                        "description": "Indicates whether to use common alert schema.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "functionAppResourceId",
                      "functionName",
                      "httpTriggerUrl"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "emailReceivers": {
                  "description": "The list of email receivers that are part of this action group.",
                  "items": {
                    "description": "An email receiver.",
                    "properties": {
                      "emailAddress": {
                        "description": "The email address of this receiver.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the email receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "status": {
                        "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                        "enum": [
                          "NotSpecified",
                          "Enabled",
                          "Disabled"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "ReceiverStatus"
                        }
                      },
                      "useCommonAlertSchema": {
                        "default": false,
                        "description": "Indicates whether to use common alert schema.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "emailAddress"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "eventHubReceivers": {
                  "description": "The list of event hub receivers that are part of this action group.",
                  "items": {
                    "description": "An Event hub receiver.",
                    "properties": {
                      "eventHubName": {
                        "description": "The name of the specific Event Hub queue",
                        "type": "string"
                      },
                      "eventHubNameSpace": {
                        "description": "The Event Hub namespace",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the Event hub receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "subscriptionId": {
                        "description": "The Id for the subscription containing this event hub",
                        "type": "string"
                      },
                      "tenantId": {
                        "description": "The tenant Id for the subscription containing this event hub",
                        "type": "string"
                      },
                      "useCommonAlertSchema": {
                        "default": false,
                        "description": "Indicates whether to use common alert schema.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "eventHubNameSpace",
                      "eventHubName",
                      "subscriptionId"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "itsmReceivers": {
                  "description": "The list of ITSM receivers that are part of this action group.",
                  "items": {
                    "description": "An Itsm receiver.",
                    "properties": {
                      "connectionId": {
                        "description": "Unique identification of ITSM connection among multiple defined in above workspace.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the Itsm receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "region": {
                        "description": "Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'",
                        "type": "string"
                      },
                      "ticketConfiguration": {
                        "description": "JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.",
                        "type": "string"
                      },
                      "workspaceId": {
                        "description": "OMS LA instance identifier.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "workspaceId",
                      "connectionId",
                      "ticketConfiguration",
                      "region"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "logicAppReceivers": {
                  "description": "The list of logic app receivers that are part of this action group.",
                  "items": {
                    "description": "A logic app receiver.",
                    "properties": {
                      "callbackUrl": {
                        "description": "The callback url where http request sent to.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the logic app receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "resourceId": {
                        "description": "The azure resource id of the logic app receiver.",
                        "type": "string"
                      },
                      "useCommonAlertSchema": {
                        "default": false,
                        "description": "Indicates whether to use common alert schema.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "resourceId",
                      "callbackUrl"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "smsReceivers": {
                  "description": "The list of SMS receivers that are part of this action group.",
                  "items": {
                    "description": "An SMS receiver.",
                    "properties": {
                      "countryCode": {
                        "description": "The country code of the SMS receiver.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the SMS receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "phoneNumber": {
                        "description": "The phone number of the SMS receiver.",
                        "type": "string"
                      },
                      "status": {
                        "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                        "enum": [
                          "NotSpecified",
                          "Enabled",
                          "Disabled"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "ReceiverStatus"
                        }
                      }
                    },
                    "required": [
                      "name",
                      "countryCode",
                      "phoneNumber"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "voiceReceivers": {
                  "description": "The list of voice receivers that are part of this action group.",
                  "items": {
                    "description": "A voice receiver.",
                    "properties": {
                      "countryCode": {
                        "description": "The country code of the voice receiver.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the voice receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "phoneNumber": {
                        "description": "The phone number of the voice receiver.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "countryCode",
                      "phoneNumber"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "webhookReceivers": {
                  "description": "The list of webhook receivers that are part of this action group.",
                  "items": {
                    "description": "A webhook receiver.",
                    "properties": {
                      "identifierUri": {
                        "description": "Indicates the identifier uri for aad auth.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the webhook receiver. Names must be unique across all receivers within an action group.",
                        "type": "string"
                      },
                      "objectId": {
                        "description": "Indicates the webhook app object Id for aad auth.",
                        "type": "string"
                      },
                      "serviceUri": {
                        "description": "The URI where webhooks should be sent.",
                        "type": "string"
                      },
                      "tenantId": {
                        "description": "Indicates the tenant id for aad auth.",
                        "type": "string"
                      },
                      "useAadAuth": {
                        "default": false,
                        "description": "Indicates whether or not use AAD authentication.",
                        "type": "boolean"
                      },
                      "useCommonAlertSchema": {
                        "default": false,
                        "description": "Indicates whether to use common alert schema.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "name",
                      "serviceUri"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                }
              },
              "required": [
                "alertType"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/NotificationRequestBody"
          },
          {
            "oldValue": {
              "description": "The parameters for enabling predictive autoscale.",
              "properties": {
                "scaleLookAheadTime": {
                  "description": "the amount of time to specify by which instances are launched in advance. It must be between 1 minute and 60 minutes in ISO 8601 format.",
                  "format": "duration",
                  "type": "string"
                },
                "scaleMode": {
                  "description": "the predictive autoscale mode",
                  "enum": [
                    "Disabled",
                    "ForecastOnly",
                    "Enabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "PredictiveAutoscalePolicyScaleMode"
                  }
                }
              },
              "required": [
                "scaleMode"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PredictiveAutoscalePolicy"
          },
          {
            "oldValue": {
              "description": "The response to a metrics query.",
              "properties": {
                "data": {
                  "description": "the value of the collection.",
                  "items": {
                    "description": "Represents a predictive metric value in the given bucket.",
                    "properties": {
                      "timeStamp": {
                        "description": "the timestamp for the metric value in ISO 8601 format.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "value": {
                        "description": "Predictive value in this time bucket.",
                        "format": "double",
                        "type": "number"
                      }
                    },
                    "required": [
                      "timeStamp",
                      "value"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "interval": {
                  "description": "The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made.",
                  "format": "duration",
                  "type": "string"
                },
                "metricName": {
                  "description": "The metrics being queried",
                  "type": "string"
                },
                "targetResourceId": {
                  "description": "resource of the predictive metric.",
                  "type": "string"
                },
                "timespan": {
                  "description": "The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned back from what was originally requested.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PredictiveResponse"
          },
          {
            "oldValue": {
              "description": "Represents a predictive metric value in the given bucket.",
              "properties": {
                "timeStamp": {
                  "description": "the timestamp for the metric value in ISO 8601 format.",
                  "format": "date-time",
                  "type": "string"
                },
                "value": {
                  "description": "Predictive value in this time bucket.",
                  "format": "double",
                  "type": "number"
                }
              },
              "required": [
                "timeStamp",
                "value"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PredictiveValue"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
              "enum": [
                "NotSpecified",
                "Enabled",
                "Disabled"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": false,
                "name": "ReceiverStatus"
              }
            },
            "op": "add",
            "from": "",
            "path": "/ReceiverStatus"
          },
          {
            "oldValue": {
              "description": "The repeating times at which this profile begins. This element is not used if the FixedDate element is used.",
              "properties": {
                "frequency": {
                  "description": "the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.",
                  "enum": [
                    "None",
                    "Second",
                    "Minute",
                    "Hour",
                    "Day",
                    "Week",
                    "Month",
                    "Year"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "RecurrenceFrequency"
                  }
                },
                "schedule": {
                  "description": "The scheduling constraints for when the profile begins.",
                  "properties": {
                    "days": {
                      "description": "the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "hours": {
                      "description": "A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).",
                      "items": {
                        "format": "int32",
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "minutes": {
                      "description": "A collection of minutes at which the profile takes effect at.",
                      "items": {
                        "format": "int32",
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "timeZone": {
                      "description": "the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time",
                      "type": "string"
                    }
                  },
                  "required": [
                    "timeZone",
                    "days",
                    "hours",
                    "minutes"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "frequency",
                "schedule"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Recurrence"
          },
          {
            "oldValue": {
              "description": "The scheduling constraints for when the profile begins.",
              "properties": {
                "days": {
                  "description": "the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "hours": {
                  "description": "A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).",
                  "items": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "type": "array"
                },
                "minutes": {
                  "description": "A collection of minutes at which the profile takes effect at.",
                  "items": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "type": "array"
                },
                "timeZone": {
                  "description": "the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time",
                  "type": "string"
                }
              },
              "required": [
                "timeZone",
                "days",
                "hours",
                "minutes"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RecurrentSchedule"
          },
          {
            "oldValue": {
              "description": "The autoscale setting resource.",
              "properties": {
                "id": {
                  "description": "Azure resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "create",
                    "read"
                  ]
                },
                "name": {
                  "description": "Azure resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "systemData": {
                  "description": "Metadata pertaining to creation and last modification of the resource.",
                  "properties": {
                    "createdAt": {
                      "description": "The timestamp of resource creation (UTC).",
                      "format": "date-time",
                      "type": "string"
                    },
                    "createdBy": {
                      "description": "The identity that created the resource.",
                      "type": "string"
                    },
                    "createdByType": {
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "createdByType"
                      }
                    },
                    "lastModifiedAt": {
                      "description": "The timestamp of resource last modification (UTC)",
                      "format": "date-time",
                      "type": "string"
                    },
                    "lastModifiedBy": {
                      "description": "The identity that last modified the resource.",
                      "type": "string"
                    },
                    "lastModifiedByType": {
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "createdByType"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than 256 characters.",
                  "type": "object"
                },
                "type": {
                  "description": "Azure resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "location"
              ],
              "type": "object",
              "x-ms-azure-resource": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Resource"
          },
          {
            "oldValue": {
              "description": "The parameters for the scaling action.",
              "properties": {
                "cooldown": {
                  "description": "the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.",
                  "format": "duration",
                  "type": "string"
                },
                "direction": {
                  "description": "the scale direction. Whether the scaling action increases or decreases the number of instances.",
                  "enum": [
                    "None",
                    "Increase",
                    "Decrease"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ScaleDirection"
                  }
                },
                "type": {
                  "description": "the type of action that should occur when the scale rule fires.",
                  "enum": [
                    "ChangeCount",
                    "PercentChangeCount",
                    "ExactCount",
                    "ServiceAllowedNextValue"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ScaleType"
                  }
                },
                "value": {
                  "default": "1",
                  "description": "the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.",
                  "type": "string"
                }
              },
              "required": [
                "direction",
                "type",
                "cooldown"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ScaleAction"
          },
          {
            "oldValue": {
              "description": "The number of instances that can be used during this profile.",
              "properties": {
                "default": {
                  "description": "the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.",
                  "type": "string"
                },
                "maximum": {
                  "description": "the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.",
                  "type": "string"
                },
                "minimum": {
                  "description": "the minimum number of instances for the resource.",
                  "type": "string"
                }
              },
              "required": [
                "minimum",
                "maximum",
                "default"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ScaleCapacity"
          },
          {
            "oldValue": {
              "description": "A rule that provide the triggers and parameters for the scaling action.",
              "properties": {
                "metricTrigger": {
                  "description": "The trigger that results in a scaling action.",
                  "properties": {
                    "dimensions": {
                      "description": "List of dimension conditions. For example: [{\"DimensionName\":\"AppName\",\"Operator\":\"Equals\",\"Values\":[\"App1\"]},{\"DimensionName\":\"Deployment\",\"Operator\":\"Equals\",\"Values\":[\"default\"]}].",
                      "items": {
                        "description": "Specifies an auto scale rule metric dimension.",
                        "properties": {
                          "DimensionName": {
                            "description": "Name of the dimension.",
                            "type": "string"
                          },
                          "Operator": {
                            "description": "the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values",
                            "enum": [
                              "Equals",
                              "NotEquals"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ScaleRuleMetricDimensionOperationType"
                            }
                          },
                          "Values": {
                            "description": "list of dimension values. For example: [\"App1\",\"App2\"].",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "DimensionName",
                          "Operator",
                          "Values"
                        ],
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    },
                    "dividePerInstance": {
                      "description": "a value indicating whether metric should divide per instance.",
                      "type": "boolean"
                    },
                    "metricName": {
                      "description": "the name of the metric that defines what the rule monitors.",
                      "type": "string"
                    },
                    "metricNamespace": {
                      "description": "the namespace of the metric that defines what the rule monitors.",
                      "type": "string"
                    },
                    "metricResourceLocation": {
                      "description": "the location of the resource the rule monitors.",
                      "type": "string"
                    },
                    "metricResourceUri": {
                      "description": "the resource identifier of the resource the rule monitors.",
                      "type": "string"
                    },
                    "operator": {
                      "description": "the operator that is used to compare the metric data and the threshold.",
                      "enum": [
                        "Equals",
                        "NotEquals",
                        "GreaterThan",
                        "GreaterThanOrEqual",
                        "LessThan",
                        "LessThanOrEqual"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ComparisonOperationType"
                      }
                    },
                    "statistic": {
                      "description": "the metric statistic type. How the metrics from multiple instances are combined.",
                      "enum": [
                        "Average",
                        "Min",
                        "Max",
                        "Sum",
                        "Count"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "MetricStatisticType"
                      }
                    },
                    "threshold": {
                      "description": "the threshold of the metric that triggers the scale action.",
                      "format": "double",
                      "type": "number"
                    },
                    "timeAggregation": {
                      "description": "time aggregation type. How the data that is collected should be combined over time. The default value is Average.",
                      "enum": [
                        "Average",
                        "Minimum",
                        "Maximum",
                        "Total",
                        "Count",
                        "Last"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "TimeAggregationType"
                      }
                    },
                    "timeGrain": {
                      "description": "the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.",
                      "format": "duration",
                      "type": "string"
                    },
                    "timeWindow": {
                      "description": "the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.",
                      "format": "duration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "metricName",
                    "metricResourceUri",
                    "timeGrain",
                    "statistic",
                    "timeWindow",
                    "timeAggregation",
                    "operator",
                    "threshold"
                  ],
                  "type": "object"
                },
                "scaleAction": {
                  "description": "The parameters for the scaling action.",
                  "properties": {
                    "cooldown": {
                      "description": "the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.",
                      "format": "duration",
                      "type": "string"
                    },
                    "direction": {
                      "description": "the scale direction. Whether the scaling action increases or decreases the number of instances.",
                      "enum": [
                        "None",
                        "Increase",
                        "Decrease"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ScaleDirection"
                      }
                    },
                    "type": {
                      "description": "the type of action that should occur when the scale rule fires.",
                      "enum": [
                        "ChangeCount",
                        "PercentChangeCount",
                        "ExactCount",
                        "ServiceAllowedNextValue"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": false,
                        "name": "ScaleType"
                      }
                    },
                    "value": {
                      "default": "1",
                      "description": "the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "direction",
                    "type",
                    "cooldown"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "scaleAction",
                "metricTrigger"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ScaleRule"
          },
          {
            "oldValue": {
              "description": "Specifies an auto scale rule metric dimension.",
              "properties": {
                "DimensionName": {
                  "description": "Name of the dimension.",
                  "type": "string"
                },
                "Operator": {
                  "description": "the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values",
                  "enum": [
                    "Equals",
                    "NotEquals"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ScaleRuleMetricDimensionOperationType"
                  }
                },
                "Values": {
                  "description": "list of dimension values. For example: [\"App1\",\"App2\"].",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "DimensionName",
                "Operator",
                "Values"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ScaleRuleMetricDimension"
          },
          {
            "oldValue": null,
            "value": {
              "description": "An SMS receiver.",
              "properties": {
                "countryCode": {
                  "description": "The country code of the SMS receiver.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the SMS receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                },
                "phoneNumber": {
                  "description": "The phone number of the SMS receiver.",
                  "type": "string"
                },
                "status": {
                  "description": "Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.",
                  "enum": [
                    "NotSpecified",
                    "Enabled",
                    "Disabled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "ReceiverStatus"
                  }
                }
              },
              "required": [
                "name",
                "countryCode",
                "phoneNumber"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/SmsReceiver"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The details of the test notification results.",
              "properties": {
                "actionDetails": {
                  "description": "The list of action detail",
                  "items": {
                    "description": "The action detail",
                    "properties": {
                      "Detail": {
                        "description": "The detail of the friendly error message",
                        "type": "string"
                      },
                      "MechanismType": {
                        "description": "The mechanism type",
                        "type": "string"
                      },
                      "Name": {
                        "description": "The name of the action",
                        "type": "string"
                      },
                      "SendTime": {
                        "description": "The send time",
                        "type": "string"
                      },
                      "Status": {
                        "description": "The status of the action",
                        "type": "string"
                      },
                      "SubState": {
                        "description": "The substatus of the action",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                },
                "completedTime": {
                  "description": "The completed time",
                  "type": "string"
                },
                "context": {
                  "description": "The context info",
                  "properties": {
                    "contextType": {
                      "description": "The context id type",
                      "type": "string"
                    },
                    "notificationSource": {
                      "description": "The source of the notification request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "createdTime": {
                  "description": "The created time",
                  "type": "string"
                },
                "state": {
                  "description": "The overall state",
                  "type": "string"
                }
              },
              "required": [
                "state"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/TestNotificationDetailsResponse"
          },
          {
            "oldValue": {
              "description": "A specific date-time for the profile.",
              "properties": {
                "end": {
                  "description": "the end time for the profile in ISO 8601 format.",
                  "format": "date-time",
                  "type": "string"
                },
                "start": {
                  "description": "the start time for the profile in ISO 8601 format.",
                  "format": "date-time",
                  "type": "string"
                },
                "timeZone": {
                  "description": "the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time",
                  "type": "string"
                }
              },
              "required": [
                "start",
                "end"
              ],
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/TimeWindow"
          },
          {
            "oldValue": null,
            "value": {
              "description": "A voice receiver.",
              "properties": {
                "countryCode": {
                  "description": "The country code of the voice receiver.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the voice receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                },
                "phoneNumber": {
                  "description": "The phone number of the voice receiver.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "countryCode",
                "phoneNumber"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/VoiceReceiver"
          },
          {
            "oldValue": {
              "description": "Webhook notification of an autoscale event.",
              "properties": {
                "properties": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "a property bag of settings. This value can be empty.",
                  "type": "object"
                },
                "serviceUri": {
                  "description": "the service address to receive the notification.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/WebhookNotification"
          },
          {
            "oldValue": null,
            "value": {
              "description": "A webhook receiver.",
              "properties": {
                "identifierUri": {
                  "description": "Indicates the identifier uri for aad auth.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the webhook receiver. Names must be unique across all receivers within an action group.",
                  "type": "string"
                },
                "objectId": {
                  "description": "Indicates the webhook app object Id for aad auth.",
                  "type": "string"
                },
                "serviceUri": {
                  "description": "The URI where webhooks should be sent.",
                  "type": "string"
                },
                "tenantId": {
                  "description": "Indicates the tenant id for aad auth.",
                  "type": "string"
                },
                "useAadAuth": {
                  "default": false,
                  "description": "Indicates whether or not use AAD authentication.",
                  "type": "boolean"
                },
                "useCommonAlertSchema": {
                  "default": false,
                  "description": "Indicates whether to use common alert schema.",
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "serviceUri"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/WebhookReceiver"
          }
        ],
        "parameters": [
          {
            "oldValue": null,
            "value": {
              "description": "The name of the action group.",
              "in": "path",
              "name": "actionGroupName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/ActionGroupNameParameter"
          },
          {
            "oldValue": {
              "description": "The list of aggregation types (comma separated) to retrieve.",
              "in": "query",
              "name": "aggregation",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AggregationParameter"
          },
          {
            "oldValue": {
              "description": "The autoscale setting name.",
              "in": "path",
              "name": "autoscaleSettingName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AutoscaleSettingNameParameter"
          },
          {
            "oldValue": {
              "description": "The interval (i.e. timegrain) of the query.",
              "format": "duration",
              "in": "query",
              "name": "interval",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/IntervalParameter"
          },
          {
            "oldValue": {
              "description": "The names of the metrics (comma separated) to retrieve. Special case: If a metricname itself has a comma in it then use %2 to indicate it. Eg: 'Metric,Name1' should be **'Metric%2Name1'**",
              "in": "query",
              "name": "metricName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MetricNamesParameter"
          },
          {
            "oldValue": {
              "description": "Metric namespace to query metric definitions for.",
              "in": "query",
              "name": "metricNamespace",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MetricNamespaceParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The notification id",
              "in": "path",
              "name": "notificationId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/NotificationIdParameter"
          },
          {
            "oldValue": {
              "description": "The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.",
              "in": "query",
              "name": "timespan",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/TimespanParameter"
          }
        ]
      }
    },
    "info": {
      "extensions": {
        "added": [
          "x-ms-code-generation-settings"
        ]
      },
      "title": {
        "from": "MonitorManagementClient",
        "to": "Azure Action Groups API"
      },
      "version": {
        "from": "2022-10-01",
        "to": "2023-01-01"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups/{actionGroupName}/notificationStatus/{notificationId}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups/{actionGroupName}/subscribe",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/actionGroups",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups/{actionGroupName}",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups/{actionGroupName}/createNotifications"
      ],
      "deleted": [
        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}",
        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}/predictiveMetrics",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/autoscalesettings",
        "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings"
      ]
    }
  },
  "tools_a": {
    "AutoscaleSettings_ListByResourceGroup": "FunctionDef(\n  name='AutoscaleSettings_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the autoscale settings for a resource group')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourcegroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/autoscalesettings')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='AutoscaleSettings_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the autoscale settings for a resource group'))])],\n  type_params=[])",
    "AutoscaleSettings_CreateOrUpdate": "FunctionDef(\n  name='AutoscaleSettings_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='autoscaleSettingName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Creates or updates an autoscale setting.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourcegroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/autoscalesettings/'),\n          FormattedValue(\n            value=Name(id='autoscaleSettingName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='autoscaleSettingName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: autoscaleSettingName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='AutoscaleSettings_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Creates or updates an autoscale setting.'))])],\n  type_params=[])",
    "AutoscaleSettings_Delete": "FunctionDef(\n  name='AutoscaleSettings_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='autoscaleSettingName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Deletes and autoscale setting')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourcegroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/autoscalesettings/'),\n          FormattedValue(\n            value=Name(id='autoscaleSettingName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='autoscaleSettingName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: autoscaleSettingName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='AutoscaleSettings_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Deletes and autoscale setting'))])],\n  type_params=[])",
    "AutoscaleSettings_Get": "FunctionDef(\n  name='AutoscaleSettings_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='autoscaleSettingName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Gets an autoscale setting')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourcegroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/autoscalesettings/'),\n          FormattedValue(\n            value=Name(id='autoscaleSettingName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='autoscaleSettingName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: autoscaleSettingName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='AutoscaleSettings_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Gets an autoscale setting'))])],\n  type_params=[])",
    "AutoscaleSettings_Update": "FunctionDef(\n  name='AutoscaleSettings_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='autoscaleSettingName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Updates an existing AutoscaleSettingsResource. To update other fields use the CreateOrUpdate method.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourcegroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/autoscalesettings/'),\n          FormattedValue(\n            value=Name(id='autoscaleSettingName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='autoscaleSettingName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: autoscaleSettingName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='AutoscaleSettings_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Updates an existing AutoscaleSettingsResource. To update other fields use the CreateOrUpdate method.'))])],\n  type_params=[])",
    "PredictiveMetric_Get": "FunctionDef(\n  name='PredictiveMetric_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='autoscaleSettingName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='timespan',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='interval',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='metricNamespace',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='metricName',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='aggregation',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='get predictive autoscale metric future data')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourcegroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/autoscalesettings/'),\n          FormattedValue(\n            value=Name(id='autoscaleSettingName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/predictiveMetrics')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='autoscaleSettingName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: autoscaleSettingName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='timespan', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='timespan'),\n              ctx=Store())],\n          value=Name(id='timespan', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='interval', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='interval'),\n              ctx=Store())],\n          value=Name(id='interval', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='metricNamespace', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='metricNamespace'),\n              ctx=Store())],\n          value=Name(id='metricNamespace', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='metricName', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='metricName'),\n              ctx=Store())],\n          value=Name(id='metricName', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='aggregation', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='aggregation'),\n              ctx=Store())],\n          value=Name(id='aggregation', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='PredictiveMetric_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='get predictive autoscale metric future data'))])],\n  type_params=[])",
    "AutoscaleSettings_ListBySubscription": "FunctionDef(\n  name='AutoscaleSettings_ListBySubscription',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the autoscale settings for a subscription')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/autoscalesettings')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='AutoscaleSettings_ListBySubscription')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the autoscale settings for a subscription'))])],\n  type_params=[])"
  },
  "tools_b": {
    "ActionGroups_CreateOrUpdate": "FunctionDef(\n  name='ActionGroups_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='actionGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Create a new action group or update an existing one.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/actionGroups/'),\n          FormattedValue(\n            value=Name(id='actionGroupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='actionGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: actionGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create a new action group or update an existing one.'))])],\n  type_params=[])",
    "ActionGroups_Get": "FunctionDef(\n  name='ActionGroups_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='actionGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get an action group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/actionGroups/'),\n          FormattedValue(\n            value=Name(id='actionGroupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='actionGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: actionGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get an action group.'))])],\n  type_params=[])",
    "ActionGroups_Delete": "FunctionDef(\n  name='ActionGroups_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='actionGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Delete an action group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/actionGroups/'),\n          FormattedValue(\n            value=Name(id='actionGroupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='actionGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: actionGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete an action group.'))])],\n  type_params=[])",
    "ActionGroups_Update": "FunctionDef(\n  name='ActionGroups_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='actionGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value=\"Updates an existing action group's tags. To update other fields use the CreateOrUpdate method.\")),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/actionGroups/'),\n          FormattedValue(\n            value=Name(id='actionGroupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='actionGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: actionGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value=\"Updates an existing action group's tags. To update other fields use the CreateOrUpdate method.\"))])],\n  type_params=[])",
    "ActionGroups_CreateNotificationsAtActionGroupResourceLevel": "FunctionDef(\n  name='ActionGroups_CreateNotificationsAtActionGroupResourceLevel',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='actionGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Send test notifications to a set of provided receivers')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/actionGroups/'),\n          FormattedValue(\n            value=Name(id='actionGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/createNotifications')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='actionGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: actionGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_CreateNotificationsAtActionGroupResourceLevel')),\n        keyword(\n          arg='description',\n          value=Constant(value='Send test notifications to a set of provided receivers'))])],\n  type_params=[])",
    "ActionGroups_GetTestNotificationsAtActionGroupResourceLevel": "FunctionDef(\n  name='ActionGroups_GetTestNotificationsAtActionGroupResourceLevel',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='actionGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='notificationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get the test notifications by the notification id')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/actionGroups/'),\n          FormattedValue(\n            value=Name(id='actionGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/notificationStatus/'),\n          FormattedValue(\n            value=Name(id='notificationId', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='actionGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: actionGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='notificationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: notificationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_GetTestNotificationsAtActionGroupResourceLevel')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get the test notifications by the notification id'))])],\n  type_params=[])",
    "ActionGroups_ListBySubscriptionId": "FunctionDef(\n  name='ActionGroups_ListBySubscriptionId',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get a list of all action groups in a subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/actionGroups')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_ListBySubscriptionId')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a list of all action groups in a subscription.'))])],\n  type_params=[])",
    "ActionGroups_ListByResourceGroup": "FunctionDef(\n  name='ActionGroups_ListByResourceGroup',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get a list of all action groups in a resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/actionGroups')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_ListByResourceGroup')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a list of all action groups in a resource group.'))])],\n  type_params=[])",
    "ActionGroups_EnableReceiver": "FunctionDef(\n  name='ActionGroups_EnableReceiver',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='actionGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value=\"Enable a receiver in an action group. This changes the receiver's status from Disabled to Enabled. This operation is only supported for Email or SMS receivers.\")),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Insights/actionGroups/'),\n          FormattedValue(\n            value=Name(id='actionGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscribe')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='actionGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: actionGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ActionGroups_EnableReceiver')),\n        keyword(\n          arg='description',\n          value=Constant(value=\"Enable a receiver in an action group. This changes the receiver's status from Disabled to Enabled. This operation is only supported for Email or SMS receivers.\"))])],\n  type_params=[])"
  }
}