{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/MetricSpecification/properties/dimensions/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/Operation/properties/properties/properties/serviceSpecification/properties/logSpecifications/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/Operation/properties/properties/properties/serviceSpecification/properties/metricSpecifications/items/properties/dimensions/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/Operation/properties/properties/properties/serviceSpecification/properties/metricSpecifications/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/OperationListResult/properties/value/items/properties/properties/properties/serviceSpecification/properties/logSpecifications/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/OperationListResult/properties/value/items/properties/properties/properties/serviceSpecification/properties/metricSpecifications/items/properties/dimensions/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/OperationListResult/properties/value/items/properties/properties/properties/serviceSpecification/properties/metricSpecifications/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/OperationListResult/properties/value/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/OperationProperties/properties/serviceSpecification/properties/logSpecifications/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/OperationProperties/properties/serviceSpecification/properties/metricSpecifications/items/properties/dimensions/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/OperationProperties/properties/serviceSpecification/properties/metricSpecifications/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/ServiceSpecification/properties/logSpecifications/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/ServiceSpecification/properties/metricSpecifications/items/properties/dimensions/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "name"
            ],
            "op": "add",
            "from": "",
            "path": "/ServiceSpecification/properties/metricSpecifications/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": {
              "description": "If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/items/properties/encryptDCConnections"
          },
          {
            "oldValue": null,
            "value": [
              "activeDirectoryId"
            ],
            "op": "add",
            "from": "",
            "path": "/accountProperties/properties/activeDirectories/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": {
              "description": "If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/activeDirectory/properties/encryptDCConnections"
          },
          {
            "oldValue": "name",
            "value": "creationDate",
            "op": "replace",
            "from": "",
            "path": "/backup/properties/properties/properties/creationDate/title"
          },
          {
            "oldValue": "name",
            "value": "creationDate",
            "op": "replace",
            "from": "",
            "path": "/backupPatch/properties/properties/properties/creationDate/title"
          },
          {
            "oldValue": null,
            "value": [
              {
                "allOf": [
                  {
                    "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                    "properties": {
                      "id": {
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the resource",
                        "readOnly": true,
                        "type": "string"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "title": "Resource",
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                "properties": {
                  "location": {
                    "description": "The geo-location where the resource lives",
                    "type": "string",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "tags": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Resource tags.",
                    "type": "object",
                    "x-ms-mutability": [
                      "read",
                      "create",
                      "update"
                    ]
                  }
                },
                "required": [
                  "location"
                ],
                "title": "Tracked Resource",
                "type": "object"
              }
            ],
            "op": "add",
            "from": "",
            "path": "/backupPoliciesList/properties/value/items/allOf"
          },
          {
            "oldValue": {
              "description": "Resource Id",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPoliciesList/properties/value/items/properties/id"
          },
          {
            "oldValue": {
              "description": "Resource location",
              "type": "string",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPoliciesList/properties/value/items/properties/location"
          },
          {
            "oldValue": {
              "description": "Resource name",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPoliciesList/properties/value/items/properties/name"
          },
          {
            "oldValue": {
              "description": "Name of backup policy",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPoliciesList/properties/value/items/properties/properties/properties/name"
          },
          {
            "oldValue": null,
            "value": [
              "volumeName"
            ],
            "op": "add",
            "from": "",
            "path": "/backupPoliciesList/properties/value/items/properties/properties/properties/volumeBackups/x-ms-identifiers"
          },
          {
            "oldValue": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Tags are a list of key-value pairs that describe the resource",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPoliciesList/properties/value/items/properties/tags"
          },
          {
            "oldValue": {
              "description": "Resource type",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPoliciesList/properties/value/items/properties/type"
          },
          {
            "oldValue": true,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPoliciesList/properties/value/items/x-ms-azure-resource"
          },
          {
            "oldValue": null,
            "value": [
              {
                "allOf": [
                  {
                    "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                    "properties": {
                      "id": {
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the resource",
                        "readOnly": true,
                        "type": "string"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "title": "Resource",
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                "properties": {
                  "location": {
                    "description": "The geo-location where the resource lives",
                    "type": "string",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "tags": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Resource tags.",
                    "type": "object",
                    "x-ms-mutability": [
                      "read",
                      "create",
                      "update"
                    ]
                  }
                },
                "required": [
                  "location"
                ],
                "title": "Tracked Resource",
                "type": "object"
              }
            ],
            "op": "add",
            "from": "",
            "path": "/backupPolicy/allOf"
          },
          {
            "oldValue": {
              "description": "Resource Id",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPolicy/properties/id"
          },
          {
            "oldValue": {
              "description": "Resource location",
              "type": "string",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPolicy/properties/location"
          },
          {
            "oldValue": {
              "description": "Resource name",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPolicy/properties/name"
          },
          {
            "oldValue": {
              "description": "Name of backup policy",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPolicy/properties/properties/properties/name"
          },
          {
            "oldValue": null,
            "value": [
              "volumeName"
            ],
            "op": "add",
            "from": "",
            "path": "/backupPolicy/properties/properties/properties/volumeBackups/x-ms-identifiers"
          },
          {
            "oldValue": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Tags are a list of key-value pairs that describe the resource",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPolicy/properties/tags"
          },
          {
            "oldValue": {
              "description": "Resource type",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPolicy/properties/type"
          },
          {
            "oldValue": true,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPolicy/x-ms-azure-resource"
          },
          {
            "oldValue": {
              "description": "Name of backup policy",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPolicyDetails/properties/properties/properties/name"
          },
          {
            "oldValue": null,
            "value": [
              "volumeName"
            ],
            "op": "add",
            "from": "",
            "path": "/backupPolicyDetails/properties/properties/properties/volumeBackups/x-ms-identifiers"
          },
          {
            "oldValue": {
              "description": "Name of backup policy",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPolicyPatch/properties/properties/properties/name"
          },
          {
            "oldValue": null,
            "value": [
              "volumeName"
            ],
            "op": "add",
            "from": "",
            "path": "/backupPolicyPatch/properties/properties/properties/volumeBackups/x-ms-identifiers"
          },
          {
            "oldValue": {
              "description": "Name of backup policy",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/backupPolicyProperties/properties/name"
          },
          {
            "oldValue": null,
            "value": [
              "volumeName"
            ],
            "op": "add",
            "from": "",
            "path": "/backupPolicyProperties/properties/volumeBackups/x-ms-identifiers"
          },
          {
            "oldValue": "name",
            "value": "creationDate",
            "op": "replace",
            "from": "",
            "path": "/backupProperties/properties/creationDate/title"
          },
          {
            "oldValue": "name",
            "value": "creationDate",
            "op": "replace",
            "from": "",
            "path": "/backupsList/properties/value/items/properties/properties/properties/creationDate/title"
          },
          {
            "oldValue": null,
            "value": [
              {
                "allOf": [
                  {
                    "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                    "properties": {
                      "id": {
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the resource",
                        "readOnly": true,
                        "type": "string"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "title": "Resource",
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                "properties": {
                  "location": {
                    "description": "The geo-location where the resource lives",
                    "type": "string",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "tags": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Resource tags.",
                    "type": "object",
                    "x-ms-mutability": [
                      "read",
                      "create",
                      "update"
                    ]
                  }
                },
                "required": [
                  "location"
                ],
                "title": "Tracked Resource",
                "type": "object"
              }
            ],
            "op": "add",
            "from": "",
            "path": "/capacityPool/allOf"
          },
          {
            "oldValue": {
              "description": "Resource Id",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/capacityPool/properties/id"
          },
          {
            "oldValue": {
              "description": "Resource location",
              "type": "string",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/capacityPool/properties/location"
          },
          {
            "oldValue": {
              "description": "Resource name",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/capacityPool/properties/name"
          },
          {
            "oldValue": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Tags are a list of key-value pairs that describe the resource",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/capacityPool/properties/tags"
          },
          {
            "oldValue": {
              "description": "Resource type",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/capacityPool/properties/type"
          },
          {
            "oldValue": true,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/capacityPool/x-ms-azure-resource"
          },
          {
            "oldValue": null,
            "value": [
              {
                "allOf": [
                  {
                    "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                    "properties": {
                      "id": {
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the resource",
                        "readOnly": true,
                        "type": "string"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "title": "Resource",
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                "properties": {
                  "location": {
                    "description": "The geo-location where the resource lives",
                    "type": "string",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "tags": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Resource tags.",
                    "type": "object",
                    "x-ms-mutability": [
                      "read",
                      "create",
                      "update"
                    ]
                  }
                },
                "required": [
                  "location"
                ],
                "title": "Tracked Resource",
                "type": "object"
              }
            ],
            "op": "add",
            "from": "",
            "path": "/capacityPoolList/properties/value/items/allOf"
          },
          {
            "oldValue": {
              "description": "Resource Id",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/capacityPoolList/properties/value/items/properties/id"
          },
          {
            "oldValue": {
              "description": "Resource location",
              "type": "string",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/capacityPoolList/properties/value/items/properties/location"
          },
          {
            "oldValue": {
              "description": "Resource name",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/capacityPoolList/properties/value/items/properties/name"
          },
          {
            "oldValue": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Tags are a list of key-value pairs that describe the resource",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/capacityPoolList/properties/value/items/properties/tags"
          },
          {
            "oldValue": {
              "description": "Resource type",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/capacityPoolList/properties/value/items/properties/type"
          },
          {
            "oldValue": true,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/capacityPoolList/properties/value/items/x-ms-azure-resource"
          },
          {
            "oldValue": null,
            "value": [
              {
                "allOf": [
                  {
                    "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                    "properties": {
                      "id": {
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the resource",
                        "readOnly": true,
                        "type": "string"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "title": "Resource",
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                "properties": {
                  "location": {
                    "description": "The geo-location where the resource lives",
                    "type": "string",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "tags": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Resource tags.",
                    "type": "object",
                    "x-ms-mutability": [
                      "read",
                      "create",
                      "update"
                    ]
                  }
                },
                "required": [
                  "location"
                ],
                "title": "Tracked Resource",
                "type": "object"
              }
            ],
            "op": "add",
            "from": "",
            "path": "/netAppAccount/allOf"
          },
          {
            "oldValue": {
              "description": "Resource Id",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccount/properties/id"
          },
          {
            "oldValue": {
              "description": "Resource location",
              "type": "string",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccount/properties/location"
          },
          {
            "oldValue": {
              "description": "Resource name",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccount/properties/name"
          },
          {
            "oldValue": null,
            "value": {
              "description": "If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/items/properties/encryptDCConnections"
          },
          {
            "oldValue": null,
            "value": [
              "activeDirectoryId"
            ],
            "op": "add",
            "from": "",
            "path": "/netAppAccount/properties/properties/properties/activeDirectories/x-ms-identifiers"
          },
          {
            "oldValue": {
              "description": "Metadata pertaining to creation and last modification of the resource.",
              "properties": {
                "createdAt": {
                  "description": "The timestamp of resource creation (UTC).",
                  "format": "date-time",
                  "type": "string"
                },
                "createdBy": {
                  "description": "The identity that created the resource.",
                  "type": "string"
                },
                "createdByType": {
                  "description": "The type of identity that created the resource.",
                  "enum": [
                    "User",
                    "Application",
                    "ManagedIdentity",
                    "Key"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "createdByType"
                  }
                },
                "lastModifiedAt": {
                  "description": "The timestamp of resource last modification (UTC)",
                  "format": "date-time",
                  "type": "string"
                },
                "lastModifiedBy": {
                  "description": "The identity that last modified the resource.",
                  "type": "string"
                },
                "lastModifiedByType": {
                  "description": "The type of identity that last modified the resource.",
                  "enum": [
                    "User",
                    "Application",
                    "ManagedIdentity",
                    "Key"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "createdByType"
                  }
                }
              },
              "readOnly": true,
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccount/properties/systemData"
          },
          {
            "oldValue": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Tags are a list of key-value pairs that describe the resource",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccount/properties/tags"
          },
          {
            "oldValue": {
              "description": "Resource type",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccount/properties/type"
          },
          {
            "oldValue": true,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccount/x-ms-azure-resource"
          },
          {
            "oldValue": null,
            "value": [
              {
                "allOf": [
                  {
                    "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                    "properties": {
                      "id": {
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the resource",
                        "readOnly": true,
                        "type": "string"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "title": "Resource",
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                "properties": {
                  "location": {
                    "description": "The geo-location where the resource lives",
                    "type": "string",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "tags": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Resource tags.",
                    "type": "object",
                    "x-ms-mutability": [
                      "read",
                      "create",
                      "update"
                    ]
                  }
                },
                "required": [
                  "location"
                ],
                "title": "Tracked Resource",
                "type": "object"
              }
            ],
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/allOf"
          },
          {
            "oldValue": {
              "description": "Resource Id",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/id"
          },
          {
            "oldValue": {
              "description": "Resource location",
              "type": "string",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/location"
          },
          {
            "oldValue": {
              "description": "Resource name",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/name"
          },
          {
            "oldValue": null,
            "value": {
              "description": "If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/items/properties/encryptDCConnections"
          },
          {
            "oldValue": null,
            "value": [
              "activeDirectoryId"
            ],
            "op": "add",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/properties/properties/activeDirectories/x-ms-identifiers"
          },
          {
            "oldValue": {
              "description": "Metadata pertaining to creation and last modification of the resource.",
              "properties": {
                "createdAt": {
                  "description": "The timestamp of resource creation (UTC).",
                  "format": "date-time",
                  "type": "string"
                },
                "createdBy": {
                  "description": "The identity that created the resource.",
                  "type": "string"
                },
                "createdByType": {
                  "description": "The type of identity that created the resource.",
                  "enum": [
                    "User",
                    "Application",
                    "ManagedIdentity",
                    "Key"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "createdByType"
                  }
                },
                "lastModifiedAt": {
                  "description": "The timestamp of resource last modification (UTC)",
                  "format": "date-time",
                  "type": "string"
                },
                "lastModifiedBy": {
                  "description": "The identity that last modified the resource.",
                  "type": "string"
                },
                "lastModifiedByType": {
                  "description": "The type of identity that last modified the resource.",
                  "enum": [
                    "User",
                    "Application",
                    "ManagedIdentity",
                    "Key"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "createdByType"
                  }
                }
              },
              "readOnly": true,
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/systemData"
          },
          {
            "oldValue": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Tags are a list of key-value pairs that describe the resource",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/tags"
          },
          {
            "oldValue": {
              "description": "Resource type",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/properties/type"
          },
          {
            "oldValue": true,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/netAppAccountList/properties/value/items/x-ms-azure-resource"
          },
          {
            "oldValue": null,
            "value": {
              "description": "If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.",
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/items/properties/encryptDCConnections"
          },
          {
            "oldValue": null,
            "value": [
              "activeDirectoryId"
            ],
            "op": "add",
            "from": "",
            "path": "/netAppAccountPatch/properties/properties/properties/activeDirectories/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Application specific parameters for the placement of volumes in the volume group",
              "properties": {
                "key": {
                  "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                  "example": "key1",
                  "type": "string"
                },
                "value": {
                  "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                  "example": "value1",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/placementKeyValuePairs"
          },
          {
            "oldValue": null,
            "value": [
              {
                "allOf": [
                  {
                    "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                    "properties": {
                      "id": {
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the resource",
                        "readOnly": true,
                        "type": "string"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "title": "Resource",
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                "properties": {
                  "location": {
                    "description": "The geo-location where the resource lives",
                    "type": "string",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "tags": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Resource tags.",
                    "type": "object",
                    "x-ms-mutability": [
                      "read",
                      "create",
                      "update"
                    ]
                  }
                },
                "required": [
                  "location"
                ],
                "title": "Tracked Resource",
                "type": "object"
              }
            ],
            "op": "add",
            "from": "",
            "path": "/snapshotPoliciesList/properties/value/items/allOf"
          },
          {
            "oldValue": {
              "description": "Resource Id",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotPoliciesList/properties/value/items/properties/id"
          },
          {
            "oldValue": {
              "description": "Resource location",
              "type": "string",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotPoliciesList/properties/value/items/properties/location"
          },
          {
            "oldValue": {
              "description": "Resource name",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotPoliciesList/properties/value/items/properties/name"
          },
          {
            "oldValue": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Tags are a list of key-value pairs that describe the resource",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotPoliciesList/properties/value/items/properties/tags"
          },
          {
            "oldValue": {
              "description": "Resource type",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotPoliciesList/properties/value/items/properties/type"
          },
          {
            "oldValue": true,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotPoliciesList/properties/value/items/x-ms-azure-resource"
          },
          {
            "oldValue": null,
            "value": [
              {
                "allOf": [
                  {
                    "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                    "properties": {
                      "id": {
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the resource",
                        "readOnly": true,
                        "type": "string"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "title": "Resource",
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                "properties": {
                  "location": {
                    "description": "The geo-location where the resource lives",
                    "type": "string",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "tags": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Resource tags.",
                    "type": "object",
                    "x-ms-mutability": [
                      "read",
                      "create",
                      "update"
                    ]
                  }
                },
                "required": [
                  "location"
                ],
                "title": "Tracked Resource",
                "type": "object"
              }
            ],
            "op": "add",
            "from": "",
            "path": "/snapshotPolicy/allOf"
          },
          {
            "oldValue": {
              "description": "Resource Id",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotPolicy/properties/id"
          },
          {
            "oldValue": {
              "description": "Resource location",
              "type": "string",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotPolicy/properties/location"
          },
          {
            "oldValue": {
              "description": "Resource name",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotPolicy/properties/name"
          },
          {
            "oldValue": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Tags are a list of key-value pairs that describe the resource",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotPolicy/properties/tags"
          },
          {
            "oldValue": {
              "description": "Resource type",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotPolicy/properties/type"
          },
          {
            "oldValue": true,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotPolicy/x-ms-azure-resource"
          },
          {
            "oldValue": null,
            "value": [
              {
                "allOf": [
                  {
                    "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                    "properties": {
                      "id": {
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the resource",
                        "readOnly": true,
                        "type": "string"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "title": "Resource",
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                "properties": {
                  "location": {
                    "description": "The geo-location where the resource lives",
                    "type": "string",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "tags": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Resource tags.",
                    "type": "object",
                    "x-ms-mutability": [
                      "read",
                      "create",
                      "update"
                    ]
                  }
                },
                "required": [
                  "location"
                ],
                "title": "Tracked Resource",
                "type": "object"
              }
            ],
            "op": "add",
            "from": "",
            "path": "/snapshotPolicyVolumeList/properties/value/items/allOf"
          },
          {
            "oldValue": "Associated volume resource Id",
            "value": "Volume resource",
            "op": "replace",
            "from": "",
            "path": "/snapshotPolicyVolumeList/properties/value/items/description"
          },
          {
            "oldValue": null,
            "value": {
              "etag": {
                "description": "A unique read-only string that changes whenever the resource is updated.",
                "readOnly": true,
                "type": "string"
              },
              "properties": {
                "description": "Volume properties",
                "properties": {
                  "avsDataStore": {
                    "default": "Disabled",
                    "description": "Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose",
                    "enum": [
                      "Enabled",
                      "Disabled"
                    ],
                    "example": "Enabled",
                    "title": "avsDataStore",
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "avsDataStore",
                      "values": [
                        {
                          "description": "avsDataStore is enabled",
                          "value": "Enabled"
                        },
                        {
                          "description": "avsDataStore is disabled",
                          "value": "Disabled"
                        }
                      ]
                    }
                  },
                  "backupId": {
                    "description": "UUID v4 or resource identifier used to identify the Backup.",
                    "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                    "maxLength": 36,
                    "minLength": 36,
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                    "title": "Backup ID",
                    "type": "string",
                    "x-nullable": true
                  },
                  "baremetalTenantId": {
                    "description": "Unique Baremetal Tenant Identifier.",
                    "example": "9560acf5-4e3a-12e7-9bdb-02007cca7779",
                    "readOnly": true,
                    "title": "Baremetal Tenant ID",
                    "type": "string"
                  },
                  "capacityPoolResourceId": {
                    "description": "Pool Resource Id used in case of creating a volume through volume group",
                    "type": "string"
                  },
                  "cloneProgress": {
                    "description": "When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning.",
                    "example": 10,
                    "format": "int32",
                    "readOnly": true,
                    "type": "integer",
                    "x-nullable": true
                  },
                  "coolAccess": {
                    "default": false,
                    "description": "Specifies whether Cool Access(tiering) is enabled for the volume.",
                    "example": false,
                    "type": "boolean"
                  },
                  "coolnessPeriod": {
                    "description": "Specifies the number of days after which data that is not accessed by clients will be tiered.",
                    "example": 7,
                    "format": "int32",
                    "maximum": 63,
                    "minimum": 7,
                    "type": "integer"
                  },
                  "creationToken": {
                    "description": "A unique file path for the volume. Used when creating mount targets",
                    "example": "some-amazing-filepath",
                    "maxLength": 80,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$",
                    "title": "Creation Token or File Path",
                    "type": "string"
                  },
                  "dataProtection": {
                    "description": "DataProtection type volumes include an object containing details of the replication",
                    "properties": {
                      "backup": {
                        "description": "Volume Backup Properties",
                        "properties": {
                          "backupEnabled": {
                            "description": "Backup Enabled",
                            "type": "boolean"
                          },
                          "backupPolicyId": {
                            "description": "Backup Policy Resource ID",
                            "type": "string"
                          },
                          "policyEnforced": {
                            "description": "Policy Enforced",
                            "type": "boolean"
                          },
                          "vaultId": {
                            "description": "Vault Resource ID",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "replication": {
                        "description": "Replication properties",
                        "properties": {
                          "endpointType": {
                            "description": "Indicates whether the local volume is the source or destination for the Volume Replication",
                            "enum": [
                              "src",
                              "dst"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "EndpointType"
                            }
                          },
                          "remoteVolumeRegion": {
                            "description": "The remote region for the other end of the Volume Replication.",
                            "type": "string"
                          },
                          "remoteVolumeResourceId": {
                            "description": "The resource ID of the remote volume.",
                            "type": "string"
                          },
                          "replicationId": {
                            "description": "Id",
                            "type": "string"
                          },
                          "replicationSchedule": {
                            "description": "Schedule",
                            "enum": [
                              "_10minutely",
                              "hourly",
                              "daily"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReplicationSchedule"
                            }
                          }
                        },
                        "required": [
                          "remoteVolumeResourceId"
                        ],
                        "type": "object"
                      },
                      "snapshot": {
                        "description": "Volume Snapshot Properties",
                        "properties": {
                          "snapshotPolicyId": {
                            "description": "Snapshot Policy ResourceId",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "title": "DataProtection"
                  },
                  "defaultGroupQuotaInKiBs": {
                    "default": 0,
                    "description": "Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.",
                    "example": 4,
                    "format": "int64",
                    "type": "integer"
                  },
                  "defaultUserQuotaInKiBs": {
                    "default": 0,
                    "description": "Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .",
                    "example": 4,
                    "format": "int64",
                    "type": "integer"
                  },
                  "encryptionKeySource": {
                    "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'",
                    "type": "string"
                  },
                  "exportPolicy": {
                    "description": "Set of export policy rules",
                    "properties": {
                      "rules": {
                        "description": "Export policy rule",
                        "items": {
                          "description": "Volume Export Policy Rule",
                          "properties": {
                            "allowedClients": {
                              "description": "Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names",
                              "type": "string"
                            },
                            "chownMode": {
                              "default": "Restricted",
                              "description": "This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own.",
                              "enum": [
                                "Restricted",
                                "Unrestricted"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ChownMode"
                              }
                            },
                            "cifs": {
                              "description": "Allows CIFS protocol",
                              "type": "boolean"
                            },
                            "hasRootAccess": {
                              "default": true,
                              "description": "Has root access to volume",
                              "example": true,
                              "type": "boolean"
                            },
                            "kerberos5ReadOnly": {
                              "default": false,
                              "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
                              "example": false,
                              "type": "boolean"
                            },
                            "kerberos5ReadWrite": {
                              "default": false,
                              "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
                              "example": true,
                              "type": "boolean"
                            },
                            "kerberos5iReadOnly": {
                              "default": false,
                              "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
                              "example": false,
                              "type": "boolean"
                            },
                            "kerberos5iReadWrite": {
                              "default": false,
                              "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
                              "example": true,
                              "type": "boolean"
                            },
                            "kerberos5pReadOnly": {
                              "default": false,
                              "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
                              "example": false,
                              "type": "boolean"
                            },
                            "kerberos5pReadWrite": {
                              "default": false,
                              "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
                              "example": true,
                              "type": "boolean"
                            },
                            "nfsv3": {
                              "description": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
                              "type": "boolean"
                            },
                            "nfsv41": {
                              "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
                              "type": "boolean"
                            },
                            "ruleIndex": {
                              "description": "Order index",
                              "format": "int32",
                              "type": "integer"
                            },
                            "unixReadOnly": {
                              "description": "Read only access",
                              "type": "boolean"
                            },
                            "unixReadWrite": {
                              "description": "Read and write access",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "title": "Export policy rule",
                        "type": "array",
                        "x-ms-identifiers": [
                          "ruleIndex"
                        ]
                      }
                    },
                    "title": "exportPolicy"
                  },
                  "fileSystemId": {
                    "description": "Unique FileSystem Identifier.",
                    "example": "9760acf5-4638-11e7-9bdb-020073ca7778",
                    "maxLength": 36,
                    "minLength": 36,
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "readOnly": true,
                    "title": "FileSystem ID",
                    "type": "string"
                  },
                  "isDefaultQuotaEnabled": {
                    "default": false,
                    "description": "Specifies if default quota is enabled for the volume.",
                    "example": false,
                    "type": "boolean"
                  },
                  "isRestoring": {
                    "description": "Restoring",
                    "type": "boolean"
                  },
                  "kerberosEnabled": {
                    "default": false,
                    "description": "Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later",
                    "example": false,
                    "type": "boolean"
                  },
                  "ldapEnabled": {
                    "default": false,
                    "description": "Specifies whether LDAP is enabled or not for a given NFS volume.",
                    "example": false,
                    "type": "boolean"
                  },
                  "mountTargets": {
                    "description": "List of mount targets",
                    "items": {
                      "description": "Mount target properties",
                      "properties": {
                        "fileSystemId": {
                          "description": "UUID v4 used to identify the MountTarget",
                          "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                          "maxLength": 36,
                          "minLength": 36,
                          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                          "title": "fileSystemId",
                          "type": "string"
                        },
                        "ipAddress": {
                          "description": "The mount target's IPv4 address",
                          "example": "1.2.3.4",
                          "readOnly": true,
                          "title": "ipAddress",
                          "type": "string"
                        },
                        "mountTargetId": {
                          "description": "UUID v4 used to identify the MountTarget",
                          "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                          "maxLength": 36,
                          "minLength": 36,
                          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                          "readOnly": true,
                          "title": "mountTargetId",
                          "type": "string"
                        },
                        "smbServerFqdn": {
                          "description": "The SMB server's Fully Qualified Domain Name, FQDN",
                          "example": "fullyqualified.domainname.com",
                          "title": "smbServerFQDN",
                          "type": "string"
                        }
                      },
                      "required": [
                        "fileSystemId"
                      ],
                      "type": "object"
                    },
                    "readOnly": true,
                    "title": "mountTargets",
                    "type": "array",
                    "x-ms-identifiers": [
                      "fileSystemId"
                    ]
                  },
                  "networkFeatures": {
                    "default": "Basic",
                    "description": "Basic network, or Standard features available to the volume.",
                    "enum": [
                      "Basic",
                      "Standard"
                    ],
                    "example": "Standard",
                    "title": "Network features",
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "NetworkFeatures",
                      "values": [
                        {
                          "description": "Basic network feature.",
                          "value": "Basic"
                        },
                        {
                          "description": "Standard network feature.",
                          "value": "Standard"
                        }
                      ]
                    }
                  },
                  "networkSiblingSetId": {
                    "description": "Network Sibling Set ID for the the group of volumes sharing networking resources.",
                    "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                    "maxLength": 36,
                    "minLength": 36,
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "readOnly": true,
                    "title": "Network Sibling Set ID",
                    "type": "string"
                  },
                  "placementRules": {
                    "description": "Application specific placement rules for the particular volume",
                    "items": {
                      "description": "Application specific parameters for the placement of volumes in the volume group",
                      "properties": {
                        "key": {
                          "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                          "example": "key1",
                          "type": "string"
                        },
                        "value": {
                          "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                          "example": "value1",
                          "type": "string"
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ],
                      "type": "object"
                    },
                    "title": "Volume placement rules",
                    "type": "array",
                    "x-ms-identifiers": [
                      "key"
                    ]
                  },
                  "protocolTypes": {
                    "description": "Set of protocol types, default NFSv3, CIFS for SMB protocol",
                    "example": [
                      "NFSv4.1"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "title": "protocolTypes",
                    "type": "array"
                  },
                  "provisioningState": {
                    "description": "Azure lifecycle management",
                    "readOnly": true,
                    "type": "string"
                  },
                  "proximityPlacementGroup": {
                    "description": "Proximity placement group associated with the volume",
                    "example": "/subscriptions/aaaaaaaa-1234-1234-1224-234567891011/resourceGroups/testGroup/providers/Microsoft.Compute/proximityPlacementGroups/testppg",
                    "type": "string"
                  },
                  "securityStyle": {
                    "default": "unix",
                    "description": "The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol",
                    "enum": [
                      "ntfs",
                      "unix"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "SecurityStyle"
                    }
                  },
                  "serviceLevel": {
                    "default": "Premium",
                    "description": "The service level of the file system",
                    "enum": [
                      "Standard",
                      "Premium",
                      "Ultra",
                      "StandardZRS"
                    ],
                    "title": "serviceLevel",
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "ServiceLevel",
                      "values": [
                        {
                          "description": "Standard service level",
                          "value": "Standard"
                        },
                        {
                          "description": "Premium service level",
                          "value": "Premium"
                        },
                        {
                          "description": "Ultra service level",
                          "value": "Ultra"
                        },
                        {
                          "description": "Zone redundant storage service level",
                          "value": "StandardZRS"
                        }
                      ]
                    }
                  },
                  "smbContinuouslyAvailable": {
                    "default": false,
                    "description": "Enables continuously available share property for smb volume. Only applicable for SMB volume",
                    "example": false,
                    "type": "boolean"
                  },
                  "smbEncryption": {
                    "default": false,
                    "description": "Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later",
                    "example": false,
                    "type": "boolean"
                  },
                  "snapshotDirectoryVisible": {
                    "default": true,
                    "description": "If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).",
                    "type": "boolean"
                  },
                  "snapshotId": {
                    "description": "UUID v4 or resource identifier used to identify the Snapshot.",
                    "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                    "maxLength": 36,
                    "minLength": 36,
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                    "title": "Snapshot ID",
                    "type": "string",
                    "x-nullable": true
                  },
                  "storageToNetworkProximity": {
                    "description": "Provides storage to network proximity information for the volume.",
                    "enum": [
                      "Default",
                      "T1",
                      "T2"
                    ],
                    "example": "T1",
                    "readOnly": true,
                    "title": "Storage to Network Proximity",
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "VolumeStorageToNetworkProximity",
                      "values": [
                        {
                          "description": "Basic storage to network connectivity.",
                          "value": "Default"
                        },
                        {
                          "description": "Standard T1 storage to network connectivity.",
                          "value": "T1"
                        },
                        {
                          "description": "Standard T2 storage to network connectivity.",
                          "value": "T2"
                        }
                      ]
                    }
                  },
                  "subnetId": {
                    "description": "The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes",
                    "type": "string"
                  },
                  "t2Network": {
                    "description": "T2 network information",
                    "example": "Test-T2-Alias",
                    "readOnly": true,
                    "type": "string"
                  },
                  "throughputMibps": {
                    "example": 128.22,
                    "title": "Maximum throughput in Mibps that can be achieved by this volume and this will be accepted as input only for manual qosType volume",
                    "type": "number"
                  },
                  "unixPermissions": {
                    "default": "0770",
                    "description": "UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.",
                    "example": "0770",
                    "maxLength": 4,
                    "minLength": 4,
                    "type": "string",
                    "x-nullable": true
                  },
                  "usageThreshold": {
                    "default": 107374182400,
                    "description": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.",
                    "example": 107374182400,
                    "format": "int64",
                    "maximum": 109951162777600,
                    "minimum": 107374182400,
                    "title": "usageThreshold",
                    "type": "integer"
                  },
                  "volumeGroupName": {
                    "description": "Volume Group Name",
                    "readOnly": true,
                    "type": "string"
                  },
                  "volumeSpecName": {
                    "description": "Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log",
                    "example": "Data",
                    "type": "string"
                  },
                  "volumeType": {
                    "description": "What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection",
                    "example": "DataProtection",
                    "type": "string"
                  }
                },
                "required": [
                  "creationToken",
                  "usageThreshold",
                  "subnetId"
                ],
                "type": "object"
              }
            },
            "op": "add",
            "from": "",
            "path": "/snapshotPolicyVolumeList/properties/value/items/properties"
          },
          {
            "oldValue": true,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/snapshotPolicyVolumeList/properties/value/items/readOnly"
          },
          {
            "oldValue": null,
            "value": [
              "location",
              "properties"
            ],
            "op": "add",
            "from": "",
            "path": "/snapshotPolicyVolumeList/properties/value/items/required"
          },
          {
            "oldValue": null,
            "value": [
              {
                "allOf": [
                  {
                    "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                    "properties": {
                      "id": {
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the resource",
                        "readOnly": true,
                        "type": "string"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "title": "Resource",
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                "properties": {
                  "location": {
                    "description": "The geo-location where the resource lives",
                    "type": "string",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "tags": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Resource tags.",
                    "type": "object",
                    "x-ms-mutability": [
                      "read",
                      "create",
                      "update"
                    ]
                  }
                },
                "required": [
                  "location"
                ],
                "title": "Tracked Resource",
                "type": "object"
              }
            ],
            "op": "add",
            "from": "",
            "path": "/volume/allOf"
          },
          {
            "oldValue": {
              "description": "Resource Id",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volume/properties/id"
          },
          {
            "oldValue": {
              "description": "Resource location",
              "type": "string",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volume/properties/location"
          },
          {
            "oldValue": {
              "description": "Resource name",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volume/properties/name"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Pool Resource Id used in case of creating a volume through volume group",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/capacityPoolResourceId"
          },
          {
            "oldValue": null,
            "value": [
              "ruleIndex"
            ],
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/exportPolicy/properties/rules/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "fileSystemId"
            ],
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/mountTargets/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Application specific placement rules for the particular volume",
              "items": {
                "description": "Application specific parameters for the placement of volumes in the volume group",
                "properties": {
                  "key": {
                    "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                    "example": "key1",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                    "example": "value1",
                    "type": "string"
                  }
                },
                "required": [
                  "key",
                  "value"
                ],
                "type": "object"
              },
              "title": "Volume placement rules",
              "type": "array",
              "x-ms-identifiers": [
                "key"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/placementRules"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Proximity placement group associated with the volume",
              "example": "/subscriptions/aaaaaaaa-1234-1234-1224-234567891011/resourceGroups/testGroup/providers/Microsoft.Compute/proximityPlacementGroups/testppg",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/proximityPlacementGroup"
          },
          {
            "oldValue": null,
            "value": {
              "description": "T2 network information",
              "example": "Test-T2-Alias",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/t2Network"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volume Group Name",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/volumeGroupName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log",
              "example": "Data",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volume/properties/properties/properties/volumeSpecName"
          },
          {
            "oldValue": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Tags are a list of key-value pairs that describe the resource",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volume/properties/tags"
          },
          {
            "oldValue": {
              "description": "Resource type",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volume/properties/type"
          },
          {
            "oldValue": true,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volume/x-ms-azure-resource"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volume group resource",
              "properties": {
                "id": {
                  "description": "Resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "name": {
                  "description": "Resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Volume group properties",
                  "properties": {
                    "groupMetaData": {
                      "description": "Volume group properties",
                      "properties": {
                        "applicationIdentifier": {
                          "description": "Application specific identifier",
                          "example": "SH1",
                          "type": "string"
                        },
                        "applicationType": {
                          "description": "Application Type",
                          "enum": [
                            "SAP-HANA"
                          ],
                          "example": "SAP-HANA",
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ApplicationType"
                          }
                        },
                        "deploymentSpecId": {
                          "description": "Application specific identifier of deployment rules for the volume group",
                          "example": "12345678-1234-1234-1234-123456676765",
                          "type": "string"
                        },
                        "globalPlacementRules": {
                          "description": "Application specific placement rules for the volume group",
                          "items": {
                            "description": "Application specific parameters for the placement of volumes in the volume group",
                            "properties": {
                              "key": {
                                "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                                "example": "key1",
                                "type": "string"
                              },
                              "value": {
                                "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                                "example": "value1",
                                "type": "string"
                              }
                            },
                            "required": [
                              "key",
                              "value"
                            ],
                            "type": "object"
                          },
                          "title": "Global volume placement rules",
                          "type": "array",
                          "x-ms-identifiers": [
                            "key"
                          ]
                        },
                        "groupDescription": {
                          "description": "Group Description",
                          "example": "group description",
                          "type": "string"
                        },
                        "volumesCount": {
                          "description": "Number of volumes in volume group",
                          "example": 5,
                          "format": "int64",
                          "readOnly": true,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "provisioningState": {
                      "description": "Azure lifecycle management",
                      "example": "Available",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/volumeGroup"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volume group resource for create",
              "properties": {
                "id": {
                  "description": "Resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "location": {
                  "description": "Resource location",
                  "type": "string",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "name": {
                  "description": "Resource name",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "Volume group properties",
                  "properties": {
                    "groupMetaData": {
                      "description": "Volume group properties",
                      "properties": {
                        "applicationIdentifier": {
                          "description": "Application specific identifier",
                          "example": "SH1",
                          "type": "string"
                        },
                        "applicationType": {
                          "description": "Application Type",
                          "enum": [
                            "SAP-HANA"
                          ],
                          "example": "SAP-HANA",
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ApplicationType"
                          }
                        },
                        "deploymentSpecId": {
                          "description": "Application specific identifier of deployment rules for the volume group",
                          "example": "12345678-1234-1234-1234-123456676765",
                          "type": "string"
                        },
                        "globalPlacementRules": {
                          "description": "Application specific placement rules for the volume group",
                          "items": {
                            "description": "Application specific parameters for the placement of volumes in the volume group",
                            "properties": {
                              "key": {
                                "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                                "example": "key1",
                                "type": "string"
                              },
                              "value": {
                                "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                                "example": "value1",
                                "type": "string"
                              }
                            },
                            "required": [
                              "key",
                              "value"
                            ],
                            "type": "object"
                          },
                          "title": "Global volume placement rules",
                          "type": "array",
                          "x-ms-identifiers": [
                            "key"
                          ]
                        },
                        "groupDescription": {
                          "description": "Group Description",
                          "example": "group description",
                          "type": "string"
                        },
                        "volumesCount": {
                          "description": "Number of volumes in volume group",
                          "example": 5,
                          "format": "int64",
                          "readOnly": true,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "provisioningState": {
                      "description": "Azure lifecycle management",
                      "example": "Available",
                      "readOnly": true,
                      "type": "string"
                    },
                    "volumes": {
                      "description": "List of volumes from group",
                      "items": {
                        "description": "Volume resource",
                        "properties": {
                          "id": {
                            "description": "Resource Id",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name",
                            "type": "string"
                          },
                          "properties": {
                            "description": "Volume properties",
                            "properties": {
                              "avsDataStore": {
                                "default": "Disabled",
                                "description": "Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose",
                                "enum": [
                                  "Enabled",
                                  "Disabled"
                                ],
                                "example": "Enabled",
                                "title": "avsDataStore",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "avsDataStore",
                                  "values": [
                                    {
                                      "description": "avsDataStore is enabled",
                                      "value": "Enabled"
                                    },
                                    {
                                      "description": "avsDataStore is disabled",
                                      "value": "Disabled"
                                    }
                                  ]
                                }
                              },
                              "backupId": {
                                "description": "UUID v4 or resource identifier used to identify the Backup.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                                "title": "Backup ID",
                                "type": "string",
                                "x-nullable": true
                              },
                              "baremetalTenantId": {
                                "description": "Unique Baremetal Tenant Identifier.",
                                "example": "9560acf5-4e3a-12e7-9bdb-02007cca7779",
                                "readOnly": true,
                                "title": "Baremetal Tenant ID",
                                "type": "string"
                              },
                              "capacityPoolResourceId": {
                                "description": "Pool Resource Id used in case of creating a volume through volume group",
                                "type": "string"
                              },
                              "cloneProgress": {
                                "description": "When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning.",
                                "example": 10,
                                "format": "int32",
                                "readOnly": true,
                                "type": "integer",
                                "x-nullable": true
                              },
                              "coolAccess": {
                                "default": false,
                                "description": "Specifies whether Cool Access(tiering) is enabled for the volume.",
                                "example": false,
                                "type": "boolean"
                              },
                              "coolnessPeriod": {
                                "description": "Specifies the number of days after which data that is not accessed by clients will be tiered.",
                                "example": 7,
                                "format": "int32",
                                "maximum": 63,
                                "minimum": 7,
                                "type": "integer"
                              },
                              "creationToken": {
                                "description": "A unique file path for the volume. Used when creating mount targets",
                                "example": "some-amazing-filepath",
                                "maxLength": 80,
                                "minLength": 1,
                                "pattern": "^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$",
                                "title": "Creation Token or File Path",
                                "type": "string"
                              },
                              "dataProtection": {
                                "description": "DataProtection type volumes include an object containing details of the replication",
                                "properties": {
                                  "backup": {
                                    "description": "Volume Backup Properties",
                                    "properties": {
                                      "backupEnabled": {
                                        "description": "Backup Enabled",
                                        "type": "boolean"
                                      },
                                      "backupPolicyId": {
                                        "description": "Backup Policy Resource ID",
                                        "type": "string"
                                      },
                                      "policyEnforced": {
                                        "description": "Policy Enforced",
                                        "type": "boolean"
                                      },
                                      "vaultId": {
                                        "description": "Vault Resource ID",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "replication": {
                                    "description": "Replication properties",
                                    "properties": {
                                      "endpointType": {
                                        "description": "Indicates whether the local volume is the source or destination for the Volume Replication",
                                        "enum": [
                                          "src",
                                          "dst"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "EndpointType"
                                        }
                                      },
                                      "remoteVolumeRegion": {
                                        "description": "The remote region for the other end of the Volume Replication.",
                                        "type": "string"
                                      },
                                      "remoteVolumeResourceId": {
                                        "description": "The resource ID of the remote volume.",
                                        "type": "string"
                                      },
                                      "replicationId": {
                                        "description": "Id",
                                        "type": "string"
                                      },
                                      "replicationSchedule": {
                                        "description": "Schedule",
                                        "enum": [
                                          "_10minutely",
                                          "hourly",
                                          "daily"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReplicationSchedule"
                                        }
                                      }
                                    },
                                    "required": [
                                      "remoteVolumeResourceId"
                                    ],
                                    "type": "object"
                                  },
                                  "snapshot": {
                                    "description": "Volume Snapshot Properties",
                                    "properties": {
                                      "snapshotPolicyId": {
                                        "description": "Snapshot Policy ResourceId",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "title": "DataProtection"
                              },
                              "defaultGroupQuotaInKiBs": {
                                "default": 0,
                                "description": "Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.",
                                "example": 4,
                                "format": "int64",
                                "type": "integer"
                              },
                              "defaultUserQuotaInKiBs": {
                                "default": 0,
                                "description": "Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .",
                                "example": 4,
                                "format": "int64",
                                "type": "integer"
                              },
                              "encryptionKeySource": {
                                "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'",
                                "type": "string"
                              },
                              "exportPolicy": {
                                "description": "Set of export policy rules",
                                "properties": {
                                  "rules": {
                                    "description": "Export policy rule",
                                    "items": {
                                      "description": "Volume Export Policy Rule",
                                      "properties": {
                                        "allowedClients": {
                                          "description": "Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names",
                                          "type": "string"
                                        },
                                        "chownMode": {
                                          "default": "Restricted",
                                          "description": "This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own.",
                                          "enum": [
                                            "Restricted",
                                            "Unrestricted"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "ChownMode"
                                          }
                                        },
                                        "cifs": {
                                          "description": "Allows CIFS protocol",
                                          "type": "boolean"
                                        },
                                        "hasRootAccess": {
                                          "default": true,
                                          "description": "Has root access to volume",
                                          "example": true,
                                          "type": "boolean"
                                        },
                                        "kerberos5ReadOnly": {
                                          "default": false,
                                          "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
                                          "example": false,
                                          "type": "boolean"
                                        },
                                        "kerberos5ReadWrite": {
                                          "default": false,
                                          "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
                                          "example": true,
                                          "type": "boolean"
                                        },
                                        "kerberos5iReadOnly": {
                                          "default": false,
                                          "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
                                          "example": false,
                                          "type": "boolean"
                                        },
                                        "kerberos5iReadWrite": {
                                          "default": false,
                                          "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
                                          "example": true,
                                          "type": "boolean"
                                        },
                                        "kerberos5pReadOnly": {
                                          "default": false,
                                          "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
                                          "example": false,
                                          "type": "boolean"
                                        },
                                        "kerberos5pReadWrite": {
                                          "default": false,
                                          "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
                                          "example": true,
                                          "type": "boolean"
                                        },
                                        "nfsv3": {
                                          "description": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
                                          "type": "boolean"
                                        },
                                        "nfsv41": {
                                          "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
                                          "type": "boolean"
                                        },
                                        "ruleIndex": {
                                          "description": "Order index",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "unixReadOnly": {
                                          "description": "Read only access",
                                          "type": "boolean"
                                        },
                                        "unixReadWrite": {
                                          "description": "Read and write access",
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "title": "Export policy rule",
                                    "type": "array",
                                    "x-ms-identifiers": [
                                      "ruleIndex"
                                    ]
                                  }
                                },
                                "title": "exportPolicy"
                              },
                              "fileSystemId": {
                                "description": "Unique FileSystem Identifier.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca7778",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                "readOnly": true,
                                "title": "FileSystem ID",
                                "type": "string"
                              },
                              "isDefaultQuotaEnabled": {
                                "default": false,
                                "description": "Specifies if default quota is enabled for the volume.",
                                "example": false,
                                "type": "boolean"
                              },
                              "isRestoring": {
                                "description": "Restoring",
                                "type": "boolean"
                              },
                              "kerberosEnabled": {
                                "default": false,
                                "description": "Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "ldapEnabled": {
                                "default": false,
                                "description": "Specifies whether LDAP is enabled or not for a given NFS volume.",
                                "example": false,
                                "type": "boolean"
                              },
                              "mountTargets": {
                                "description": "List of mount targets",
                                "items": {
                                  "description": "Mount target properties",
                                  "properties": {
                                    "fileSystemId": {
                                      "description": "UUID v4 used to identify the MountTarget",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                      "title": "fileSystemId",
                                      "type": "string"
                                    },
                                    "ipAddress": {
                                      "description": "The mount target's IPv4 address",
                                      "example": "1.2.3.4",
                                      "readOnly": true,
                                      "title": "ipAddress",
                                      "type": "string"
                                    },
                                    "mountTargetId": {
                                      "description": "UUID v4 used to identify the MountTarget",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                      "readOnly": true,
                                      "title": "mountTargetId",
                                      "type": "string"
                                    },
                                    "smbServerFqdn": {
                                      "description": "The SMB server's Fully Qualified Domain Name, FQDN",
                                      "example": "fullyqualified.domainname.com",
                                      "title": "smbServerFQDN",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "fileSystemId"
                                  ],
                                  "type": "object"
                                },
                                "readOnly": true,
                                "title": "mountTargets",
                                "type": "array",
                                "x-ms-identifiers": [
                                  "fileSystemId"
                                ]
                              },
                              "networkFeatures": {
                                "default": "Basic",
                                "description": "Basic network, or Standard features available to the volume.",
                                "enum": [
                                  "Basic",
                                  "Standard"
                                ],
                                "example": "Standard",
                                "title": "Network features",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "NetworkFeatures",
                                  "values": [
                                    {
                                      "description": "Basic network feature.",
                                      "value": "Basic"
                                    },
                                    {
                                      "description": "Standard network feature.",
                                      "value": "Standard"
                                    }
                                  ]
                                }
                              },
                              "networkSiblingSetId": {
                                "description": "Network Sibling Set ID for the the group of volumes sharing networking resources.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                "readOnly": true,
                                "title": "Network Sibling Set ID",
                                "type": "string"
                              },
                              "placementRules": {
                                "description": "Application specific placement rules for the particular volume",
                                "items": {
                                  "description": "Application specific parameters for the placement of volumes in the volume group",
                                  "properties": {
                                    "key": {
                                      "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                                      "example": "key1",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                                      "example": "value1",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ],
                                  "type": "object"
                                },
                                "title": "Volume placement rules",
                                "type": "array",
                                "x-ms-identifiers": [
                                  "key"
                                ]
                              },
                              "protocolTypes": {
                                "description": "Set of protocol types, default NFSv3, CIFS for SMB protocol",
                                "example": [
                                  "NFSv4.1"
                                ],
                                "items": {
                                  "type": "string"
                                },
                                "title": "protocolTypes",
                                "type": "array"
                              },
                              "provisioningState": {
                                "description": "Azure lifecycle management",
                                "readOnly": true,
                                "type": "string"
                              },
                              "proximityPlacementGroup": {
                                "description": "Proximity placement group associated with the volume",
                                "example": "/subscriptions/aaaaaaaa-1234-1234-1224-234567891011/resourceGroups/testGroup/providers/Microsoft.Compute/proximityPlacementGroups/testppg",
                                "type": "string"
                              },
                              "securityStyle": {
                                "default": "unix",
                                "description": "The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol",
                                "enum": [
                                  "ntfs",
                                  "unix"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "SecurityStyle"
                                }
                              },
                              "serviceLevel": {
                                "default": "Premium",
                                "description": "The service level of the file system",
                                "enum": [
                                  "Standard",
                                  "Premium",
                                  "Ultra",
                                  "StandardZRS"
                                ],
                                "title": "serviceLevel",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ServiceLevel",
                                  "values": [
                                    {
                                      "description": "Standard service level",
                                      "value": "Standard"
                                    },
                                    {
                                      "description": "Premium service level",
                                      "value": "Premium"
                                    },
                                    {
                                      "description": "Ultra service level",
                                      "value": "Ultra"
                                    },
                                    {
                                      "description": "Zone redundant storage service level",
                                      "value": "StandardZRS"
                                    }
                                  ]
                                }
                              },
                              "smbContinuouslyAvailable": {
                                "default": false,
                                "description": "Enables continuously available share property for smb volume. Only applicable for SMB volume",
                                "example": false,
                                "type": "boolean"
                              },
                              "smbEncryption": {
                                "default": false,
                                "description": "Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "snapshotDirectoryVisible": {
                                "default": true,
                                "description": "If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).",
                                "type": "boolean"
                              },
                              "snapshotId": {
                                "description": "UUID v4 or resource identifier used to identify the Snapshot.",
                                "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                "maxLength": 36,
                                "minLength": 36,
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                                "title": "Snapshot ID",
                                "type": "string",
                                "x-nullable": true
                              },
                              "storageToNetworkProximity": {
                                "description": "Provides storage to network proximity information for the volume.",
                                "enum": [
                                  "Default",
                                  "T1",
                                  "T2"
                                ],
                                "example": "T1",
                                "readOnly": true,
                                "title": "Storage to Network Proximity",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "VolumeStorageToNetworkProximity",
                                  "values": [
                                    {
                                      "description": "Basic storage to network connectivity.",
                                      "value": "Default"
                                    },
                                    {
                                      "description": "Standard T1 storage to network connectivity.",
                                      "value": "T1"
                                    },
                                    {
                                      "description": "Standard T2 storage to network connectivity.",
                                      "value": "T2"
                                    }
                                  ]
                                }
                              },
                              "subnetId": {
                                "description": "The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes",
                                "type": "string"
                              },
                              "t2Network": {
                                "description": "T2 network information",
                                "example": "Test-T2-Alias",
                                "readOnly": true,
                                "type": "string"
                              },
                              "throughputMibps": {
                                "example": 128.22,
                                "title": "Maximum throughput in Mibps that can be achieved by this volume and this will be accepted as input only for manual qosType volume",
                                "type": "number"
                              },
                              "unixPermissions": {
                                "default": "0770",
                                "description": "UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.",
                                "example": "0770",
                                "maxLength": 4,
                                "minLength": 4,
                                "type": "string",
                                "x-nullable": true
                              },
                              "usageThreshold": {
                                "default": 107374182400,
                                "description": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.",
                                "example": 107374182400,
                                "format": "int64",
                                "maximum": 109951162777600,
                                "minimum": 107374182400,
                                "title": "usageThreshold",
                                "type": "integer"
                              },
                              "volumeGroupName": {
                                "description": "Volume Group Name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "volumeSpecName": {
                                "description": "Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log",
                                "example": "Data",
                                "type": "string"
                              },
                              "volumeType": {
                                "description": "What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection",
                                "example": "DataProtection",
                                "type": "string"
                              }
                            },
                            "required": [
                              "creationToken",
                              "usageThreshold",
                              "subnetId"
                            ],
                            "type": "object"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Tags are a list of key-value pairs that describe the resource",
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "properties"
                        ],
                        "type": "object",
                        "x-ms-azure-resource": true
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Tags are a list of key-value pairs that describe the resource",
                  "type": "object"
                },
                "type": {
                  "description": "Resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/volumeGroupDetails"
          },
          {
            "oldValue": null,
            "value": {
              "description": "List of volume group resources",
              "properties": {
                "value": {
                  "description": "List of volume Groups",
                  "items": {
                    "description": "Volume group resource",
                    "properties": {
                      "id": {
                        "description": "Resource Id",
                        "readOnly": true,
                        "type": "string"
                      },
                      "location": {
                        "description": "Resource location",
                        "type": "string",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "name": {
                        "description": "Resource name",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "Volume group properties",
                        "properties": {
                          "groupMetaData": {
                            "description": "Volume group properties",
                            "properties": {
                              "applicationIdentifier": {
                                "description": "Application specific identifier",
                                "example": "SH1",
                                "type": "string"
                              },
                              "applicationType": {
                                "description": "Application Type",
                                "enum": [
                                  "SAP-HANA"
                                ],
                                "example": "SAP-HANA",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ApplicationType"
                                }
                              },
                              "deploymentSpecId": {
                                "description": "Application specific identifier of deployment rules for the volume group",
                                "example": "12345678-1234-1234-1234-123456676765",
                                "type": "string"
                              },
                              "globalPlacementRules": {
                                "description": "Application specific placement rules for the volume group",
                                "items": {
                                  "description": "Application specific parameters for the placement of volumes in the volume group",
                                  "properties": {
                                    "key": {
                                      "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                                      "example": "key1",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                                      "example": "value1",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ],
                                  "type": "object"
                                },
                                "title": "Global volume placement rules",
                                "type": "array",
                                "x-ms-identifiers": [
                                  "key"
                                ]
                              },
                              "groupDescription": {
                                "description": "Group Description",
                                "example": "group description",
                                "type": "string"
                              },
                              "volumesCount": {
                                "description": "Number of volumes in volume group",
                                "example": 5,
                                "format": "int64",
                                "readOnly": true,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "provisioningState": {
                            "description": "Azure lifecycle management",
                            "example": "Available",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "description": "Resource type",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/volumeGroupList"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volume group properties",
              "properties": {
                "groupMetaData": {
                  "description": "Volume group properties",
                  "properties": {
                    "applicationIdentifier": {
                      "description": "Application specific identifier",
                      "example": "SH1",
                      "type": "string"
                    },
                    "applicationType": {
                      "description": "Application Type",
                      "enum": [
                        "SAP-HANA"
                      ],
                      "example": "SAP-HANA",
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ApplicationType"
                      }
                    },
                    "deploymentSpecId": {
                      "description": "Application specific identifier of deployment rules for the volume group",
                      "example": "12345678-1234-1234-1234-123456676765",
                      "type": "string"
                    },
                    "globalPlacementRules": {
                      "description": "Application specific placement rules for the volume group",
                      "items": {
                        "description": "Application specific parameters for the placement of volumes in the volume group",
                        "properties": {
                          "key": {
                            "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                            "example": "key1",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                            "example": "value1",
                            "type": "string"
                          }
                        },
                        "required": [
                          "key",
                          "value"
                        ],
                        "type": "object"
                      },
                      "title": "Global volume placement rules",
                      "type": "array",
                      "x-ms-identifiers": [
                        "key"
                      ]
                    },
                    "groupDescription": {
                      "description": "Group Description",
                      "example": "group description",
                      "type": "string"
                    },
                    "volumesCount": {
                      "description": "Number of volumes in volume group",
                      "example": 5,
                      "format": "int64",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "provisioningState": {
                  "description": "Azure lifecycle management",
                  "example": "Available",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/volumeGroupListProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volume group properties",
              "properties": {
                "applicationIdentifier": {
                  "description": "Application specific identifier",
                  "example": "SH1",
                  "type": "string"
                },
                "applicationType": {
                  "description": "Application Type",
                  "enum": [
                    "SAP-HANA"
                  ],
                  "example": "SAP-HANA",
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ApplicationType"
                  }
                },
                "deploymentSpecId": {
                  "description": "Application specific identifier of deployment rules for the volume group",
                  "example": "12345678-1234-1234-1234-123456676765",
                  "type": "string"
                },
                "globalPlacementRules": {
                  "description": "Application specific placement rules for the volume group",
                  "items": {
                    "description": "Application specific parameters for the placement of volumes in the volume group",
                    "properties": {
                      "key": {
                        "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                        "example": "key1",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                        "example": "value1",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "value"
                    ],
                    "type": "object"
                  },
                  "title": "Global volume placement rules",
                  "type": "array",
                  "x-ms-identifiers": [
                    "key"
                  ]
                },
                "groupDescription": {
                  "description": "Group Description",
                  "example": "group description",
                  "type": "string"
                },
                "volumesCount": {
                  "description": "Number of volumes in volume group",
                  "example": 5,
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/volumeGroupMetaData"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volume group properties",
              "properties": {
                "groupMetaData": {
                  "description": "Volume group properties",
                  "properties": {
                    "applicationIdentifier": {
                      "description": "Application specific identifier",
                      "example": "SH1",
                      "type": "string"
                    },
                    "applicationType": {
                      "description": "Application Type",
                      "enum": [
                        "SAP-HANA"
                      ],
                      "example": "SAP-HANA",
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ApplicationType"
                      }
                    },
                    "deploymentSpecId": {
                      "description": "Application specific identifier of deployment rules for the volume group",
                      "example": "12345678-1234-1234-1234-123456676765",
                      "type": "string"
                    },
                    "globalPlacementRules": {
                      "description": "Application specific placement rules for the volume group",
                      "items": {
                        "description": "Application specific parameters for the placement of volumes in the volume group",
                        "properties": {
                          "key": {
                            "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                            "example": "key1",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                            "example": "value1",
                            "type": "string"
                          }
                        },
                        "required": [
                          "key",
                          "value"
                        ],
                        "type": "object"
                      },
                      "title": "Global volume placement rules",
                      "type": "array",
                      "x-ms-identifiers": [
                        "key"
                      ]
                    },
                    "groupDescription": {
                      "description": "Group Description",
                      "example": "group description",
                      "type": "string"
                    },
                    "volumesCount": {
                      "description": "Number of volumes in volume group",
                      "example": 5,
                      "format": "int64",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "provisioningState": {
                  "description": "Azure lifecycle management",
                  "example": "Available",
                  "readOnly": true,
                  "type": "string"
                },
                "volumes": {
                  "description": "List of volumes from group",
                  "items": {
                    "description": "Volume resource",
                    "properties": {
                      "id": {
                        "description": "Resource Id",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "Resource name",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Volume properties",
                        "properties": {
                          "avsDataStore": {
                            "default": "Disabled",
                            "description": "Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose",
                            "enum": [
                              "Enabled",
                              "Disabled"
                            ],
                            "example": "Enabled",
                            "title": "avsDataStore",
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "avsDataStore",
                              "values": [
                                {
                                  "description": "avsDataStore is enabled",
                                  "value": "Enabled"
                                },
                                {
                                  "description": "avsDataStore is disabled",
                                  "value": "Disabled"
                                }
                              ]
                            }
                          },
                          "backupId": {
                            "description": "UUID v4 or resource identifier used to identify the Backup.",
                            "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                            "maxLength": 36,
                            "minLength": 36,
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                            "title": "Backup ID",
                            "type": "string",
                            "x-nullable": true
                          },
                          "baremetalTenantId": {
                            "description": "Unique Baremetal Tenant Identifier.",
                            "example": "9560acf5-4e3a-12e7-9bdb-02007cca7779",
                            "readOnly": true,
                            "title": "Baremetal Tenant ID",
                            "type": "string"
                          },
                          "capacityPoolResourceId": {
                            "description": "Pool Resource Id used in case of creating a volume through volume group",
                            "type": "string"
                          },
                          "cloneProgress": {
                            "description": "When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning.",
                            "example": 10,
                            "format": "int32",
                            "readOnly": true,
                            "type": "integer",
                            "x-nullable": true
                          },
                          "coolAccess": {
                            "default": false,
                            "description": "Specifies whether Cool Access(tiering) is enabled for the volume.",
                            "example": false,
                            "type": "boolean"
                          },
                          "coolnessPeriod": {
                            "description": "Specifies the number of days after which data that is not accessed by clients will be tiered.",
                            "example": 7,
                            "format": "int32",
                            "maximum": 63,
                            "minimum": 7,
                            "type": "integer"
                          },
                          "creationToken": {
                            "description": "A unique file path for the volume. Used when creating mount targets",
                            "example": "some-amazing-filepath",
                            "maxLength": 80,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$",
                            "title": "Creation Token or File Path",
                            "type": "string"
                          },
                          "dataProtection": {
                            "description": "DataProtection type volumes include an object containing details of the replication",
                            "properties": {
                              "backup": {
                                "description": "Volume Backup Properties",
                                "properties": {
                                  "backupEnabled": {
                                    "description": "Backup Enabled",
                                    "type": "boolean"
                                  },
                                  "backupPolicyId": {
                                    "description": "Backup Policy Resource ID",
                                    "type": "string"
                                  },
                                  "policyEnforced": {
                                    "description": "Policy Enforced",
                                    "type": "boolean"
                                  },
                                  "vaultId": {
                                    "description": "Vault Resource ID",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "replication": {
                                "description": "Replication properties",
                                "properties": {
                                  "endpointType": {
                                    "description": "Indicates whether the local volume is the source or destination for the Volume Replication",
                                    "enum": [
                                      "src",
                                      "dst"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "EndpointType"
                                    }
                                  },
                                  "remoteVolumeRegion": {
                                    "description": "The remote region for the other end of the Volume Replication.",
                                    "type": "string"
                                  },
                                  "remoteVolumeResourceId": {
                                    "description": "The resource ID of the remote volume.",
                                    "type": "string"
                                  },
                                  "replicationId": {
                                    "description": "Id",
                                    "type": "string"
                                  },
                                  "replicationSchedule": {
                                    "description": "Schedule",
                                    "enum": [
                                      "_10minutely",
                                      "hourly",
                                      "daily"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReplicationSchedule"
                                    }
                                  }
                                },
                                "required": [
                                  "remoteVolumeResourceId"
                                ],
                                "type": "object"
                              },
                              "snapshot": {
                                "description": "Volume Snapshot Properties",
                                "properties": {
                                  "snapshotPolicyId": {
                                    "description": "Snapshot Policy ResourceId",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "title": "DataProtection"
                          },
                          "defaultGroupQuotaInKiBs": {
                            "default": 0,
                            "description": "Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.",
                            "example": 4,
                            "format": "int64",
                            "type": "integer"
                          },
                          "defaultUserQuotaInKiBs": {
                            "default": 0,
                            "description": "Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .",
                            "example": 4,
                            "format": "int64",
                            "type": "integer"
                          },
                          "encryptionKeySource": {
                            "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'",
                            "type": "string"
                          },
                          "exportPolicy": {
                            "description": "Set of export policy rules",
                            "properties": {
                              "rules": {
                                "description": "Export policy rule",
                                "items": {
                                  "description": "Volume Export Policy Rule",
                                  "properties": {
                                    "allowedClients": {
                                      "description": "Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names",
                                      "type": "string"
                                    },
                                    "chownMode": {
                                      "default": "Restricted",
                                      "description": "This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own.",
                                      "enum": [
                                        "Restricted",
                                        "Unrestricted"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ChownMode"
                                      }
                                    },
                                    "cifs": {
                                      "description": "Allows CIFS protocol",
                                      "type": "boolean"
                                    },
                                    "hasRootAccess": {
                                      "default": true,
                                      "description": "Has root access to volume",
                                      "example": true,
                                      "type": "boolean"
                                    },
                                    "kerberos5ReadOnly": {
                                      "default": false,
                                      "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
                                      "example": false,
                                      "type": "boolean"
                                    },
                                    "kerberos5ReadWrite": {
                                      "default": false,
                                      "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
                                      "example": true,
                                      "type": "boolean"
                                    },
                                    "kerberos5iReadOnly": {
                                      "default": false,
                                      "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
                                      "example": false,
                                      "type": "boolean"
                                    },
                                    "kerberos5iReadWrite": {
                                      "default": false,
                                      "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
                                      "example": true,
                                      "type": "boolean"
                                    },
                                    "kerberos5pReadOnly": {
                                      "default": false,
                                      "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
                                      "example": false,
                                      "type": "boolean"
                                    },
                                    "kerberos5pReadWrite": {
                                      "default": false,
                                      "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
                                      "example": true,
                                      "type": "boolean"
                                    },
                                    "nfsv3": {
                                      "description": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
                                      "type": "boolean"
                                    },
                                    "nfsv41": {
                                      "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
                                      "type": "boolean"
                                    },
                                    "ruleIndex": {
                                      "description": "Order index",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "unixReadOnly": {
                                      "description": "Read only access",
                                      "type": "boolean"
                                    },
                                    "unixReadWrite": {
                                      "description": "Read and write access",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                "title": "Export policy rule",
                                "type": "array",
                                "x-ms-identifiers": [
                                  "ruleIndex"
                                ]
                              }
                            },
                            "title": "exportPolicy"
                          },
                          "fileSystemId": {
                            "description": "Unique FileSystem Identifier.",
                            "example": "9760acf5-4638-11e7-9bdb-020073ca7778",
                            "maxLength": 36,
                            "minLength": 36,
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                            "readOnly": true,
                            "title": "FileSystem ID",
                            "type": "string"
                          },
                          "isDefaultQuotaEnabled": {
                            "default": false,
                            "description": "Specifies if default quota is enabled for the volume.",
                            "example": false,
                            "type": "boolean"
                          },
                          "isRestoring": {
                            "description": "Restoring",
                            "type": "boolean"
                          },
                          "kerberosEnabled": {
                            "default": false,
                            "description": "Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later",
                            "example": false,
                            "type": "boolean"
                          },
                          "ldapEnabled": {
                            "default": false,
                            "description": "Specifies whether LDAP is enabled or not for a given NFS volume.",
                            "example": false,
                            "type": "boolean"
                          },
                          "mountTargets": {
                            "description": "List of mount targets",
                            "items": {
                              "description": "Mount target properties",
                              "properties": {
                                "fileSystemId": {
                                  "description": "UUID v4 used to identify the MountTarget",
                                  "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                  "maxLength": 36,
                                  "minLength": 36,
                                  "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                  "title": "fileSystemId",
                                  "type": "string"
                                },
                                "ipAddress": {
                                  "description": "The mount target's IPv4 address",
                                  "example": "1.2.3.4",
                                  "readOnly": true,
                                  "title": "ipAddress",
                                  "type": "string"
                                },
                                "mountTargetId": {
                                  "description": "UUID v4 used to identify the MountTarget",
                                  "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                  "maxLength": 36,
                                  "minLength": 36,
                                  "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                  "readOnly": true,
                                  "title": "mountTargetId",
                                  "type": "string"
                                },
                                "smbServerFqdn": {
                                  "description": "The SMB server's Fully Qualified Domain Name, FQDN",
                                  "example": "fullyqualified.domainname.com",
                                  "title": "smbServerFQDN",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "fileSystemId"
                              ],
                              "type": "object"
                            },
                            "readOnly": true,
                            "title": "mountTargets",
                            "type": "array",
                            "x-ms-identifiers": [
                              "fileSystemId"
                            ]
                          },
                          "networkFeatures": {
                            "default": "Basic",
                            "description": "Basic network, or Standard features available to the volume.",
                            "enum": [
                              "Basic",
                              "Standard"
                            ],
                            "example": "Standard",
                            "title": "Network features",
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "NetworkFeatures",
                              "values": [
                                {
                                  "description": "Basic network feature.",
                                  "value": "Basic"
                                },
                                {
                                  "description": "Standard network feature.",
                                  "value": "Standard"
                                }
                              ]
                            }
                          },
                          "networkSiblingSetId": {
                            "description": "Network Sibling Set ID for the the group of volumes sharing networking resources.",
                            "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                            "maxLength": 36,
                            "minLength": 36,
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                            "readOnly": true,
                            "title": "Network Sibling Set ID",
                            "type": "string"
                          },
                          "placementRules": {
                            "description": "Application specific placement rules for the particular volume",
                            "items": {
                              "description": "Application specific parameters for the placement of volumes in the volume group",
                              "properties": {
                                "key": {
                                  "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                                  "example": "key1",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                                  "example": "value1",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "key",
                                "value"
                              ],
                              "type": "object"
                            },
                            "title": "Volume placement rules",
                            "type": "array",
                            "x-ms-identifiers": [
                              "key"
                            ]
                          },
                          "protocolTypes": {
                            "description": "Set of protocol types, default NFSv3, CIFS for SMB protocol",
                            "example": [
                              "NFSv4.1"
                            ],
                            "items": {
                              "type": "string"
                            },
                            "title": "protocolTypes",
                            "type": "array"
                          },
                          "provisioningState": {
                            "description": "Azure lifecycle management",
                            "readOnly": true,
                            "type": "string"
                          },
                          "proximityPlacementGroup": {
                            "description": "Proximity placement group associated with the volume",
                            "example": "/subscriptions/aaaaaaaa-1234-1234-1224-234567891011/resourceGroups/testGroup/providers/Microsoft.Compute/proximityPlacementGroups/testppg",
                            "type": "string"
                          },
                          "securityStyle": {
                            "default": "unix",
                            "description": "The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol",
                            "enum": [
                              "ntfs",
                              "unix"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "SecurityStyle"
                            }
                          },
                          "serviceLevel": {
                            "default": "Premium",
                            "description": "The service level of the file system",
                            "enum": [
                              "Standard",
                              "Premium",
                              "Ultra",
                              "StandardZRS"
                            ],
                            "title": "serviceLevel",
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ServiceLevel",
                              "values": [
                                {
                                  "description": "Standard service level",
                                  "value": "Standard"
                                },
                                {
                                  "description": "Premium service level",
                                  "value": "Premium"
                                },
                                {
                                  "description": "Ultra service level",
                                  "value": "Ultra"
                                },
                                {
                                  "description": "Zone redundant storage service level",
                                  "value": "StandardZRS"
                                }
                              ]
                            }
                          },
                          "smbContinuouslyAvailable": {
                            "default": false,
                            "description": "Enables continuously available share property for smb volume. Only applicable for SMB volume",
                            "example": false,
                            "type": "boolean"
                          },
                          "smbEncryption": {
                            "default": false,
                            "description": "Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later",
                            "example": false,
                            "type": "boolean"
                          },
                          "snapshotDirectoryVisible": {
                            "default": true,
                            "description": "If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).",
                            "type": "boolean"
                          },
                          "snapshotId": {
                            "description": "UUID v4 or resource identifier used to identify the Snapshot.",
                            "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                            "maxLength": 36,
                            "minLength": 36,
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                            "title": "Snapshot ID",
                            "type": "string",
                            "x-nullable": true
                          },
                          "storageToNetworkProximity": {
                            "description": "Provides storage to network proximity information for the volume.",
                            "enum": [
                              "Default",
                              "T1",
                              "T2"
                            ],
                            "example": "T1",
                            "readOnly": true,
                            "title": "Storage to Network Proximity",
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "VolumeStorageToNetworkProximity",
                              "values": [
                                {
                                  "description": "Basic storage to network connectivity.",
                                  "value": "Default"
                                },
                                {
                                  "description": "Standard T1 storage to network connectivity.",
                                  "value": "T1"
                                },
                                {
                                  "description": "Standard T2 storage to network connectivity.",
                                  "value": "T2"
                                }
                              ]
                            }
                          },
                          "subnetId": {
                            "description": "The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes",
                            "type": "string"
                          },
                          "t2Network": {
                            "description": "T2 network information",
                            "example": "Test-T2-Alias",
                            "readOnly": true,
                            "type": "string"
                          },
                          "throughputMibps": {
                            "example": 128.22,
                            "title": "Maximum throughput in Mibps that can be achieved by this volume and this will be accepted as input only for manual qosType volume",
                            "type": "number"
                          },
                          "unixPermissions": {
                            "default": "0770",
                            "description": "UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.",
                            "example": "0770",
                            "maxLength": 4,
                            "minLength": 4,
                            "type": "string",
                            "x-nullable": true
                          },
                          "usageThreshold": {
                            "default": 107374182400,
                            "description": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.",
                            "example": 107374182400,
                            "format": "int64",
                            "maximum": 109951162777600,
                            "minimum": 107374182400,
                            "title": "usageThreshold",
                            "type": "integer"
                          },
                          "volumeGroupName": {
                            "description": "Volume Group Name",
                            "readOnly": true,
                            "type": "string"
                          },
                          "volumeSpecName": {
                            "description": "Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log",
                            "example": "Data",
                            "type": "string"
                          },
                          "volumeType": {
                            "description": "What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection",
                            "example": "DataProtection",
                            "type": "string"
                          }
                        },
                        "required": [
                          "creationToken",
                          "usageThreshold",
                          "subnetId"
                        ],
                        "type": "object"
                      },
                      "tags": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Tags are a list of key-value pairs that describe the resource",
                        "type": "object"
                      },
                      "type": {
                        "description": "Resource type",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "properties"
                    ],
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/volumeGroupProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volume resource",
              "properties": {
                "id": {
                  "description": "Resource Id",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "Resource name",
                  "type": "string"
                },
                "properties": {
                  "description": "Volume properties",
                  "properties": {
                    "avsDataStore": {
                      "default": "Disabled",
                      "description": "Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose",
                      "enum": [
                        "Enabled",
                        "Disabled"
                      ],
                      "example": "Enabled",
                      "title": "avsDataStore",
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "avsDataStore",
                        "values": [
                          {
                            "description": "avsDataStore is enabled",
                            "value": "Enabled"
                          },
                          {
                            "description": "avsDataStore is disabled",
                            "value": "Disabled"
                          }
                        ]
                      }
                    },
                    "backupId": {
                      "description": "UUID v4 or resource identifier used to identify the Backup.",
                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                      "maxLength": 36,
                      "minLength": 36,
                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                      "title": "Backup ID",
                      "type": "string",
                      "x-nullable": true
                    },
                    "baremetalTenantId": {
                      "description": "Unique Baremetal Tenant Identifier.",
                      "example": "9560acf5-4e3a-12e7-9bdb-02007cca7779",
                      "readOnly": true,
                      "title": "Baremetal Tenant ID",
                      "type": "string"
                    },
                    "capacityPoolResourceId": {
                      "description": "Pool Resource Id used in case of creating a volume through volume group",
                      "type": "string"
                    },
                    "cloneProgress": {
                      "description": "When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning.",
                      "example": 10,
                      "format": "int32",
                      "readOnly": true,
                      "type": "integer",
                      "x-nullable": true
                    },
                    "coolAccess": {
                      "default": false,
                      "description": "Specifies whether Cool Access(tiering) is enabled for the volume.",
                      "example": false,
                      "type": "boolean"
                    },
                    "coolnessPeriod": {
                      "description": "Specifies the number of days after which data that is not accessed by clients will be tiered.",
                      "example": 7,
                      "format": "int32",
                      "maximum": 63,
                      "minimum": 7,
                      "type": "integer"
                    },
                    "creationToken": {
                      "description": "A unique file path for the volume. Used when creating mount targets",
                      "example": "some-amazing-filepath",
                      "maxLength": 80,
                      "minLength": 1,
                      "pattern": "^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$",
                      "title": "Creation Token or File Path",
                      "type": "string"
                    },
                    "dataProtection": {
                      "description": "DataProtection type volumes include an object containing details of the replication",
                      "properties": {
                        "backup": {
                          "description": "Volume Backup Properties",
                          "properties": {
                            "backupEnabled": {
                              "description": "Backup Enabled",
                              "type": "boolean"
                            },
                            "backupPolicyId": {
                              "description": "Backup Policy Resource ID",
                              "type": "string"
                            },
                            "policyEnforced": {
                              "description": "Policy Enforced",
                              "type": "boolean"
                            },
                            "vaultId": {
                              "description": "Vault Resource ID",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "replication": {
                          "description": "Replication properties",
                          "properties": {
                            "endpointType": {
                              "description": "Indicates whether the local volume is the source or destination for the Volume Replication",
                              "enum": [
                                "src",
                                "dst"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "EndpointType"
                              }
                            },
                            "remoteVolumeRegion": {
                              "description": "The remote region for the other end of the Volume Replication.",
                              "type": "string"
                            },
                            "remoteVolumeResourceId": {
                              "description": "The resource ID of the remote volume.",
                              "type": "string"
                            },
                            "replicationId": {
                              "description": "Id",
                              "type": "string"
                            },
                            "replicationSchedule": {
                              "description": "Schedule",
                              "enum": [
                                "_10minutely",
                                "hourly",
                                "daily"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ReplicationSchedule"
                              }
                            }
                          },
                          "required": [
                            "remoteVolumeResourceId"
                          ],
                          "type": "object"
                        },
                        "snapshot": {
                          "description": "Volume Snapshot Properties",
                          "properties": {
                            "snapshotPolicyId": {
                              "description": "Snapshot Policy ResourceId",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "title": "DataProtection"
                    },
                    "defaultGroupQuotaInKiBs": {
                      "default": 0,
                      "description": "Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.",
                      "example": 4,
                      "format": "int64",
                      "type": "integer"
                    },
                    "defaultUserQuotaInKiBs": {
                      "default": 0,
                      "description": "Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .",
                      "example": 4,
                      "format": "int64",
                      "type": "integer"
                    },
                    "encryptionKeySource": {
                      "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'",
                      "type": "string"
                    },
                    "exportPolicy": {
                      "description": "Set of export policy rules",
                      "properties": {
                        "rules": {
                          "description": "Export policy rule",
                          "items": {
                            "description": "Volume Export Policy Rule",
                            "properties": {
                              "allowedClients": {
                                "description": "Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names",
                                "type": "string"
                              },
                              "chownMode": {
                                "default": "Restricted",
                                "description": "This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own.",
                                "enum": [
                                  "Restricted",
                                  "Unrestricted"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ChownMode"
                                }
                              },
                              "cifs": {
                                "description": "Allows CIFS protocol",
                                "type": "boolean"
                              },
                              "hasRootAccess": {
                                "default": true,
                                "description": "Has root access to volume",
                                "example": true,
                                "type": "boolean"
                              },
                              "kerberos5ReadOnly": {
                                "default": false,
                                "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "kerberos5ReadWrite": {
                                "default": false,
                                "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "kerberos5iReadOnly": {
                                "default": false,
                                "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "kerberos5iReadWrite": {
                                "default": false,
                                "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "kerberos5pReadOnly": {
                                "default": false,
                                "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
                                "example": false,
                                "type": "boolean"
                              },
                              "kerberos5pReadWrite": {
                                "default": false,
                                "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
                                "example": true,
                                "type": "boolean"
                              },
                              "nfsv3": {
                                "description": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
                                "type": "boolean"
                              },
                              "nfsv41": {
                                "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
                                "type": "boolean"
                              },
                              "ruleIndex": {
                                "description": "Order index",
                                "format": "int32",
                                "type": "integer"
                              },
                              "unixReadOnly": {
                                "description": "Read only access",
                                "type": "boolean"
                              },
                              "unixReadWrite": {
                                "description": "Read and write access",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "title": "Export policy rule",
                          "type": "array",
                          "x-ms-identifiers": [
                            "ruleIndex"
                          ]
                        }
                      },
                      "title": "exportPolicy"
                    },
                    "fileSystemId": {
                      "description": "Unique FileSystem Identifier.",
                      "example": "9760acf5-4638-11e7-9bdb-020073ca7778",
                      "maxLength": 36,
                      "minLength": 36,
                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                      "readOnly": true,
                      "title": "FileSystem ID",
                      "type": "string"
                    },
                    "isDefaultQuotaEnabled": {
                      "default": false,
                      "description": "Specifies if default quota is enabled for the volume.",
                      "example": false,
                      "type": "boolean"
                    },
                    "isRestoring": {
                      "description": "Restoring",
                      "type": "boolean"
                    },
                    "kerberosEnabled": {
                      "default": false,
                      "description": "Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later",
                      "example": false,
                      "type": "boolean"
                    },
                    "ldapEnabled": {
                      "default": false,
                      "description": "Specifies whether LDAP is enabled or not for a given NFS volume.",
                      "example": false,
                      "type": "boolean"
                    },
                    "mountTargets": {
                      "description": "List of mount targets",
                      "items": {
                        "description": "Mount target properties",
                        "properties": {
                          "fileSystemId": {
                            "description": "UUID v4 used to identify the MountTarget",
                            "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                            "maxLength": 36,
                            "minLength": 36,
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                            "title": "fileSystemId",
                            "type": "string"
                          },
                          "ipAddress": {
                            "description": "The mount target's IPv4 address",
                            "example": "1.2.3.4",
                            "readOnly": true,
                            "title": "ipAddress",
                            "type": "string"
                          },
                          "mountTargetId": {
                            "description": "UUID v4 used to identify the MountTarget",
                            "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                            "maxLength": 36,
                            "minLength": 36,
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                            "readOnly": true,
                            "title": "mountTargetId",
                            "type": "string"
                          },
                          "smbServerFqdn": {
                            "description": "The SMB server's Fully Qualified Domain Name, FQDN",
                            "example": "fullyqualified.domainname.com",
                            "title": "smbServerFQDN",
                            "type": "string"
                          }
                        },
                        "required": [
                          "fileSystemId"
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "title": "mountTargets",
                      "type": "array",
                      "x-ms-identifiers": [
                        "fileSystemId"
                      ]
                    },
                    "networkFeatures": {
                      "default": "Basic",
                      "description": "Basic network, or Standard features available to the volume.",
                      "enum": [
                        "Basic",
                        "Standard"
                      ],
                      "example": "Standard",
                      "title": "Network features",
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "NetworkFeatures",
                        "values": [
                          {
                            "description": "Basic network feature.",
                            "value": "Basic"
                          },
                          {
                            "description": "Standard network feature.",
                            "value": "Standard"
                          }
                        ]
                      }
                    },
                    "networkSiblingSetId": {
                      "description": "Network Sibling Set ID for the the group of volumes sharing networking resources.",
                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                      "maxLength": 36,
                      "minLength": 36,
                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                      "readOnly": true,
                      "title": "Network Sibling Set ID",
                      "type": "string"
                    },
                    "placementRules": {
                      "description": "Application specific placement rules for the particular volume",
                      "items": {
                        "description": "Application specific parameters for the placement of volumes in the volume group",
                        "properties": {
                          "key": {
                            "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                            "example": "key1",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                            "example": "value1",
                            "type": "string"
                          }
                        },
                        "required": [
                          "key",
                          "value"
                        ],
                        "type": "object"
                      },
                      "title": "Volume placement rules",
                      "type": "array",
                      "x-ms-identifiers": [
                        "key"
                      ]
                    },
                    "protocolTypes": {
                      "description": "Set of protocol types, default NFSv3, CIFS for SMB protocol",
                      "example": [
                        "NFSv4.1"
                      ],
                      "items": {
                        "type": "string"
                      },
                      "title": "protocolTypes",
                      "type": "array"
                    },
                    "provisioningState": {
                      "description": "Azure lifecycle management",
                      "readOnly": true,
                      "type": "string"
                    },
                    "proximityPlacementGroup": {
                      "description": "Proximity placement group associated with the volume",
                      "example": "/subscriptions/aaaaaaaa-1234-1234-1224-234567891011/resourceGroups/testGroup/providers/Microsoft.Compute/proximityPlacementGroups/testppg",
                      "type": "string"
                    },
                    "securityStyle": {
                      "default": "unix",
                      "description": "The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol",
                      "enum": [
                        "ntfs",
                        "unix"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "SecurityStyle"
                      }
                    },
                    "serviceLevel": {
                      "default": "Premium",
                      "description": "The service level of the file system",
                      "enum": [
                        "Standard",
                        "Premium",
                        "Ultra",
                        "StandardZRS"
                      ],
                      "title": "serviceLevel",
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ServiceLevel",
                        "values": [
                          {
                            "description": "Standard service level",
                            "value": "Standard"
                          },
                          {
                            "description": "Premium service level",
                            "value": "Premium"
                          },
                          {
                            "description": "Ultra service level",
                            "value": "Ultra"
                          },
                          {
                            "description": "Zone redundant storage service level",
                            "value": "StandardZRS"
                          }
                        ]
                      }
                    },
                    "smbContinuouslyAvailable": {
                      "default": false,
                      "description": "Enables continuously available share property for smb volume. Only applicable for SMB volume",
                      "example": false,
                      "type": "boolean"
                    },
                    "smbEncryption": {
                      "default": false,
                      "description": "Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later",
                      "example": false,
                      "type": "boolean"
                    },
                    "snapshotDirectoryVisible": {
                      "default": true,
                      "description": "If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).",
                      "type": "boolean"
                    },
                    "snapshotId": {
                      "description": "UUID v4 or resource identifier used to identify the Snapshot.",
                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                      "maxLength": 36,
                      "minLength": 36,
                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                      "title": "Snapshot ID",
                      "type": "string",
                      "x-nullable": true
                    },
                    "storageToNetworkProximity": {
                      "description": "Provides storage to network proximity information for the volume.",
                      "enum": [
                        "Default",
                        "T1",
                        "T2"
                      ],
                      "example": "T1",
                      "readOnly": true,
                      "title": "Storage to Network Proximity",
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "VolumeStorageToNetworkProximity",
                        "values": [
                          {
                            "description": "Basic storage to network connectivity.",
                            "value": "Default"
                          },
                          {
                            "description": "Standard T1 storage to network connectivity.",
                            "value": "T1"
                          },
                          {
                            "description": "Standard T2 storage to network connectivity.",
                            "value": "T2"
                          }
                        ]
                      }
                    },
                    "subnetId": {
                      "description": "The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes",
                      "type": "string"
                    },
                    "t2Network": {
                      "description": "T2 network information",
                      "example": "Test-T2-Alias",
                      "readOnly": true,
                      "type": "string"
                    },
                    "throughputMibps": {
                      "example": 128.22,
                      "title": "Maximum throughput in Mibps that can be achieved by this volume and this will be accepted as input only for manual qosType volume",
                      "type": "number"
                    },
                    "unixPermissions": {
                      "default": "0770",
                      "description": "UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.",
                      "example": "0770",
                      "maxLength": 4,
                      "minLength": 4,
                      "type": "string",
                      "x-nullable": true
                    },
                    "usageThreshold": {
                      "default": 107374182400,
                      "description": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.",
                      "example": 107374182400,
                      "format": "int64",
                      "maximum": 109951162777600,
                      "minimum": 107374182400,
                      "title": "usageThreshold",
                      "type": "integer"
                    },
                    "volumeGroupName": {
                      "description": "Volume Group Name",
                      "readOnly": true,
                      "type": "string"
                    },
                    "volumeSpecName": {
                      "description": "Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log",
                      "example": "Data",
                      "type": "string"
                    },
                    "volumeType": {
                      "description": "What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection",
                      "example": "DataProtection",
                      "type": "string"
                    }
                  },
                  "required": [
                    "creationToken",
                    "usageThreshold",
                    "subnetId"
                  ],
                  "type": "object"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Tags are a list of key-value pairs that describe the resource",
                  "type": "object"
                },
                "type": {
                  "description": "Resource type",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "properties"
              ],
              "type": "object",
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/volumeGroupVolumeProperties"
          },
          {
            "oldValue": null,
            "value": [
              {
                "allOf": [
                  {
                    "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                    "properties": {
                      "id": {
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the resource",
                        "readOnly": true,
                        "type": "string"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "title": "Resource",
                    "type": "object",
                    "x-ms-azure-resource": true
                  }
                ],
                "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                "properties": {
                  "location": {
                    "description": "The geo-location where the resource lives",
                    "type": "string",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "tags": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Resource tags.",
                    "type": "object",
                    "x-ms-mutability": [
                      "read",
                      "create",
                      "update"
                    ]
                  }
                },
                "required": [
                  "location"
                ],
                "title": "Tracked Resource",
                "type": "object"
              }
            ],
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/allOf"
          },
          {
            "oldValue": {
              "description": "Resource Id",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/id"
          },
          {
            "oldValue": {
              "description": "Resource location",
              "type": "string",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/location"
          },
          {
            "oldValue": {
              "description": "Resource name",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/name"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Pool Resource Id used in case of creating a volume through volume group",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/capacityPoolResourceId"
          },
          {
            "oldValue": null,
            "value": [
              "ruleIndex"
            ],
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "fileSystemId"
            ],
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/mountTargets/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Application specific placement rules for the particular volume",
              "items": {
                "description": "Application specific parameters for the placement of volumes in the volume group",
                "properties": {
                  "key": {
                    "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                    "example": "key1",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                    "example": "value1",
                    "type": "string"
                  }
                },
                "required": [
                  "key",
                  "value"
                ],
                "type": "object"
              },
              "title": "Volume placement rules",
              "type": "array",
              "x-ms-identifiers": [
                "key"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/placementRules"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Proximity placement group associated with the volume",
              "example": "/subscriptions/aaaaaaaa-1234-1234-1224-234567891011/resourceGroups/testGroup/providers/Microsoft.Compute/proximityPlacementGroups/testppg",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/proximityPlacementGroup"
          },
          {
            "oldValue": null,
            "value": {
              "description": "T2 network information",
              "example": "Test-T2-Alias",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/t2Network"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volume Group Name",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/volumeGroupName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log",
              "example": "Data",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/properties/properties/volumeSpecName"
          },
          {
            "oldValue": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Tags are a list of key-value pairs that describe the resource",
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/tags"
          },
          {
            "oldValue": {
              "description": "Resource type",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volumeList/properties/value/items/properties/type"
          },
          {
            "oldValue": true,
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/volumeList/properties/value/items/x-ms-azure-resource"
          },
          {
            "oldValue": null,
            "value": [
              "ruleIndex"
            ],
            "op": "add",
            "from": "",
            "path": "/volumePatch/properties/properties/properties/exportPolicy/properties/rules/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "ruleIndex"
            ],
            "op": "add",
            "from": "",
            "path": "/volumePatchProperties/properties/exportPolicy/properties/rules/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Pool Resource Id used in case of creating a volume through volume group",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/capacityPoolResourceId"
          },
          {
            "oldValue": null,
            "value": [
              "ruleIndex"
            ],
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/exportPolicy/properties/rules/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": [
              "fileSystemId"
            ],
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/mountTargets/x-ms-identifiers"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Application specific placement rules for the particular volume",
              "items": {
                "description": "Application specific parameters for the placement of volumes in the volume group",
                "properties": {
                  "key": {
                    "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                    "example": "key1",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                    "example": "value1",
                    "type": "string"
                  }
                },
                "required": [
                  "key",
                  "value"
                ],
                "type": "object"
              },
              "title": "Volume placement rules",
              "type": "array",
              "x-ms-identifiers": [
                "key"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/placementRules"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Proximity placement group associated with the volume",
              "example": "/subscriptions/aaaaaaaa-1234-1234-1224-234567891011/resourceGroups/testGroup/providers/Microsoft.Compute/proximityPlacementGroups/testppg",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/proximityPlacementGroup"
          },
          {
            "oldValue": null,
            "value": {
              "description": "T2 network information",
              "example": "Test-T2-Alias",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/t2Network"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volume Group Name",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/volumeGroupName"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log",
              "example": "Data",
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/volumeProperties/properties/volumeSpecName"
          }
        ],
        "parameters": [
          {
            "oldValue": null,
            "value": {
              "description": "The name of the volumeGroup",
              "in": "path",
              "maxLength": 64,
              "minLength": 1,
              "name": "volumeGroupName",
              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,63}$",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/VolumeGroupName"
          }
        ]
      }
    },
    "info": {
      "version": {
        "from": "2021-06-01",
        "to": "2021-08-01"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/volumeGroups",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/volumeGroups/{volumeGroupName}"
      ],
      "modified": {
        "/providers/Microsoft.NetApp/operations": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/parameters/api-version"
                      },
                      {
                        "oldValue": "Gets the available metrics for Volume resource.",
                        "value": "Revert volume to specific snapshot",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/4/display/description"
                      },
                      {
                        "oldValue": "Read volume metric definitions.",
                        "value": "Revert volume resource",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/4/display/operation"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/providers/Microsoft.Insights/metricDefinitions/read",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/Revert/action",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/4/name"
                      },
                      {
                        "oldValue": "system",
                        "value": "user,system",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/4/origin"
                      },
                      {
                        "oldValue": {
                          "serviceSpecification": {
                            "metricSpecifications": [
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Average read latency in milliseconds per operation",
                                "displayName": "Average read latency",
                                "fillGapWithZero": false,
                                "name": "AverageReadLatency",
                                "unit": "MilliSeconds"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Average write latency in milliseconds per operation",
                                "displayName": "Average write latency",
                                "fillGapWithZero": false,
                                "name": "AverageWriteLatency",
                                "unit": "MilliSeconds"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Logical size of the volume (used bytes)",
                                "displayName": "Volume Consumed Size",
                                "fillGapWithZero": false,
                                "name": "VolumeLogicalSize",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Size of all snapshots in volume",
                                "displayName": "Volume snapshot size",
                                "fillGapWithZero": false,
                                "name": "VolumeSnapshotSize",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Read In/out operations per second",
                                "displayName": "Read iops",
                                "fillGapWithZero": false,
                                "name": "ReadIops",
                                "unit": "CountPerSecond"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Write In/out operations per second",
                                "displayName": "Write iops",
                                "fillGapWithZero": false,
                                "name": "WriteIops",
                                "unit": "CountPerSecond"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "The provisioned size of a volume",
                                "displayName": "Volume allocated size",
                                "fillGapWithZero": false,
                                "name": "VolumeAllocatedSize",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Volume Footprint for Cool Tier",
                                "displayName": "Volume cool tier size",
                                "fillGapWithZero": false,
                                "name": "VolumeCoolTierSize",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Data read in using GET per volume",
                                "displayName": "Volume cool tier data read size",
                                "fillGapWithZero": false,
                                "name": "VolumeCoolTierDataReadSize",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Data tiered out using PUT per volume",
                                "displayName": "Volume cool tier data write size",
                                "fillGapWithZero": false,
                                "name": "VolumeCoolTierDataWriteSize",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "The amount of time in seconds it took for the last transfer to complete.",
                                "displayName": "Volume replication last transfer duration",
                                "fillGapWithZero": false,
                                "name": "XregionReplicationLastTransferDuration",
                                "unit": "Seconds"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "The total number of bytes transferred as part of the last transfer.",
                                "displayName": "Volume replication last transfer size",
                                "fillGapWithZero": false,
                                "name": "XregionReplicationLastTransferSize",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Condition of the relationship, 1 or 0.",
                                "displayName": "Is volume replication status healthy",
                                "fillGapWithZero": false,
                                "name": "XregionReplicationHealthy",
                                "unit": "Count"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "The amount of time in seconds by which the data on the mirror lags behind the source.",
                                "displayName": "Volume replication lag time",
                                "fillGapWithZero": false,
                                "name": "XregionReplicationLagTime",
                                "unit": "Seconds"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Cumulative bytes transferred for the relationship.",
                                "displayName": "Volume replication total transfer",
                                "fillGapWithZero": false,
                                "name": "XregionReplicationTotalTransferBytes",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Total amount of data transferred for the current transfer operation.",
                                "displayName": "Volume replication progress",
                                "fillGapWithZero": false,
                                "name": "XregionReplicationRelationshipProgress",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Whether the status of the Volume Replication is 'transferring'.",
                                "displayName": "Is volume replication transferring",
                                "fillGapWithZero": false,
                                "name": "XregionReplicationRelationshipTransferring",
                                "unit": "Count"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Total bytes backed up for this Volume.",
                                "displayName": "Volume Backup Bytes",
                                "fillGapWithZero": false,
                                "name": "CbsVolumeLogicalBackupBytes",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Is backup enabled for the volume? 1 if yes, 0 if no.",
                                "displayName": "Is Volume Backup Enabled",
                                "fillGapWithZero": false,
                                "name": "CbsVolumeProtected",
                                "unit": "Count"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Is the backup policy suspended for the volume? 0 if yes, 1 if no.",
                                "displayName": "Is Volume Backup suspended",
                                "fillGapWithZero": false,
                                "name": "CbsVolumeBackupActive",
                                "unit": "Count"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Total bytes transferred for last backup or restore operation.",
                                "displayName": "Volume Backup Last Transferred Bytes",
                                "fillGapWithZero": false,
                                "name": "CbsVolumeOperationTransferredBytes",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Did the last volume backup or restore operation complete successfully? 1 if yes, 0 if no.",
                                "displayName": "Is Volume Backup Operation Complete",
                                "fillGapWithZero": false,
                                "name": "CbsVolumeOperationComplete",
                                "unit": "Count"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Total bytes transferred for last backup operation.",
                                "displayName": "Volume Backup Operation Last Transferred Bytes",
                                "fillGapWithZero": false,
                                "name": "CbsVolumeOperationBackupTransferredBytes",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Total bytes transferred for last backup restore operation.",
                                "displayName": "Volume Backup Restore Operation Last Transferred Bytes",
                                "fillGapWithZero": false,
                                "name": "CbsVolumeOperationRestoreTransferredBytes",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "The percentage of the volume consumed including snapshots.",
                                "displayName": "Percentage Volume Consumed Size",
                                "fillGapWithZero": false,
                                "name": "VolumeConsumedSizePercentage",
                                "unit": "Percent"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Other throughput (that is not read or write) in bytes per second",
                                "displayName": "Other throughput",
                                "fillGapWithZero": false,
                                "name": "OtherThroughput",
                                "unit": "BytesPerSecond"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Read throughput in bytes per second",
                                "displayName": "Read throughput",
                                "fillGapWithZero": false,
                                "name": "ReadThroughput",
                                "unit": "BytesPerSecond"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Sum of all throughput in bytes per second",
                                "displayName": "Total throughput",
                                "fillGapWithZero": false,
                                "name": "TotalThroughput",
                                "unit": "BytesPerSecond"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Write throughput in bytes per second",
                                "displayName": "Write throughput",
                                "fillGapWithZero": false,
                                "name": "WriteThroughput",
                                "unit": "BytesPerSecond"
                              }
                            ]
                          }
                        },
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/4/properties"
                      },
                      {
                        "oldValue": "Revert volume to specific snapshot",
                        "value": "Break volume replication relations",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/5/display/description"
                      },
                      {
                        "oldValue": "Revert volume resource",
                        "value": "Break volume replication resource",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/5/display/operation"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/revert/action",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/BreakReplication/action",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/5/name"
                      },
                      {
                        "oldValue": "Break volume replication relations",
                        "value": "Reads the statuses of the Volume Replication.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/6/display/description"
                      },
                      {
                        "oldValue": "Break volume replication resource",
                        "value": "Read Volume Replication Status.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/6/display/operation"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/breakReplication/action",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/ReplicationStatus/action",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/6/name"
                      },
                      {
                        "oldValue": "Reads the statuses of the Volume Replication.",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/7/display/description"
                      },
                      {
                        "oldValue": "Read Volume Replication Status.",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/7/display/operation"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/replicationStatus/read",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/ListReplications/action",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/7/name"
                      },
                      {
                        "oldValue": "Authorize the source volume replication",
                        "value": "Attempts to re-initialize an uninitialized replication",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/8/display/description"
                      },
                      {
                        "oldValue": "Authorize Replication",
                        "value": "Re-Initialize replication",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/8/display/operation"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/authorizeReplication/action",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/ReInitializeReplication/action",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/8/name"
                      },
                      {
                        "oldValue": "Resync the replication on the destination volume",
                        "value": "Gets the available metrics for Volume resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/9/display/description"
                      },
                      {
                        "oldValue": "Resync Replication",
                        "value": "Read volume metric definitions.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/9/display/operation"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/resyncReplication/action",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/providers/Microsoft.Insights/metricDefinitions/read",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/9/name"
                      },
                      {
                        "oldValue": "user,system",
                        "value": "system",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/9/origin"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "serviceSpecification": {
                            "metricSpecifications": [
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Average read latency in milliseconds per operation",
                                "displayName": "Average read latency",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "AverageReadLatency",
                                "isInternal": false,
                                "name": "AverageReadLatency",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "MilliSeconds"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Average write latency in milliseconds per operation",
                                "displayName": "Average write latency",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "AverageWriteLatency",
                                "isInternal": false,
                                "name": "AverageWriteLatency",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "MilliSeconds"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Logical size of the volume (used bytes)",
                                "displayName": "Volume Consumed Size",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "VolumeLogicalSize",
                                "isInternal": false,
                                "name": "VolumeLogicalSize",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Size of all snapshots in volume",
                                "displayName": "Volume snapshot size",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "VolumeSnapshotSize",
                                "isInternal": false,
                                "name": "VolumeSnapshotSize",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Read In/out operations per second",
                                "displayName": "Read iops",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "ReadIops",
                                "isInternal": false,
                                "name": "ReadIops",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "CountPerSecond"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Write In/out operations per second",
                                "displayName": "Write iops",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "WriteIops",
                                "isInternal": false,
                                "name": "WriteIops",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "CountPerSecond"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "The provisioned size of a volume",
                                "displayName": "Volume allocated size",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "VolumeAllocatedSize",
                                "isInternal": false,
                                "name": "VolumeAllocatedSize",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Volume Footprint for Cool Tier",
                                "displayName": "Volume cool tier size",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "VolumeCoolTierSize",
                                "isInternal": false,
                                "name": "VolumeCoolTierSize",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Data read in using GET per volume",
                                "displayName": "Volume cool tier data read size",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "VolumeCoolTierDataReadSize",
                                "isInternal": false,
                                "name": "VolumeCoolTierDataReadSize",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Data tiered out using PUT per volume",
                                "displayName": "Volume cool tier data write size",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "VolumeCoolTierDataWriteSize",
                                "isInternal": false,
                                "name": "VolumeCoolTierDataWriteSize",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "The amount of time in seconds it took for the last transfer to complete.",
                                "displayName": "Volume replication last transfer duration",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "XregionReplicationLastTransferDuration",
                                "isInternal": false,
                                "name": "XregionReplicationLastTransferDuration",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Seconds"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "The total number of bytes transferred as part of the last transfer.",
                                "displayName": "Volume replication last transfer size",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "XregionReplicationLastTransferSize",
                                "isInternal": false,
                                "name": "XregionReplicationLastTransferSize",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Condition of the relationship, 1 or 0.",
                                "displayName": "Is volume replication status healthy",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "XregionReplicationHealthy",
                                "isInternal": false,
                                "name": "XregionReplicationHealthy",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Count"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "The amount of time in seconds by which the data on the mirror lags behind the source.",
                                "displayName": "Volume replication lag time",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "XregionReplicationLagTime",
                                "isInternal": false,
                                "name": "XregionReplicationLagTime",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Seconds"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Cumulative bytes transferred for the relationship.",
                                "displayName": "Volume replication total transfer",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "XregionReplicationTotalTransferBytes",
                                "isInternal": false,
                                "name": "XregionReplicationTotalTransferBytes",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Total amount of data transferred for the current transfer operation.",
                                "displayName": "Volume replication progress",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "XregionReplicationRelationshipProgress",
                                "isInternal": false,
                                "name": "XregionReplicationRelationshipProgress",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Whether the status of the Volume Replication is 'transferring'.",
                                "displayName": "Is volume replication transferring",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "XregionReplicationRelationshipTransferring",
                                "isInternal": false,
                                "name": "XregionReplicationRelationshipTransferring",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Count"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Total bytes backed up for this Volume.",
                                "displayName": "Volume Backup Bytes",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "CbsVolumeLogicalBackupBytes",
                                "isInternal": false,
                                "name": "CbsVolumeLogicalBackupBytes",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Is backup enabled for the volume? 1 if yes, 0 if no.",
                                "displayName": "Is Volume Backup Enabled",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "CbsVolumeProtected",
                                "isInternal": false,
                                "name": "CbsVolumeProtected",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Count"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Is the backup policy suspended for the volume? 0 if yes, 1 if no.",
                                "displayName": "Is Volume Backup suspended",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "CbsVolumeBackupActive",
                                "isInternal": false,
                                "name": "CbsVolumeBackupActive",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Count"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Total bytes transferred for last backup or restore operation.",
                                "displayName": "Volume Backup Last Transferred Bytes",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "CbsVolumeOperationTransferredBytes",
                                "isInternal": false,
                                "name": "CbsVolumeOperationTransferredBytes",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Did the last volume backup or restore operation complete successfully? 1 if yes, 0 if no.",
                                "displayName": "Is Volume Backup Operation Complete",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "CbsVolumeOperationComplete",
                                "isInternal": false,
                                "name": "CbsVolumeOperationComplete",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Count"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "The percentage of the volume consumed including snapshots.",
                                "displayName": "Percentage Volume Consumed Size",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "VolumeConsumedSizePercentage",
                                "isInternal": false,
                                "name": "VolumeConsumedSizePercentage",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Percent"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Other throughput (that is not read or write) in bytes per second",
                                "displayName": "Other throughput",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "OtherThroughput",
                                "isInternal": false,
                                "name": "OtherThroughput",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "BytesPerSecond"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Read throughput in bytes per second",
                                "displayName": "Read throughput",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "ReadThroughput",
                                "isInternal": false,
                                "name": "ReadThroughput",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "BytesPerSecond"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Sum of all throughput in bytes per second",
                                "displayName": "Total throughput",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "TotalThroughput",
                                "isInternal": false,
                                "name": "TotalThroughput",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "BytesPerSecond"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Write throughput in bytes per second",
                                "displayName": "Write throughput",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "WriteThroughput",
                                "isInternal": false,
                                "name": "WriteThroughput",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "BytesPerSecond"
                              }
                            ]
                          }
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/9/properties"
                      },
                      {
                        "oldValue": "Delete the replication on the destination volume",
                        "value": "Gets the diagnostic setting for the resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/10/display/description"
                      },
                      {
                        "oldValue": "Delete Replication",
                        "value": "Read diagnostic setting.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/10/display/operation"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/deleteReplication/action",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/providers/Microsoft.Insights/diagnosticSettings/read",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/10/name"
                      },
                      {
                        "oldValue": "user,system",
                        "value": "system",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/10/origin"
                      },
                      {
                        "oldValue": "Reads a mount target resource.",
                        "value": "Creates or updates the diagnostic setting for the resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/11/display/description"
                      },
                      {
                        "oldValue": "Read mount target resource",
                        "value": "Write diagnostic setting.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/11/display/operation"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/mountTargets/read",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/providers/Microsoft.Insights/diagnosticSettings/write",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/11/name"
                      },
                      {
                        "oldValue": "user,system",
                        "value": "system",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/11/origin"
                      },
                      {
                        "oldValue": "Gets the diagnostic setting for the resource.",
                        "value": "Authorize the source volume replication",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/12/display/description"
                      },
                      {
                        "oldValue": "Read diagnostic setting.",
                        "value": "Authorize Replication",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/12/display/operation"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/providers/Microsoft.Insights/diagnosticSettings/read",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/AuthorizeReplication/action",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/12/name"
                      },
                      {
                        "oldValue": "system",
                        "value": "user,system",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/12/origin"
                      },
                      {
                        "oldValue": "Creates or updates the diagnostic setting for the resource.",
                        "value": "Resync the replication on the destination volume",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/13/display/description"
                      },
                      {
                        "oldValue": "Write diagnostic setting.",
                        "value": "Resync Replication",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/13/display/operation"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/providers/Microsoft.Insights/diagnosticSettings/write",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/ResyncReplication/action",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/13/name"
                      },
                      {
                        "oldValue": "system",
                        "value": "user,system",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/13/origin"
                      },
                      {
                        "oldValue": "Reads an account resource.",
                        "value": "Delete the replication on the destination volume",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/14/display/description"
                      },
                      {
                        "oldValue": "Read account resource",
                        "value": "Delete Replication",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/14/display/operation"
                      },
                      {
                        "oldValue": "Accounts resource type",
                        "value": "Volumes resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/14/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/read",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/DeleteReplication/action",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/14/name"
                      },
                      {
                        "oldValue": "Writes an account resource.",
                        "value": "Reads the statuses of the Volume Replication.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/15/display/description"
                      },
                      {
                        "oldValue": "Write account resource",
                        "value": "Read Volume Replication Status.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/15/display/operation"
                      },
                      {
                        "oldValue": "Accounts resource type",
                        "value": "Volumes resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/15/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/write",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/ReplicationStatus/read",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/15/name"
                      },
                      {
                        "oldValue": "Deletes a account resource.",
                        "value": "Reads a mount target resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/16/display/description"
                      },
                      {
                        "oldValue": "Delete account resource",
                        "value": "Read mount target resource",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/16/display/operation"
                      },
                      {
                        "oldValue": "Accounts resource type",
                        "value": "Volumes resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/16/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/delete",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/MountTargets/read",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/16/name"
                      },
                      {
                        "oldValue": "Reads a pool resource.",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/17/display/description"
                      },
                      {
                        "oldValue": "Read pool resource",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/17/display/operation"
                      },
                      {
                        "oldValue": "Pools resource type",
                        "value": "Volumes resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/17/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/read",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/BackupStatus/read",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/17/name"
                      },
                      {
                        "oldValue": "Writes a pool resource.",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/18/display/description"
                      },
                      {
                        "oldValue": "Write pool resource",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/18/display/operation"
                      },
                      {
                        "oldValue": "Pools resource type",
                        "value": "Volumes resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/18/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/write",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/RestoreStatus/read",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/18/name"
                      },
                      {
                        "oldValue": "Deletes a pool resource.",
                        "value": "Moves volume to another pool.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/19/display/description"
                      },
                      {
                        "oldValue": "Delete pool resource",
                        "value": "Change pool for volume",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/19/display/operation"
                      },
                      {
                        "oldValue": "Pools resource type",
                        "value": "Volumes resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/19/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/delete",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/PoolChange/action",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/19/name"
                      },
                      {
                        "oldValue": "Gets the available metrics for Volume resource.",
                        "value": "Relocate volume to a new stamp.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/20/display/description"
                      },
                      {
                        "oldValue": "Read volume metric definitions.",
                        "value": "Relocate volume to a new stamp.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/20/display/operation"
                      },
                      {
                        "oldValue": "Pools resource type",
                        "value": "Volumes resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/20/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/providers/Microsoft.Insights/metricDefinitions/read",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/RelocateVolume/action",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/20/name"
                      },
                      {
                        "oldValue": "system",
                        "value": "user,system",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/20/origin"
                      },
                      {
                        "oldValue": {
                          "serviceSpecification": {
                            "metricSpecifications": [
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Allocated used size of the pool",
                                "displayName": "Pool Allocated To Volume Size",
                                "fillGapWithZero": false,
                                "name": "VolumePoolAllocatedUsed",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Sum of the logical size of all the volumes belonging to the pool",
                                "displayName": "Pool Consumed Size",
                                "fillGapWithZero": false,
                                "name": "VolumePoolTotalLogicalSize",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Provisioned size of this pool",
                                "displayName": "Pool Allocated Size",
                                "fillGapWithZero": false,
                                "name": "VolumePoolAllocatedSize",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Sum of snapshot size of all volumes in this pool",
                                "displayName": "Total Snapshot size for the pool",
                                "fillGapWithZero": false,
                                "name": "VolumePoolTotalSnapshotSize",
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Provisioned throughput of this pool",
                                "displayName": "Provisioned throughput for the pool",
                                "fillGapWithZero": false,
                                "name": "VolumePoolProvisionedThroughput",
                                "unit": "BytesPerSecond"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Sum of the throughput of all the volumes belonging to the pool",
                                "displayName": "Pool allocated throughput",
                                "fillGapWithZero": false,
                                "name": "VolumePoolAllocatedToVolumeThroughput",
                                "unit": "BytesPerSecond"
                              }
                            ]
                          }
                        },
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/20/properties"
                      },
                      {
                        "oldValue": "Gets the log definitions for the resource.",
                        "value": "Finalize relocation by cleaning up the old volume.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/21/display/description"
                      },
                      {
                        "oldValue": "Read log definitions.",
                        "value": "Finalize relocation of volume.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/21/display/operation"
                      },
                      {
                        "oldValue": "Pools resource type",
                        "value": "Volumes resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/21/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/providers/Microsoft.Insights/logDefinitions/read",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/FinalizeRelocation/action",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/21/name"
                      },
                      {
                        "oldValue": "system",
                        "value": "user,system",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/21/origin"
                      },
                      {
                        "oldValue": {
                          "serviceSpecification": {}
                        },
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/21/properties"
                      },
                      {
                        "oldValue": "Gets the diagnostic setting for the resource.",
                        "value": "Revert the relocation and revert back to the old volume.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/22/display/description"
                      },
                      {
                        "oldValue": "Read diagnostic setting.",
                        "value": "Revert the relocation of volume.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/22/display/operation"
                      },
                      {
                        "oldValue": "Pools resource type",
                        "value": "Volumes resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/22/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/providers/Microsoft.Insights/diagnosticSettings/read",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/RevertRelocation/action",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/22/name"
                      },
                      {
                        "oldValue": "system",
                        "value": "user,system",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/22/origin"
                      },
                      {
                        "oldValue": "Creates or updates the diagnostic setting for the resource.",
                        "value": "Reads an account resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/23/display/description"
                      },
                      {
                        "oldValue": "Write diagnostic setting.",
                        "value": "Read account resource",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/23/display/operation"
                      },
                      {
                        "oldValue": "Pools resource type",
                        "value": "Accounts resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/23/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/providers/Microsoft.Insights/diagnosticSettings/write",
                        "value": "Microsoft.NetApp/netAppAccounts/read",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/23/name"
                      },
                      {
                        "oldValue": "system",
                        "value": "user,system",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/23/origin"
                      },
                      {
                        "oldValue": "Reads a snapshot resource.",
                        "value": "Writes an account resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/24/display/description"
                      },
                      {
                        "oldValue": "Read snapshot resource",
                        "value": "Write account resource",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/24/display/operation"
                      },
                      {
                        "oldValue": "Snapshots resource type",
                        "value": "Accounts resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/24/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots/read",
                        "value": "Microsoft.NetApp/netAppAccounts/write",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/24/name"
                      },
                      {
                        "oldValue": "Writes a snapshot resource.",
                        "value": "Deletes a account resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/25/display/description"
                      },
                      {
                        "oldValue": "Write snapshot resource",
                        "value": "Delete account resource",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/25/display/operation"
                      },
                      {
                        "oldValue": "Snapshots resource type",
                        "value": "Accounts resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/25/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots/write",
                        "value": "Microsoft.NetApp/netAppAccounts/delete",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/25/name"
                      },
                      {
                        "oldValue": "Deletes a snapshot resource.",
                        "value": "Renews MSI credentials of account, if account has MSI credentials that are due for renewal.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/26/display/description"
                      },
                      {
                        "oldValue": "Delete snapshot resource",
                        "value": "Renew MSI credentials, if possible.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/26/display/operation"
                      },
                      {
                        "oldValue": "Snapshots resource type",
                        "value": "Accounts resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/26/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots/delete",
                        "value": "Microsoft.NetApp/netAppAccounts/RenewCredentials/action",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/26/name"
                      },
                      {
                        "oldValue": "Reads a snapshot policy resource.",
                        "value": "Reads a pool resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/27/display/description"
                      },
                      {
                        "oldValue": "Read snapshot policy resource",
                        "value": "Read pool resource",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/27/display/operation"
                      },
                      {
                        "oldValue": "Snapshot Policies resource type",
                        "value": "Pools resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/27/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/snapshotPolicies/read",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/read",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/27/name"
                      },
                      {
                        "oldValue": "Writes a snapshot policy resource.",
                        "value": "Writes a pool resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/28/display/description"
                      },
                      {
                        "oldValue": "Write snapshot policy resource",
                        "value": "Write pool resource",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/28/display/operation"
                      },
                      {
                        "oldValue": "Snapshot Policies resource type",
                        "value": "Pools resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/28/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/snapshotPolicies/write",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/write",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/28/name"
                      },
                      {
                        "oldValue": "Deletes a snapshot policy resource.",
                        "value": "Deletes a pool resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/29/display/description"
                      },
                      {
                        "oldValue": "Delete snapshot policy resource",
                        "value": "Delete pool resource",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/29/display/operation"
                      },
                      {
                        "oldValue": "Snapshot Policies resource type",
                        "value": "Pools resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/29/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/netAppAccounts/snapshotPolicies/delete",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/delete",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/29/name"
                      },
                      {
                        "oldValue": "Reads an operation resources.",
                        "value": "Gets the available metrics for Volume resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/30/display/description"
                      },
                      {
                        "oldValue": "Read operation resource",
                        "value": "Read volume metric definitions.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/30/display/operation"
                      },
                      {
                        "oldValue": "Operations resource type",
                        "value": "Pools resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/30/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/Operations/read",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/providers/Microsoft.Insights/metricDefinitions/read",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/30/name"
                      },
                      {
                        "oldValue": "user,system",
                        "value": "system",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/30/origin"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "serviceSpecification": {
                            "metricSpecifications": [
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Allocated used size of the pool",
                                "displayName": "Pool Allocated To Volume Size",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "VolumePoolAllocatedUsed",
                                "isInternal": false,
                                "name": "VolumePoolAllocatedUsed",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Sum of the logical size of all the volumes belonging to the pool",
                                "displayName": "Pool Consumed Size",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "VolumePoolTotalLogicalSize",
                                "isInternal": false,
                                "name": "VolumePoolTotalLogicalSize",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average",
                                  "Total"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Provisioned size of this pool",
                                "displayName": "Pool Allocated Size",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "VolumePoolAllocatedSize",
                                "isInternal": false,
                                "name": "VolumePoolAllocatedSize",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average",
                                  "Total"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Sum of snapshot size of all volumes in this pool",
                                "displayName": "Total Snapshot size for the pool",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "VolumePoolTotalSnapshotSize",
                                "isInternal": false,
                                "name": "VolumePoolTotalSnapshotSize",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "Bytes"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Provisioned throughput of this pool",
                                "displayName": "Provisioned throughput for the pool",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "VolumePoolProvisionedThroughput",
                                "isInternal": false,
                                "name": "VolumePoolProvisionedThroughput",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "BytesPerSecond"
                              },
                              {
                                "aggregationType": "Average",
                                "dimensions": [],
                                "displayDescription": "Sum of the throughput of all the volumes belonging to the pool",
                                "displayName": "Pool allocated throughput",
                                "enableRegionalMdmAccount": true,
                                "fillGapWithZero": false,
                                "internalMetricName": "VolumePoolAllocatedToVolumeThroughput",
                                "isInternal": false,
                                "name": "VolumePoolAllocatedToVolumeThroughput",
                                "sourceMdmAccount": "MicrosoftNetAppShoebox2",
                                "sourceMdmNamespace": "NetAppUsageAndMetrics",
                                "supportedAggregationTypes": [
                                  "Average"
                                ],
                                "supportedTimeGrainTypes": [
                                  "PT5M",
                                  "PT15M",
                                  "PT30M",
                                  "PT1H",
                                  "PT6H",
                                  "PT12H",
                                  "P1D"
                                ],
                                "unit": "BytesPerSecond"
                              }
                            ]
                          }
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/30/properties"
                      },
                      {
                        "oldValue": "Reads an operation result resource.",
                        "value": "Gets the log definitions for the resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/31/display/description"
                      },
                      {
                        "oldValue": "Read operation result resource",
                        "value": "Read log definitions.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/31/display/operation"
                      },
                      {
                        "oldValue": "Operation results resource type",
                        "value": "Pools resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/31/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/locations/operationresults/read",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/providers/Microsoft.Insights/logDefinitions/read",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/31/name"
                      },
                      {
                        "oldValue": "user,system",
                        "value": "system",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/31/origin"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "serviceSpecification": {
                            "logSpecifications": [
                              {
                                "displayName": "Capacity Pool Autoscaled",
                                "name": "Autoscale"
                              }
                            ]
                          }
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/31/properties"
                      },
                      {
                        "oldValue": "Reads a location wide operation.",
                        "value": "Gets the diagnostic setting for the resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/32/display/description"
                      },
                      {
                        "oldValue": "Read location wide operation",
                        "value": "Read diagnostic setting.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/32/display/operation"
                      },
                      {
                        "oldValue": "Location wide operation",
                        "value": "Pools resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/32/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/locations/read",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/providers/Microsoft.Insights/diagnosticSettings/read",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/32/name"
                      },
                      {
                        "oldValue": "user,system",
                        "value": "system",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/32/origin"
                      },
                      {
                        "oldValue": "Check if resource name is available",
                        "value": "Creates or updates the diagnostic setting for the resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/33/display/description"
                      },
                      {
                        "oldValue": "Check if resource name is available",
                        "value": "Write diagnostic setting.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/33/display/operation"
                      },
                      {
                        "oldValue": "NetApp resources",
                        "value": "Pools resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/33/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/locations/checknameavailability/action",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/providers/Microsoft.Insights/diagnosticSettings/write",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/33/name"
                      },
                      {
                        "oldValue": "user,system",
                        "value": "system",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/33/origin"
                      },
                      {
                        "oldValue": "Check if file path is available",
                        "value": "Reads a snapshot resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/34/display/description"
                      },
                      {
                        "oldValue": "Check if file path is available",
                        "value": "Read snapshot resource",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/34/display/operation"
                      },
                      {
                        "oldValue": "Volumes resource type",
                        "value": "Snapshots resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/34/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/locations/checkfilepathavailability/action",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots/read",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/34/name"
                      },
                      {
                        "oldValue": "Unregisters Subscription with Microsoft.NetApp resource provider",
                        "value": "Writes a snapshot resource.",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/35/display/description"
                      },
                      {
                        "oldValue": "Unregister Subscription for Azure NetApp Files",
                        "value": "Write snapshot resource",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/35/display/operation"
                      },
                      {
                        "oldValue": "Subscription",
                        "value": "Snapshots resource type",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/35/display/resource"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/unregister/action",
                        "value": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots/write",
                        "op": "replace",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/35/name"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Deletes a snapshot resource.",
                            "operation": "Delete snapshot resource",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Snapshots resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots/delete",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Restores files from a snapshot resource",
                            "operation": "Single File Snapshot Restore",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Snapshots resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots/RestoreFiles/action",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Subvolume resource type."
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/subvolumes/read",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Write a subvolume resource.",
                            "operation": "Write subvolume Resource",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Subvolume resource type."
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/subvolumes/write",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Subvolume resource type."
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/subvolumes/delete",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Read subvolume metadata resource.",
                            "operation": "Subvolume Metadata resource.",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Subvolume resource type."
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/subvolumes/GetMetadata/action",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Reads a snapshot policy resource.",
                            "operation": "Read snapshot policy resource",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Snapshot Policies resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/snapshotPolicies/read",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Writes a snapshot policy resource.",
                            "operation": "Write snapshot policy resource",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Snapshot Policies resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/snapshotPolicies/write",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Deletes a snapshot policy resource.",
                            "operation": "Delete snapshot policy resource",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Snapshot Policies resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/snapshotPolicies/delete",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "List volumes connected to snapshot policy",
                            "operation": "List connected volumes",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Snapshot Policies resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/snapshotPolicies/Volumes/action",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "List volumes connected to snapshot policy",
                            "operation": "List connected volumes",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Snapshot Policies resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/snapshotPolicies/ListVolumes/action",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Reads a backup resource.",
                            "operation": "Read backup resource.",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Backup resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/backups/read",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Writes a backup resource.",
                            "operation": "Write backup resource.",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Backup resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/backups/write",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Deletes a backup resource.",
                            "operation": "Delete backup resource",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Backup resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/backups/delete",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "provider": "Microsoft.NetApp Resource Provider"
                          },
                          "name": "Microsoft.NetApp/netAppIPSecPolicies/read",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "provider": "Microsoft.NetApp Resource Provider"
                          },
                          "name": "Microsoft.NetApp/netAppIPSecPolicies/write",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "provider": "Microsoft.NetApp Resource Provider"
                          },
                          "name": "Microsoft.NetApp/netAppIPSecPolicies/delete",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "provider": "Microsoft.NetApp Resource Provider"
                          },
                          "name": "Microsoft.NetApp/netAppIPSecPolicies/Apply/action",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Reads a backup policy resource.",
                            "operation": "Read backup policy resource.",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Backup Policy resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/backupPolicies/read",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Writes a backup policy resource.",
                            "operation": "Write backup policy resource.",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Backup Policy resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/backupPolicies/write",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Deletes a backup policy resource.",
                            "operation": "Delete backup policy resource",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Backup Policy resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/backupPolicies/delete",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Reads a vault resource.",
                            "operation": "Read vault resource.",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Vault resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/vaults/read",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Reads an account backup resource.",
                            "operation": "Read an account backup resource.",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Account backup resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/accountBackups/read",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Writes an account backup resource.",
                            "operation": "Write an account backup resource.",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Account backup resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/accountBackups/write",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Deletes an account backup resource.",
                            "operation": "Delete an account backup resource.",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Account backup resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/accountBackups/delete",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Reads a volume group resource.",
                            "operation": "Read volume group resource",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Volume Group resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/volumeGroups/read",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Writes a volume group resource.",
                            "operation": "Write volume group resource",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Volume Group resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/volumeGroups/write",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Deletes a volume group resource.",
                            "operation": "Delete volume group resource",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Volume Group resource type"
                          },
                          "name": "Microsoft.NetApp/netAppAccounts/volumeGroups/delete",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Reads a Quotalimit resource type.",
                            "operation": "Read QuotaLimit resource type",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "QuotaLimit resource type"
                          },
                          "name": "Microsoft.NetApp/locations/quotaLimits/read",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Reads an operation resources.",
                            "operation": "Read operation resource",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Operations resource type"
                          },
                          "name": "Microsoft.NetApp/Operations/read",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Reads an operation result resource.",
                            "operation": "Read operation result resource",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Operation results resource type"
                          },
                          "name": "Microsoft.NetApp/locations/operationresults/read",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Reads a location wide operation.",
                            "operation": "Read location wide operation",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Location wide operation"
                          },
                          "name": "Microsoft.NetApp/locations/read",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Check if resource name is available",
                            "operation": "Check if resource name is available",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "NetApp resources"
                          },
                          "name": "Microsoft.NetApp/locations/checknameavailability/action",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Check if file path is available",
                            "operation": "Check if file path is available",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Volumes resource type"
                          },
                          "name": "Microsoft.NetApp/locations/checkfilepathavailability/action",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Unregisters Subscription with Microsoft.NetApp resource provider",
                            "operation": "Unregister Subscription for Azure NetApp Files",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "Subscription"
                          },
                          "name": "Microsoft.NetApp/unregister/action",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "display": {
                            "description": "Checks ReservedCapacity inventory.",
                            "operation": "Checks ReservedCapacity inventory.",
                            "provider": "Microsoft.NetApp Resource Provider",
                            "resource": "ReservedCapacity reservation resource."
                          },
                          "name": "Microsoft.NetApp/locations/checkinventory/action",
                          "origin": "user,system"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/OperationList/responses/200/body/value/-"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                "name"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/serviceSpecification/properties/logSpecifications/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "name"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/serviceSpecification/properties/metricSpecifications/items/properties/dimensions/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "name"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/serviceSpecification/properties/metricSpecifications/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "name"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/x-ms-identifiers"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkFilePathAvailability": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/CheckFilePathAvailability/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkNameAvailability": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/CheckNameAvailability/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkQuotaAvailability": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/CheckQuotaAvailability/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/quotaLimits": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/parameters/api-version"
                      },
                      {
                        "oldValue": "accountsPerSubscription",
                        "value": "eastus/accountsPerSubscription",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/0/name"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/quotaLimits",
                        "value": "Microsoft.NetApp/locations/quotaLimits",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/0/type"
                      },
                      {
                        "oldValue": "poolsPerAccount",
                        "value": "eastus/poolsPerAccount",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/1/name"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/quotaLimits",
                        "value": "Microsoft.NetApp/locations/quotaLimits",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/1/type"
                      },
                      {
                        "oldValue": "volumesPerPool",
                        "value": "eastus/volumesPerPool",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/2/name"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/quotaLimits",
                        "value": "Microsoft.NetApp/locations/quotaLimits",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/2/type"
                      },
                      {
                        "oldValue": "snapshotsPerVolume",
                        "value": "eastus/snapshotsPerVolume",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/3/name"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/quotaLimits",
                        "value": "Microsoft.NetApp/locations/quotaLimits",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/3/type"
                      },
                      {
                        "oldValue": "totalTiBsPerSubscription",
                        "value": "eastus/totalTiBsPerSubscription",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/4/name"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/quotaLimits",
                        "value": "Microsoft.NetApp/locations/quotaLimits",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/4/type"
                      },
                      {
                        "oldValue": "totalDPVolumesPerSubscription",
                        "value": "eastus/totalDPVolumesPerSubscription",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/5/name"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/quotaLimits",
                        "value": "Microsoft.NetApp/locations/quotaLimits",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/5/type"
                      },
                      {
                        "oldValue": "totalVolumesPerSubscription",
                        "value": "eastus/totalVolumesPerSubscription",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/6/name"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/quotaLimits",
                        "value": "Microsoft.NetApp/locations/quotaLimits",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/6/type"
                      },
                      {
                        "oldValue": "totalCoolAccessVolumesPerSubscription",
                        "value": "eastus/totalCoolAccessVolumesPerSubscription",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/7/name"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/quotaLimits",
                        "value": "Microsoft.NetApp/locations/quotaLimits",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/value/7/type"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/quotaLimits/{quotaLimitName}": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/parameters/api-version"
                      },
                      {
                        "oldValue": "totalCoolAccessVolumesPerSubscription",
                        "value": "eastus/totalCoolAccessVolumesPerSubscription",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/name"
                      },
                      {
                        "oldValue": "Microsoft.NetApp/quotaLimits",
                        "value": "Microsoft.NetApp/locations/quotaLimits",
                        "op": "replace",
                        "from": "",
                        "path": "/QuotaLimits/responses/200/body/type"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/netAppAccounts": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_List/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/encryptDCConnections"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "activeDirectoryId"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/x-ms-identifiers"
                            },
                            {
                              "oldValue": {
                                "description": "Metadata pertaining to creation and last modification of the resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created the resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity that created the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of resource last modification (UTC)",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified the resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity that last modified the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/systemData"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_List/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/items/properties/encryptDCConnections"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "activeDirectoryId"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/activeDirectories/x-ms-identifiers"
                            },
                            {
                              "oldValue": {
                                "description": "Metadata pertaining to creation and last modification of the resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created the resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity that created the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of resource last modification (UTC)",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified the resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity that last modified the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/systemData"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Delete/parameters/api-version"
                      }
                    ]
                  }
                }
              },
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Get/parameters/api-version"
                      },
                      {
                        "oldValue": "Engineering",
                        "value": "OU=Engineering",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Get/responses/200/body/properties/activeDirectories/0/organizationalUnit"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/encryptDCConnections"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "activeDirectoryId"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/x-ms-identifiers"
                            },
                            {
                              "oldValue": {
                                "description": "Metadata pertaining to creation and last modification of the resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created the resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity that created the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of resource last modification (UTC)",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified the resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity that last modified the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Update/parameters/api-version"
                      },
                      {
                        "oldValue": "https://management.azure.com/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/providers/Microsoft.NetApp/locations/eastus/operationResults/18c499e1-2a3c-441c-950e-4b456c991c18?api-version=2021-08-01&operationResultResponseType=Location",
                        "value": "https://management.azure.com/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/providers/Microsoft.NetApp/locations/eastus/operationResults/a0216c17-f9d6-4b99-9faf-9ebd4883d0e4?api-version=2021-08-01&operationResultResponseType=Location",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Update/responses/202/headers/Location"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "modified": {
                                    "activeDirectories": {
                                      "extensions": {
                                        "added": [
                                          "x-ms-identifiers"
                                        ]
                                      },
                                      "items": {
                                        "properties": {
                                          "added": [
                                            "encryptDCConnections"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/encryptDCConnections"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "activeDirectoryId"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/x-ms-identifiers"
                            },
                            {
                              "oldValue": {
                                "description": "Metadata pertaining to creation and last modification of the resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created the resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity that created the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of resource last modification (UTC)",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified the resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity that last modified the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    },
                    "202": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/encryptDCConnections"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "activeDirectoryId"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/x-ms-identifiers"
                            },
                            {
                              "oldValue": {
                                "description": "Metadata pertaining to creation and last modification of the resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created the resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity that created the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of resource last modification (UTC)",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified the resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity that last modified the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_CreateOrUpdate/parameters/api-version"
                      },
                      {
                        "oldValue": "Engineering",
                        "value": "OU=Engineering",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_CreateOrUpdate/parameters/body/properties/activeDirectories/0/organizationalUnit"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "extensions": {
                            "deleted": [
                              "x-ms-azure-resource"
                            ]
                          },
                          "allOf": {
                            "added": [
                              {
                                "index": 0,
                                "title": "Tracked Resource"
                              }
                            ]
                          },
                          "properties": {
                            "deleted": [
                              "type",
                              "id",
                              "location",
                              "name",
                              "systemData",
                              "tags"
                            ],
                            "modified": {
                              "properties": {
                                "properties": {
                                  "modified": {
                                    "activeDirectories": {
                                      "extensions": {
                                        "added": [
                                          "x-ms-identifiers"
                                        ]
                                      },
                                      "items": {
                                        "properties": {
                                          "added": [
                                            "encryptDCConnections"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/encryptDCConnections"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "activeDirectoryId"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/x-ms-identifiers"
                            },
                            {
                              "oldValue": {
                                "description": "Metadata pertaining to creation and last modification of the resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created the resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity that created the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of resource last modification (UTC)",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified the resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity that last modified the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/items/properties/encryptDCConnections"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "activeDirectoryId"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/activeDirectories/x-ms-identifiers"
                            },
                            {
                              "oldValue": {
                                "description": "Metadata pertaining to creation and last modification of the resource.",
                                "properties": {
                                  "createdAt": {
                                    "description": "The timestamp of resource creation (UTC).",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "createdBy": {
                                    "description": "The identity that created the resource.",
                                    "type": "string"
                                  },
                                  "createdByType": {
                                    "description": "The type of identity that created the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  },
                                  "lastModifiedAt": {
                                    "description": "The timestamp of resource last modification (UTC)",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "lastModifiedBy": {
                                    "description": "The identity that last modified the resource.",
                                    "type": "string"
                                  },
                                  "lastModifiedByType": {
                                    "description": "The type of identity that last modified the resource.",
                                    "enum": [
                                      "User",
                                      "Application",
                                      "ManagedIdentity",
                                      "Key"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "createdByType"
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/systemData"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/accountBackups": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/AccountBackups_List/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "name",
                              "value": "creationDate",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/creationDate/title"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/accountBackups/{backupName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/AccountBackups_Delete/parameters/api-version"
                      }
                    ]
                  }
                }
              },
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/AccountBackups_Get/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "name",
                              "value": "creationDate",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/creationDate/title"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/backupPolicies": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Backups_List/parameters/api-version"
                      },
                      {
                        "oldValue": "Policy 1",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Backups_List/responses/200/body/value/0/properties/name"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/name"
                            },
                            {
                              "oldValue": {
                                "description": "Name of backup policy",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "volumeName"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/volumeBackups/x-ms-identifiers"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/backupPolicies/{backupPolicyName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Backups_Delete/parameters/api-version"
                      }
                    ]
                  }
                }
              },
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Backups_Get/parameters/api-version"
                      },
                      {
                        "oldValue": "Policy 1",
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/Backups_Get/responses/200/body/properties/name"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": {
                                "description": "Name of backup policy",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "volumeName"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeBackups/x-ms-identifiers"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/BackupPolicies_Update/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "deleted": [
                                    "name"
                                  ],
                                  "modified": {
                                    "volumeBackups": {
                                      "extensions": {
                                        "added": [
                                          "x-ms-identifiers"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": {
                                "description": "Name of backup policy",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "volumeName"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeBackups/x-ms-identifiers"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    },
                    "202": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": {
                                "description": "Name of backup policy",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "volumeName"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeBackups/x-ms-identifiers"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/BackupPolicies_Create/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "extensions": {
                            "deleted": [
                              "x-ms-azure-resource"
                            ]
                          },
                          "allOf": {
                            "added": [
                              {
                                "index": 0,
                                "title": "Tracked Resource"
                              }
                            ]
                          },
                          "properties": {
                            "deleted": [
                              "id",
                              "location",
                              "name",
                              "tags",
                              "type"
                            ],
                            "modified": {
                              "properties": {
                                "properties": {
                                  "deleted": [
                                    "name"
                                  ],
                                  "modified": {
                                    "volumeBackups": {
                                      "extensions": {
                                        "added": [
                                          "x-ms-identifiers"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": {
                                "description": "Name of backup policy",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "volumeName"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeBackups/x-ms-identifiers"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": {
                                "description": "Name of backup policy",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/properties/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "volumeName"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeBackups/x-ms-identifiers"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_List/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/name"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Delete/parameters/api-version"
                      }
                    ]
                  }
                }
              },
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Get/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Update/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_CreateOrUpdate/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "extensions": {
                            "deleted": [
                              "x-ms-azure-resource"
                            ]
                          },
                          "allOf": {
                            "added": [
                              {
                                "index": 0,
                                "title": "Tracked Resource"
                              }
                            ]
                          },
                          "properties": {
                            "deleted": [
                              "tags",
                              "type",
                              "id",
                              "location",
                              "name"
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_List/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Pool Resource Id used in case of creating a volume through volume group",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/capacityPoolResourceId"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "ruleIndex"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/exportPolicy/properties/rules/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "fileSystemId"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/mountTargets/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Application specific placement rules for the particular volume",
                                "items": {
                                  "description": "Application specific parameters for the placement of volumes in the volume group",
                                  "properties": {
                                    "key": {
                                      "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                                      "example": "key1",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                                      "example": "value1",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ],
                                  "type": "object"
                                },
                                "title": "Volume placement rules",
                                "type": "array",
                                "x-ms-identifiers": [
                                  "key"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/placementRules"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Proximity placement group associated with the volume",
                                "example": "/subscriptions/aaaaaaaa-1234-1234-1224-234567891011/resourceGroups/testGroup/providers/Microsoft.Compute/proximityPlacementGroups/testppg",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/proximityPlacementGroup"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "T2 network information",
                                "example": "Test-T2-Alias",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/t2Network"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Volume Group Name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/volumeGroupName"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log",
                                "example": "Data",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/volumeSpecName"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Delete/parameters/api-version"
                      }
                    ]
                  }
                }
              },
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Get/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Pool Resource Id used in case of creating a volume through volume group",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/capacityPoolResourceId"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "ruleIndex"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "fileSystemId"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/mountTargets/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Application specific placement rules for the particular volume",
                                "items": {
                                  "description": "Application specific parameters for the placement of volumes in the volume group",
                                  "properties": {
                                    "key": {
                                      "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                                      "example": "key1",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                                      "example": "value1",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ],
                                  "type": "object"
                                },
                                "title": "Volume placement rules",
                                "type": "array",
                                "x-ms-identifiers": [
                                  "key"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/placementRules"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Proximity placement group associated with the volume",
                                "example": "/subscriptions/aaaaaaaa-1234-1234-1224-234567891011/resourceGroups/testGroup/providers/Microsoft.Compute/proximityPlacementGroups/testppg",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/proximityPlacementGroup"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "T2 network information",
                                "example": "Test-T2-Alias",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/t2Network"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Volume Group Name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeGroupName"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log",
                                "example": "Data",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeSpecName"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Update/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "modified": {
                                    "exportPolicy": {
                                      "properties": {
                                        "modified": {
                                          "rules": {
                                            "extensions": {
                                              "added": [
                                                "x-ms-identifiers"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Pool Resource Id used in case of creating a volume through volume group",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/capacityPoolResourceId"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "ruleIndex"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "fileSystemId"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/mountTargets/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Application specific placement rules for the particular volume",
                                "items": {
                                  "description": "Application specific parameters for the placement of volumes in the volume group",
                                  "properties": {
                                    "key": {
                                      "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                                      "example": "key1",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                                      "example": "value1",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ],
                                  "type": "object"
                                },
                                "title": "Volume placement rules",
                                "type": "array",
                                "x-ms-identifiers": [
                                  "key"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/placementRules"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Proximity placement group associated with the volume",
                                "example": "/subscriptions/aaaaaaaa-1234-1234-1224-234567891011/resourceGroups/testGroup/providers/Microsoft.Compute/proximityPlacementGroups/testppg",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/proximityPlacementGroup"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "T2 network information",
                                "example": "Test-T2-Alias",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/t2Network"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Volume Group Name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeGroupName"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log",
                                "example": "Data",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeSpecName"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_CreateOrUpdate/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "extensions": {
                            "deleted": [
                              "x-ms-azure-resource"
                            ]
                          },
                          "allOf": {
                            "added": [
                              {
                                "index": 0,
                                "title": "Tracked Resource"
                              }
                            ]
                          },
                          "properties": {
                            "deleted": [
                              "name",
                              "tags",
                              "type",
                              "id",
                              "location"
                            ],
                            "modified": {
                              "properties": {
                                "properties": {
                                  "added": [
                                    "placementRules",
                                    "proximityPlacementGroup",
                                    "t2Network",
                                    "volumeSpecName",
                                    "capacityPoolResourceId",
                                    "volumeGroupName"
                                  ],
                                  "modified": {
                                    "exportPolicy": {
                                      "properties": {
                                        "modified": {
                                          "rules": {
                                            "extensions": {
                                              "added": [
                                                "x-ms-identifiers"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "mountTargets": {
                                      "extensions": {
                                        "added": [
                                          "x-ms-identifiers"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Pool Resource Id used in case of creating a volume through volume group",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/capacityPoolResourceId"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "ruleIndex"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "fileSystemId"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/mountTargets/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Application specific placement rules for the particular volume",
                                "items": {
                                  "description": "Application specific parameters for the placement of volumes in the volume group",
                                  "properties": {
                                    "key": {
                                      "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                                      "example": "key1",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                                      "example": "value1",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ],
                                  "type": "object"
                                },
                                "title": "Volume placement rules",
                                "type": "array",
                                "x-ms-identifiers": [
                                  "key"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/placementRules"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Proximity placement group associated with the volume",
                                "example": "/subscriptions/aaaaaaaa-1234-1234-1224-234567891011/resourceGroups/testGroup/providers/Microsoft.Compute/proximityPlacementGroups/testppg",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/proximityPlacementGroup"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "T2 network information",
                                "example": "Test-T2-Alias",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/t2Network"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Volume Group Name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeGroupName"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log",
                                "example": "Data",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeSpecName"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Pool Resource Id used in case of creating a volume through volume group",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/capacityPoolResourceId"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "ruleIndex"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/exportPolicy/properties/rules/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "fileSystemId"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/mountTargets/x-ms-identifiers"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Application specific placement rules for the particular volume",
                                "items": {
                                  "description": "Application specific parameters for the placement of volumes in the volume group",
                                  "properties": {
                                    "key": {
                                      "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                                      "example": "key1",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                                      "example": "value1",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ],
                                  "type": "object"
                                },
                                "title": "Volume placement rules",
                                "type": "array",
                                "x-ms-identifiers": [
                                  "key"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/placementRules"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Proximity placement group associated with the volume",
                                "example": "/subscriptions/aaaaaaaa-1234-1234-1224-234567891011/resourceGroups/testGroup/providers/Microsoft.Compute/proximityPlacementGroups/testppg",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/proximityPlacementGroup"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "T2 network information",
                                "example": "Test-T2-Alias",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/t2Network"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Volume Group Name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeGroupName"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log",
                                "example": "Data",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/volumeSpecName"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/authorizeReplication": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_AuthorizeReplication/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backupStatus": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_BackupStatus/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Backups_List/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "name",
                              "value": "creationDate",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/creationDate/title"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Backups_Delete/parameters/api-version"
                      }
                    ]
                  }
                }
              },
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Backups_Get/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "name",
                              "value": "creationDate",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/creationDate/title"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Backups_Update/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "modified": {
                                    "creationDate": {
                                      "title": {
                                        "from": "name",
                                        "to": "creationDate"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "name",
                              "value": "creationDate",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/creationDate/title"
                            }
                          ]
                        }
                      }
                    },
                    "202": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "name",
                              "value": "creationDate",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/creationDate/title"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Backups_Create/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "properties": {
                            "modified": {
                              "properties": {
                                "properties": {
                                  "modified": {
                                    "creationDate": {
                                      "title": {
                                        "from": "name",
                                        "to": "creationDate"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "name",
                              "value": "creationDate",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/creationDate/title"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "name",
                              "value": "creationDate",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/creationDate/title"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/breakReplication": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_BreakReplication/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/deleteReplication": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_DeleteReplication/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/poolChange": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_AuthorizeReplication/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/reinitializeReplication": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_ReInitializeReplication/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/replicationStatus": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_ReplicationStatus/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/restoreStatus": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_RestoreStatus/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/resyncReplication": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_ResyncReplication/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/revert": {
          "operations": {
            "modified": {
              "POST": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Revert/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_List/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Delete/parameters/api-version"
                      }
                    ]
                  }
                }
              },
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Get/parameters/api-version"
                      }
                    ]
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Update/parameters/api-version"
                      }
                    ]
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Snapshots_Create/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/snapshotPolicies": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/SnapshotPolicies_List/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/name"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/snapshotPolicies/{snapshotPolicyName}": {
          "operations": {
            "modified": {
              "DELETE": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/SnapshotPolicies_Delete/parameters/api-version"
                      }
                    ]
                  }
                }
              },
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/SnapshotPolicies_Get/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PATCH": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/SnapshotPolicies_Update/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    },
                    "202": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "PUT": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/SnapshotPolicies_Create/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": true,
                        "op": "add",
                        "from": "",
                        "path": "/SnapshotPolicies_Create/parameters/body/properties/enabled"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "body": {
                      "body": {
                        "schema": {
                          "extensions": {
                            "deleted": [
                              "x-ms-azure-resource"
                            ]
                          },
                          "allOf": {
                            "added": [
                              {
                                "index": 0,
                                "title": "Tracked Resource"
                              }
                            ]
                          },
                          "properties": {
                            "deleted": [
                              "tags",
                              "type",
                              "id",
                              "location",
                              "name"
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    },
                    "201": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/allOf"
                            },
                            {
                              "oldValue": {
                                "description": "Resource Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/id"
                            },
                            {
                              "oldValue": {
                                "description": "Resource location",
                                "type": "string",
                                "x-ms-mutability": [
                                  "read",
                                  "create"
                                ]
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/location"
                            },
                            {
                              "oldValue": {
                                "description": "Resource name",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/name"
                            },
                            {
                              "oldValue": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags are a list of key-value pairs that describe the resource",
                                "type": "object"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/tags"
                            },
                            {
                              "oldValue": {
                                "description": "Resource type",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/type"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/snapshotPolicies/{snapshotPolicyName}/volumes": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/SnapshotPolicies_ListVolumes/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": [
                                {
                                  "allOf": [
                                    {
                                      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
                                      "properties": {
                                        "id": {
                                          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "The name of the resource",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "systemData": {
                                          "description": "Metadata pertaining to creation and last modification of the resource.",
                                          "properties": {
                                            "createdAt": {
                                              "description": "The timestamp of resource creation (UTC).",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "createdBy": {
                                              "description": "The identity that created the resource.",
                                              "type": "string"
                                            },
                                            "createdByType": {
                                              "description": "The type of identity that created the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            },
                                            "lastModifiedAt": {
                                              "description": "The timestamp of resource last modification (UTC)",
                                              "format": "date-time",
                                              "type": "string"
                                            },
                                            "lastModifiedBy": {
                                              "description": "The identity that last modified the resource.",
                                              "type": "string"
                                            },
                                            "lastModifiedByType": {
                                              "description": "The type of identity that last modified the resource.",
                                              "enum": [
                                                "User",
                                                "Application",
                                                "ManagedIdentity",
                                                "Key"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "createdByType"
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "type": "object"
                                        },
                                        "type": {
                                          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "title": "Resource",
                                      "type": "object",
                                      "x-ms-azure-resource": true
                                    }
                                  ],
                                  "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
                                  "properties": {
                                    "location": {
                                      "description": "The geo-location where the resource lives",
                                      "type": "string",
                                      "x-ms-mutability": [
                                        "read",
                                        "create"
                                      ]
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "Resource tags.",
                                      "type": "object",
                                      "x-ms-mutability": [
                                        "read",
                                        "create",
                                        "update"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "title": "Tracked Resource",
                                  "type": "object"
                                }
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/allOf"
                            },
                            {
                              "oldValue": "Associated volume resource Id",
                              "value": "Volume resource",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "etag": {
                                  "description": "A unique read-only string that changes whenever the resource is updated.",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "properties": {
                                  "description": "Volume properties",
                                  "properties": {
                                    "avsDataStore": {
                                      "default": "Disabled",
                                      "description": "Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose",
                                      "enum": [
                                        "Enabled",
                                        "Disabled"
                                      ],
                                      "example": "Enabled",
                                      "title": "avsDataStore",
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "avsDataStore",
                                        "values": [
                                          {
                                            "description": "avsDataStore is enabled",
                                            "value": "Enabled"
                                          },
                                          {
                                            "description": "avsDataStore is disabled",
                                            "value": "Disabled"
                                          }
                                        ]
                                      }
                                    },
                                    "backupId": {
                                      "description": "UUID v4 or resource identifier used to identify the Backup.",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                                      "title": "Backup ID",
                                      "type": "string",
                                      "x-nullable": true
                                    },
                                    "baremetalTenantId": {
                                      "description": "Unique Baremetal Tenant Identifier.",
                                      "example": "9560acf5-4e3a-12e7-9bdb-02007cca7779",
                                      "readOnly": true,
                                      "title": "Baremetal Tenant ID",
                                      "type": "string"
                                    },
                                    "capacityPoolResourceId": {
                                      "description": "Pool Resource Id used in case of creating a volume through volume group",
                                      "type": "string"
                                    },
                                    "cloneProgress": {
                                      "description": "When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning.",
                                      "example": 10,
                                      "format": "int32",
                                      "readOnly": true,
                                      "type": "integer",
                                      "x-nullable": true
                                    },
                                    "coolAccess": {
                                      "default": false,
                                      "description": "Specifies whether Cool Access(tiering) is enabled for the volume.",
                                      "example": false,
                                      "type": "boolean"
                                    },
                                    "coolnessPeriod": {
                                      "description": "Specifies the number of days after which data that is not accessed by clients will be tiered.",
                                      "example": 7,
                                      "format": "int32",
                                      "maximum": 63,
                                      "minimum": 7,
                                      "type": "integer"
                                    },
                                    "creationToken": {
                                      "description": "A unique file path for the volume. Used when creating mount targets",
                                      "example": "some-amazing-filepath",
                                      "maxLength": 80,
                                      "minLength": 1,
                                      "pattern": "^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$",
                                      "title": "Creation Token or File Path",
                                      "type": "string"
                                    },
                                    "dataProtection": {
                                      "description": "DataProtection type volumes include an object containing details of the replication",
                                      "properties": {
                                        "backup": {
                                          "description": "Volume Backup Properties",
                                          "properties": {
                                            "backupEnabled": {
                                              "description": "Backup Enabled",
                                              "type": "boolean"
                                            },
                                            "backupPolicyId": {
                                              "description": "Backup Policy Resource ID",
                                              "type": "string"
                                            },
                                            "policyEnforced": {
                                              "description": "Policy Enforced",
                                              "type": "boolean"
                                            },
                                            "vaultId": {
                                              "description": "Vault Resource ID",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "replication": {
                                          "description": "Replication properties",
                                          "properties": {
                                            "endpointType": {
                                              "description": "Indicates whether the local volume is the source or destination for the Volume Replication",
                                              "enum": [
                                                "src",
                                                "dst"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "EndpointType"
                                              }
                                            },
                                            "remoteVolumeRegion": {
                                              "description": "The remote region for the other end of the Volume Replication.",
                                              "type": "string"
                                            },
                                            "remoteVolumeResourceId": {
                                              "description": "The resource ID of the remote volume.",
                                              "type": "string"
                                            },
                                            "replicationId": {
                                              "description": "Id",
                                              "type": "string"
                                            },
                                            "replicationSchedule": {
                                              "description": "Schedule",
                                              "enum": [
                                                "_10minutely",
                                                "hourly",
                                                "daily"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "ReplicationSchedule"
                                              }
                                            }
                                          },
                                          "required": [
                                            "remoteVolumeResourceId"
                                          ],
                                          "type": "object"
                                        },
                                        "snapshot": {
                                          "description": "Volume Snapshot Properties",
                                          "properties": {
                                            "snapshotPolicyId": {
                                              "description": "Snapshot Policy ResourceId",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "title": "DataProtection"
                                    },
                                    "defaultGroupQuotaInKiBs": {
                                      "default": 0,
                                      "description": "Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.",
                                      "example": 4,
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "defaultUserQuotaInKiBs": {
                                      "default": 0,
                                      "description": "Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .",
                                      "example": 4,
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "encryptionKeySource": {
                                      "description": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'",
                                      "type": "string"
                                    },
                                    "exportPolicy": {
                                      "description": "Set of export policy rules",
                                      "properties": {
                                        "rules": {
                                          "description": "Export policy rule",
                                          "items": {
                                            "description": "Volume Export Policy Rule",
                                            "properties": {
                                              "allowedClients": {
                                                "description": "Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names",
                                                "type": "string"
                                              },
                                              "chownMode": {
                                                "default": "Restricted",
                                                "description": "This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own.",
                                                "enum": [
                                                  "Restricted",
                                                  "Unrestricted"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": true,
                                                  "name": "ChownMode"
                                                }
                                              },
                                              "cifs": {
                                                "description": "Allows CIFS protocol",
                                                "type": "boolean"
                                              },
                                              "hasRootAccess": {
                                                "default": true,
                                                "description": "Has root access to volume",
                                                "example": true,
                                                "type": "boolean"
                                              },
                                              "kerberos5ReadOnly": {
                                                "default": false,
                                                "description": "Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later",
                                                "example": false,
                                                "type": "boolean"
                                              },
                                              "kerberos5ReadWrite": {
                                                "default": false,
                                                "description": "Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later",
                                                "example": true,
                                                "type": "boolean"
                                              },
                                              "kerberos5iReadOnly": {
                                                "default": false,
                                                "description": "Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later",
                                                "example": false,
                                                "type": "boolean"
                                              },
                                              "kerberos5iReadWrite": {
                                                "default": false,
                                                "description": "Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later",
                                                "example": true,
                                                "type": "boolean"
                                              },
                                              "kerberos5pReadOnly": {
                                                "default": false,
                                                "description": "Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later",
                                                "example": false,
                                                "type": "boolean"
                                              },
                                              "kerberos5pReadWrite": {
                                                "default": false,
                                                "description": "Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later",
                                                "example": true,
                                                "type": "boolean"
                                              },
                                              "nfsv3": {
                                                "description": "Allows NFSv3 protocol. Enable only for NFSv3 type volumes",
                                                "type": "boolean"
                                              },
                                              "nfsv41": {
                                                "description": "Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes",
                                                "type": "boolean"
                                              },
                                              "ruleIndex": {
                                                "description": "Order index",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "unixReadOnly": {
                                                "description": "Read only access",
                                                "type": "boolean"
                                              },
                                              "unixReadWrite": {
                                                "description": "Read and write access",
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "title": "Export policy rule",
                                          "type": "array",
                                          "x-ms-identifiers": [
                                            "ruleIndex"
                                          ]
                                        }
                                      },
                                      "title": "exportPolicy"
                                    },
                                    "fileSystemId": {
                                      "description": "Unique FileSystem Identifier.",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca7778",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                      "readOnly": true,
                                      "title": "FileSystem ID",
                                      "type": "string"
                                    },
                                    "isDefaultQuotaEnabled": {
                                      "default": false,
                                      "description": "Specifies if default quota is enabled for the volume.",
                                      "example": false,
                                      "type": "boolean"
                                    },
                                    "isRestoring": {
                                      "description": "Restoring",
                                      "type": "boolean"
                                    },
                                    "kerberosEnabled": {
                                      "default": false,
                                      "description": "Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later",
                                      "example": false,
                                      "type": "boolean"
                                    },
                                    "ldapEnabled": {
                                      "default": false,
                                      "description": "Specifies whether LDAP is enabled or not for a given NFS volume.",
                                      "example": false,
                                      "type": "boolean"
                                    },
                                    "mountTargets": {
                                      "description": "List of mount targets",
                                      "items": {
                                        "description": "Mount target properties",
                                        "properties": {
                                          "fileSystemId": {
                                            "description": "UUID v4 used to identify the MountTarget",
                                            "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                            "maxLength": 36,
                                            "minLength": 36,
                                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                            "title": "fileSystemId",
                                            "type": "string"
                                          },
                                          "ipAddress": {
                                            "description": "The mount target's IPv4 address",
                                            "example": "1.2.3.4",
                                            "readOnly": true,
                                            "title": "ipAddress",
                                            "type": "string"
                                          },
                                          "mountTargetId": {
                                            "description": "UUID v4 used to identify the MountTarget",
                                            "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                            "maxLength": 36,
                                            "minLength": 36,
                                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                            "readOnly": true,
                                            "title": "mountTargetId",
                                            "type": "string"
                                          },
                                          "smbServerFqdn": {
                                            "description": "The SMB server's Fully Qualified Domain Name, FQDN",
                                            "example": "fullyqualified.domainname.com",
                                            "title": "smbServerFQDN",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "fileSystemId"
                                        ],
                                        "type": "object"
                                      },
                                      "readOnly": true,
                                      "title": "mountTargets",
                                      "type": "array",
                                      "x-ms-identifiers": [
                                        "fileSystemId"
                                      ]
                                    },
                                    "networkFeatures": {
                                      "default": "Basic",
                                      "description": "Basic network, or Standard features available to the volume.",
                                      "enum": [
                                        "Basic",
                                        "Standard"
                                      ],
                                      "example": "Standard",
                                      "title": "Network features",
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "NetworkFeatures",
                                        "values": [
                                          {
                                            "description": "Basic network feature.",
                                            "value": "Basic"
                                          },
                                          {
                                            "description": "Standard network feature.",
                                            "value": "Standard"
                                          }
                                        ]
                                      }
                                    },
                                    "networkSiblingSetId": {
                                      "description": "Network Sibling Set ID for the the group of volumes sharing networking resources.",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                      "readOnly": true,
                                      "title": "Network Sibling Set ID",
                                      "type": "string"
                                    },
                                    "placementRules": {
                                      "description": "Application specific placement rules for the particular volume",
                                      "items": {
                                        "description": "Application specific parameters for the placement of volumes in the volume group",
                                        "properties": {
                                          "key": {
                                            "description": "Key for an application specific parameter for the placement of volumes in the volume group",
                                            "example": "key1",
                                            "type": "string"
                                          },
                                          "value": {
                                            "description": "Value for an application specific parameter for the placement of volumes in the volume group",
                                            "example": "value1",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "key",
                                          "value"
                                        ],
                                        "type": "object"
                                      },
                                      "title": "Volume placement rules",
                                      "type": "array",
                                      "x-ms-identifiers": [
                                        "key"
                                      ]
                                    },
                                    "protocolTypes": {
                                      "description": "Set of protocol types, default NFSv3, CIFS for SMB protocol",
                                      "example": [
                                        "NFSv4.1"
                                      ],
                                      "items": {
                                        "type": "string"
                                      },
                                      "title": "protocolTypes",
                                      "type": "array"
                                    },
                                    "provisioningState": {
                                      "description": "Azure lifecycle management",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "proximityPlacementGroup": {
                                      "description": "Proximity placement group associated with the volume",
                                      "example": "/subscriptions/aaaaaaaa-1234-1234-1224-234567891011/resourceGroups/testGroup/providers/Microsoft.Compute/proximityPlacementGroups/testppg",
                                      "type": "string"
                                    },
                                    "securityStyle": {
                                      "default": "unix",
                                      "description": "The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol",
                                      "enum": [
                                        "ntfs",
                                        "unix"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "SecurityStyle"
                                      }
                                    },
                                    "serviceLevel": {
                                      "default": "Premium",
                                      "description": "The service level of the file system",
                                      "enum": [
                                        "Standard",
                                        "Premium",
                                        "Ultra",
                                        "StandardZRS"
                                      ],
                                      "title": "serviceLevel",
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ServiceLevel",
                                        "values": [
                                          {
                                            "description": "Standard service level",
                                            "value": "Standard"
                                          },
                                          {
                                            "description": "Premium service level",
                                            "value": "Premium"
                                          },
                                          {
                                            "description": "Ultra service level",
                                            "value": "Ultra"
                                          },
                                          {
                                            "description": "Zone redundant storage service level",
                                            "value": "StandardZRS"
                                          }
                                        ]
                                      }
                                    },
                                    "smbContinuouslyAvailable": {
                                      "default": false,
                                      "description": "Enables continuously available share property for smb volume. Only applicable for SMB volume",
                                      "example": false,
                                      "type": "boolean"
                                    },
                                    "smbEncryption": {
                                      "default": false,
                                      "description": "Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later",
                                      "example": false,
                                      "type": "boolean"
                                    },
                                    "snapshotDirectoryVisible": {
                                      "default": true,
                                      "description": "If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).",
                                      "type": "boolean"
                                    },
                                    "snapshotId": {
                                      "description": "UUID v4 or resource identifier used to identify the Snapshot.",
                                      "example": "9760acf5-4638-11e7-9bdb-020073ca3333",
                                      "maxLength": 36,
                                      "minLength": 36,
                                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\\\?([^\\/]*[\\/])*)([^\\/]+)$",
                                      "title": "Snapshot ID",
                                      "type": "string",
                                      "x-nullable": true
                                    },
                                    "storageToNetworkProximity": {
                                      "description": "Provides storage to network proximity information for the volume.",
                                      "enum": [
                                        "Default",
                                        "T1",
                                        "T2"
                                      ],
                                      "example": "T1",
                                      "readOnly": true,
                                      "title": "Storage to Network Proximity",
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "VolumeStorageToNetworkProximity",
                                        "values": [
                                          {
                                            "description": "Basic storage to network connectivity.",
                                            "value": "Default"
                                          },
                                          {
                                            "description": "Standard T1 storage to network connectivity.",
                                            "value": "T1"
                                          },
                                          {
                                            "description": "Standard T2 storage to network connectivity.",
                                            "value": "T2"
                                          }
                                        ]
                                      }
                                    },
                                    "subnetId": {
                                      "description": "The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes",
                                      "type": "string"
                                    },
                                    "t2Network": {
                                      "description": "T2 network information",
                                      "example": "Test-T2-Alias",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "throughputMibps": {
                                      "example": 128.22,
                                      "title": "Maximum throughput in Mibps that can be achieved by this volume and this will be accepted as input only for manual qosType volume",
                                      "type": "number"
                                    },
                                    "unixPermissions": {
                                      "default": "0770",
                                      "description": "UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.",
                                      "example": "0770",
                                      "maxLength": 4,
                                      "minLength": 4,
                                      "type": "string",
                                      "x-nullable": true
                                    },
                                    "usageThreshold": {
                                      "default": 107374182400,
                                      "description": "Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.",
                                      "example": 107374182400,
                                      "format": "int64",
                                      "maximum": 109951162777600,
                                      "minimum": 107374182400,
                                      "title": "usageThreshold",
                                      "type": "integer"
                                    },
                                    "volumeGroupName": {
                                      "description": "Volume Group Name",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "volumeSpecName": {
                                      "description": "Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log",
                                      "example": "Data",
                                      "type": "string"
                                    },
                                    "volumeType": {
                                      "description": "What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection",
                                      "example": "DataProtection",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "creationToken",
                                    "usageThreshold",
                                    "subnetId"
                                  ],
                                  "type": "object"
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties"
                            },
                            {
                              "oldValue": true,
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/readOnly"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "location",
                                "properties"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/required"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/vaults": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2021-06-01",
                        "value": "2021-08-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Vaults_List/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {},
  "tools_b": {
    "Operations_List": "FunctionDef(\n  name='Operations_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Lists all of the available Microsoft.NetApp Rest API operations')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/operations')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Operations_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describes the Resource Provider: Lists all of the available Microsoft.NetApp Rest API operations'))])],\n  type_params=[])",
    "NetAppResource_CheckNameAvailability": "FunctionDef(\n  name='NetAppResource_CheckNameAvailability',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Check if a resource name is available.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/checkNameAvailability')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='NetAppResource_CheckNameAvailability')),\n        keyword(\n          arg='description',\n          value=Constant(value='Check resource name availability: Check if a resource name is available.'))])],\n  type_params=[])",
    "NetAppResource_CheckFilePathAvailability": "FunctionDef(\n  name='NetAppResource_CheckFilePathAvailability',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Check if a file path is available.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/checkFilePathAvailability')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='NetAppResource_CheckFilePathAvailability')),\n        keyword(\n          arg='description',\n          value=Constant(value='Check file path availability: Check if a file path is available.'))])],\n  type_params=[])",
    "NetAppResource_CheckQuotaAvailability": "FunctionDef(\n  name='NetAppResource_CheckQuotaAvailability',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Check if a quota is available.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/checkQuotaAvailability')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='NetAppResource_CheckQuotaAvailability')),\n        keyword(\n          arg='description',\n          value=Constant(value='Check quota availability: Check if a quota is available.'))])],\n  type_params=[])",
    "NetAppResourceQuotaLimits_List": "FunctionDef(\n  name='NetAppResourceQuotaLimits_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get the default and current limits for quotas')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/quotaLimits')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='NetAppResourceQuotaLimits_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get quota limits: Get the default and current limits for quotas'))])],\n  type_params=[])",
    "NetAppResourceQuotaLimits_Get": "FunctionDef(\n  name='NetAppResourceQuotaLimits_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='quotaLimitName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get the default and current subscription quota limit')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/locations/'),\n          FormattedValue(\n            value=Name(id='location', ctx=Load()),\n            conversion=-1),\n          Constant(value='/quotaLimits/'),\n          FormattedValue(\n            value=Name(id='quotaLimitName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: location')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='quotaLimitName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: quotaLimitName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='NetAppResourceQuotaLimits_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get quota limits: Get the default and current subscription quota limit'))])],\n  type_params=[])",
    "Accounts_ListBySubscription": "FunctionDef(\n  name='Accounts_ListBySubscription',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='List and describe all NetApp accounts in the subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_ListBySubscription')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe all NetApp Accounts in a subscription: List and describe all NetApp accounts in the subscription.'))])],\n  type_params=[])",
    "Accounts_List": "FunctionDef(\n  name='Accounts_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='List and describe all NetApp accounts in the resource group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe all NetApp Accounts in a resource group: List and describe all NetApp accounts in the resource group.'))])],\n  type_params=[])",
    "Accounts_Get": "FunctionDef(\n  name='Accounts_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get the NetApp account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe a NetApp Account: Get the NetApp account'))])],\n  type_params=[])",
    "Accounts_CreateOrUpdate": "FunctionDef(\n  name='Accounts_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update the specified NetApp account within the resource group')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or update a NetApp account: Create or update the specified NetApp account within the resource group'))])],\n  type_params=[])",
    "Accounts_Delete": "FunctionDef(\n  name='Accounts_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Delete the specified NetApp account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a NetApp account: Delete the specified NetApp account'))])],\n  type_params=[])",
    "Accounts_Update": "FunctionDef(\n  name='Accounts_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Patch the specified NetApp account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Accounts_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update a NetApp account: Patch the specified NetApp account'))])],\n  type_params=[])",
    "Pools_List": "FunctionDef(\n  name='Pools_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='List all capacity pools in the NetApp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Pools_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe all Capacity Pools: List all capacity pools in the NetApp Account'))])],\n  type_params=[])",
    "Pools_Get": "FunctionDef(\n  name='Pools_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get details of the specified capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Pools_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe a Capacity Pool: Get details of the specified capacity pool'))])],\n  type_params=[])",
    "Pools_CreateOrUpdate": "FunctionDef(\n  name='Pools_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Create or Update a capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Pools_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or Update the specified capacity pool within the resource group: Create or Update a capacity pool'))])],\n  type_params=[])",
    "Pools_Update": "FunctionDef(\n  name='Pools_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Patch the specified capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Pools_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update a capacity pool: Patch the specified capacity pool'))])],\n  type_params=[])",
    "Pools_Delete": "FunctionDef(\n  name='Pools_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Delete the specified capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Pools_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a capacity pool: Delete the specified capacity pool'))])],\n  type_params=[])",
    "Volumes_List": "FunctionDef(\n  name='Volumes_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='List all volumes within the capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe all volumes: List all volumes within the capacity pool'))])],\n  type_params=[])",
    "Volumes_Get": "FunctionDef(\n  name='Volumes_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get the details of the specified volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe a volume: Get the details of the specified volume'))])],\n  type_params=[])",
    "Volumes_CreateOrUpdate": "FunctionDef(\n  name='Volumes_CreateOrUpdate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Create or update the specified volume within the capacity pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_CreateOrUpdate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create or Update a volume: Create or update the specified volume within the capacity pool'))])],\n  type_params=[])",
    "Volumes_Update": "FunctionDef(\n  name='Volumes_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Patch the specified volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update a volume: Patch the specified volume'))])],\n  type_params=[])",
    "Volumes_Delete": "FunctionDef(\n  name='Volumes_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Delete the specified volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a volume: Delete the specified volume'))])],\n  type_params=[])",
    "Volumes_Revert": "FunctionDef(\n  name='Volumes_Revert',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Revert a volume to the snapshot specified in the body')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/revert')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_Revert')),\n        keyword(\n          arg='description',\n          value=Constant(value='Revert a volume to one of its snapshots: Revert a volume to the snapshot specified in the body'))])],\n  type_params=[])",
    "Volumes_BreakReplication": "FunctionDef(\n  name='Volumes_BreakReplication',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Break the replication connection on the destination volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/breakReplication')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_BreakReplication')),\n        keyword(\n          arg='description',\n          value=Constant(value='Break volume replication: Break the replication connection on the destination volume'))])],\n  type_params=[])",
    "Volumes_ReplicationStatus": "FunctionDef(\n  name='Volumes_ReplicationStatus',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get the status of the replication')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/replicationStatus')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_ReplicationStatus')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get volume replication status: Get the status of the replication'))])],\n  type_params=[])",
    "Volumes_ResyncReplication": "FunctionDef(\n  name='Volumes_ResyncReplication',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Resync the connection on the destination volume. If the operation is ran on the source volume it will reverse-resync the connection and sync from destination to source.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resyncReplication')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_ResyncReplication')),\n        keyword(\n          arg='description',\n          value=Constant(value='Resync volume replication: Resync the connection on the destination volume. If the operation is ran on the source volume it will reverse-resync the connection and sync from destination to source.'))])],\n  type_params=[])",
    "Volumes_DeleteReplication": "FunctionDef(\n  name='Volumes_DeleteReplication',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Delete the replication connection on the destination volume, and send release to the source replication')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/deleteReplication')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_DeleteReplication')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete volume replication: Delete the replication connection on the destination volume, and send release to the source replication'))])],\n  type_params=[])",
    "Volumes_AuthorizeReplication": "FunctionDef(\n  name='Volumes_AuthorizeReplication',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Authorize the replication connection on the source volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/authorizeReplication')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_AuthorizeReplication')),\n        keyword(\n          arg='description',\n          value=Constant(value='Authorize source volume replication: Authorize the replication connection on the source volume'))])],\n  type_params=[])",
    "Volumes_ReInitializeReplication": "FunctionDef(\n  name='Volumes_ReInitializeReplication',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Re-Initializes the replication connection on the destination volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reinitializeReplication')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_ReInitializeReplication')),\n        keyword(\n          arg='description',\n          value=Constant(value='ReInitialize volume replication: Re-Initializes the replication connection on the destination volume'))])],\n  type_params=[])",
    "Volumes_PoolChange": "FunctionDef(\n  name='Volumes_PoolChange',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Moves volume to another pool')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/poolChange')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Volumes_PoolChange')),\n        keyword(\n          arg='description',\n          value=Constant(value='Change pool for volume: Moves volume to another pool'))])],\n  type_params=[])",
    "Snapshots_List": "FunctionDef(\n  name='Snapshots_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='List all snapshots associated with the volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshots')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Snapshots_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe all snapshots: List all snapshots associated with the volume'))])],\n  type_params=[])",
    "Snapshots_Get": "FunctionDef(\n  name='Snapshots_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get details of the specified snapshot')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshots/'),\n          FormattedValue(\n            value=Name(id='snapshotName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Snapshots_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe a snapshot: Get details of the specified snapshot'))])],\n  type_params=[])",
    "Snapshots_Create": "FunctionDef(\n  name='Snapshots_Create',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Create the specified snapshot within the given volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshots/'),\n          FormattedValue(\n            value=Name(id='snapshotName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Snapshots_Create')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create a snapshot: Create the specified snapshot within the given volume'))])],\n  type_params=[])",
    "Snapshots_Update": "FunctionDef(\n  name='Snapshots_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Patch a snapshot')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshots/'),\n          FormattedValue(\n            value=Name(id='snapshotName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Snapshots_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Update a snapshot: Patch a snapshot'))])],\n  type_params=[])",
    "Snapshots_Delete": "FunctionDef(\n  name='Snapshots_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Delete snapshot')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshots/'),\n          FormattedValue(\n            value=Name(id='snapshotName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Snapshots_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a snapshot: Delete snapshot'))])],\n  type_params=[])",
    "SnapshotPolicies_List": "FunctionDef(\n  name='SnapshotPolicies_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='List snapshot policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshotPolicies')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SnapshotPolicies_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='List snapshot policy'))])],\n  type_params=[])",
    "SnapshotPolicies_Get": "FunctionDef(\n  name='SnapshotPolicies_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotPolicyName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get a snapshot Policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshotPolicies/'),\n          FormattedValue(\n            value=Name(id='snapshotPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SnapshotPolicies_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a snapshot Policy'))])],\n  type_params=[])",
    "SnapshotPolicies_Create": "FunctionDef(\n  name='SnapshotPolicies_Create',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotPolicyName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Create a snapshot policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshotPolicies/'),\n          FormattedValue(\n            value=Name(id='snapshotPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SnapshotPolicies_Create')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create a snapshot policy'))])],\n  type_params=[])",
    "SnapshotPolicies_Update": "FunctionDef(\n  name='SnapshotPolicies_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotPolicyName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Patch a snapshot policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshotPolicies/'),\n          FormattedValue(\n            value=Name(id='snapshotPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SnapshotPolicies_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Patch a snapshot policy'))])],\n  type_params=[])",
    "SnapshotPolicies_Delete": "FunctionDef(\n  name='SnapshotPolicies_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotPolicyName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Delete snapshot policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshotPolicies/'),\n          FormattedValue(\n            value=Name(id='snapshotPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SnapshotPolicies_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete snapshot policy'))])],\n  type_params=[])",
    "SnapshotPolicies_ListVolumes": "FunctionDef(\n  name='SnapshotPolicies_ListVolumes',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='snapshotPolicyName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get volumes associated with snapshot policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/snapshotPolicies/'),\n          FormattedValue(\n            value=Name(id='snapshotPolicyName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='snapshotPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: snapshotPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='SnapshotPolicies_ListVolumes')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get volumes for snapshot policy: Get volumes associated with snapshot policy'))])],\n  type_params=[])",
    "Backups_GetStatus": "FunctionDef(\n  name='Backups_GetStatus',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get the status of the backup for a volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backupStatus')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Backups_GetStatus')),\n        keyword(\n          arg='description',\n          value=Constant(value=\"Get volume's backup status: Get the status of the backup for a volume\"))])],\n  type_params=[])",
    "Backups_GetVolumeRestoreStatus": "FunctionDef(\n  name='Backups_GetVolumeRestoreStatus',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get the status of the restore for a volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/restoreStatus')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Backups_GetVolumeRestoreStatus')),\n        keyword(\n          arg='description',\n          value=Constant(value=\"Get volume's restore status: Get the status of the restore for a volume\"))])],\n  type_params=[])",
    "AccountBackups_List": "FunctionDef(\n  name='AccountBackups_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='List all Backups for a Netapp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accountBackups')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='AccountBackups_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='List Backups for a Netapp Account: List all Backups for a Netapp Account'))])],\n  type_params=[])",
    "AccountBackups_Get": "FunctionDef(\n  name='AccountBackups_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the specified backup for a Netapp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accountBackups/'),\n          FormattedValue(\n            value=Name(id='backupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='AccountBackups_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get Backup for a Netapp Account: Gets the specified backup for a Netapp Account'))])],\n  type_params=[])",
    "AccountBackups_Delete": "FunctionDef(\n  name='AccountBackups_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Delete the specified Backup for a Netapp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/accountBackups/'),\n          FormattedValue(\n            value=Name(id='backupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='AccountBackups_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete Backup for a Netapp Account: Delete the specified Backup for a Netapp Account'))])],\n  type_params=[])",
    "Backups_List": "FunctionDef(\n  name='Backups_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='List all backups for a volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backups')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Backups_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='List Backups: List all backups for a volume'))])],\n  type_params=[])",
    "Backups_Get": "FunctionDef(\n  name='Backups_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Gets the specified backup of the volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backups/'),\n          FormattedValue(\n            value=Name(id='backupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Backups_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a backup: Gets the specified backup of the volume'))])],\n  type_params=[])",
    "Backups_Create": "FunctionDef(\n  name='Backups_Create',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Create a backup for the volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backups/'),\n          FormattedValue(\n            value=Name(id='backupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Backups_Create')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create a backup: Create a backup for the volume'))])],\n  type_params=[])",
    "Backups_Update": "FunctionDef(\n  name='Backups_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Patch a backup for the volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backups/'),\n          FormattedValue(\n            value=Name(id='backupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Backups_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Patch a backup: Patch a backup for the volume'))])],\n  type_params=[])",
    "Backups_Delete": "FunctionDef(\n  name='Backups_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='poolName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Delete a backup of the volume')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/capacityPools/'),\n          FormattedValue(\n            value=Name(id='poolName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumes/'),\n          FormattedValue(\n            value=Name(id='volumeName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backups/'),\n          FormattedValue(\n            value=Name(id='backupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='poolName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: poolName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Backups_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete backup: Delete a backup of the volume'))])],\n  type_params=[])",
    "BackupPolicies_List": "FunctionDef(\n  name='BackupPolicies_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='List backup policies for Netapp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backupPolicies')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BackupPolicies_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='List backup policies: List backup policies for Netapp Account'))])],\n  type_params=[])",
    "BackupPolicies_Get": "FunctionDef(\n  name='BackupPolicies_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupPolicyName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get a particular backup Policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backupPolicies/'),\n          FormattedValue(\n            value=Name(id='backupPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BackupPolicies_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a backup Policy: Get a particular backup Policy'))])],\n  type_params=[])",
    "BackupPolicies_Create": "FunctionDef(\n  name='BackupPolicies_Create',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupPolicyName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Create a backup policy for Netapp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backupPolicies/'),\n          FormattedValue(\n            value=Name(id='backupPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BackupPolicies_Create')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create a backup policy: Create a backup policy for Netapp Account'))])],\n  type_params=[])",
    "BackupPolicies_Update": "FunctionDef(\n  name='BackupPolicies_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupPolicyName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Patch a backup policy for Netapp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backupPolicies/'),\n          FormattedValue(\n            value=Name(id='backupPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BackupPolicies_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Patch a backup policy: Patch a backup policy for Netapp Account'))])],\n  type_params=[])",
    "BackupPolicies_Delete": "FunctionDef(\n  name='BackupPolicies_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='backupPolicyName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Delete backup policy')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/backupPolicies/'),\n          FormattedValue(\n            value=Name(id='backupPolicyName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='backupPolicyName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: backupPolicyName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='BackupPolicies_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a backup policy: Delete backup policy'))])],\n  type_params=[])",
    "Vaults_List": "FunctionDef(\n  name='Vaults_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='List vaults for a Netapp Account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/vaults')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Vaults_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='List vaults: List vaults for a Netapp Account'))])],\n  type_params=[])",
    "VolumeGroups_ListByNetAppAccount": "FunctionDef(\n  name='VolumeGroups_ListByNetAppAccount',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='List all volume groups for given account')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumeGroups')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='VolumeGroups_ListByNetAppAccount')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe all volume groups: List all volume groups for given account'))])],\n  type_params=[])",
    "VolumeGroups_Get": "FunctionDef(\n  name='VolumeGroups_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Get details of the specified volume group')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumeGroups/'),\n          FormattedValue(\n            value=Name(id='volumeGroupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='VolumeGroups_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Describe a Volume Group: Get details of the specified volume group'))])],\n  type_params=[])",
    "VolumeGroups_Create": "FunctionDef(\n  name='VolumeGroups_Create',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Create a volume group along with specified volumes')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumeGroups/'),\n          FormattedValue(\n            value=Name(id='volumeGroupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='VolumeGroups_Create')),\n        keyword(\n          arg='description',\n          value=Constant(value='Create the specified volume group and volumes. Creating volume group will create all the volumes specified in request body implicitly. Once volumes are created using volume group, those will be treated as regular volumes thereafter.: Create a volume group along with specified volumes'))])],\n  type_params=[])",
    "VolumeGroups_Delete": "FunctionDef(\n  name='VolumeGroups_Delete',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='resourceGroupName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='accountName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='volumeGroupName',\n        annotation=Name(id='str', ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[]),\n  body=[\n    Expr(\n      value=Constant(value='Delete the specified volume group only if there are no volumes under volume group.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/resourceGroups/'),\n          FormattedValue(\n            value=Name(id='resourceGroupName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'),\n          FormattedValue(\n            value=Name(id='accountName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/volumeGroups/'),\n          FormattedValue(\n            value=Name(id='volumeGroupName', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='resourceGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: resourceGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='accountName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: accountName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='volumeGroupName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: volumeGroupName')],\n            keywords=[]))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='delete',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='VolumeGroups_Delete')),\n        keyword(\n          arg='description',\n          value=Constant(value='Delete a volume group: Delete the specified volume group only if there are no volumes under volume group.'))])],\n  type_params=[])"
  }
}