{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "id": {
                      "description": "Resource Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "readOnly": true,
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "A balance resource.",
              "properties": {
                "properties": {
                  "description": "The properties of the balance.",
                  "properties": {
                    "adjustmentDetails": {
                      "description": "List of Adjustments (Promo credit, SIE credit etc.).",
                      "items": {
                        "properties": {
                          "name": {
                            "description": "the name of new adjustment.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "value": {
                            "description": "the value of new adjustment.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "adjustments": {
                      "description": "Total adjustment amount.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "azureMarketplaceServiceCharges": {
                      "description": "Total charges for Azure Marketplace.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "beginningBalance": {
                      "description": "The beginning balance for the billing period.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "billingFrequency": {
                      "description": "The billing frequency.",
                      "enum": [
                        "Month",
                        "Quarter",
                        "Year"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "BillingFrequency"
                      }
                    },
                    "chargesBilledSeparately": {
                      "description": "Charges Billed separately.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "currency": {
                      "description": "The ISO currency in which the meter is charged, for example, USD.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "endingBalance": {
                      "description": "The ending balance for the billing period (for open periods this will be updated daily).",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "newPurchases": {
                      "description": "Total new purchase amount.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "newPurchasesDetails": {
                      "description": "List of new purchases.",
                      "items": {
                        "properties": {
                          "name": {
                            "description": "the name of new purchase.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "value": {
                            "description": "the value of new purchase.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "priceHidden": {
                      "description": "Price is hidden or not.",
                      "readOnly": true,
                      "type": "boolean"
                    },
                    "serviceOverage": {
                      "description": "Overage for Azure services.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "totalOverage": {
                      "description": "serviceOverage + chargesBilledSeparately.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "totalUsage": {
                      "description": "Azure service commitment + total Overage.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "utilized": {
                      "description": "Total Commitment usage.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Balance"
          },
          {
            "oldValue": {
              "description": "The properties of the balance.",
              "properties": {
                "adjustmentDetails": {
                  "description": "List of Adjustments (Promo credit, SIE credit etc.).",
                  "items": {
                    "properties": {
                      "name": {
                        "description": "the name of new adjustment.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "value": {
                        "description": "the value of new adjustment.",
                        "format": "decimal",
                        "readOnly": true,
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "adjustments": {
                  "description": "Total adjustment amount.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "azureMarketplaceServiceCharges": {
                  "description": "Total charges for Azure Marketplace.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "beginningBalance": {
                  "description": "The beginning balance for the billing period.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "billingFrequency": {
                  "description": "The billing frequency.",
                  "enum": [
                    "Month",
                    "Quarter",
                    "Year"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "BillingFrequency"
                  }
                },
                "chargesBilledSeparately": {
                  "description": "Charges Billed separately.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "currency": {
                  "description": "The ISO currency in which the meter is charged, for example, USD.",
                  "readOnly": true,
                  "type": "string"
                },
                "endingBalance": {
                  "description": "The ending balance for the billing period (for open periods this will be updated daily).",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "newPurchases": {
                  "description": "Total new purchase amount.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "newPurchasesDetails": {
                  "description": "List of new purchases.",
                  "items": {
                    "properties": {
                      "name": {
                        "description": "the name of new purchase.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "value": {
                        "description": "the value of new purchase.",
                        "format": "decimal",
                        "readOnly": true,
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "priceHidden": {
                  "description": "Price is hidden or not.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "serviceOverage": {
                  "description": "Overage for Azure services.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "totalOverage": {
                  "description": "serviceOverage + chargesBilledSeparately.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "totalUsage": {
                  "description": "Azure service commitment + total Overage.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "utilized": {
                  "description": "Total Commitment usage.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/BalanceProperties"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "eTag": {
                      "description": "eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.",
                      "type": "string"
                    },
                    "id": {
                      "description": "Resource Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "A budget resource.",
              "properties": {
                "properties": {
                  "description": "The properties of the budget.",
                  "properties": {
                    "amount": {
                      "description": "The total amount of cost to track with the budget",
                      "format": "decimal",
                      "type": "number"
                    },
                    "category": {
                      "description": "The category of the budget, whether the budget tracks cost or usage.",
                      "enum": [
                        "Cost",
                        "Usage"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "CategoryType"
                      }
                    },
                    "currentSpend": {
                      "description": "The current amount of cost which is being tracked for a budget.",
                      "properties": {
                        "amount": {
                          "description": "The total amount of cost which is being tracked by the budget.",
                          "format": "decimal",
                          "readOnly": true,
                          "type": "number"
                        },
                        "unit": {
                          "description": "The unit of measure for the budget amount.",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "filters": {
                      "description": "May be used to filter budgets by resource group, resource, or meter.",
                      "properties": {
                        "meters": {
                          "description": "The list of filters on meters (GUID), mandatory for budgets of usage category. ",
                          "items": {
                            "format": "uuid",
                            "type": "string"
                          },
                          "maxItems": 10,
                          "minItems": 0,
                          "type": "array"
                        },
                        "resourceGroups": {
                          "description": "The list of filters on resource groups, allowed at subscription level only.",
                          "items": {
                            "type": "string"
                          },
                          "maxItems": 10,
                          "minItems": 0,
                          "type": "array"
                        },
                        "resources": {
                          "description": "The list of filters on resources.",
                          "items": {
                            "type": "string"
                          },
                          "maxItems": 10,
                          "minItems": 0,
                          "type": "array"
                        },
                        "tags": {
                          "additionalProperties": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": "The dictionary of filters on tags.",
                          "maxItems": 10,
                          "minItems": 0,
                          "type": "object"
                        }
                      }
                    },
                    "notifications": {
                      "additionalProperties": {
                        "description": "The notification associated with a budget.",
                        "properties": {
                          "contactEmails": {
                            "description": "Email addresses to send the budget notification to when the threshold is exceeded.",
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 50,
                            "minItems": 1,
                            "type": "array"
                          },
                          "contactGroups": {
                            "description": "Action groups to send the budget notification to when the threshold is exceeded.",
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 50,
                            "minItems": 0,
                            "type": "array"
                          },
                          "contactRoles": {
                            "description": "Contact roles to send the budget notification to when the threshold is exceeded.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "enabled": {
                            "description": "The notification is enabled or not.",
                            "type": "boolean"
                          },
                          "operator": {
                            "description": "The comparison operator.",
                            "enum": [
                              "EqualTo",
                              "GreaterThan",
                              "GreaterThanOrEqualTo"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "OperatorType"
                            }
                          },
                          "threshold": {
                            "description": "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.",
                            "format": "decimal",
                            "type": "number"
                          }
                        },
                        "required": [
                          "enabled",
                          "operator",
                          "threshold",
                          "contactEmails"
                        ]
                      },
                      "description": "Dictionary of notifications associated with the budget. Budget can have up to five notifications.",
                      "maxItems": 5,
                      "type": "object"
                    },
                    "timeGrain": {
                      "description": "The time covered by a budget. Tracking of the amount will be reset based on the time grain.",
                      "enum": [
                        "Monthly",
                        "Quarterly",
                        "Annually"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "TimeGrainType"
                      }
                    },
                    "timePeriod": {
                      "description": "The start and end date for a budget.",
                      "properties": {
                        "endDate": {
                          "description": "The end date for the budget. If not provided, we default this to 10 years from the start date.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "startDate": {
                          "description": "The start date for the budget.",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "required": [
                        "startDate"
                      ]
                    }
                  },
                  "required": [
                    "category",
                    "amount",
                    "timeGrain",
                    "timePeriod"
                  ]
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Budget"
          },
          {
            "oldValue": {
              "description": "The properties of the budget.",
              "properties": {
                "amount": {
                  "description": "The total amount of cost to track with the budget",
                  "format": "decimal",
                  "type": "number"
                },
                "category": {
                  "description": "The category of the budget, whether the budget tracks cost or usage.",
                  "enum": [
                    "Cost",
                    "Usage"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "CategoryType"
                  }
                },
                "currentSpend": {
                  "description": "The current amount of cost which is being tracked for a budget.",
                  "properties": {
                    "amount": {
                      "description": "The total amount of cost which is being tracked by the budget.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "unit": {
                      "description": "The unit of measure for the budget amount.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "filters": {
                  "description": "May be used to filter budgets by resource group, resource, or meter.",
                  "properties": {
                    "meters": {
                      "description": "The list of filters on meters (GUID), mandatory for budgets of usage category. ",
                      "items": {
                        "format": "uuid",
                        "type": "string"
                      },
                      "maxItems": 10,
                      "minItems": 0,
                      "type": "array"
                    },
                    "resourceGroups": {
                      "description": "The list of filters on resource groups, allowed at subscription level only.",
                      "items": {
                        "type": "string"
                      },
                      "maxItems": 10,
                      "minItems": 0,
                      "type": "array"
                    },
                    "resources": {
                      "description": "The list of filters on resources.",
                      "items": {
                        "type": "string"
                      },
                      "maxItems": 10,
                      "minItems": 0,
                      "type": "array"
                    },
                    "tags": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "description": "The dictionary of filters on tags.",
                      "maxItems": 10,
                      "minItems": 0,
                      "type": "object"
                    }
                  }
                },
                "notifications": {
                  "additionalProperties": {
                    "description": "The notification associated with a budget.",
                    "properties": {
                      "contactEmails": {
                        "description": "Email addresses to send the budget notification to when the threshold is exceeded.",
                        "items": {
                          "type": "string"
                        },
                        "maxItems": 50,
                        "minItems": 1,
                        "type": "array"
                      },
                      "contactGroups": {
                        "description": "Action groups to send the budget notification to when the threshold is exceeded.",
                        "items": {
                          "type": "string"
                        },
                        "maxItems": 50,
                        "minItems": 0,
                        "type": "array"
                      },
                      "contactRoles": {
                        "description": "Contact roles to send the budget notification to when the threshold is exceeded.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "enabled": {
                        "description": "The notification is enabled or not.",
                        "type": "boolean"
                      },
                      "operator": {
                        "description": "The comparison operator.",
                        "enum": [
                          "EqualTo",
                          "GreaterThan",
                          "GreaterThanOrEqualTo"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "OperatorType"
                        }
                      },
                      "threshold": {
                        "description": "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.",
                        "format": "decimal",
                        "type": "number"
                      }
                    },
                    "required": [
                      "enabled",
                      "operator",
                      "threshold",
                      "contactEmails"
                    ]
                  },
                  "description": "Dictionary of notifications associated with the budget. Budget can have up to five notifications.",
                  "maxItems": 5,
                  "type": "object"
                },
                "timeGrain": {
                  "description": "The time covered by a budget. Tracking of the amount will be reset based on the time grain.",
                  "enum": [
                    "Monthly",
                    "Quarterly",
                    "Annually"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "TimeGrainType"
                  }
                },
                "timePeriod": {
                  "description": "The start and end date for a budget.",
                  "properties": {
                    "endDate": {
                      "description": "The end date for the budget. If not provided, we default this to 10 years from the start date.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "startDate": {
                      "description": "The start date for the budget.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "required": [
                    "startDate"
                  ]
                }
              },
              "required": [
                "category",
                "amount",
                "timeGrain",
                "timePeriod"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/BudgetProperties"
          },
          {
            "oldValue": {
              "description": "The start and end date for a budget.",
              "properties": {
                "endDate": {
                  "description": "The end date for the budget. If not provided, we default this to 10 years from the start date.",
                  "format": "date-time",
                  "type": "string"
                },
                "startDate": {
                  "description": "The start date for the budget.",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "startDate"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/BudgetTimePeriod"
          },
          {
            "oldValue": {
              "description": "Result of listing budgets. It contains a list of available budgets in the scope provided.",
              "properties": {
                "nextLink": {
                  "description": "The link (url) to the next page of results.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "The list of budgets.",
                  "items": {
                    "allOf": [
                      {
                        "description": "The Resource model definition.",
                        "properties": {
                          "eTag": {
                            "description": "eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.",
                            "type": "string"
                          },
                          "id": {
                            "description": "Resource Id.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "A budget resource.",
                    "properties": {
                      "properties": {
                        "description": "The properties of the budget.",
                        "properties": {
                          "amount": {
                            "description": "The total amount of cost to track with the budget",
                            "format": "decimal",
                            "type": "number"
                          },
                          "category": {
                            "description": "The category of the budget, whether the budget tracks cost or usage.",
                            "enum": [
                              "Cost",
                              "Usage"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "CategoryType"
                            }
                          },
                          "currentSpend": {
                            "description": "The current amount of cost which is being tracked for a budget.",
                            "properties": {
                              "amount": {
                                "description": "The total amount of cost which is being tracked by the budget.",
                                "format": "decimal",
                                "readOnly": true,
                                "type": "number"
                              },
                              "unit": {
                                "description": "The unit of measure for the budget amount.",
                                "readOnly": true,
                                "type": "string"
                              }
                            }
                          },
                          "filters": {
                            "description": "May be used to filter budgets by resource group, resource, or meter.",
                            "properties": {
                              "meters": {
                                "description": "The list of filters on meters (GUID), mandatory for budgets of usage category. ",
                                "items": {
                                  "format": "uuid",
                                  "type": "string"
                                },
                                "maxItems": 10,
                                "minItems": 0,
                                "type": "array"
                              },
                              "resourceGroups": {
                                "description": "The list of filters on resource groups, allowed at subscription level only.",
                                "items": {
                                  "type": "string"
                                },
                                "maxItems": 10,
                                "minItems": 0,
                                "type": "array"
                              },
                              "resources": {
                                "description": "The list of filters on resources.",
                                "items": {
                                  "type": "string"
                                },
                                "maxItems": 10,
                                "minItems": 0,
                                "type": "array"
                              },
                              "tags": {
                                "additionalProperties": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "description": "The dictionary of filters on tags.",
                                "maxItems": 10,
                                "minItems": 0,
                                "type": "object"
                              }
                            }
                          },
                          "notifications": {
                            "additionalProperties": {
                              "description": "The notification associated with a budget.",
                              "properties": {
                                "contactEmails": {
                                  "description": "Email addresses to send the budget notification to when the threshold is exceeded.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "maxItems": 50,
                                  "minItems": 1,
                                  "type": "array"
                                },
                                "contactGroups": {
                                  "description": "Action groups to send the budget notification to when the threshold is exceeded.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "maxItems": 50,
                                  "minItems": 0,
                                  "type": "array"
                                },
                                "contactRoles": {
                                  "description": "Contact roles to send the budget notification to when the threshold is exceeded.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "enabled": {
                                  "description": "The notification is enabled or not.",
                                  "type": "boolean"
                                },
                                "operator": {
                                  "description": "The comparison operator.",
                                  "enum": [
                                    "EqualTo",
                                    "GreaterThan",
                                    "GreaterThanOrEqualTo"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "OperatorType"
                                  }
                                },
                                "threshold": {
                                  "description": "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.",
                                  "format": "decimal",
                                  "type": "number"
                                }
                              },
                              "required": [
                                "enabled",
                                "operator",
                                "threshold",
                                "contactEmails"
                              ]
                            },
                            "description": "Dictionary of notifications associated with the budget. Budget can have up to five notifications.",
                            "maxItems": 5,
                            "type": "object"
                          },
                          "timeGrain": {
                            "description": "The time covered by a budget. Tracking of the amount will be reset based on the time grain.",
                            "enum": [
                              "Monthly",
                              "Quarterly",
                              "Annually"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "TimeGrainType"
                            }
                          },
                          "timePeriod": {
                            "description": "The start and end date for a budget.",
                            "properties": {
                              "endDate": {
                                "description": "The end date for the budget. If not provided, we default this to 10 years from the start date.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "startDate": {
                                "description": "The start date for the budget.",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "required": [
                              "startDate"
                            ]
                          }
                        },
                        "required": [
                          "category",
                          "amount",
                          "timeGrain",
                          "timePeriod"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/BudgetsListResult"
          },
          {
            "oldValue": {
              "description": "The cost tag.",
              "properties": {
                "key": {
                  "description": "Cost tag key.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CostTag"
          },
          {
            "oldValue": {
              "description": "The properties of the cost tag.",
              "properties": {
                "costTags": {
                  "description": "Cost tags.",
                  "items": {
                    "description": "The cost tag.",
                    "properties": {
                      "key": {
                        "description": "Cost tag key.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CostTagProperties"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "eTag": {
                      "description": "eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.",
                      "type": "string"
                    },
                    "id": {
                      "description": "Resource Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "A cost tag resource.",
              "properties": {
                "properties": {
                  "description": "The properties of the cost tag.",
                  "properties": {
                    "costTags": {
                      "description": "Cost tags.",
                      "items": {
                        "description": "The cost tag.",
                        "properties": {
                          "key": {
                            "description": "Cost tag key.",
                            "type": "string"
                          }
                        }
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CostTags"
          },
          {
            "oldValue": {
              "description": "The current amount of cost which is being tracked for a budget.",
              "properties": {
                "amount": {
                  "description": "The total amount of cost which is being tracked by the budget.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "unit": {
                  "description": "The unit of measure for the budget amount.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CurrentSpend"
          },
          {
            "oldValue": {
              "description": "May be used to filter budgets by resource group, resource, or meter.",
              "properties": {
                "meters": {
                  "description": "The list of filters on meters (GUID), mandatory for budgets of usage category. ",
                  "items": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "maxItems": 10,
                  "minItems": 0,
                  "type": "array"
                },
                "resourceGroups": {
                  "description": "The list of filters on resource groups, allowed at subscription level only.",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 10,
                  "minItems": 0,
                  "type": "array"
                },
                "resources": {
                  "description": "The list of filters on resources.",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 10,
                  "minItems": 0,
                  "type": "array"
                },
                "tags": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "description": "The dictionary of filters on tags.",
                  "maxItems": 10,
                  "minItems": 0,
                  "type": "object"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Filters"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "id": {
                      "description": "Resource Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "readOnly": true,
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "A forecast resource.",
              "properties": {
                "properties": {
                  "description": "The properties of the forecast charge.",
                  "properties": {
                    "charge": {
                      "description": "The amount of charge",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "chargeType": {
                      "description": "The type of the charge. Could be actual or forecast",
                      "enum": [
                        "Actual",
                        "Forecast"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ChargeType"
                      }
                    },
                    "confidenceLevels": {
                      "description": "The details about the forecast confidence levels. This is populated only when chargeType is Forecast.",
                      "items": {
                        "properties": {
                          "bound": {
                            "description": "The boundary of the percentage, values could be 'Upper' or 'Lower'",
                            "enum": [
                              "Upper",
                              "Lower"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "Bound"
                            }
                          },
                          "percentage": {
                            "description": "The percentage level of the confidence",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "value": {
                            "description": "The amount of forecast within the percentage level",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "currency": {
                      "description": "The ISO currency in which the meter is charged, for example, USD.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "grain": {
                      "description": "The granularity of forecast.",
                      "enum": [
                        "Daily",
                        "Monthly",
                        "Yearly"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "Grain"
                      }
                    },
                    "usageDate": {
                      "description": "The usage date of the forecast.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/Forecast"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The properties of the forecast charge.",
              "properties": {
                "charge": {
                  "description": "The amount of charge",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "chargeType": {
                  "description": "The type of the charge. Could be actual or forecast",
                  "enum": [
                    "Actual",
                    "Forecast"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ChargeType"
                  }
                },
                "confidenceLevels": {
                  "description": "The details about the forecast confidence levels. This is populated only when chargeType is Forecast.",
                  "items": {
                    "properties": {
                      "bound": {
                        "description": "The boundary of the percentage, values could be 'Upper' or 'Lower'",
                        "enum": [
                          "Upper",
                          "Lower"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "Bound"
                        }
                      },
                      "percentage": {
                        "description": "The percentage level of the confidence",
                        "format": "decimal",
                        "readOnly": true,
                        "type": "number"
                      },
                      "value": {
                        "description": "The amount of forecast within the percentage level",
                        "format": "decimal",
                        "readOnly": true,
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "currency": {
                  "description": "The ISO currency in which the meter is charged, for example, USD.",
                  "readOnly": true,
                  "type": "string"
                },
                "grain": {
                  "description": "The granularity of forecast.",
                  "enum": [
                    "Daily",
                    "Monthly",
                    "Yearly"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "Grain"
                  }
                },
                "usageDate": {
                  "description": "The usage date of the forecast.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ForecastProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Result of listing forecasts. It contains a list of available forecasts.",
              "properties": {
                "value": {
                  "description": "The list of forecasts.",
                  "items": {
                    "allOf": [
                      {
                        "description": "The Resource model definition.",
                        "properties": {
                          "id": {
                            "description": "Resource Id.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags.",
                            "readOnly": true,
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "A forecast resource.",
                    "properties": {
                      "properties": {
                        "description": "The properties of the forecast charge.",
                        "properties": {
                          "charge": {
                            "description": "The amount of charge",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "chargeType": {
                            "description": "The type of the charge. Could be actual or forecast",
                            "enum": [
                              "Actual",
                              "Forecast"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ChargeType"
                            }
                          },
                          "confidenceLevels": {
                            "description": "The details about the forecast confidence levels. This is populated only when chargeType is Forecast.",
                            "items": {
                              "properties": {
                                "bound": {
                                  "description": "The boundary of the percentage, values could be 'Upper' or 'Lower'",
                                  "enum": [
                                    "Upper",
                                    "Lower"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "Bound"
                                  }
                                },
                                "percentage": {
                                  "description": "The percentage level of the confidence",
                                  "format": "decimal",
                                  "readOnly": true,
                                  "type": "number"
                                },
                                "value": {
                                  "description": "The amount of forecast within the percentage level",
                                  "format": "decimal",
                                  "readOnly": true,
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "readOnly": true,
                            "type": "array"
                          },
                          "currency": {
                            "description": "The ISO currency in which the meter is charged, for example, USD.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "grain": {
                            "description": "The granularity of forecast.",
                            "enum": [
                              "Daily",
                              "Monthly",
                              "Yearly"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "Grain"
                            }
                          },
                          "usageDate": {
                            "description": "The usage date of the forecast.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ForecastsListResult"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "id": {
                      "description": "Resource Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "readOnly": true,
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "An marketplace resource.",
              "properties": {
                "properties": {
                  "description": "The properties of the marketplace usage detail.",
                  "properties": {
                    "accountName": {
                      "description": "Account name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "additionalProperties": {
                      "description": "Additional details of this usage item. By default this is not populated, unless it's specified in $expand.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "billingPeriodId": {
                      "description": "The id of the billing period resource that the usage belongs to.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "consumedQuantity": {
                      "description": "The quantity of usage.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "consumedService": {
                      "description": "Consumed service name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "costCenter": {
                      "description": "The cost center of this department if it is a department and a costcenter exists",
                      "readOnly": true,
                      "type": "string"
                    },
                    "currency": {
                      "description": "The ISO currency in which the meter is charged, for example, USD.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "departmentName": {
                      "description": "Department name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "instanceId": {
                      "description": "The uri of the resource instance that the usage is about.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "instanceName": {
                      "description": "The name of the resource instance that the usage is about.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "isEstimated": {
                      "description": "The estimated usage is subject to change.",
                      "readOnly": true,
                      "type": "boolean"
                    },
                    "meterId": {
                      "description": "The meter id (GUID).",
                      "format": "uuid",
                      "readOnly": true,
                      "type": "string"
                    },
                    "offerName": {
                      "description": "The type of offer.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "orderNumber": {
                      "description": "The order number.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "planName": {
                      "description": "The name of plan.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "pretaxCost": {
                      "description": "The amount of cost before tax.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "publisherName": {
                      "description": "The name of publisher.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "resourceGroup": {
                      "description": "The name of resource group.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "resourceRate": {
                      "description": "The marketplace resource rate.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "subscriptionGuid": {
                      "description": "Subscription guid.",
                      "format": "uuid",
                      "readOnly": true,
                      "type": "string"
                    },
                    "subscriptionName": {
                      "description": "Subscription name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "unitOfMeasure": {
                      "description": "The unit of measure.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "usageEnd": {
                      "description": "The end of the date time range covered by the usage detail.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "usageStart": {
                      "description": "The start of the date time range covered by the usage detail.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Marketplace"
          },
          {
            "oldValue": {
              "description": "The properties of the marketplace usage detail.",
              "properties": {
                "accountName": {
                  "description": "Account name.",
                  "readOnly": true,
                  "type": "string"
                },
                "additionalProperties": {
                  "description": "Additional details of this usage item. By default this is not populated, unless it's specified in $expand.",
                  "readOnly": true,
                  "type": "string"
                },
                "billingPeriodId": {
                  "description": "The id of the billing period resource that the usage belongs to.",
                  "readOnly": true,
                  "type": "string"
                },
                "consumedQuantity": {
                  "description": "The quantity of usage.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "consumedService": {
                  "description": "Consumed service name.",
                  "readOnly": true,
                  "type": "string"
                },
                "costCenter": {
                  "description": "The cost center of this department if it is a department and a costcenter exists",
                  "readOnly": true,
                  "type": "string"
                },
                "currency": {
                  "description": "The ISO currency in which the meter is charged, for example, USD.",
                  "readOnly": true,
                  "type": "string"
                },
                "departmentName": {
                  "description": "Department name.",
                  "readOnly": true,
                  "type": "string"
                },
                "instanceId": {
                  "description": "The uri of the resource instance that the usage is about.",
                  "readOnly": true,
                  "type": "string"
                },
                "instanceName": {
                  "description": "The name of the resource instance that the usage is about.",
                  "readOnly": true,
                  "type": "string"
                },
                "isEstimated": {
                  "description": "The estimated usage is subject to change.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "meterId": {
                  "description": "The meter id (GUID).",
                  "format": "uuid",
                  "readOnly": true,
                  "type": "string"
                },
                "offerName": {
                  "description": "The type of offer.",
                  "readOnly": true,
                  "type": "string"
                },
                "orderNumber": {
                  "description": "The order number.",
                  "readOnly": true,
                  "type": "string"
                },
                "planName": {
                  "description": "The name of plan.",
                  "readOnly": true,
                  "type": "string"
                },
                "pretaxCost": {
                  "description": "The amount of cost before tax.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "publisherName": {
                  "description": "The name of publisher.",
                  "readOnly": true,
                  "type": "string"
                },
                "resourceGroup": {
                  "description": "The name of resource group.",
                  "readOnly": true,
                  "type": "string"
                },
                "resourceRate": {
                  "description": "The marketplace resource rate.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "subscriptionGuid": {
                  "description": "Subscription guid.",
                  "format": "uuid",
                  "readOnly": true,
                  "type": "string"
                },
                "subscriptionName": {
                  "description": "Subscription name.",
                  "readOnly": true,
                  "type": "string"
                },
                "unitOfMeasure": {
                  "description": "The unit of measure.",
                  "readOnly": true,
                  "type": "string"
                },
                "usageEnd": {
                  "description": "The end of the date time range covered by the usage detail.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "usageStart": {
                  "description": "The start of the date time range covered by the usage detail.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MarketplaceProperties"
          },
          {
            "oldValue": {
              "description": "Result of listing marketplaces. It contains a list of available marketplaces in reverse chronological order by billing period.",
              "properties": {
                "nextLink": {
                  "description": "The link (url) to the next page of results.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "The list of marketplaces.",
                  "items": {
                    "allOf": [
                      {
                        "description": "The Resource model definition.",
                        "properties": {
                          "id": {
                            "description": "Resource Id.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags.",
                            "readOnly": true,
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "An marketplace resource.",
                    "properties": {
                      "properties": {
                        "description": "The properties of the marketplace usage detail.",
                        "properties": {
                          "accountName": {
                            "description": "Account name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "additionalProperties": {
                            "description": "Additional details of this usage item. By default this is not populated, unless it's specified in $expand.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "billingPeriodId": {
                            "description": "The id of the billing period resource that the usage belongs to.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "consumedQuantity": {
                            "description": "The quantity of usage.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "consumedService": {
                            "description": "Consumed service name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "costCenter": {
                            "description": "The cost center of this department if it is a department and a costcenter exists",
                            "readOnly": true,
                            "type": "string"
                          },
                          "currency": {
                            "description": "The ISO currency in which the meter is charged, for example, USD.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "departmentName": {
                            "description": "Department name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "instanceId": {
                            "description": "The uri of the resource instance that the usage is about.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "instanceName": {
                            "description": "The name of the resource instance that the usage is about.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "isEstimated": {
                            "description": "The estimated usage is subject to change.",
                            "readOnly": true,
                            "type": "boolean"
                          },
                          "meterId": {
                            "description": "The meter id (GUID).",
                            "format": "uuid",
                            "readOnly": true,
                            "type": "string"
                          },
                          "offerName": {
                            "description": "The type of offer.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "orderNumber": {
                            "description": "The order number.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "planName": {
                            "description": "The name of plan.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "pretaxCost": {
                            "description": "The amount of cost before tax.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "publisherName": {
                            "description": "The name of publisher.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "resourceGroup": {
                            "description": "The name of resource group.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "resourceRate": {
                            "description": "The marketplace resource rate.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "subscriptionGuid": {
                            "description": "Subscription guid.",
                            "format": "uuid",
                            "readOnly": true,
                            "type": "string"
                          },
                          "subscriptionName": {
                            "description": "Subscription name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "unitOfMeasure": {
                            "description": "The unit of measure.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "usageEnd": {
                            "description": "The end of the date time range covered by the usage detail.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "usageStart": {
                            "description": "The start of the date time range covered by the usage detail.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MarketplacesListResult"
          },
          {
            "oldValue": {
              "description": "The notification associated with a budget.",
              "properties": {
                "contactEmails": {
                  "description": "Email addresses to send the budget notification to when the threshold is exceeded.",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 50,
                  "minItems": 1,
                  "type": "array"
                },
                "contactGroups": {
                  "description": "Action groups to send the budget notification to when the threshold is exceeded.",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 50,
                  "minItems": 0,
                  "type": "array"
                },
                "contactRoles": {
                  "description": "Contact roles to send the budget notification to when the threshold is exceeded.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "enabled": {
                  "description": "The notification is enabled or not.",
                  "type": "boolean"
                },
                "operator": {
                  "description": "The comparison operator.",
                  "enum": [
                    "EqualTo",
                    "GreaterThan",
                    "GreaterThanOrEqualTo"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "OperatorType"
                  }
                },
                "threshold": {
                  "description": "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.",
                  "format": "decimal",
                  "type": "number"
                }
              },
              "required": [
                "enabled",
                "operator",
                "threshold",
                "contactEmails"
              ]
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Notification"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Offer Id",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/PriceSheetModel/properties/pricesheets/items/properties/offerId"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Offer Id",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/PriceSheetProperties/properties/offerId"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Offer Id",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/PriceSheetResult/properties/properties/properties/pricesheets/items/properties/offerId"
          },
          {
            "oldValue": {
              "description": "The Resource model definition.",
              "properties": {
                "eTag": {
                  "description": "eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.",
                  "type": "string"
                },
                "id": {
                  "description": "Resource Id.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "Resource name.",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "Resource type.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "x-ms-azure-resource": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ProxyResource"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "id": {
                      "description": "Resource Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "readOnly": true,
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "reservation details resource.",
              "properties": {
                "properties": {
                  "description": "The properties of the reservation details.",
                  "properties": {
                    "instanceId": {
                      "description": "This identifier is the name of the resource or the fully qualified Resource ID.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "reservationId": {
                      "description": "The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "reservationOrderId": {
                      "description": "The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "reservedHours": {
                      "description": "This is the total hours reserved for the day. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "skuName": {
                      "description": "This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "totalReservedQuantity": {
                      "description": "This is the total count of instances that are reserved for the reservationId.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "usageDate": {
                      "description": "The date on which consumption occurred.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "usedHours": {
                      "description": "This is the total hours used by the instance.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    }
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationDetails"
          },
          {
            "oldValue": {
              "description": "Result of listing reservation details.",
              "properties": {
                "nextLink": {
                  "description": "The link (url) to the next page of results.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "The list of reservation details.",
                  "items": {
                    "allOf": [
                      {
                        "description": "The Resource model definition.",
                        "properties": {
                          "id": {
                            "description": "Resource Id.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags.",
                            "readOnly": true,
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "reservation details resource.",
                    "properties": {
                      "properties": {
                        "description": "The properties of the reservation details.",
                        "properties": {
                          "instanceId": {
                            "description": "This identifier is the name of the resource or the fully qualified Resource ID.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "reservationId": {
                            "description": "The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "reservationOrderId": {
                            "description": "The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "reservedHours": {
                            "description": "This is the total hours reserved for the day. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "skuName": {
                            "description": "This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "totalReservedQuantity": {
                            "description": "This is the total count of instances that are reserved for the reservationId.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "usageDate": {
                            "description": "The date on which consumption occurred.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "usedHours": {
                            "description": "This is the total hours used by the instance.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          }
                        }
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationDetailsListResult"
          },
          {
            "oldValue": {
              "description": "The properties of the reservation details.",
              "properties": {
                "instanceId": {
                  "description": "This identifier is the name of the resource or the fully qualified Resource ID.",
                  "readOnly": true,
                  "type": "string"
                },
                "reservationId": {
                  "description": "The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.",
                  "readOnly": true,
                  "type": "string"
                },
                "reservationOrderId": {
                  "description": "The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.",
                  "readOnly": true,
                  "type": "string"
                },
                "reservedHours": {
                  "description": "This is the total hours reserved for the day. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "skuName": {
                  "description": "This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.",
                  "readOnly": true,
                  "type": "string"
                },
                "totalReservedQuantity": {
                  "description": "This is the total count of instances that are reserved for the reservationId.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "usageDate": {
                  "description": "The date on which consumption occurred.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "usedHours": {
                  "description": "This is the total hours used by the instance.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationDetailsProperties"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "id": {
                      "description": "Resource Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "readOnly": true,
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                },
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "location": {
                      "description": "Resource location",
                      "readOnly": true,
                      "type": "string"
                    },
                    "sku": {
                      "description": "Resource sku",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                }
              ],
              "description": "Reservation recommendations resource.",
              "properties": {
                "properties": {
                  "description": "The properties of the reservation recommendations.",
                  "properties": {
                    "costWithNoReservedInstances": {
                      "description": "The total amount of cost without reserved instances.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "firstUsageDate": {
                      "description": "The usage date for looking back.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "lookBackPeriod": {
                      "description": "The number of days of usage to look back for recommendations.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "meterId": {
                      "description": "The meter id (GUID)",
                      "format": "uuid",
                      "readOnly": true,
                      "type": "string"
                    },
                    "netSavings": {
                      "description": "Total estimated savings with reserved instances.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "recommendedQuantity": {
                      "description": "Recommended quality for reserved instances.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "scope": {
                      "description": "Shared or single recommendation.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "term": {
                      "description": "RI recommendations in one or three year terms.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "totalCostWithReservedInstances": {
                      "description": "The total amount of cost with reserved instances.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    }
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationRecommendations"
          },
          {
            "oldValue": {
              "description": "Result of listing reservation recommendations.",
              "properties": {
                "nextLink": {
                  "description": "The link (url) to the next page of results.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "The list of reservation recommendations.",
                  "items": {
                    "allOf": [
                      {
                        "description": "The Resource model definition.",
                        "properties": {
                          "id": {
                            "description": "Resource Id.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags.",
                            "readOnly": true,
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      },
                      {
                        "description": "The Resource model definition.",
                        "properties": {
                          "location": {
                            "description": "Resource location",
                            "readOnly": true,
                            "type": "string"
                          },
                          "sku": {
                            "description": "Resource sku",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      }
                    ],
                    "description": "Reservation recommendations resource.",
                    "properties": {
                      "properties": {
                        "description": "The properties of the reservation recommendations.",
                        "properties": {
                          "costWithNoReservedInstances": {
                            "description": "The total amount of cost without reserved instances.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "firstUsageDate": {
                            "description": "The usage date for looking back.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "lookBackPeriod": {
                            "description": "The number of days of usage to look back for recommendations.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "meterId": {
                            "description": "The meter id (GUID)",
                            "format": "uuid",
                            "readOnly": true,
                            "type": "string"
                          },
                          "netSavings": {
                            "description": "Total estimated savings with reserved instances.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "recommendedQuantity": {
                            "description": "Recommended quality for reserved instances.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "scope": {
                            "description": "Shared or single recommendation.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "term": {
                            "description": "RI recommendations in one or three year terms.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "totalCostWithReservedInstances": {
                            "description": "The total amount of cost with reserved instances.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          }
                        }
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationRecommendationsListResult"
          },
          {
            "oldValue": {
              "description": "The properties of the reservation recommendations.",
              "properties": {
                "costWithNoReservedInstances": {
                  "description": "The total amount of cost without reserved instances.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "firstUsageDate": {
                  "description": "The usage date for looking back.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "lookBackPeriod": {
                  "description": "The number of days of usage to look back for recommendations.",
                  "readOnly": true,
                  "type": "string"
                },
                "meterId": {
                  "description": "The meter id (GUID)",
                  "format": "uuid",
                  "readOnly": true,
                  "type": "string"
                },
                "netSavings": {
                  "description": "Total estimated savings with reserved instances.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "recommendedQuantity": {
                  "description": "Recommended quality for reserved instances.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "scope": {
                  "description": "Shared or single recommendation.",
                  "readOnly": true,
                  "type": "string"
                },
                "term": {
                  "description": "RI recommendations in one or three year terms.",
                  "readOnly": true,
                  "type": "string"
                },
                "totalCostWithReservedInstances": {
                  "description": "The total amount of cost with reserved instances.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationRecommendationsProperties"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "id": {
                      "description": "Resource Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "readOnly": true,
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "reservation summaries resource.",
              "properties": {
                "properties": {
                  "description": "The properties of the reservation summaries.",
                  "properties": {
                    "avgUtilizationPercentage": {
                      "description": "This is average utilization for the entire time range. (day or month depending on the grain)",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "maxUtilizationPercentage": {
                      "description": "This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this field will return 100% for that day.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "minUtilizationPercentage": {
                      "description": "This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this field will return 10% for that day",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "reservationId": {
                      "description": "The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "reservationOrderId": {
                      "description": "The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "reservedHours": {
                      "description": "This is the total hours reserved. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "skuName": {
                      "description": "This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "usageDate": {
                      "description": "Data corresponding to the utilization record. If the grain of data is monthly, it will be first day of month.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "usedHours": {
                      "description": "Total used hours by the reservation",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    }
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationSummaries"
          },
          {
            "oldValue": {
              "description": "Result of listing reservation summaries.",
              "properties": {
                "nextLink": {
                  "description": "The link (url) to the next page of results.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "The list of reservation summaries.",
                  "items": {
                    "allOf": [
                      {
                        "description": "The Resource model definition.",
                        "properties": {
                          "id": {
                            "description": "Resource Id.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags.",
                            "readOnly": true,
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "reservation summaries resource.",
                    "properties": {
                      "properties": {
                        "description": "The properties of the reservation summaries.",
                        "properties": {
                          "avgUtilizationPercentage": {
                            "description": "This is average utilization for the entire time range. (day or month depending on the grain)",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "maxUtilizationPercentage": {
                            "description": "This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this field will return 100% for that day.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "minUtilizationPercentage": {
                            "description": "This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this field will return 10% for that day",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "reservationId": {
                            "description": "The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "reservationOrderId": {
                            "description": "The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "reservedHours": {
                            "description": "This is the total hours reserved. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "skuName": {
                            "description": "This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "usageDate": {
                            "description": "Data corresponding to the utilization record. If the grain of data is monthly, it will be first day of month.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "usedHours": {
                            "description": "Total used hours by the reservation",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          }
                        }
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationSummariesListResult"
          },
          {
            "oldValue": {
              "description": "The properties of the reservation summaries.",
              "properties": {
                "avgUtilizationPercentage": {
                  "description": "This is average utilization for the entire time range. (day or month depending on the grain)",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "maxUtilizationPercentage": {
                  "description": "This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this field will return 100% for that day.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "minUtilizationPercentage": {
                  "description": "This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this field will return 10% for that day",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "reservationId": {
                  "description": "The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.",
                  "readOnly": true,
                  "type": "string"
                },
                "reservationOrderId": {
                  "description": "The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.",
                  "readOnly": true,
                  "type": "string"
                },
                "reservedHours": {
                  "description": "This is the total hours reserved. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "skuName": {
                  "description": "This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.",
                  "readOnly": true,
                  "type": "string"
                },
                "usageDate": {
                  "description": "Data corresponding to the utilization record. If the grain of data is monthly, it will be first day of month.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "usedHours": {
                  "description": "Total used hours by the reservation",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationSummariesProperties"
          },
          {
            "oldValue": {
              "description": "The Resource model definition.",
              "properties": {
                "location": {
                  "description": "Resource location",
                  "readOnly": true,
                  "type": "string"
                },
                "sku": {
                  "description": "Resource sku",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ResourceAttributes"
          },
          {
            "oldValue": {
              "description": "The tag resource.",
              "properties": {
                "key": {
                  "description": "Tag key.",
                  "type": "string"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Tag"
          },
          {
            "oldValue": {
              "description": "The properties of the tag.",
              "properties": {
                "tags": {
                  "description": "A list of Tag.",
                  "items": {
                    "description": "The tag resource.",
                    "properties": {
                      "key": {
                        "description": "Tag key.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/TagProperties"
          },
          {
            "oldValue": {
              "allOf": [
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "eTag": {
                      "description": "eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.",
                      "type": "string"
                    },
                    "id": {
                      "description": "Resource Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "A resource listing all tags.",
              "properties": {
                "properties": {
                  "description": "The properties of the tag.",
                  "properties": {
                    "tags": {
                      "description": "A list of Tag.",
                      "items": {
                        "description": "The tag resource.",
                        "properties": {
                          "key": {
                            "description": "Tag key.",
                            "type": "string"
                          }
                        }
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Tags"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Charges billed separately",
              "readOnly": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/UsageDetail/properties/properties/properties/chargesBilledSeparately"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Offer Id",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/UsageDetail/properties/properties/properties/offerId"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Part Number",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/UsageDetail/properties/properties/properties/partNumber"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Resource Guid",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/UsageDetail/properties/properties/properties/resourceGuid"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Charges billed separately",
              "readOnly": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/UsageDetailProperties/properties/chargesBilledSeparately"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Offer Id",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/UsageDetailProperties/properties/offerId"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Part Number",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/UsageDetailProperties/properties/partNumber"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Resource Guid",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/UsageDetailProperties/properties/resourceGuid"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Charges billed separately",
              "readOnly": true,
              "type": "boolean"
            },
            "op": "add",
            "from": "",
            "path": "/UsageDetailsListResult/properties/value/items/properties/properties/properties/chargesBilledSeparately"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Offer Id",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/UsageDetailsListResult/properties/value/items/properties/properties/properties/offerId"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Part Number",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/UsageDetailsListResult/properties/value/items/properties/properties/properties/partNumber"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Resource Guid",
              "readOnly": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/UsageDetailsListResult/properties/value/items/properties/properties/properties/resourceGuid"
          }
        ],
        "parameters": [
          {
            "oldValue": "Version of the API to be used with the client request. The current version is 2018-03-31.",
            "value": "Version of the API to be used with the client request. The current version is 2018-05-31.",
            "op": "replace",
            "from": "",
            "path": "/apiVersionParameter/description"
          },
          {
            "oldValue": {
              "description": "Budget Name.",
              "in": "path",
              "name": "budgetName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/budgetNameParameter"
          },
          {
            "oldValue": {
              "description": "Can be daily or monthly",
              "enum": [
                "daily",
                "monthly"
              ],
              "in": "query",
              "name": "grain",
              "required": true,
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "datagrain",
                "values": [
                  {
                    "description": "Daily grain of data",
                    "name": "DailyGrain",
                    "value": "daily"
                  },
                  {
                    "description": "Monthly grain of data",
                    "name": "MonthlyGrain",
                    "value": "monthly"
                  }
                ]
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/grainParameter"
          },
          {
            "oldValue": {
              "description": "Id of the reservation",
              "in": "path",
              "name": "reservationId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/reservationIdParameter"
          },
          {
            "oldValue": {
              "description": "Order Id of the reservation",
              "in": "path",
              "name": "reservationOrderId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/reservationOrderIdParameter"
          },
          {
            "oldValue": {
              "description": "Azure Resource Group Name.",
              "in": "path",
              "name": "resourceGroupName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/resourceGroupNameParameter"
          }
        ]
      }
    },
    "info": {
      "version": {
        "from": "2018-03-31",
        "to": "2018-05-31"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/forecasts"
      ],
      "deleted": [
        "/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/marketplaces",
        "/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/marketplaces",
        "/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/marketplaces",
        "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/providers/Microsoft.Consumption/reservationDetails",
        "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/marketplaces",
        "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/providers/Microsoft.Consumption/reservationSummaries",
        "/providers/Microsoft.CostManagement/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/tags",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/reservationRecommendations",
        "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/reservations/{reservationId}/providers/Microsoft.Consumption/reservationSummaries",
        "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/marketplaces",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/budgets",
        "/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Consumption/marketplaces",
        "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/balances",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets/{budgetName}",
        "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/balances",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/marketplaces",
        "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/reservations/{reservationId}/providers/Microsoft.Consumption/reservationDetails",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/budgets/{budgetName}",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets",
        "/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Consumption/marketplaces",
        "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/costTags"
      ],
      "modified": {
        "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-03-31",
                        "value": "2018-05-31",
                        "op": "replace",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": true,
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/chargesBilledSeparately"
                      },
                      {
                        "oldValue": null,
                        "value": "Offer Id 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/offerId"
                      },
                      {
                        "oldValue": null,
                        "value": "Part Number 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/partNumber"
                      },
                      {
                        "oldValue": null,
                        "value": "00000000-0000-0000-0000-000000000000",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/resourceGuid"
                      }
                    ]
                  }
                },
                "operationID": {
                  "from": "UsageDetailsByBillingAccount_ListByBillingPeriod",
                  "to": "UsageDetails_ListForBillingPeriodByBillingAccount"
                },
                "parameters": {
                  "modified": {
                    "query": {
                      "api-version": {
                        "description": {
                          "from": "Version of the API to be used with the client request. The current version is 2018-03-31.",
                          "to": "Version of the API to be used with the client request. The current version is 2018-05-31."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Charges billed separately",
                                "readOnly": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/chargesBilledSeparately"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Offer Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/offerId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Part Number",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/partNumber"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource Guid",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/resourceGuid"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/usageDetails": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-03-31",
                        "value": "2018-05-31",
                        "op": "replace",
                        "from": "",
                        "path": "/UsageDetailsList/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": true,
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/chargesBilledSeparately"
                      },
                      {
                        "oldValue": null,
                        "value": "Offer Id 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/offerId"
                      },
                      {
                        "oldValue": null,
                        "value": "Part Number 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/partNumber"
                      },
                      {
                        "oldValue": null,
                        "value": "00000000-0000-0000-0000-000000000000",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/resourceGuid"
                      }
                    ]
                  }
                },
                "operationID": {
                  "from": "UsageDetailsByBillingAccount_List",
                  "to": "UsageDetails_ListByBillingAccount"
                },
                "parameters": {
                  "modified": {
                    "query": {
                      "api-version": {
                        "description": {
                          "from": "Version of the API to be used with the client request. The current version is 2018-03-31.",
                          "to": "Version of the API to be used with the client request. The current version is 2018-05-31."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Charges billed separately",
                                "readOnly": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/chargesBilledSeparately"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Offer Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/offerId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Part Number",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/partNumber"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource Guid",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/resourceGuid"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-03-31",
                        "value": "2018-05-31",
                        "op": "replace",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": true,
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/chargesBilledSeparately"
                      },
                      {
                        "oldValue": null,
                        "value": "Offer Id 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/offerId"
                      },
                      {
                        "oldValue": null,
                        "value": "Part Number 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/partNumber"
                      },
                      {
                        "oldValue": null,
                        "value": "00000000-0000-0000-0000-000000000000",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/resourceGuid"
                      }
                    ]
                  }
                },
                "description": {
                  "from": "Lists the usage details  based on departmentId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.",
                  "to": "Lists the usage details based on departmentId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later."
                },
                "operationID": {
                  "from": "UsageDetailsByDepartment_ListByBillingPeriod",
                  "to": "UsageDetails_ListForBillingPeriodByDepartment"
                },
                "parameters": {
                  "modified": {
                    "query": {
                      "api-version": {
                        "description": {
                          "from": "Version of the API to be used with the client request. The current version is 2018-03-31.",
                          "to": "Version of the API to be used with the client request. The current version is 2018-05-31."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Charges billed separately",
                                "readOnly": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/chargesBilledSeparately"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Offer Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/offerId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Part Number",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/partNumber"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource Guid",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/resourceGuid"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Consumption/usageDetails": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-03-31",
                        "value": "2018-05-31",
                        "op": "replace",
                        "from": "",
                        "path": "/UsageDetailsList/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": true,
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/chargesBilledSeparately"
                      },
                      {
                        "oldValue": null,
                        "value": "Offer Id 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/offerId"
                      },
                      {
                        "oldValue": null,
                        "value": "Part Number 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/partNumber"
                      },
                      {
                        "oldValue": null,
                        "value": "00000000-0000-0000-0000-000000000000",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/resourceGuid"
                      }
                    ]
                  }
                },
                "operationID": {
                  "from": "UsageDetailsByDepartment_List",
                  "to": "UsageDetails_ListByDepartment"
                },
                "parameters": {
                  "modified": {
                    "query": {
                      "api-version": {
                        "description": {
                          "from": "Version of the API to be used with the client request. The current version is 2018-03-31.",
                          "to": "Version of the API to be used with the client request. The current version is 2018-05-31."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Charges billed separately",
                                "readOnly": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/chargesBilledSeparately"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Offer Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/offerId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Part Number",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/partNumber"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource Guid",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/resourceGuid"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-03-31",
                        "value": "2018-05-31",
                        "op": "replace",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": true,
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/chargesBilledSeparately"
                      },
                      {
                        "oldValue": null,
                        "value": "Offer Id 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/offerId"
                      },
                      {
                        "oldValue": null,
                        "value": "Part Number 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/partNumber"
                      },
                      {
                        "oldValue": null,
                        "value": "00000000-0000-0000-0000-000000000000",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/resourceGuid"
                      }
                    ]
                  }
                },
                "operationID": {
                  "from": "UsageDetailsByEnrollmentAccount_ListByBillingPeriod",
                  "to": "UsageDetails_ListForBillingPeriodByEnrollmentAccount"
                },
                "parameters": {
                  "modified": {
                    "query": {
                      "api-version": {
                        "description": {
                          "from": "Version of the API to be used with the client request. The current version is 2018-03-31.",
                          "to": "Version of the API to be used with the client request. The current version is 2018-05-31."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Charges billed separately",
                                "readOnly": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/chargesBilledSeparately"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Offer Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/offerId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Part Number",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/partNumber"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource Guid",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/resourceGuid"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Consumption/usageDetails": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-03-31",
                        "value": "2018-05-31",
                        "op": "replace",
                        "from": "",
                        "path": "/UsageDetailsList/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": true,
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/chargesBilledSeparately"
                      },
                      {
                        "oldValue": null,
                        "value": "Offer Id 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/offerId"
                      },
                      {
                        "oldValue": null,
                        "value": "Part Number 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/partNumber"
                      },
                      {
                        "oldValue": null,
                        "value": "00000000-0000-0000-0000-000000000000",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/resourceGuid"
                      }
                    ]
                  }
                },
                "operationID": {
                  "from": "UsageDetailsByEnrollmentAccount_List",
                  "to": "UsageDetails_ListByEnrollmentAccount"
                },
                "parameters": {
                  "modified": {
                    "query": {
                      "api-version": {
                        "description": {
                          "from": "Version of the API to be used with the client request. The current version is 2018-03-31.",
                          "to": "Version of the API to be used with the client request. The current version is 2018-05-31."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Charges billed separately",
                                "readOnly": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/chargesBilledSeparately"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Offer Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/offerId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Part Number",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/partNumber"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource Guid",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/resourceGuid"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/providers/Microsoft.Consumption/operations": {
          "operations": {
            "modified": {
              "GET": {
                "parameters": {
                  "modified": {
                    "query": {
                      "api-version": {
                        "description": {
                          "from": "Version of the API to be used with the client request. The current version is 2018-03-31.",
                          "to": "Version of the API to be used with the client request. The current version is 2018-05-31."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/pricesheets/default": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-03-31",
                        "value": "2018-05-31",
                        "op": "replace",
                        "from": "",
                        "path": "/PriceSheetExpand/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "OfferId 1",
                        "op": "add",
                        "from": "",
                        "path": "/PriceSheetExpand/responses/200/body/properties/pricesheets/0/offerId"
                      },
                      {
                        "oldValue": "2018-03-31",
                        "value": "2018-05-31",
                        "op": "replace",
                        "from": "",
                        "path": "/PriceSheetForBillingPeriod/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "OfferId 1",
                        "op": "add",
                        "from": "",
                        "path": "/PriceSheetForBillingPeriod/responses/200/body/properties/pricesheets/0/offerId"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "query": {
                      "api-version": {
                        "description": {
                          "from": "Version of the API to be used with the client request. The current version is 2018-03-31.",
                          "to": "Version of the API to be used with the client request. The current version is 2018-05-31."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Offer Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/pricesheets/items/properties/offerId"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-03-31",
                        "value": "2018-05-31",
                        "op": "replace",
                        "from": "",
                        "path": "/UsageDetailsExpand/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": true,
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsExpand/responses/200/body/value/0/properties/chargesBilledSeparately"
                      },
                      {
                        "oldValue": null,
                        "value": "Offer Id 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsExpand/responses/200/body/value/0/properties/offerId"
                      },
                      {
                        "oldValue": null,
                        "value": "Part Number 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsExpand/responses/200/body/value/0/properties/partNumber"
                      },
                      {
                        "oldValue": null,
                        "value": "00000000-0000-0000-0000-000000000000",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsExpand/responses/200/body/value/0/properties/resourceGuid"
                      },
                      {
                        "oldValue": "2018-03-31",
                        "value": "2018-05-31",
                        "op": "replace",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": true,
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/chargesBilledSeparately"
                      },
                      {
                        "oldValue": null,
                        "value": "Offer Id 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/offerId"
                      },
                      {
                        "oldValue": null,
                        "value": "Part Number 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/partNumber"
                      },
                      {
                        "oldValue": null,
                        "value": "00000000-0000-0000-0000-000000000000",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriod/responses/200/body/value/0/properties/resourceGuid"
                      },
                      {
                        "oldValue": "2018-03-31",
                        "value": "2018-05-31",
                        "op": "replace",
                        "from": "",
                        "path": "/UsageDetailsListForBillingPeriodGroupByTag/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "query": {
                      "api-version": {
                        "description": {
                          "from": "Version of the API to be used with the client request. The current version is 2018-03-31.",
                          "to": "Version of the API to be used with the client request. The current version is 2018-05-31."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Charges billed separately",
                                "readOnly": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/chargesBilledSeparately"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Offer Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/offerId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Part Number",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/partNumber"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource Guid",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/resourceGuid"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/pricesheets/default": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-03-31",
                        "value": "2018-05-31",
                        "op": "replace",
                        "from": "",
                        "path": "/PriceSheet/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": "OfferId 1",
                        "op": "add",
                        "from": "",
                        "path": "/PriceSheet/responses/200/body/properties/pricesheets/0/offerId"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "query": {
                      "api-version": {
                        "description": {
                          "from": "Version of the API to be used with the client request. The current version is 2018-03-31.",
                          "to": "Version of the API to be used with the client request. The current version is 2018-05-31."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Offer Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/pricesheets/items/properties/offerId"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/usageDetails": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2018-03-31",
                        "value": "2018-05-31",
                        "op": "replace",
                        "from": "",
                        "path": "/UsageDetailsList/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": true,
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/chargesBilledSeparately"
                      },
                      {
                        "oldValue": null,
                        "value": "Offer Id 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/offerId"
                      },
                      {
                        "oldValue": null,
                        "value": "Part Number 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/partNumber"
                      },
                      {
                        "oldValue": null,
                        "value": "00000000-0000-0000-0000-000000000000",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsList/responses/200/body/value/0/properties/resourceGuid"
                      },
                      {
                        "oldValue": "2018-03-31",
                        "value": "2018-05-31",
                        "op": "replace",
                        "from": "",
                        "path": "/UsageDetailsListFilterByTag/parameters/api-version"
                      },
                      {
                        "oldValue": null,
                        "value": true,
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListFilterByTag/responses/200/body/value/0/properties/chargesBilledSeparately"
                      },
                      {
                        "oldValue": null,
                        "value": "Offer Id 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListFilterByTag/responses/200/body/value/0/properties/offerId"
                      },
                      {
                        "oldValue": null,
                        "value": "Part Number 1",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListFilterByTag/responses/200/body/value/0/properties/partNumber"
                      },
                      {
                        "oldValue": null,
                        "value": "00000000-0000-0000-0000-000000000000",
                        "op": "add",
                        "from": "",
                        "path": "/UsageDetailsListFilterByTag/responses/200/body/value/0/properties/resourceGuid"
                      },
                      {
                        "oldValue": "2018-03-31",
                        "value": "2018-05-31",
                        "op": "replace",
                        "from": "",
                        "path": "/UsageDetailsListGroupByTagDate/parameters/api-version"
                      }
                    ]
                  }
                },
                "parameters": {
                  "modified": {
                    "query": {
                      "api-version": {
                        "description": {
                          "from": "Version of the API to be used with the client request. The current version is 2018-03-31.",
                          "to": "Version of the API to be used with the client request. The current version is 2018-05-31."
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Charges billed separately",
                                "readOnly": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/chargesBilledSeparately"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Offer Id",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/offerId"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Part Number",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/partNumber"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource Guid",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/resourceGuid"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {},
  "tools_b": {
    "UsageDetails_List": "FunctionDef(\n  name='UsageDetails_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_expand',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_skiptoken',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_apply',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the usage details for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Consumption/usageDetails')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_expand', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$expand'),\n              ctx=Store())],\n          value=Name(id='_expand', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_skiptoken', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$skiptoken'),\n              ctx=Store())],\n          value=Name(id='_skiptoken', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_apply', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$apply'),\n              ctx=Store())],\n          value=Name(id='_apply', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='UsageDetails_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the usage details for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.'))])],\n  type_params=[])",
    "UsageDetails_ListByBillingPeriod": "FunctionDef(\n  name='UsageDetails_ListByBillingPeriod',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='billingPeriodName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_expand',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_apply',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_skiptoken',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the usage details for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Billing/billingPeriods/'),\n          FormattedValue(\n            value=Name(id='billingPeriodName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Consumption/usageDetails')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='billingPeriodName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: billingPeriodName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_expand', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$expand'),\n              ctx=Store())],\n          value=Name(id='_expand', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_apply', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$apply'),\n              ctx=Store())],\n          value=Name(id='_apply', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_skiptoken', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$skiptoken'),\n              ctx=Store())],\n          value=Name(id='_skiptoken', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='UsageDetails_ListByBillingPeriod')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the usage details for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.'))])],\n  type_params=[])",
    "UsageDetails_ListByBillingAccount": "FunctionDef(\n  name='UsageDetails_ListByBillingAccount',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='billingAccountId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_expand',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_skiptoken',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_apply',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the usage details by billingAccountId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Billing/billingAccounts/'),\n          FormattedValue(\n            value=Name(id='billingAccountId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Consumption/usageDetails')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='billingAccountId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: billingAccountId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_expand', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$expand'),\n              ctx=Store())],\n          value=Name(id='_expand', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_skiptoken', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$skiptoken'),\n              ctx=Store())],\n          value=Name(id='_skiptoken', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_apply', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$apply'),\n              ctx=Store())],\n          value=Name(id='_apply', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='UsageDetails_ListByBillingAccount')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the usage details by billingAccountId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.'))])],\n  type_params=[])",
    "UsageDetails_ListForBillingPeriodByBillingAccount": "FunctionDef(\n  name='UsageDetails_ListForBillingPeriodByBillingAccount',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='billingAccountId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='billingPeriodName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_expand',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_apply',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_skiptoken',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the usage details based on billingAccountId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Billing/billingAccounts/'),\n          FormattedValue(\n            value=Name(id='billingAccountId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Billing/billingPeriods/'),\n          FormattedValue(\n            value=Name(id='billingPeriodName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Consumption/usageDetails')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='billingAccountId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: billingAccountId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='billingPeriodName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: billingPeriodName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_expand', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$expand'),\n              ctx=Store())],\n          value=Name(id='_expand', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_apply', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$apply'),\n              ctx=Store())],\n          value=Name(id='_apply', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_skiptoken', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$skiptoken'),\n              ctx=Store())],\n          value=Name(id='_skiptoken', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='UsageDetails_ListForBillingPeriodByBillingAccount')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the usage details based on billingAccountId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.'))])],\n  type_params=[])",
    "UsageDetails_ListByDepartment": "FunctionDef(\n  name='UsageDetails_ListByDepartment',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='departmentId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_expand',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_skiptoken',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_apply',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the usage details by departmentId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Billing/departments/'),\n          FormattedValue(\n            value=Name(id='departmentId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Consumption/usageDetails')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='departmentId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: departmentId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_expand', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$expand'),\n              ctx=Store())],\n          value=Name(id='_expand', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_skiptoken', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$skiptoken'),\n              ctx=Store())],\n          value=Name(id='_skiptoken', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_apply', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$apply'),\n              ctx=Store())],\n          value=Name(id='_apply', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='UsageDetails_ListByDepartment')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the usage details by departmentId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.'))])],\n  type_params=[])",
    "UsageDetails_ListForBillingPeriodByDepartment": "FunctionDef(\n  name='UsageDetails_ListForBillingPeriodByDepartment',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='departmentId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='billingPeriodName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_expand',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_apply',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_skiptoken',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the usage details based on departmentId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Billing/departments/'),\n          FormattedValue(\n            value=Name(id='departmentId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Billing/billingPeriods/'),\n          FormattedValue(\n            value=Name(id='billingPeriodName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Consumption/usageDetails')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='departmentId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: departmentId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='billingPeriodName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: billingPeriodName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_expand', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$expand'),\n              ctx=Store())],\n          value=Name(id='_expand', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_apply', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$apply'),\n              ctx=Store())],\n          value=Name(id='_apply', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_skiptoken', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$skiptoken'),\n              ctx=Store())],\n          value=Name(id='_skiptoken', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='UsageDetails_ListForBillingPeriodByDepartment')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the usage details based on departmentId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.'))])],\n  type_params=[])",
    "UsageDetails_ListByEnrollmentAccount": "FunctionDef(\n  name='UsageDetails_ListByEnrollmentAccount',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='enrollmentAccountId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_expand',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_skiptoken',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_apply',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the usage details by enrollmentAccountId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Billing/enrollmentAccounts/'),\n          FormattedValue(\n            value=Name(id='enrollmentAccountId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Consumption/usageDetails')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='enrollmentAccountId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: enrollmentAccountId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_expand', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$expand'),\n              ctx=Store())],\n          value=Name(id='_expand', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_skiptoken', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$skiptoken'),\n              ctx=Store())],\n          value=Name(id='_skiptoken', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_apply', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$apply'),\n              ctx=Store())],\n          value=Name(id='_apply', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='UsageDetails_ListByEnrollmentAccount')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the usage details by enrollmentAccountId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.'))])],\n  type_params=[])",
    "UsageDetails_ListForBillingPeriodByEnrollmentAccount": "FunctionDef(\n  name='UsageDetails_ListForBillingPeriodByEnrollmentAccount',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='enrollmentAccountId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='billingPeriodName',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='_expand',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_apply',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_skiptoken',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_top',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists the usage details based on enrollmentAccountId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Billing/enrollmentAccounts/'),\n          FormattedValue(\n            value=Name(id='enrollmentAccountId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Billing/billingPeriods/'),\n          FormattedValue(\n            value=Name(id='billingPeriodName', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Consumption/usageDetails')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='enrollmentAccountId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: enrollmentAccountId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='billingPeriodName', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: billingPeriodName')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_expand', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$expand'),\n              ctx=Store())],\n          value=Name(id='_expand', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_apply', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$apply'),\n              ctx=Store())],\n          value=Name(id='_apply', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_skiptoken', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$skiptoken'),\n              ctx=Store())],\n          value=Name(id='_skiptoken', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_top', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$top'),\n              ctx=Store())],\n          value=Name(id='_top', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='UsageDetails_ListForBillingPeriodByEnrollmentAccount')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists the usage details based on enrollmentAccountId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.'))])],\n  type_params=[])",
    "Operations_List": "FunctionDef(\n  name='Operations_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Lists all of the available consumption REST API operations.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Consumption/operations')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    Assign(\n      targets=[\n        Name(id='auth_satisfied', ctx=Store())],\n      value=Constant(value=False)),\n    Assign(\n      targets=[\n        Name(id='auth_error_msgs', ctx=Store())],\n      value=List(elts=[], ctx=Load())),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Try(\n          body=[\n            Assign(\n              targets=[\n                Name(id='access_token', ctx=Store())],\n              value=Call(\n                func=Attribute(\n                  value=Name(id='os', ctx=Load()),\n                  attr='getenv',\n                  ctx=Load()),\n                args=[\n                  Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                keywords=[])),\n            If(\n              test=UnaryOp(\n                op=Not(),\n                operand=Name(id='access_token', ctx=Load())),\n              body=[\n                Raise(\n                  exc=Call(\n                    func=Name(id='ValueError', ctx=Load()),\n                    args=[\n                      Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')],\n                    keywords=[]))],\n              orelse=[]),\n            Assign(\n              targets=[\n                Subscript(\n                  value=Name(id='headers', ctx=Load()),\n                  slice=Constant(value='Authorization'),\n                  ctx=Store())],\n              value=JoinedStr(\n                values=[\n                  Constant(value='Bearer '),\n                  FormattedValue(\n                    value=Name(id='access_token', ctx=Load()),\n                    conversion=-1)])),\n            Assign(\n              targets=[\n                Name(id='auth_satisfied', ctx=Store())],\n              value=Constant(value=True))],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='auth_error_msgs', ctx=Load()),\n                      attr='append',\n                      ctx=Load()),\n                    args=[\n                      Call(\n                        func=Name(id='str', ctx=Load()),\n                        args=[\n                          Name(id='e', ctx=Load())],\n                        keywords=[])],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=UnaryOp(\n        op=Not(),\n        operand=Name(id='auth_satisfied', ctx=Load())),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              BinOp(\n                left=Constant(value='No valid authentication found. Details: '),\n                op=Add(),\n                right=Call(\n                  func=Attribute(\n                    value=Constant(value='; '),\n                    attr='join',\n                    ctx=Load()),\n                  args=[\n                    Name(id='auth_error_msgs', ctx=Load())],\n                  keywords=[]))],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Operations_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Lists all of the available consumption REST API operations.'))])],\n  type_params=[])"
  }
}