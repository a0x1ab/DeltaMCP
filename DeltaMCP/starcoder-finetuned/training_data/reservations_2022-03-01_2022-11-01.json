{
  "oasdiff": {
    "extensions": {
      "modified": {
        "definitions": [
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Url to get the next page of reservations",
                  "type": "string"
                },
                "value": {
                  "items": {
                    "description": "Reservation resource Id. \"/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}\"",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedReservationList"
          },
          {
            "oldValue": {
              "properties": {
                "id": {
                  "description": "Identifier of the applied reservations",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "Name of resource",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "reservationOrderIds": {
                      "properties": {
                        "nextLink": {
                          "description": "Url to get the next page of reservations",
                          "type": "string"
                        },
                        "value": {
                          "items": {
                            "description": "Reservation resource Id. \"/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}\"",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "description": "Type of resource. \"Microsoft.Capacity/AppliedReservations\"",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedReservations"
          },
          {
            "oldValue": {
              "properties": {
                "reservationOrderIds": {
                  "properties": {
                    "nextLink": {
                      "description": "Url to get the next page of reservations",
                      "type": "string"
                    },
                    "value": {
                      "items": {
                        "description": "Reservation resource Id. \"/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}\"",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedReservationsProperties"
          },
          {
            "oldValue": {
              "properties": {
                "displayName": {
                  "description": "Management group display name",
                  "type": "string"
                },
                "managementGroupId": {
                  "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                  "type": "string"
                },
                "tenantId": {
                  "description": "Tenant ID of the applied scope type",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedScopeProperties"
          },
          {
            "oldValue": {
              "description": "Type of the Applied Scope.",
              "enum": [
                "Single",
                "Shared"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "AppliedScopeType"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedScopeType"
          },
          {
            "oldValue": {
              "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
              "items": {
                "maxItems": 1,
                "minItems": 1,
                "type": "string"
              },
              "type": "array"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AppliedScopes"
          },
          {
            "oldValue": {
              "properties": {
                "properties": {
                  "properties": {
                    "scopes": {
                      "items": {
                        "properties": {
                          "scope": {
                            "type": "string"
                          },
                          "valid": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AvailableScopeProperties"
          },
          {
            "oldValue": {
              "description": "Available scope",
              "properties": {
                "properties": {
                  "description": "Available scope request properties",
                  "properties": {
                    "scopes": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AvailableScopeRequest"
          },
          {
            "oldValue": {
              "description": "Available scope request properties",
              "properties": {
                "scopes": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/AvailableScopeRequestProperties"
          },
          {
            "oldValue": {
              "description": "billing information",
              "properties": {
                "billingCurrencyProratedAmount": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "billingCurrencyRemainingCommitmentAmount": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "billingCurrencyTotalPaidAmount": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/BillingInformation"
          },
          {
            "oldValue": {
              "description": "Subscription that will be charged for purchasing Reservation",
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/BillingScopeId"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "eTag": {
                      "description": "eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.",
                      "type": "string"
                    },
                    "id": {
                      "description": "Resource Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "A budget resource.",
              "properties": {
                "properties": {
                  "description": "The properties of the budget.",
                  "properties": {
                    "amount": {
                      "description": "The total amount of cost to track with the budget",
                      "format": "decimal",
                      "type": "number"
                    },
                    "category": {
                      "description": "The category of the budget, whether the budget tracks cost or usage.",
                      "enum": [
                        "Cost",
                        "Usage"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "CategoryType"
                      }
                    },
                    "currentSpend": {
                      "description": "The current amount of cost which is being tracked for a budget.",
                      "properties": {
                        "amount": {
                          "description": "The total amount of cost which is being tracked by the budget.",
                          "format": "decimal",
                          "readOnly": true,
                          "type": "number"
                        },
                        "unit": {
                          "description": "The unit of measure for the budget amount.",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "filters": {
                      "description": "May be used to filter budgets by resource group, resource, or meter.",
                      "properties": {
                        "meters": {
                          "description": "The list of filters on meters, mandatory for budgets of usage category. ",
                          "items": {
                            "type": "string"
                          },
                          "maxItems": 10,
                          "minItems": 0,
                          "type": "array"
                        },
                        "resourceGroups": {
                          "description": "The list of filters on resource groups, allowed at subscription level only.",
                          "items": {
                            "type": "string"
                          },
                          "maxItems": 10,
                          "minItems": 0,
                          "type": "array"
                        },
                        "resources": {
                          "description": "The list of filters on resources.",
                          "items": {
                            "type": "string"
                          },
                          "maxItems": 10,
                          "minItems": 0,
                          "type": "array"
                        }
                      }
                    },
                    "notifications": {
                      "additionalProperties": {
                        "description": "The notification associated with a budget.",
                        "properties": {
                          "contactEmails": {
                            "description": "Email addresses to send the budget notification to when the threshold is exceeded.",
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 50,
                            "minItems": 1,
                            "type": "array"
                          },
                          "contactGroups": {
                            "description": "Action groups to send the budget notification to when the threshold is exceeded.",
                            "items": {
                              "type": "string"
                            },
                            "maxItems": 50,
                            "minItems": 0,
                            "type": "array"
                          },
                          "contactRoles": {
                            "description": "Contact roles to send the budget notification to when the threshold is exceeded.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "enabled": {
                            "description": "The notification is enabled or not.",
                            "type": "boolean"
                          },
                          "operator": {
                            "description": "The comparison operator.",
                            "enum": [
                              "EqualTo",
                              "GreaterThan",
                              "GreaterThanOrEqualTo"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "OperatorType"
                            }
                          },
                          "threshold": {
                            "description": "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.",
                            "format": "decimal",
                            "type": "number"
                          }
                        },
                        "required": [
                          "enabled",
                          "operator",
                          "threshold",
                          "contactEmails"
                        ]
                      },
                      "description": "Dictionary of notifications associated with the budget. Budget can have up to five notifications.",
                      "maxItems": 5,
                      "type": "object"
                    },
                    "timeGrain": {
                      "description": "The time covered by a budget. Tracking of the amount will be reset based on the time grain.",
                      "enum": [
                        "Monthly",
                        "Quarterly",
                        "Annually"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "TimeGrainType"
                      }
                    },
                    "timePeriod": {
                      "description": "The start and end date for a budget.",
                      "properties": {
                        "endDate": {
                          "description": "The end date for the budget. If not provided, we default this to 10 years from the start date.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "startDate": {
                          "description": "The start date for the budget.",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "required": [
                        "startDate"
                      ]
                    }
                  },
                  "required": [
                    "category",
                    "amount",
                    "timeGrain",
                    "timePeriod"
                  ]
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/Budget"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The properties of the budget.",
              "properties": {
                "amount": {
                  "description": "The total amount of cost to track with the budget",
                  "format": "decimal",
                  "type": "number"
                },
                "category": {
                  "description": "The category of the budget, whether the budget tracks cost or usage.",
                  "enum": [
                    "Cost",
                    "Usage"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "CategoryType"
                  }
                },
                "currentSpend": {
                  "description": "The current amount of cost which is being tracked for a budget.",
                  "properties": {
                    "amount": {
                      "description": "The total amount of cost which is being tracked by the budget.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "unit": {
                      "description": "The unit of measure for the budget amount.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "filters": {
                  "description": "May be used to filter budgets by resource group, resource, or meter.",
                  "properties": {
                    "meters": {
                      "description": "The list of filters on meters, mandatory for budgets of usage category. ",
                      "items": {
                        "type": "string"
                      },
                      "maxItems": 10,
                      "minItems": 0,
                      "type": "array"
                    },
                    "resourceGroups": {
                      "description": "The list of filters on resource groups, allowed at subscription level only.",
                      "items": {
                        "type": "string"
                      },
                      "maxItems": 10,
                      "minItems": 0,
                      "type": "array"
                    },
                    "resources": {
                      "description": "The list of filters on resources.",
                      "items": {
                        "type": "string"
                      },
                      "maxItems": 10,
                      "minItems": 0,
                      "type": "array"
                    }
                  }
                },
                "notifications": {
                  "additionalProperties": {
                    "description": "The notification associated with a budget.",
                    "properties": {
                      "contactEmails": {
                        "description": "Email addresses to send the budget notification to when the threshold is exceeded.",
                        "items": {
                          "type": "string"
                        },
                        "maxItems": 50,
                        "minItems": 1,
                        "type": "array"
                      },
                      "contactGroups": {
                        "description": "Action groups to send the budget notification to when the threshold is exceeded.",
                        "items": {
                          "type": "string"
                        },
                        "maxItems": 50,
                        "minItems": 0,
                        "type": "array"
                      },
                      "contactRoles": {
                        "description": "Contact roles to send the budget notification to when the threshold is exceeded.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "enabled": {
                        "description": "The notification is enabled or not.",
                        "type": "boolean"
                      },
                      "operator": {
                        "description": "The comparison operator.",
                        "enum": [
                          "EqualTo",
                          "GreaterThan",
                          "GreaterThanOrEqualTo"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "OperatorType"
                        }
                      },
                      "threshold": {
                        "description": "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.",
                        "format": "decimal",
                        "type": "number"
                      }
                    },
                    "required": [
                      "enabled",
                      "operator",
                      "threshold",
                      "contactEmails"
                    ]
                  },
                  "description": "Dictionary of notifications associated with the budget. Budget can have up to five notifications.",
                  "maxItems": 5,
                  "type": "object"
                },
                "timeGrain": {
                  "description": "The time covered by a budget. Tracking of the amount will be reset based on the time grain.",
                  "enum": [
                    "Monthly",
                    "Quarterly",
                    "Annually"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "TimeGrainType"
                  }
                },
                "timePeriod": {
                  "description": "The start and end date for a budget.",
                  "properties": {
                    "endDate": {
                      "description": "The end date for the budget. If not provided, we default this to 10 years from the start date.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "startDate": {
                      "description": "The start date for the budget.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "required": [
                    "startDate"
                  ]
                }
              },
              "required": [
                "category",
                "amount",
                "timeGrain",
                "timePeriod"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/BudgetProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The start and end date for a budget.",
              "properties": {
                "endDate": {
                  "description": "The end date for the budget. If not provided, we default this to 10 years from the start date.",
                  "format": "date-time",
                  "type": "string"
                },
                "startDate": {
                  "description": "The start date for the budget.",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "startDate"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/BudgetTimePeriod"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Result of listing budgets. It contains a list of available budgets in the scope provided.",
              "properties": {
                "nextLink": {
                  "description": "The link (url) to the next page of results.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "The list of budgets.",
                  "items": {
                    "allOf": [
                      {
                        "description": "The Resource model definition.",
                        "properties": {
                          "eTag": {
                            "description": "eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.",
                            "type": "string"
                          },
                          "id": {
                            "description": "Resource Id.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "A budget resource.",
                    "properties": {
                      "properties": {
                        "description": "The properties of the budget.",
                        "properties": {
                          "amount": {
                            "description": "The total amount of cost to track with the budget",
                            "format": "decimal",
                            "type": "number"
                          },
                          "category": {
                            "description": "The category of the budget, whether the budget tracks cost or usage.",
                            "enum": [
                              "Cost",
                              "Usage"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "CategoryType"
                            }
                          },
                          "currentSpend": {
                            "description": "The current amount of cost which is being tracked for a budget.",
                            "properties": {
                              "amount": {
                                "description": "The total amount of cost which is being tracked by the budget.",
                                "format": "decimal",
                                "readOnly": true,
                                "type": "number"
                              },
                              "unit": {
                                "description": "The unit of measure for the budget amount.",
                                "readOnly": true,
                                "type": "string"
                              }
                            }
                          },
                          "filters": {
                            "description": "May be used to filter budgets by resource group, resource, or meter.",
                            "properties": {
                              "meters": {
                                "description": "The list of filters on meters, mandatory for budgets of usage category. ",
                                "items": {
                                  "type": "string"
                                },
                                "maxItems": 10,
                                "minItems": 0,
                                "type": "array"
                              },
                              "resourceGroups": {
                                "description": "The list of filters on resource groups, allowed at subscription level only.",
                                "items": {
                                  "type": "string"
                                },
                                "maxItems": 10,
                                "minItems": 0,
                                "type": "array"
                              },
                              "resources": {
                                "description": "The list of filters on resources.",
                                "items": {
                                  "type": "string"
                                },
                                "maxItems": 10,
                                "minItems": 0,
                                "type": "array"
                              }
                            }
                          },
                          "notifications": {
                            "additionalProperties": {
                              "description": "The notification associated with a budget.",
                              "properties": {
                                "contactEmails": {
                                  "description": "Email addresses to send the budget notification to when the threshold is exceeded.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "maxItems": 50,
                                  "minItems": 1,
                                  "type": "array"
                                },
                                "contactGroups": {
                                  "description": "Action groups to send the budget notification to when the threshold is exceeded.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "maxItems": 50,
                                  "minItems": 0,
                                  "type": "array"
                                },
                                "contactRoles": {
                                  "description": "Contact roles to send the budget notification to when the threshold is exceeded.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "enabled": {
                                  "description": "The notification is enabled or not.",
                                  "type": "boolean"
                                },
                                "operator": {
                                  "description": "The comparison operator.",
                                  "enum": [
                                    "EqualTo",
                                    "GreaterThan",
                                    "GreaterThanOrEqualTo"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "OperatorType"
                                  }
                                },
                                "threshold": {
                                  "description": "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.",
                                  "format": "decimal",
                                  "type": "number"
                                }
                              },
                              "required": [
                                "enabled",
                                "operator",
                                "threshold",
                                "contactEmails"
                              ]
                            },
                            "description": "Dictionary of notifications associated with the budget. Budget can have up to five notifications.",
                            "maxItems": 5,
                            "type": "object"
                          },
                          "timeGrain": {
                            "description": "The time covered by a budget. Tracking of the amount will be reset based on the time grain.",
                            "enum": [
                              "Monthly",
                              "Quarterly",
                              "Annually"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "TimeGrainType"
                            }
                          },
                          "timePeriod": {
                            "description": "The start and end date for a budget.",
                            "properties": {
                              "endDate": {
                                "description": "The end date for the budget. If not provided, we default this to 10 years from the start date.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "startDate": {
                                "description": "The start date for the budget.",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "required": [
                              "startDate"
                            ]
                          }
                        },
                        "required": [
                          "category",
                          "amount",
                          "timeGrain",
                          "timePeriod"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/BudgetsListResult"
          },
          {
            "oldValue": {
              "description": "CalculateExchange operation result",
              "properties": {
                "error": {
                  "description": "Required if status == failed or status == canceled.",
                  "properties": {
                    "code": {
                      "description": "Required if status == failed or status == cancelled. If status == failed, provide an invariant error code used for error troubleshooting, aggregation, and analysis.",
                      "type": "string"
                    },
                    "message": {
                      "description": "Required if status == failed. Localized. If status == failed, provide an actionable error message indicating what error occurred, and what the user can do to address the issue.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "It should match what is used to GET the operation result.",
                  "type": "string"
                },
                "name": {
                  "description": "It must match the last segment of the id field, and will typically be a GUID / system generated value.",
                  "type": "string"
                },
                "properties": {
                  "description": "CalculateExchange response properties",
                  "properties": {
                    "netPayable": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "policyResult": {
                      "description": "Exchange policy errors",
                      "properties": {
                        "policyErrors": {
                          "description": "Exchange Policy errors",
                          "items": {
                            "description": "error details",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "purchasesTotal": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "refundsTotal": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "reservationsToExchange": {
                      "description": "Details of the reservations being returned",
                      "items": {
                        "description": "Reservation refund details",
                        "properties": {
                          "billingInformation": {
                            "description": "billing information",
                            "properties": {
                              "billingCurrencyProratedAmount": {
                                "properties": {
                                  "amount": {
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "billingCurrencyRemainingCommitmentAmount": {
                                "properties": {
                                  "amount": {
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "billingCurrencyTotalPaidAmount": {
                                "properties": {
                                  "amount": {
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "billingRefundAmount": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "quantity": {
                            "description": "Quantity to be returned",
                            "format": "int32",
                            "type": "integer"
                          },
                          "reservationId": {
                            "description": "Fully qualified id of the Reservation being returned.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "reservationsToPurchase": {
                      "description": "Details of the reservations being purchased",
                      "items": {
                        "description": "Reservation purchase details",
                        "properties": {
                          "billingCurrencyTotal": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "properties": {
                            "properties": {
                              "location": {
                                "description": "The Azure Region where the reserved resource lives.",
                                "type": "string"
                              },
                              "properties": {
                                "properties": {
                                  "appliedScopeType": {
                                    "description": "Type of the Applied Scope.",
                                    "enum": [
                                      "Single",
                                      "Shared"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "AppliedScopeType"
                                    }
                                  },
                                  "appliedScopes": {
                                    "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                    "items": {
                                      "maxItems": 1,
                                      "minItems": 1,
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "billingPlan": {
                                    "description": "Represent the billing plans.",
                                    "enum": [
                                      "Upfront",
                                      "Monthly"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservationBillingPlan"
                                    }
                                  },
                                  "billingScopeId": {
                                    "description": "Subscription that will be charged for purchasing Reservation",
                                    "type": "string"
                                  },
                                  "displayName": {
                                    "description": "Friendly name of the Reservation",
                                    "type": "string"
                                  },
                                  "quantity": {
                                    "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "renew": {
                                    "default": false,
                                    "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                    "type": "boolean"
                                  },
                                  "reservedResourceProperties": {
                                    "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                    "properties": {
                                      "instanceFlexibility": {
                                        "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                        "enum": [
                                          "On",
                                          "Off"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "InstanceFlexibility"
                                        }
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "reservedResourceType": {
                                    "description": "The type of the resource that is being reserved.",
                                    "enum": [
                                      "VirtualMachines",
                                      "SqlDatabases",
                                      "SuseLinux",
                                      "CosmosDb",
                                      "RedHat",
                                      "SqlDataWarehouse",
                                      "VMwareCloudSimple",
                                      "RedHatOsa",
                                      "Databricks",
                                      "AppService",
                                      "ManagedDisk",
                                      "BlockBlob",
                                      "RedisCache",
                                      "AzureDataExplorer",
                                      "MySql",
                                      "MariaDb",
                                      "PostgreSql",
                                      "DedicatedHost",
                                      "SapHana",
                                      "SqlAzureHybridBenefit",
                                      "AVS",
                                      "DataFactory",
                                      "NetAppStorage",
                                      "AzureFiles",
                                      "SqlEdge",
                                      "VirtualMachineSoftware"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservedResourceType"
                                    }
                                  },
                                  "term": {
                                    "description": "Represent the term of Reservation.",
                                    "enum": [
                                      "P1Y",
                                      "P3Y",
                                      "P5Y"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservationTerm"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "sku": {
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "sessionId": {
                      "description": "Exchange session identifier",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "status": {
                  "description": "Status of the operation.",
                  "enum": [
                    "Succeeded",
                    "Failed",
                    "Cancelled",
                    "Pending"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "CalculateExchangeOperationResultStatus"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CalculateExchangeOperationResultResponse"
          },
          {
            "oldValue": {
              "description": "Calculate exchange request",
              "properties": {
                "properties": {
                  "description": "Calculate exchange request properties",
                  "properties": {
                    "reservationsToExchange": {
                      "description": "List of reservations that are being returned in this exchange.",
                      "items": {
                        "description": "Reservation to return",
                        "properties": {
                          "quantity": {
                            "description": "Quantity to be returned. Must be greater than zero.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "reservationId": {
                            "description": "Fully qualified identifier of the Reservation being returned",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "reservationsToPurchase": {
                      "description": "List of reservations that are being purchased in this exchange.",
                      "items": {
                        "properties": {
                          "location": {
                            "description": "The Azure Region where the reserved resource lives.",
                            "type": "string"
                          },
                          "properties": {
                            "properties": {
                              "appliedScopeType": {
                                "description": "Type of the Applied Scope.",
                                "enum": [
                                  "Single",
                                  "Shared"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "AppliedScopeType"
                                }
                              },
                              "appliedScopes": {
                                "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                "items": {
                                  "maxItems": 1,
                                  "minItems": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "billingPlan": {
                                "description": "Represent the billing plans.",
                                "enum": [
                                  "Upfront",
                                  "Monthly"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationBillingPlan"
                                }
                              },
                              "billingScopeId": {
                                "description": "Subscription that will be charged for purchasing Reservation",
                                "type": "string"
                              },
                              "displayName": {
                                "description": "Friendly name of the Reservation",
                                "type": "string"
                              },
                              "quantity": {
                                "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "renew": {
                                "default": false,
                                "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                "type": "boolean"
                              },
                              "reservedResourceProperties": {
                                "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                "properties": {
                                  "instanceFlexibility": {
                                    "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                    "enum": [
                                      "On",
                                      "Off"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "InstanceFlexibility"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "reservedResourceType": {
                                "description": "The type of the resource that is being reserved.",
                                "enum": [
                                  "VirtualMachines",
                                  "SqlDatabases",
                                  "SuseLinux",
                                  "CosmosDb",
                                  "RedHat",
                                  "SqlDataWarehouse",
                                  "VMwareCloudSimple",
                                  "RedHatOsa",
                                  "Databricks",
                                  "AppService",
                                  "ManagedDisk",
                                  "BlockBlob",
                                  "RedisCache",
                                  "AzureDataExplorer",
                                  "MySql",
                                  "MariaDb",
                                  "PostgreSql",
                                  "DedicatedHost",
                                  "SapHana",
                                  "SqlAzureHybridBenefit",
                                  "AVS",
                                  "DataFactory",
                                  "NetAppStorage",
                                  "AzureFiles",
                                  "SqlEdge",
                                  "VirtualMachineSoftware"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservedResourceType"
                                }
                              },
                              "term": {
                                "description": "Represent the term of Reservation.",
                                "enum": [
                                  "P1Y",
                                  "P3Y",
                                  "P5Y"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationTerm"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "sku": {
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CalculateExchangeRequest"
          },
          {
            "oldValue": {
              "description": "Calculate exchange request properties",
              "properties": {
                "reservationsToExchange": {
                  "description": "List of reservations that are being returned in this exchange.",
                  "items": {
                    "description": "Reservation to return",
                    "properties": {
                      "quantity": {
                        "description": "Quantity to be returned. Must be greater than zero.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "reservationId": {
                        "description": "Fully qualified identifier of the Reservation being returned",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "reservationsToPurchase": {
                  "description": "List of reservations that are being purchased in this exchange.",
                  "items": {
                    "properties": {
                      "location": {
                        "description": "The Azure Region where the reserved resource lives.",
                        "type": "string"
                      },
                      "properties": {
                        "properties": {
                          "appliedScopeType": {
                            "description": "Type of the Applied Scope.",
                            "enum": [
                              "Single",
                              "Shared"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "AppliedScopeType"
                            }
                          },
                          "appliedScopes": {
                            "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                            "items": {
                              "maxItems": 1,
                              "minItems": 1,
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "billingPlan": {
                            "description": "Represent the billing plans.",
                            "enum": [
                              "Upfront",
                              "Monthly"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationBillingPlan"
                            }
                          },
                          "billingScopeId": {
                            "description": "Subscription that will be charged for purchasing Reservation",
                            "type": "string"
                          },
                          "displayName": {
                            "description": "Friendly name of the Reservation",
                            "type": "string"
                          },
                          "quantity": {
                            "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "renew": {
                            "default": false,
                            "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                            "type": "boolean"
                          },
                          "reservedResourceProperties": {
                            "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                            "properties": {
                              "instanceFlexibility": {
                                "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                "enum": [
                                  "On",
                                  "Off"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "InstanceFlexibility"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "reservedResourceType": {
                            "description": "The type of the resource that is being reserved.",
                            "enum": [
                              "VirtualMachines",
                              "SqlDatabases",
                              "SuseLinux",
                              "CosmosDb",
                              "RedHat",
                              "SqlDataWarehouse",
                              "VMwareCloudSimple",
                              "RedHatOsa",
                              "Databricks",
                              "AppService",
                              "ManagedDisk",
                              "BlockBlob",
                              "RedisCache",
                              "AzureDataExplorer",
                              "MySql",
                              "MariaDb",
                              "PostgreSql",
                              "DedicatedHost",
                              "SapHana",
                              "SqlAzureHybridBenefit",
                              "AVS",
                              "DataFactory",
                              "NetAppStorage",
                              "AzureFiles",
                              "SqlEdge",
                              "VirtualMachineSoftware"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservedResourceType"
                            }
                          },
                          "term": {
                            "description": "Represent the term of Reservation.",
                            "enum": [
                              "P1Y",
                              "P3Y",
                              "P5Y"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationTerm"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "sku": {
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CalculateExchangeRequestProperties"
          },
          {
            "oldValue": {
              "description": "CalculateExchange response properties",
              "properties": {
                "netPayable": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "policyResult": {
                  "description": "Exchange policy errors",
                  "properties": {
                    "policyErrors": {
                      "description": "Exchange Policy errors",
                      "items": {
                        "description": "error details",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "purchasesTotal": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "refundsTotal": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "reservationsToExchange": {
                  "description": "Details of the reservations being returned",
                  "items": {
                    "description": "Reservation refund details",
                    "properties": {
                      "billingInformation": {
                        "description": "billing information",
                        "properties": {
                          "billingCurrencyProratedAmount": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "billingCurrencyRemainingCommitmentAmount": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "billingCurrencyTotalPaidAmount": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "billingRefundAmount": {
                        "properties": {
                          "amount": {
                            "format": "double",
                            "type": "number"
                          },
                          "currencyCode": {
                            "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "quantity": {
                        "description": "Quantity to be returned",
                        "format": "int32",
                        "type": "integer"
                      },
                      "reservationId": {
                        "description": "Fully qualified id of the Reservation being returned.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "reservationsToPurchase": {
                  "description": "Details of the reservations being purchased",
                  "items": {
                    "description": "Reservation purchase details",
                    "properties": {
                      "billingCurrencyTotal": {
                        "properties": {
                          "amount": {
                            "format": "double",
                            "type": "number"
                          },
                          "currencyCode": {
                            "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "properties": {
                        "properties": {
                          "location": {
                            "description": "The Azure Region where the reserved resource lives.",
                            "type": "string"
                          },
                          "properties": {
                            "properties": {
                              "appliedScopeType": {
                                "description": "Type of the Applied Scope.",
                                "enum": [
                                  "Single",
                                  "Shared"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "AppliedScopeType"
                                }
                              },
                              "appliedScopes": {
                                "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                "items": {
                                  "maxItems": 1,
                                  "minItems": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "billingPlan": {
                                "description": "Represent the billing plans.",
                                "enum": [
                                  "Upfront",
                                  "Monthly"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationBillingPlan"
                                }
                              },
                              "billingScopeId": {
                                "description": "Subscription that will be charged for purchasing Reservation",
                                "type": "string"
                              },
                              "displayName": {
                                "description": "Friendly name of the Reservation",
                                "type": "string"
                              },
                              "quantity": {
                                "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "renew": {
                                "default": false,
                                "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                "type": "boolean"
                              },
                              "reservedResourceProperties": {
                                "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                "properties": {
                                  "instanceFlexibility": {
                                    "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                    "enum": [
                                      "On",
                                      "Off"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "InstanceFlexibility"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "reservedResourceType": {
                                "description": "The type of the resource that is being reserved.",
                                "enum": [
                                  "VirtualMachines",
                                  "SqlDatabases",
                                  "SuseLinux",
                                  "CosmosDb",
                                  "RedHat",
                                  "SqlDataWarehouse",
                                  "VMwareCloudSimple",
                                  "RedHatOsa",
                                  "Databricks",
                                  "AppService",
                                  "ManagedDisk",
                                  "BlockBlob",
                                  "RedisCache",
                                  "AzureDataExplorer",
                                  "MySql",
                                  "MariaDb",
                                  "PostgreSql",
                                  "DedicatedHost",
                                  "SapHana",
                                  "SqlAzureHybridBenefit",
                                  "AVS",
                                  "DataFactory",
                                  "NetAppStorage",
                                  "AzureFiles",
                                  "SqlEdge",
                                  "VirtualMachineSoftware"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservedResourceType"
                                }
                              },
                              "term": {
                                "description": "Represent the term of Reservation.",
                                "enum": [
                                  "P1Y",
                                  "P3Y",
                                  "P5Y"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationTerm"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "sku": {
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "sessionId": {
                  "description": "Exchange session identifier",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CalculateExchangeResponseProperties"
          },
          {
            "oldValue": {
              "properties": {
                "properties": {
                  "properties": {
                    "billingCurrencyTotal": {
                      "description": "Currency and amount that customer will be charged in customer's local currency. Tax is not included.",
                      "properties": {
                        "amount": {
                          "description": "Amount in pricing currency. Tax is not included.",
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "grandTotal": {
                      "description": "Total amount in pricing currency.",
                      "format": "double",
                      "type": "number"
                    },
                    "isBillingPartnerManaged": {
                      "description": "True if billing is managed by Microsoft Partner. Used only for CSP accounts.",
                      "type": "boolean"
                    },
                    "isTaxIncluded": {
                      "description": "Whether or not tax is included in grand total",
                      "type": "boolean"
                    },
                    "netTotal": {
                      "description": "Net total amount in pricing currency.",
                      "format": "double",
                      "type": "number"
                    },
                    "paymentSchedule": {
                      "items": {
                        "description": "Information about payment related to a reservation order.",
                        "properties": {
                          "billingAccount": {
                            "description": "Shows the Account that is charged for this payment.",
                            "type": "string"
                          },
                          "billingCurrencyTotal": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "dueDate": {
                            "description": "Date when the payment needs to be done.",
                            "format": "date",
                            "type": "string"
                          },
                          "extendedStatusInfo": {
                            "properties": {
                              "message": {
                                "description": "The message giving detailed information about the status code.",
                                "type": "string"
                              },
                              "statusCode": {
                                "enum": [
                                  "None",
                                  "Pending",
                                  "Processing",
                                  "Active",
                                  "PurchaseError",
                                  "PaymentInstrumentError",
                                  "Split",
                                  "Merged",
                                  "Expired",
                                  "Succeeded"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationStatusCode"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "paymentDate": {
                            "description": "Date when the transaction is completed. Is null when it is scheduled.",
                            "format": "date",
                            "type": "string"
                          },
                          "pricingCurrencyTotal": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "status": {
                            "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Scheduled",
                              "Cancelled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "PaymentStatus"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "pricingCurrencyTotal": {
                      "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included.",
                      "properties": {
                        "amount": {
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "reservationOrderId": {
                      "description": "GUID that represents reservation order that can be placed after calculating price.",
                      "type": "string"
                    },
                    "skuDescription": {
                      "description": "Description of SKU that is being purchased.",
                      "type": "string"
                    },
                    "skuTitle": {
                      "description": "Title of SKU that is being purchased.",
                      "type": "string"
                    },
                    "taxTotal": {
                      "description": "Tax amount in pricing currency.",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CalculatePriceResponse"
          },
          {
            "oldValue": {
              "properties": {
                "billingCurrencyTotal": {
                  "description": "Currency and amount that customer will be charged in customer's local currency. Tax is not included.",
                  "properties": {
                    "amount": {
                      "description": "Amount in pricing currency. Tax is not included.",
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "grandTotal": {
                  "description": "Total amount in pricing currency.",
                  "format": "double",
                  "type": "number"
                },
                "isBillingPartnerManaged": {
                  "description": "True if billing is managed by Microsoft Partner. Used only for CSP accounts.",
                  "type": "boolean"
                },
                "isTaxIncluded": {
                  "description": "Whether or not tax is included in grand total",
                  "type": "boolean"
                },
                "netTotal": {
                  "description": "Net total amount in pricing currency.",
                  "format": "double",
                  "type": "number"
                },
                "paymentSchedule": {
                  "items": {
                    "description": "Information about payment related to a reservation order.",
                    "properties": {
                      "billingAccount": {
                        "description": "Shows the Account that is charged for this payment.",
                        "type": "string"
                      },
                      "billingCurrencyTotal": {
                        "properties": {
                          "amount": {
                            "format": "double",
                            "type": "number"
                          },
                          "currencyCode": {
                            "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "dueDate": {
                        "description": "Date when the payment needs to be done.",
                        "format": "date",
                        "type": "string"
                      },
                      "extendedStatusInfo": {
                        "properties": {
                          "message": {
                            "description": "The message giving detailed information about the status code.",
                            "type": "string"
                          },
                          "statusCode": {
                            "enum": [
                              "None",
                              "Pending",
                              "Processing",
                              "Active",
                              "PurchaseError",
                              "PaymentInstrumentError",
                              "Split",
                              "Merged",
                              "Expired",
                              "Succeeded"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationStatusCode"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "paymentDate": {
                        "description": "Date when the transaction is completed. Is null when it is scheduled.",
                        "format": "date",
                        "type": "string"
                      },
                      "pricingCurrencyTotal": {
                        "properties": {
                          "amount": {
                            "format": "double",
                            "type": "number"
                          },
                          "currencyCode": {
                            "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "status": {
                        "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
                        "enum": [
                          "Succeeded",
                          "Failed",
                          "Scheduled",
                          "Cancelled"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "PaymentStatus"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "pricingCurrencyTotal": {
                  "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included.",
                  "properties": {
                    "amount": {
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "reservationOrderId": {
                  "description": "GUID that represents reservation order that can be placed after calculating price.",
                  "type": "string"
                },
                "skuDescription": {
                  "description": "Description of SKU that is being purchased.",
                  "type": "string"
                },
                "skuTitle": {
                  "description": "Title of SKU that is being purchased.",
                  "type": "string"
                },
                "taxTotal": {
                  "description": "Tax amount in pricing currency.",
                  "format": "double",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CalculatePriceResponseProperties"
          },
          {
            "oldValue": {
              "properties": {
                "id": {
                  "description": "Fully qualified identifier of the reservation order being returned",
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "reservationToReturn": {
                      "description": "Reservation to return",
                      "properties": {
                        "quantity": {
                          "description": "Quantity to be returned. Must be greater than zero.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "reservationId": {
                          "description": "Fully qualified identifier of the Reservation being returned",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "scope": {
                      "description": "The scope of the refund, e.g. Reservation",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CalculateRefundRequest"
          },
          {
            "oldValue": {
              "properties": {
                "reservationToReturn": {
                  "description": "Reservation to return",
                  "properties": {
                    "quantity": {
                      "description": "Quantity to be returned. Must be greater than zero.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "reservationId": {
                      "description": "Fully qualified identifier of the Reservation being returned",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "scope": {
                  "description": "The scope of the refund, e.g. Reservation",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CalculateRefundRequestProperties"
          },
          {
            "oldValue": {
              "properties": {
                "id": {
                  "description": "Fully qualified identifier of the reservation being returned",
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "billingInformation": {
                      "description": "billing information",
                      "properties": {
                        "billingCurrencyProratedAmount": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "billingCurrencyRemainingCommitmentAmount": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "billingCurrencyTotalPaidAmount": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "billingPlan": {
                          "description": "Represent the billing plans.",
                          "enum": [
                            "Upfront",
                            "Monthly"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservationBillingPlan"
                          }
                        },
                        "completedTransactions": {
                          "description": "The number of completed transactions in this reservation's payment",
                          "format": "int32",
                          "type": "integer"
                        },
                        "totalTransactions": {
                          "description": "The number of total transactions in this reservation's payment",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "billingRefundAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "policyResult": {
                      "description": "Refund policy result",
                      "properties": {
                        "properties": {
                          "description": "Refund policy result property",
                          "properties": {
                            "consumedRefundsTotal": {
                              "properties": {
                                "amount": {
                                  "format": "double",
                                  "type": "number"
                                },
                                "currencyCode": {
                                  "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "maxRefundLimit": {
                              "properties": {
                                "amount": {
                                  "format": "double",
                                  "type": "number"
                                },
                                "currencyCode": {
                                  "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "policyErrors": {
                              "description": "Refund Policy errors",
                              "items": {
                                "description": "error details",
                                "properties": {
                                  "code": {
                                    "enum": [
                                      "NotSpecified",
                                      "InternalServerError",
                                      "ServerTimeout",
                                      "AuthorizationFailed",
                                      "BadRequest",
                                      "ClientCertificateThumbprintNotSet",
                                      "InvalidRequestContent",
                                      "OperationFailed",
                                      "HttpMethodNotSupported",
                                      "InvalidRequestUri",
                                      "MissingTenantId",
                                      "InvalidTenantId",
                                      "InvalidReservationOrderId",
                                      "InvalidReservationId",
                                      "ReservationIdNotInReservationOrder",
                                      "ReservationOrderNotFound",
                                      "InvalidSubscriptionId",
                                      "InvalidAccessToken",
                                      "InvalidLocationId",
                                      "UnauthenticatedRequestsThrottled",
                                      "InvalidHealthCheckType",
                                      "Forbidden",
                                      "BillingScopeIdCannotBeChanged",
                                      "AppliedScopesNotAssociatedWithCommerceAccount",
                                      "PatchValuesSameAsExisting",
                                      "RoleAssignmentCreationFailed",
                                      "ReservationOrderCreationFailed",
                                      "ReservationOrderNotEnabled",
                                      "CapacityUpdateScopesFailed",
                                      "UnsupportedReservationTerm",
                                      "ReservationOrderIdAlreadyExists",
                                      "RiskCheckFailed",
                                      "CreateQuoteFailed",
                                      "ActivateQuoteFailed",
                                      "NonsupportedAccountId",
                                      "PaymentInstrumentNotFound",
                                      "MissingAppliedScopesForSingle",
                                      "NoValidReservationsToReRate",
                                      "ReRateOnlyAllowedForEA",
                                      "OperationCannotBePerformedInCurrentState",
                                      "InvalidSingleAppliedScopesCount",
                                      "InvalidFulfillmentRequestParameters",
                                      "NotSupportedCountry",
                                      "InvalidRefundQuantity",
                                      "PurchaseError",
                                      "BillingCustomerInputError",
                                      "BillingPaymentInstrumentSoftError",
                                      "BillingPaymentInstrumentHardError",
                                      "BillingTransientError",
                                      "BillingError",
                                      "FulfillmentConfigurationError",
                                      "FulfillmentOutOfStockError",
                                      "FulfillmentTransientError",
                                      "FulfillmentError",
                                      "CalculatePriceFailed",
                                      "AppliedScopesSameAsExisting",
                                      "SelfServiceRefundNotSupported",
                                      "RefundLimitExceeded"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ErrorResponseCode"
                                    }
                                  },
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array",
                              "x-ms-identifiers": []
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "pricingRefundAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "quantity": {
                      "description": "Quantity to be returned",
                      "format": "int32",
                      "type": "integer"
                    },
                    "sessionId": {
                      "description": "Refund session identifier",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CalculateRefundResponse"
          },
          {
            "oldValue": {
              "properties": {
                "billingPlans": {
                  "additionalProperties": {
                    "items": {
                      "description": "Represent the billing plans.",
                      "enum": [
                        "Upfront",
                        "Monthly"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationBillingPlan"
                      }
                    },
                    "type": "array"
                  },
                  "description": "The billing plan options available for this SKU.",
                  "type": "object"
                },
                "capabilities": {
                  "items": {
                    "properties": {
                      "name": {
                        "description": "An invariant to describe the feature.",
                        "type": "string"
                      },
                      "value": {
                        "description": "An invariant if the feature is measured by quantity.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "locations": {
                  "items": {
                    "description": "The set of locations that the SKU is available. If not specified, the SKU is available in all locations.",
                    "type": "string"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "msrp": {
                  "description": "Pricing information about the SKU",
                  "properties": {
                    "p1Y": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                },
                "name": {
                  "description": "The name of SKU",
                  "readOnly": true,
                  "type": "string"
                },
                "resourceType": {
                  "description": "The type of resource the SKU applies to.",
                  "readOnly": true,
                  "type": "string"
                },
                "restrictions": {
                  "items": {
                    "properties": {
                      "reasonCode": {
                        "description": "The reason for restriction.",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of restrictions.",
                        "type": "string"
                      },
                      "values": {
                        "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "size": {
                  "description": "The size of this SKU",
                  "readOnly": true,
                  "type": "string"
                },
                "skuProperties": {
                  "items": {
                    "properties": {
                      "name": {
                        "description": "An invariant to describe the feature.",
                        "type": "string"
                      },
                      "value": {
                        "description": "An invariant if the feature is measured by quantity.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "terms": {
                  "description": "Available reservation terms for this resource",
                  "items": {
                    "description": "Represent the term of Reservation.",
                    "enum": [
                      "P1Y",
                      "P3Y",
                      "P5Y"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                      "modelAsString": true,
                      "name": "ReservationTerm"
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                },
                "tier": {
                  "description": "The tier of this SKU",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Catalog"
          },
          {
            "oldValue": {
              "properties": {
                "destinationTenantId": {
                  "description": "Tenant id GUID that reservation order is to be transferred to",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ChangeDirectoryRequest"
          },
          {
            "oldValue": {
              "description": "Change directory response",
              "properties": {
                "reservationOrder": {
                  "description": "Change directory result for reservation order or reservation",
                  "properties": {
                    "error": {
                      "description": "Error reason if operation failed. Null otherwise",
                      "type": "string"
                    },
                    "id": {
                      "description": "Identifier of the reservation order or reservation",
                      "type": "string"
                    },
                    "isSucceeded": {
                      "description": "True if change directory operation succeeded on this reservation order or reservation",
                      "type": "boolean"
                    },
                    "name": {
                      "description": "Name of the reservation order or reservation",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "reservations": {
                  "items": {
                    "description": "Change directory result for reservation order or reservation",
                    "properties": {
                      "error": {
                        "description": "Error reason if operation failed. Null otherwise",
                        "type": "string"
                      },
                      "id": {
                        "description": "Identifier of the reservation order or reservation",
                        "type": "string"
                      },
                      "isSucceeded": {
                        "description": "True if change directory operation succeeded on this reservation order or reservation",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Name of the reservation order or reservation",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ChangeDirectoryResponse"
          },
          {
            "oldValue": {
              "description": "Change directory result for reservation order or reservation",
              "properties": {
                "error": {
                  "description": "Error reason if operation failed. Null otherwise",
                  "type": "string"
                },
                "id": {
                  "description": "Identifier of the reservation order or reservation",
                  "type": "string"
                },
                "isSucceeded": {
                  "description": "True if change directory operation succeeded on this reservation order or reservation",
                  "type": "boolean"
                },
                "name": {
                  "description": "Name of the reservation order or reservation",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ChangeDirectoryResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The current amount of cost which is being tracked for a budget.",
              "properties": {
                "amount": {
                  "description": "The total amount of cost which is being tracked by the budget.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "unit": {
                  "description": "The unit of measure for the budget amount.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/CurrentSpend"
          },
          {
            "oldValue": {
              "description": "Represent the current display state of the Reservation.",
              "enum": [
                "Succeeded",
                "Expiring",
                "Expired",
                "Pending",
                "Processing",
                "Cancelled",
                "Failed"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "DisplayProvisioningState"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/DisplayProvisioningState"
          },
          {
            "oldValue": {
              "properties": {
                "error": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NotSpecified",
                        "InternalServerError",
                        "ServerTimeout",
                        "AuthorizationFailed",
                        "BadRequest",
                        "ClientCertificateThumbprintNotSet",
                        "InvalidRequestContent",
                        "OperationFailed",
                        "HttpMethodNotSupported",
                        "InvalidRequestUri",
                        "MissingTenantId",
                        "InvalidTenantId",
                        "InvalidReservationOrderId",
                        "InvalidReservationId",
                        "ReservationIdNotInReservationOrder",
                        "ReservationOrderNotFound",
                        "InvalidSubscriptionId",
                        "InvalidAccessToken",
                        "InvalidLocationId",
                        "UnauthenticatedRequestsThrottled",
                        "InvalidHealthCheckType",
                        "Forbidden",
                        "BillingScopeIdCannotBeChanged",
                        "AppliedScopesNotAssociatedWithCommerceAccount",
                        "PatchValuesSameAsExisting",
                        "RoleAssignmentCreationFailed",
                        "ReservationOrderCreationFailed",
                        "ReservationOrderNotEnabled",
                        "CapacityUpdateScopesFailed",
                        "UnsupportedReservationTerm",
                        "ReservationOrderIdAlreadyExists",
                        "RiskCheckFailed",
                        "CreateQuoteFailed",
                        "ActivateQuoteFailed",
                        "NonsupportedAccountId",
                        "PaymentInstrumentNotFound",
                        "MissingAppliedScopesForSingle",
                        "NoValidReservationsToReRate",
                        "ReRateOnlyAllowedForEA",
                        "OperationCannotBePerformedInCurrentState",
                        "InvalidSingleAppliedScopesCount",
                        "InvalidFulfillmentRequestParameters",
                        "NotSupportedCountry",
                        "InvalidRefundQuantity",
                        "PurchaseError",
                        "BillingCustomerInputError",
                        "BillingPaymentInstrumentSoftError",
                        "BillingPaymentInstrumentHardError",
                        "BillingTransientError",
                        "BillingError",
                        "FulfillmentConfigurationError",
                        "FulfillmentOutOfStockError",
                        "FulfillmentTransientError",
                        "FulfillmentError",
                        "CalculatePriceFailed",
                        "AppliedScopesSameAsExisting",
                        "SelfServiceRefundNotSupported",
                        "RefundLimitExceeded"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ErrorResponseCode"
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Error"
          },
          {
            "oldValue": {
              "description": "The target of the particular error.",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ErrorDetails/properties/target"
          },
          {
            "oldValue": "object",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ErrorDetails/type"
          },
          {
            "oldValue": {
              "description": "The target of the particular error.",
              "readOnly": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ErrorResponse/properties/error/properties/target"
          },
          {
            "oldValue": "object",
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ErrorResponse/properties/error/type"
          },
          {
            "oldValue": {
              "enum": [
                "NotSpecified",
                "InternalServerError",
                "ServerTimeout",
                "AuthorizationFailed",
                "BadRequest",
                "ClientCertificateThumbprintNotSet",
                "InvalidRequestContent",
                "OperationFailed",
                "HttpMethodNotSupported",
                "InvalidRequestUri",
                "MissingTenantId",
                "InvalidTenantId",
                "InvalidReservationOrderId",
                "InvalidReservationId",
                "ReservationIdNotInReservationOrder",
                "ReservationOrderNotFound",
                "InvalidSubscriptionId",
                "InvalidAccessToken",
                "InvalidLocationId",
                "UnauthenticatedRequestsThrottled",
                "InvalidHealthCheckType",
                "Forbidden",
                "BillingScopeIdCannotBeChanged",
                "AppliedScopesNotAssociatedWithCommerceAccount",
                "PatchValuesSameAsExisting",
                "RoleAssignmentCreationFailed",
                "ReservationOrderCreationFailed",
                "ReservationOrderNotEnabled",
                "CapacityUpdateScopesFailed",
                "UnsupportedReservationTerm",
                "ReservationOrderIdAlreadyExists",
                "RiskCheckFailed",
                "CreateQuoteFailed",
                "ActivateQuoteFailed",
                "NonsupportedAccountId",
                "PaymentInstrumentNotFound",
                "MissingAppliedScopesForSingle",
                "NoValidReservationsToReRate",
                "ReRateOnlyAllowedForEA",
                "OperationCannotBePerformedInCurrentState",
                "InvalidSingleAppliedScopesCount",
                "InvalidFulfillmentRequestParameters",
                "NotSupportedCountry",
                "InvalidRefundQuantity",
                "PurchaseError",
                "BillingCustomerInputError",
                "BillingPaymentInstrumentSoftError",
                "BillingPaymentInstrumentHardError",
                "BillingTransientError",
                "BillingError",
                "FulfillmentConfigurationError",
                "FulfillmentOutOfStockError",
                "FulfillmentTransientError",
                "FulfillmentError",
                "CalculatePriceFailed",
                "AppliedScopesSameAsExisting",
                "SelfServiceRefundNotSupported",
                "RefundLimitExceeded"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ErrorResponseCode"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ErrorResponseCode"
          },
          {
            "oldValue": {
              "description": "Exchange operation result",
              "properties": {
                "error": {
                  "description": "Required if status == failed or status == canceled.",
                  "properties": {
                    "code": {
                      "description": "Required if status == failed or status == cancelled. If status == failed, provide an invariant error code used for error troubleshooting, aggregation, and analysis.",
                      "type": "string"
                    },
                    "message": {
                      "description": "Required if status == failed. Localized. If status == failed, provide an actionable error message indicating what error occurred, and what the user can do to address the issue.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "It should match what is used to GET the operation result.",
                  "type": "string"
                },
                "name": {
                  "description": "It must match the last segment of the id field, and will typically be a GUID / system generated value.",
                  "type": "string"
                },
                "properties": {
                  "description": "Exchange response properties",
                  "properties": {
                    "netPayable": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "policyResult": {
                      "description": "Exchange policy errors",
                      "properties": {
                        "policyErrors": {
                          "description": "Exchange Policy errors",
                          "items": {
                            "description": "error details",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "purchasesTotal": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "refundsTotal": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "reservationsToExchange": {
                      "description": "Details of the reservations being returned",
                      "items": {
                        "description": "Reservation refund details",
                        "properties": {
                          "billingInformation": {
                            "description": "billing information",
                            "properties": {
                              "billingCurrencyProratedAmount": {
                                "properties": {
                                  "amount": {
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "billingCurrencyRemainingCommitmentAmount": {
                                "properties": {
                                  "amount": {
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "billingCurrencyTotalPaidAmount": {
                                "properties": {
                                  "amount": {
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "billingRefundAmount": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "quantity": {
                            "description": "Quantity to be returned",
                            "format": "int32",
                            "type": "integer"
                          },
                          "reservationId": {
                            "description": "Fully qualified id of the Reservation being returned.",
                            "type": "string"
                          },
                          "status": {
                            "description": "Status of the individual operation.",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Cancelled",
                              "Pending"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "OperationStatus"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "reservationsToPurchase": {
                      "description": "Details of the reservations being purchased",
                      "items": {
                        "description": "Reservation purchase details",
                        "properties": {
                          "billingCurrencyTotal": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "properties": {
                            "properties": {
                              "location": {
                                "description": "The Azure Region where the reserved resource lives.",
                                "type": "string"
                              },
                              "properties": {
                                "properties": {
                                  "appliedScopeType": {
                                    "description": "Type of the Applied Scope.",
                                    "enum": [
                                      "Single",
                                      "Shared"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "AppliedScopeType"
                                    }
                                  },
                                  "appliedScopes": {
                                    "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                    "items": {
                                      "maxItems": 1,
                                      "minItems": 1,
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "billingPlan": {
                                    "description": "Represent the billing plans.",
                                    "enum": [
                                      "Upfront",
                                      "Monthly"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservationBillingPlan"
                                    }
                                  },
                                  "billingScopeId": {
                                    "description": "Subscription that will be charged for purchasing Reservation",
                                    "type": "string"
                                  },
                                  "displayName": {
                                    "description": "Friendly name of the Reservation",
                                    "type": "string"
                                  },
                                  "quantity": {
                                    "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "renew": {
                                    "default": false,
                                    "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                    "type": "boolean"
                                  },
                                  "reservedResourceProperties": {
                                    "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                    "properties": {
                                      "instanceFlexibility": {
                                        "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                        "enum": [
                                          "On",
                                          "Off"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "InstanceFlexibility"
                                        }
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "reservedResourceType": {
                                    "description": "The type of the resource that is being reserved.",
                                    "enum": [
                                      "VirtualMachines",
                                      "SqlDatabases",
                                      "SuseLinux",
                                      "CosmosDb",
                                      "RedHat",
                                      "SqlDataWarehouse",
                                      "VMwareCloudSimple",
                                      "RedHatOsa",
                                      "Databricks",
                                      "AppService",
                                      "ManagedDisk",
                                      "BlockBlob",
                                      "RedisCache",
                                      "AzureDataExplorer",
                                      "MySql",
                                      "MariaDb",
                                      "PostgreSql",
                                      "DedicatedHost",
                                      "SapHana",
                                      "SqlAzureHybridBenefit",
                                      "AVS",
                                      "DataFactory",
                                      "NetAppStorage",
                                      "AzureFiles",
                                      "SqlEdge",
                                      "VirtualMachineSoftware"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservedResourceType"
                                    }
                                  },
                                  "term": {
                                    "description": "Represent the term of Reservation.",
                                    "enum": [
                                      "P1Y",
                                      "P3Y",
                                      "P5Y"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservationTerm"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "sku": {
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "reservationId": {
                            "description": "Fully qualified id of the Reservation being purchased. This value is only guaranteed to be non-null if the purchase is successful.",
                            "type": "string"
                          },
                          "reservationOrderId": {
                            "description": "Fully qualified id of the ReservationOrder being purchased",
                            "type": "string"
                          },
                          "status": {
                            "description": "Status of the individual operation.",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Cancelled",
                              "Pending"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "OperationStatus"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "sessionId": {
                      "description": "Exchange session identifier",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "status": {
                  "description": "Status of the operation.",
                  "enum": [
                    "Succeeded",
                    "Failed",
                    "Cancelled",
                    "PendingRefunds",
                    "PendingPurchases"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ExchangeOperationResultStatus"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ExchangeOperationResultResponse"
          },
          {
            "oldValue": {
              "description": "error details",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ExchangePolicyError"
          },
          {
            "oldValue": {
              "description": "Exchange policy errors",
              "properties": {
                "policyErrors": {
                  "description": "Exchange Policy errors",
                  "items": {
                    "description": "error details",
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ExchangePolicyErrors"
          },
          {
            "oldValue": {
              "description": "Exchange request",
              "properties": {
                "properties": {
                  "description": "Exchange request properties",
                  "properties": {
                    "sessionId": {
                      "description": "SessionId that was returned by CalculateExchange API.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ExchangeRequest"
          },
          {
            "oldValue": {
              "description": "Exchange request properties",
              "properties": {
                "sessionId": {
                  "description": "SessionId that was returned by CalculateExchange API.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ExchangeRequestProperties"
          },
          {
            "oldValue": {
              "description": "Exchange response properties",
              "properties": {
                "netPayable": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "policyResult": {
                  "description": "Exchange policy errors",
                  "properties": {
                    "policyErrors": {
                      "description": "Exchange Policy errors",
                      "items": {
                        "description": "error details",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "purchasesTotal": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "refundsTotal": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "reservationsToExchange": {
                  "description": "Details of the reservations being returned",
                  "items": {
                    "description": "Reservation refund details",
                    "properties": {
                      "billingInformation": {
                        "description": "billing information",
                        "properties": {
                          "billingCurrencyProratedAmount": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "billingCurrencyRemainingCommitmentAmount": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "billingCurrencyTotalPaidAmount": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "billingRefundAmount": {
                        "properties": {
                          "amount": {
                            "format": "double",
                            "type": "number"
                          },
                          "currencyCode": {
                            "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "quantity": {
                        "description": "Quantity to be returned",
                        "format": "int32",
                        "type": "integer"
                      },
                      "reservationId": {
                        "description": "Fully qualified id of the Reservation being returned.",
                        "type": "string"
                      },
                      "status": {
                        "description": "Status of the individual operation.",
                        "enum": [
                          "Succeeded",
                          "Failed",
                          "Cancelled",
                          "Pending"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "OperationStatus"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "reservationsToPurchase": {
                  "description": "Details of the reservations being purchased",
                  "items": {
                    "description": "Reservation purchase details",
                    "properties": {
                      "billingCurrencyTotal": {
                        "properties": {
                          "amount": {
                            "format": "double",
                            "type": "number"
                          },
                          "currencyCode": {
                            "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "properties": {
                        "properties": {
                          "location": {
                            "description": "The Azure Region where the reserved resource lives.",
                            "type": "string"
                          },
                          "properties": {
                            "properties": {
                              "appliedScopeType": {
                                "description": "Type of the Applied Scope.",
                                "enum": [
                                  "Single",
                                  "Shared"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "AppliedScopeType"
                                }
                              },
                              "appliedScopes": {
                                "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                "items": {
                                  "maxItems": 1,
                                  "minItems": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "billingPlan": {
                                "description": "Represent the billing plans.",
                                "enum": [
                                  "Upfront",
                                  "Monthly"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationBillingPlan"
                                }
                              },
                              "billingScopeId": {
                                "description": "Subscription that will be charged for purchasing Reservation",
                                "type": "string"
                              },
                              "displayName": {
                                "description": "Friendly name of the Reservation",
                                "type": "string"
                              },
                              "quantity": {
                                "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "renew": {
                                "default": false,
                                "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                "type": "boolean"
                              },
                              "reservedResourceProperties": {
                                "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                "properties": {
                                  "instanceFlexibility": {
                                    "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                    "enum": [
                                      "On",
                                      "Off"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "InstanceFlexibility"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "reservedResourceType": {
                                "description": "The type of the resource that is being reserved.",
                                "enum": [
                                  "VirtualMachines",
                                  "SqlDatabases",
                                  "SuseLinux",
                                  "CosmosDb",
                                  "RedHat",
                                  "SqlDataWarehouse",
                                  "VMwareCloudSimple",
                                  "RedHatOsa",
                                  "Databricks",
                                  "AppService",
                                  "ManagedDisk",
                                  "BlockBlob",
                                  "RedisCache",
                                  "AzureDataExplorer",
                                  "MySql",
                                  "MariaDb",
                                  "PostgreSql",
                                  "DedicatedHost",
                                  "SapHana",
                                  "SqlAzureHybridBenefit",
                                  "AVS",
                                  "DataFactory",
                                  "NetAppStorage",
                                  "AzureFiles",
                                  "SqlEdge",
                                  "VirtualMachineSoftware"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservedResourceType"
                                }
                              },
                              "term": {
                                "description": "Represent the term of Reservation.",
                                "enum": [
                                  "P1Y",
                                  "P3Y",
                                  "P5Y"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationTerm"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "sku": {
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "reservationId": {
                        "description": "Fully qualified id of the Reservation being purchased. This value is only guaranteed to be non-null if the purchase is successful.",
                        "type": "string"
                      },
                      "reservationOrderId": {
                        "description": "Fully qualified id of the ReservationOrder being purchased",
                        "type": "string"
                      },
                      "status": {
                        "description": "Status of the individual operation.",
                        "enum": [
                          "Succeeded",
                          "Failed",
                          "Cancelled",
                          "Pending"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "OperationStatus"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "sessionId": {
                  "description": "Exchange session identifier",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ExchangeResponseProperties"
          },
          {
            "oldValue": {
              "properties": {
                "code": {
                  "enum": [
                    "NotSpecified",
                    "InternalServerError",
                    "ServerTimeout",
                    "AuthorizationFailed",
                    "BadRequest",
                    "ClientCertificateThumbprintNotSet",
                    "InvalidRequestContent",
                    "OperationFailed",
                    "HttpMethodNotSupported",
                    "InvalidRequestUri",
                    "MissingTenantId",
                    "InvalidTenantId",
                    "InvalidReservationOrderId",
                    "InvalidReservationId",
                    "ReservationIdNotInReservationOrder",
                    "ReservationOrderNotFound",
                    "InvalidSubscriptionId",
                    "InvalidAccessToken",
                    "InvalidLocationId",
                    "UnauthenticatedRequestsThrottled",
                    "InvalidHealthCheckType",
                    "Forbidden",
                    "BillingScopeIdCannotBeChanged",
                    "AppliedScopesNotAssociatedWithCommerceAccount",
                    "PatchValuesSameAsExisting",
                    "RoleAssignmentCreationFailed",
                    "ReservationOrderCreationFailed",
                    "ReservationOrderNotEnabled",
                    "CapacityUpdateScopesFailed",
                    "UnsupportedReservationTerm",
                    "ReservationOrderIdAlreadyExists",
                    "RiskCheckFailed",
                    "CreateQuoteFailed",
                    "ActivateQuoteFailed",
                    "NonsupportedAccountId",
                    "PaymentInstrumentNotFound",
                    "MissingAppliedScopesForSingle",
                    "NoValidReservationsToReRate",
                    "ReRateOnlyAllowedForEA",
                    "OperationCannotBePerformedInCurrentState",
                    "InvalidSingleAppliedScopesCount",
                    "InvalidFulfillmentRequestParameters",
                    "NotSupportedCountry",
                    "InvalidRefundQuantity",
                    "PurchaseError",
                    "BillingCustomerInputError",
                    "BillingPaymentInstrumentSoftError",
                    "BillingPaymentInstrumentHardError",
                    "BillingTransientError",
                    "BillingError",
                    "FulfillmentConfigurationError",
                    "FulfillmentOutOfStockError",
                    "FulfillmentTransientError",
                    "FulfillmentError",
                    "CalculatePriceFailed",
                    "AppliedScopesSameAsExisting",
                    "SelfServiceRefundNotSupported",
                    "RefundLimitExceeded"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ErrorResponseCode"
                  }
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ExtendedErrorInfo"
          },
          {
            "oldValue": {
              "properties": {
                "message": {
                  "description": "The message giving detailed information about the status code.",
                  "type": "string"
                },
                "statusCode": {
                  "enum": [
                    "None",
                    "Pending",
                    "Processing",
                    "Active",
                    "PurchaseError",
                    "PaymentInstrumentError",
                    "Split",
                    "Merged",
                    "Expired",
                    "Succeeded"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationStatusCode"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ExtendedStatusInfo"
          },
          {
            "oldValue": null,
            "value": {
              "description": "May be used to filter budgets by resource group, resource, or meter.",
              "properties": {
                "meters": {
                  "description": "The list of filters on meters, mandatory for budgets of usage category. ",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 10,
                  "minItems": 0,
                  "type": "array"
                },
                "resourceGroups": {
                  "description": "The list of filters on resource groups, allowed at subscription level only.",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 10,
                  "minItems": 0,
                  "type": "array"
                },
                "resources": {
                  "description": "The list of filters on resources.",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 10,
                  "minItems": 0,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/Filters"
          },
          {
            "oldValue": {
              "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
              "enum": [
                "On",
                "Off"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "InstanceFlexibility"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/InstanceFlexibility"
          },
          {
            "oldValue": {
              "description": "Location in which the Resources needs to be reserved. It cannot be changed after the resource has been created.",
              "enum": [
                "westus",
                "eastus",
                "eastus2",
                "northcentralus",
                "westus2",
                "southcentralus",
                "centralus",
                "westeurope",
                "northeurope",
                "eastasia",
                "southeastasia",
                "japaneast",
                "japanwest",
                "brazilsouth",
                "australiaeast",
                "australiasoutheast",
                "southindia",
                "westindia",
                "centralindia",
                "canadacentral",
                "canadaeast",
                "uksouth",
                "westcentralus",
                "ukwest"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "Location"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Location"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "id": {
                      "description": "Resource Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "readOnly": true,
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "An marketplace resource.",
              "properties": {
                "properties": {
                  "description": "The properties of the marketplace usage detail.",
                  "properties": {
                    "accountName": {
                      "description": "Account name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "additionalProperties": {
                      "description": "Additional details of this usage item. By default this is not populated, unless it's specified in $expand.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "billingPeriodId": {
                      "description": "The id of the billing period resource that the usage belongs to.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "consumedQuantity": {
                      "description": "The quantity of usage.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "consumedService": {
                      "description": "Consumed service name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "costCenter": {
                      "description": "The cost center of this department if it is a department and a costcenter exists",
                      "readOnly": true,
                      "type": "string"
                    },
                    "currency": {
                      "description": "The ISO currency in which the meter is charged, for example, USD.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "departmentName": {
                      "description": "Department name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "instanceId": {
                      "description": "The uri of the resource instance that the usage is about.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "instanceName": {
                      "description": "The name of the resource instance that the usage is about.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "isEstimated": {
                      "description": "The estimated usage is subject to change.",
                      "readOnly": true,
                      "type": "boolean"
                    },
                    "meterId": {
                      "description": "The meter id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "offerName": {
                      "description": "The type of offer.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "orderNumber": {
                      "description": "The order number.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "planName": {
                      "description": "The name of plan.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "pretaxCost": {
                      "description": "The amount of cost before tax.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "publisherName": {
                      "description": "The name of publisher.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "resourceGroup": {
                      "description": "The name of resource group.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "resourceRate": {
                      "description": "The marketplace resource rate.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "subscriptionGuid": {
                      "description": "Subscription guid.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "subscriptionName": {
                      "description": "Subscription name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "unitOfMeasure": {
                      "description": "The unit of measure.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "usageEnd": {
                      "description": "The end of the date time range covered by the usage detail.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "usageStart": {
                      "description": "The start of the date time range covered by the usage detail.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/Marketplace"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The properties of the marketplace usage detail.",
              "properties": {
                "accountName": {
                  "description": "Account name.",
                  "readOnly": true,
                  "type": "string"
                },
                "additionalProperties": {
                  "description": "Additional details of this usage item. By default this is not populated, unless it's specified in $expand.",
                  "readOnly": true,
                  "type": "string"
                },
                "billingPeriodId": {
                  "description": "The id of the billing period resource that the usage belongs to.",
                  "readOnly": true,
                  "type": "string"
                },
                "consumedQuantity": {
                  "description": "The quantity of usage.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "consumedService": {
                  "description": "Consumed service name.",
                  "readOnly": true,
                  "type": "string"
                },
                "costCenter": {
                  "description": "The cost center of this department if it is a department and a costcenter exists",
                  "readOnly": true,
                  "type": "string"
                },
                "currency": {
                  "description": "The ISO currency in which the meter is charged, for example, USD.",
                  "readOnly": true,
                  "type": "string"
                },
                "departmentName": {
                  "description": "Department name.",
                  "readOnly": true,
                  "type": "string"
                },
                "instanceId": {
                  "description": "The uri of the resource instance that the usage is about.",
                  "readOnly": true,
                  "type": "string"
                },
                "instanceName": {
                  "description": "The name of the resource instance that the usage is about.",
                  "readOnly": true,
                  "type": "string"
                },
                "isEstimated": {
                  "description": "The estimated usage is subject to change.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "meterId": {
                  "description": "The meter id.",
                  "readOnly": true,
                  "type": "string"
                },
                "offerName": {
                  "description": "The type of offer.",
                  "readOnly": true,
                  "type": "string"
                },
                "orderNumber": {
                  "description": "The order number.",
                  "readOnly": true,
                  "type": "string"
                },
                "planName": {
                  "description": "The name of plan.",
                  "readOnly": true,
                  "type": "string"
                },
                "pretaxCost": {
                  "description": "The amount of cost before tax.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "publisherName": {
                  "description": "The name of publisher.",
                  "readOnly": true,
                  "type": "string"
                },
                "resourceGroup": {
                  "description": "The name of resource group.",
                  "readOnly": true,
                  "type": "string"
                },
                "resourceRate": {
                  "description": "The marketplace resource rate.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "subscriptionGuid": {
                  "description": "Subscription guid.",
                  "readOnly": true,
                  "type": "string"
                },
                "subscriptionName": {
                  "description": "Subscription name.",
                  "readOnly": true,
                  "type": "string"
                },
                "unitOfMeasure": {
                  "description": "The unit of measure.",
                  "readOnly": true,
                  "type": "string"
                },
                "usageEnd": {
                  "description": "The end of the date time range covered by the usage detail.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "usageStart": {
                  "description": "The start of the date time range covered by the usage detail.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/MarketplaceProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Result of listing marketplaces. It contains a list of available marketplaces in reverse chronological order by billing period.",
              "properties": {
                "nextLink": {
                  "description": "The link (url) to the next page of results.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "The list of marketplaces.",
                  "items": {
                    "allOf": [
                      {
                        "description": "The Resource model definition.",
                        "properties": {
                          "id": {
                            "description": "Resource Id.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags.",
                            "readOnly": true,
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "An marketplace resource.",
                    "properties": {
                      "properties": {
                        "description": "The properties of the marketplace usage detail.",
                        "properties": {
                          "accountName": {
                            "description": "Account name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "additionalProperties": {
                            "description": "Additional details of this usage item. By default this is not populated, unless it's specified in $expand.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "billingPeriodId": {
                            "description": "The id of the billing period resource that the usage belongs to.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "consumedQuantity": {
                            "description": "The quantity of usage.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "consumedService": {
                            "description": "Consumed service name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "costCenter": {
                            "description": "The cost center of this department if it is a department and a costcenter exists",
                            "readOnly": true,
                            "type": "string"
                          },
                          "currency": {
                            "description": "The ISO currency in which the meter is charged, for example, USD.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "departmentName": {
                            "description": "Department name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "instanceId": {
                            "description": "The uri of the resource instance that the usage is about.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "instanceName": {
                            "description": "The name of the resource instance that the usage is about.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "isEstimated": {
                            "description": "The estimated usage is subject to change.",
                            "readOnly": true,
                            "type": "boolean"
                          },
                          "meterId": {
                            "description": "The meter id.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "offerName": {
                            "description": "The type of offer.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "orderNumber": {
                            "description": "The order number.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "planName": {
                            "description": "The name of plan.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "pretaxCost": {
                            "description": "The amount of cost before tax.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "publisherName": {
                            "description": "The name of publisher.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "resourceGroup": {
                            "description": "The name of resource group.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "resourceRate": {
                            "description": "The marketplace resource rate.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "subscriptionGuid": {
                            "description": "Subscription guid.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "subscriptionName": {
                            "description": "Subscription name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "unitOfMeasure": {
                            "description": "The unit of measure.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "usageEnd": {
                            "description": "The end of the date time range covered by the usage detail.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "usageStart": {
                            "description": "The start of the date time range covered by the usage detail.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/MarketplacesListResult"
          },
          {
            "oldValue": {
              "properties": {
                "sources": {
                  "description": "Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MergeProperties"
          },
          {
            "oldValue": {
              "properties": {
                "properties": {
                  "properties": {
                    "sources": {
                      "description": "Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MergeRequest"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The properties of the meter detail.",
              "properties": {
                "meterCategory": {
                  "description": "The category of the meter, for example, 'Cloud services', 'Networking', etc..",
                  "readOnly": true,
                  "type": "string"
                },
                "meterLocation": {
                  "description": "The location in which the Azure service is available.",
                  "readOnly": true,
                  "type": "string"
                },
                "meterName": {
                  "description": "The name of the meter, within the given meter category",
                  "readOnly": true,
                  "type": "string"
                },
                "meterSubCategory": {
                  "description": "The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..",
                  "readOnly": true,
                  "type": "string"
                },
                "pretaxStandardRate": {
                  "description": "The pretax listing price.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "totalIncludedQuantity": {
                  "description": "The total included quantity associated with the offer.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "unit": {
                  "description": "The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/MeterDetails"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The notification associated with a budget.",
              "properties": {
                "contactEmails": {
                  "description": "Email addresses to send the budget notification to when the threshold is exceeded.",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 50,
                  "minItems": 1,
                  "type": "array"
                },
                "contactGroups": {
                  "description": "Action groups to send the budget notification to when the threshold is exceeded.",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 50,
                  "minItems": 0,
                  "type": "array"
                },
                "contactRoles": {
                  "description": "Contact roles to send the budget notification to when the threshold is exceeded.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "enabled": {
                  "description": "The notification is enabled or not.",
                  "type": "boolean"
                },
                "operator": {
                  "description": "The comparison operator.",
                  "enum": [
                    "EqualTo",
                    "GreaterThan",
                    "GreaterThanOrEqualTo"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "OperatorType"
                  }
                },
                "threshold": {
                  "description": "Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.",
                  "format": "decimal",
                  "type": "number"
                }
              },
              "required": [
                "enabled",
                "operator",
                "threshold",
                "contactEmails"
              ]
            },
            "op": "add",
            "from": "",
            "path": "/Notification"
          },
          {
            "oldValue": null,
            "value": {
              "description": "A Consumption REST API operation.",
              "properties": {
                "display": {
                  "description": "The object that represents the operation.",
                  "properties": {
                    "operation": {
                      "description": "Operation type: Read, write, delete, etc.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "provider": {
                      "description": "Service provider: Microsoft.Consumption.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "resource": {
                      "description": "Resource on which the operation is performed: UsageDetail, etc.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "description": "Operation name: {provider}/{resource}/{operation}.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/Operation"
          },
          {
            "oldValue": {
              "properties": {
                "description": {
                  "type": "string"
                },
                "operation": {
                  "type": "string"
                },
                "provider": {
                  "type": "string"
                },
                "resource": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationDisplay"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Url to get the next page of items.",
                  "type": "string"
                },
                "value": {
                  "items": {
                    "properties": {
                      "display": {
                        "properties": {
                          "description": {
                            "type": "string"
                          },
                          "operation": {
                            "type": "string"
                          },
                          "provider": {
                            "type": "string"
                          },
                          "resource": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "isDataAction": {
                        "description": "Indicates whether the operation is a data action",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Name of the operation",
                        "type": "string"
                      },
                      "origin": {
                        "description": "Origin of the operation",
                        "type": "string"
                      },
                      "properties": {
                        "description": "Additional details about an operation.",
                        "type": "object",
                        "x-ms-client-flatten": true
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationList"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Result of listing consumption operations. It contains a list of operations and a URL link to get the next set of results.",
              "properties": {
                "nextLink": {
                  "description": "URL to get the next set of operation list results if there are any.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "List of consumption operations supported by the Microsoft.Consumption resource provider.",
                  "items": {
                    "description": "A Consumption REST API operation.",
                    "properties": {
                      "display": {
                        "description": "The object that represents the operation.",
                        "properties": {
                          "operation": {
                            "description": "Operation type: Read, write, delete, etc.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "provider": {
                            "description": "Service provider: Microsoft.Consumption.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "resource": {
                            "description": "Resource on which the operation is performed: UsageDetail, etc.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Operation name: {provider}/{resource}/{operation}.",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/OperationListResult"
          },
          {
            "oldValue": {
              "description": "Additional details about an operation.",
              "type": "object",
              "x-ms-client-flatten": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationProperties"
          },
          {
            "oldValue": {
              "properties": {
                "display": {
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "operation": {
                      "type": "string"
                    },
                    "provider": {
                      "type": "string"
                    },
                    "resource": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "isDataAction": {
                  "description": "Indicates whether the operation is a data action",
                  "type": "boolean"
                },
                "name": {
                  "description": "Name of the operation",
                  "type": "string"
                },
                "origin": {
                  "description": "Origin of the operation",
                  "type": "string"
                },
                "properties": {
                  "description": "Additional details about an operation.",
                  "type": "object",
                  "x-ms-client-flatten": true
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationResponse"
          },
          {
            "oldValue": {
              "description": "Required if status == failed or status == canceled.",
              "properties": {
                "code": {
                  "description": "Required if status == failed or status == cancelled. If status == failed, provide an invariant error code used for error troubleshooting, aggregation, and analysis.",
                  "type": "string"
                },
                "message": {
                  "description": "Required if status == failed. Localized. If status == failed, provide an actionable error message indicating what error occurred, and what the user can do to address the issue.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationResultError"
          },
          {
            "oldValue": {
              "description": "Status of the individual operation.",
              "enum": [
                "Succeeded",
                "Failed",
                "Cancelled",
                "Pending"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "OperationStatus"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/OperationStatus"
          },
          {
            "oldValue": {
              "properties": {
                "properties": {
                  "properties": {
                    "appliedScopeType": {
                      "description": "Type of the Applied Scope.",
                      "enum": [
                        "Single",
                        "Shared"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "AppliedScopeType"
                      }
                    },
                    "appliedScopes": {
                      "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                      "items": {
                        "maxItems": 1,
                        "minItems": 1,
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "instanceFlexibility": {
                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                      "enum": [
                        "On",
                        "Off"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "InstanceFlexibility"
                      }
                    },
                    "name": {
                      "description": "Name of the Reservation",
                      "type": "string"
                    },
                    "renew": {
                      "default": false,
                      "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                      "type": "boolean"
                    },
                    "renewProperties": {
                      "properties": {
                        "purchaseProperties": {
                          "properties": {
                            "location": {
                              "description": "The Azure Region where the reserved resource lives.",
                              "type": "string"
                            },
                            "properties": {
                              "properties": {
                                "appliedScopeType": {
                                  "description": "Type of the Applied Scope.",
                                  "enum": [
                                    "Single",
                                    "Shared"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "AppliedScopeType"
                                  }
                                },
                                "appliedScopes": {
                                  "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                  "items": {
                                    "maxItems": 1,
                                    "minItems": 1,
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "billingPlan": {
                                  "description": "Represent the billing plans.",
                                  "enum": [
                                    "Upfront",
                                    "Monthly"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReservationBillingPlan"
                                  }
                                },
                                "billingScopeId": {
                                  "description": "Subscription that will be charged for purchasing Reservation",
                                  "type": "string"
                                },
                                "displayName": {
                                  "description": "Friendly name of the Reservation",
                                  "type": "string"
                                },
                                "quantity": {
                                  "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "renew": {
                                  "default": false,
                                  "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                  "type": "boolean"
                                },
                                "reservedResourceProperties": {
                                  "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                  "properties": {
                                    "instanceFlexibility": {
                                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                      "enum": [
                                        "On",
                                        "Off"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "InstanceFlexibility"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "reservedResourceType": {
                                  "description": "The type of the resource that is being reserved.",
                                  "enum": [
                                    "VirtualMachines",
                                    "SqlDatabases",
                                    "SuseLinux",
                                    "CosmosDb",
                                    "RedHat",
                                    "SqlDataWarehouse",
                                    "VMwareCloudSimple",
                                    "RedHatOsa",
                                    "Databricks",
                                    "AppService",
                                    "ManagedDisk",
                                    "BlockBlob",
                                    "RedisCache",
                                    "AzureDataExplorer",
                                    "MySql",
                                    "MariaDb",
                                    "PostgreSql",
                                    "DedicatedHost",
                                    "SapHana",
                                    "SqlAzureHybridBenefit",
                                    "AVS",
                                    "DataFactory",
                                    "NetAppStorage",
                                    "AzureFiles",
                                    "SqlEdge",
                                    "VirtualMachineSoftware"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReservedResourceType"
                                  }
                                },
                                "term": {
                                  "description": "Represent the term of Reservation.",
                                  "enum": [
                                    "P1Y",
                                    "P3Y",
                                    "P5Y"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReservationTerm"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "sku": {
                              "properties": {
                                "name": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Patch"
          },
          {
            "oldValue": {
              "properties": {
                "appliedScopeType": {
                  "description": "Type of the Applied Scope.",
                  "enum": [
                    "Single",
                    "Shared"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "AppliedScopeType"
                  }
                },
                "appliedScopes": {
                  "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                  "items": {
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "instanceFlexibility": {
                  "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                  "enum": [
                    "On",
                    "Off"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "InstanceFlexibility"
                  }
                },
                "name": {
                  "description": "Name of the Reservation",
                  "type": "string"
                },
                "renew": {
                  "default": false,
                  "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                  "type": "boolean"
                },
                "renewProperties": {
                  "properties": {
                    "purchaseProperties": {
                      "properties": {
                        "location": {
                          "description": "The Azure Region where the reserved resource lives.",
                          "type": "string"
                        },
                        "properties": {
                          "properties": {
                            "appliedScopeType": {
                              "description": "Type of the Applied Scope.",
                              "enum": [
                                "Single",
                                "Shared"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "AppliedScopeType"
                              }
                            },
                            "appliedScopes": {
                              "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                              "items": {
                                "maxItems": 1,
                                "minItems": 1,
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "billingPlan": {
                              "description": "Represent the billing plans.",
                              "enum": [
                                "Upfront",
                                "Monthly"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ReservationBillingPlan"
                              }
                            },
                            "billingScopeId": {
                              "description": "Subscription that will be charged for purchasing Reservation",
                              "type": "string"
                            },
                            "displayName": {
                              "description": "Friendly name of the Reservation",
                              "type": "string"
                            },
                            "quantity": {
                              "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "renew": {
                              "default": false,
                              "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                              "type": "boolean"
                            },
                            "reservedResourceProperties": {
                              "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                              "properties": {
                                "instanceFlexibility": {
                                  "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                  "enum": [
                                    "On",
                                    "Off"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "InstanceFlexibility"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "reservedResourceType": {
                              "description": "The type of the resource that is being reserved.",
                              "enum": [
                                "VirtualMachines",
                                "SqlDatabases",
                                "SuseLinux",
                                "CosmosDb",
                                "RedHat",
                                "SqlDataWarehouse",
                                "VMwareCloudSimple",
                                "RedHatOsa",
                                "Databricks",
                                "AppService",
                                "ManagedDisk",
                                "BlockBlob",
                                "RedisCache",
                                "AzureDataExplorer",
                                "MySql",
                                "MariaDb",
                                "PostgreSql",
                                "DedicatedHost",
                                "SapHana",
                                "SqlAzureHybridBenefit",
                                "AVS",
                                "DataFactory",
                                "NetAppStorage",
                                "AzureFiles",
                                "SqlEdge",
                                "VirtualMachineSoftware"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ReservedResourceType"
                              }
                            },
                            "term": {
                              "description": "Represent the term of Reservation.",
                              "enum": [
                                "P1Y",
                                "P3Y",
                                "P5Y"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ReservationTerm"
                              }
                            }
                          },
                          "type": "object"
                        },
                        "sku": {
                          "properties": {
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PatchProperties"
          },
          {
            "oldValue": {
              "description": "Information about payment related to a reservation order.",
              "properties": {
                "billingAccount": {
                  "description": "Shows the Account that is charged for this payment.",
                  "type": "string"
                },
                "billingCurrencyTotal": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "dueDate": {
                  "description": "Date when the payment needs to be done.",
                  "format": "date",
                  "type": "string"
                },
                "extendedStatusInfo": {
                  "properties": {
                    "message": {
                      "description": "The message giving detailed information about the status code.",
                      "type": "string"
                    },
                    "statusCode": {
                      "enum": [
                        "None",
                        "Pending",
                        "Processing",
                        "Active",
                        "PurchaseError",
                        "PaymentInstrumentError",
                        "Split",
                        "Merged",
                        "Expired",
                        "Succeeded"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationStatusCode"
                      }
                    }
                  },
                  "type": "object"
                },
                "paymentDate": {
                  "description": "Date when the transaction is completed. Is null when it is scheduled.",
                  "format": "date",
                  "type": "string"
                },
                "pricingCurrencyTotal": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "status": {
                  "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
                  "enum": [
                    "Succeeded",
                    "Failed",
                    "Scheduled",
                    "Cancelled"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "PaymentStatus"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PaymentDetail"
          },
          {
            "oldValue": {
              "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
              "enum": [
                "Succeeded",
                "Failed",
                "Scheduled",
                "Cancelled"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "PaymentStatus"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PaymentStatus"
          },
          {
            "oldValue": {
              "properties": {
                "amount": {
                  "format": "double",
                  "type": "number"
                },
                "currencyCode": {
                  "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Price"
          },
          {
            "oldValue": null,
            "value": {
              "description": "price sheet result. It contains the pricesheet associated with billing period",
              "properties": {
                "nextLink": {
                  "description": "The link (url) to the next page of results.",
                  "readOnly": true,
                  "type": "string"
                },
                "pricesheets": {
                  "description": "Price sheet",
                  "items": {
                    "description": "The properties of the price sheet.",
                    "properties": {
                      "billingPeriodId": {
                        "description": "The id of the billing period resource that the usage belongs to.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "currencyCode": {
                        "description": "Currency Code",
                        "readOnly": true,
                        "type": "string"
                      },
                      "includedQuantity": {
                        "description": "Included quality for an offer",
                        "format": "decimal",
                        "readOnly": true,
                        "type": "number"
                      },
                      "meterDetails": {
                        "description": "The properties of the meter detail.",
                        "properties": {
                          "meterCategory": {
                            "description": "The category of the meter, for example, 'Cloud services', 'Networking', etc..",
                            "readOnly": true,
                            "type": "string"
                          },
                          "meterLocation": {
                            "description": "The location in which the Azure service is available.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "meterName": {
                            "description": "The name of the meter, within the given meter category",
                            "readOnly": true,
                            "type": "string"
                          },
                          "meterSubCategory": {
                            "description": "The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..",
                            "readOnly": true,
                            "type": "string"
                          },
                          "pretaxStandardRate": {
                            "description": "The pretax listing price.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "totalIncludedQuantity": {
                            "description": "The total included quantity associated with the offer.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "unit": {
                            "description": "The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      },
                      "meterId": {
                        "description": "The meter id",
                        "readOnly": true,
                        "type": "string"
                      },
                      "partNumber": {
                        "description": "Part Number",
                        "readOnly": true,
                        "type": "string"
                      },
                      "unitOfMeasure": {
                        "description": "Unit of measure",
                        "readOnly": true,
                        "type": "string"
                      },
                      "unitPrice": {
                        "description": "Unit Price",
                        "format": "decimal",
                        "readOnly": true,
                        "type": "number"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/PriceSheetModel"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The properties of the price sheet.",
              "properties": {
                "billingPeriodId": {
                  "description": "The id of the billing period resource that the usage belongs to.",
                  "readOnly": true,
                  "type": "string"
                },
                "currencyCode": {
                  "description": "Currency Code",
                  "readOnly": true,
                  "type": "string"
                },
                "includedQuantity": {
                  "description": "Included quality for an offer",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "meterDetails": {
                  "description": "The properties of the meter detail.",
                  "properties": {
                    "meterCategory": {
                      "description": "The category of the meter, for example, 'Cloud services', 'Networking', etc..",
                      "readOnly": true,
                      "type": "string"
                    },
                    "meterLocation": {
                      "description": "The location in which the Azure service is available.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "meterName": {
                      "description": "The name of the meter, within the given meter category",
                      "readOnly": true,
                      "type": "string"
                    },
                    "meterSubCategory": {
                      "description": "The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..",
                      "readOnly": true,
                      "type": "string"
                    },
                    "pretaxStandardRate": {
                      "description": "The pretax listing price.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "totalIncludedQuantity": {
                      "description": "The total included quantity associated with the offer.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "unit": {
                      "description": "The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "meterId": {
                  "description": "The meter id",
                  "readOnly": true,
                  "type": "string"
                },
                "partNumber": {
                  "description": "Part Number",
                  "readOnly": true,
                  "type": "string"
                },
                "unitOfMeasure": {
                  "description": "Unit of measure",
                  "readOnly": true,
                  "type": "string"
                },
                "unitPrice": {
                  "description": "Unit Price",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/PriceSheetProperties"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "id": {
                      "description": "Resource Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "readOnly": true,
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "An pricesheet resource.",
              "properties": {
                "properties": {
                  "description": "price sheet result. It contains the pricesheet associated with billing period",
                  "properties": {
                    "nextLink": {
                      "description": "The link (url) to the next page of results.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "pricesheets": {
                      "description": "Price sheet",
                      "items": {
                        "description": "The properties of the price sheet.",
                        "properties": {
                          "billingPeriodId": {
                            "description": "The id of the billing period resource that the usage belongs to.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "currencyCode": {
                            "description": "Currency Code",
                            "readOnly": true,
                            "type": "string"
                          },
                          "includedQuantity": {
                            "description": "Included quality for an offer",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "meterDetails": {
                            "description": "The properties of the meter detail.",
                            "properties": {
                              "meterCategory": {
                                "description": "The category of the meter, for example, 'Cloud services', 'Networking', etc..",
                                "readOnly": true,
                                "type": "string"
                              },
                              "meterLocation": {
                                "description": "The location in which the Azure service is available.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "meterName": {
                                "description": "The name of the meter, within the given meter category",
                                "readOnly": true,
                                "type": "string"
                              },
                              "meterSubCategory": {
                                "description": "The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..",
                                "readOnly": true,
                                "type": "string"
                              },
                              "pretaxStandardRate": {
                                "description": "The pretax listing price.",
                                "format": "decimal",
                                "readOnly": true,
                                "type": "number"
                              },
                              "totalIncludedQuantity": {
                                "description": "The total included quantity associated with the offer.",
                                "format": "decimal",
                                "readOnly": true,
                                "type": "number"
                              },
                              "unit": {
                                "description": "The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.",
                                "readOnly": true,
                                "type": "string"
                              }
                            }
                          },
                          "meterId": {
                            "description": "The meter id",
                            "readOnly": true,
                            "type": "string"
                          },
                          "partNumber": {
                            "description": "Part Number",
                            "readOnly": true,
                            "type": "string"
                          },
                          "unitOfMeasure": {
                            "description": "Unit of measure",
                            "readOnly": true,
                            "type": "string"
                          },
                          "unitPrice": {
                            "description": "Unit Price",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          }
                        }
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/PriceSheetResult"
          },
          {
            "oldValue": {
              "description": "Represent the current state of the Reservation.",
              "enum": [
                "Creating",
                "PendingResourceHold",
                "ConfirmedResourceHold",
                "PendingBilling",
                "ConfirmedBilling",
                "Created",
                "Succeeded",
                "Cancelled",
                "Expired",
                "BillingFailed",
                "Failed",
                "Split",
                "Merged"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ProvisioningState"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ProvisioningState"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Resource model definition.",
              "properties": {
                "eTag": {
                  "description": "eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.",
                  "type": "string"
                },
                "id": {
                  "description": "Resource Id.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "Resource name.",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "Resource type.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/ProxyResource"
          },
          {
            "oldValue": {
              "properties": {
                "location": {
                  "description": "The Azure Region where the reserved resource lives.",
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "appliedScopeType": {
                      "description": "Type of the Applied Scope.",
                      "enum": [
                        "Single",
                        "Shared"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "AppliedScopeType"
                      }
                    },
                    "appliedScopes": {
                      "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                      "items": {
                        "maxItems": 1,
                        "minItems": 1,
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "billingPlan": {
                      "description": "Represent the billing plans.",
                      "enum": [
                        "Upfront",
                        "Monthly"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationBillingPlan"
                      }
                    },
                    "billingScopeId": {
                      "description": "Subscription that will be charged for purchasing Reservation",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "Friendly name of the Reservation",
                      "type": "string"
                    },
                    "quantity": {
                      "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "renew": {
                      "default": false,
                      "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                      "type": "boolean"
                    },
                    "reservedResourceProperties": {
                      "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                      "properties": {
                        "instanceFlexibility": {
                          "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                          "enum": [
                            "On",
                            "Off"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "InstanceFlexibility"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "reservedResourceType": {
                      "description": "The type of the resource that is being reserved.",
                      "enum": [
                        "VirtualMachines",
                        "SqlDatabases",
                        "SuseLinux",
                        "CosmosDb",
                        "RedHat",
                        "SqlDataWarehouse",
                        "VMwareCloudSimple",
                        "RedHatOsa",
                        "Databricks",
                        "AppService",
                        "ManagedDisk",
                        "BlockBlob",
                        "RedisCache",
                        "AzureDataExplorer",
                        "MySql",
                        "MariaDb",
                        "PostgreSql",
                        "DedicatedHost",
                        "SapHana",
                        "SqlAzureHybridBenefit",
                        "AVS",
                        "DataFactory",
                        "NetAppStorage",
                        "AzureFiles",
                        "SqlEdge",
                        "VirtualMachineSoftware"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservedResourceType"
                      }
                    },
                    "term": {
                      "description": "Represent the term of Reservation.",
                      "enum": [
                        "P1Y",
                        "P3Y",
                        "P5Y"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationTerm"
                      }
                    }
                  },
                  "type": "object"
                },
                "sku": {
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PurchaseRequest"
          },
          {
            "oldValue": {
              "properties": {
                "appliedScopeType": {
                  "description": "Type of the Applied Scope.",
                  "enum": [
                    "Single",
                    "Shared"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "AppliedScopeType"
                  }
                },
                "appliedScopes": {
                  "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                  "items": {
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "billingPlan": {
                  "description": "Represent the billing plans.",
                  "enum": [
                    "Upfront",
                    "Monthly"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationBillingPlan"
                  }
                },
                "billingScopeId": {
                  "description": "Subscription that will be charged for purchasing Reservation",
                  "type": "string"
                },
                "displayName": {
                  "description": "Friendly name of the Reservation",
                  "type": "string"
                },
                "quantity": {
                  "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                  "format": "int32",
                  "type": "integer"
                },
                "renew": {
                  "default": false,
                  "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                  "type": "boolean"
                },
                "reservedResourceProperties": {
                  "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                  "properties": {
                    "instanceFlexibility": {
                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                      "enum": [
                        "On",
                        "Off"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "InstanceFlexibility"
                      }
                    }
                  },
                  "type": "object"
                },
                "reservedResourceType": {
                  "description": "The type of the resource that is being reserved.",
                  "enum": [
                    "VirtualMachines",
                    "SqlDatabases",
                    "SuseLinux",
                    "CosmosDb",
                    "RedHat",
                    "SqlDataWarehouse",
                    "VMwareCloudSimple",
                    "RedHatOsa",
                    "Databricks",
                    "AppService",
                    "ManagedDisk",
                    "BlockBlob",
                    "RedisCache",
                    "AzureDataExplorer",
                    "MySql",
                    "MariaDb",
                    "PostgreSql",
                    "DedicatedHost",
                    "SapHana",
                    "SqlAzureHybridBenefit",
                    "AVS",
                    "DataFactory",
                    "NetAppStorage",
                    "AzureFiles",
                    "SqlEdge",
                    "VirtualMachineSoftware"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservedResourceType"
                  }
                },
                "term": {
                  "description": "Represent the term of Reservation.",
                  "enum": [
                    "P1Y",
                    "P3Y",
                    "P5Y"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationTerm"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PurchaseRequestProperties"
          },
          {
            "oldValue": {
              "description": "billing information",
              "properties": {
                "billingCurrencyProratedAmount": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "billingCurrencyRemainingCommitmentAmount": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "billingCurrencyTotalPaidAmount": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "billingPlan": {
                  "description": "Represent the billing plans.",
                  "enum": [
                    "Upfront",
                    "Monthly"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationBillingPlan"
                  }
                },
                "completedTransactions": {
                  "description": "The number of completed transactions in this reservation's payment",
                  "format": "int32",
                  "type": "integer"
                },
                "totalTransactions": {
                  "description": "The number of total transactions in this reservation's payment",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RefundBillingInformation"
          },
          {
            "oldValue": {
              "description": "error details",
              "properties": {
                "code": {
                  "enum": [
                    "NotSpecified",
                    "InternalServerError",
                    "ServerTimeout",
                    "AuthorizationFailed",
                    "BadRequest",
                    "ClientCertificateThumbprintNotSet",
                    "InvalidRequestContent",
                    "OperationFailed",
                    "HttpMethodNotSupported",
                    "InvalidRequestUri",
                    "MissingTenantId",
                    "InvalidTenantId",
                    "InvalidReservationOrderId",
                    "InvalidReservationId",
                    "ReservationIdNotInReservationOrder",
                    "ReservationOrderNotFound",
                    "InvalidSubscriptionId",
                    "InvalidAccessToken",
                    "InvalidLocationId",
                    "UnauthenticatedRequestsThrottled",
                    "InvalidHealthCheckType",
                    "Forbidden",
                    "BillingScopeIdCannotBeChanged",
                    "AppliedScopesNotAssociatedWithCommerceAccount",
                    "PatchValuesSameAsExisting",
                    "RoleAssignmentCreationFailed",
                    "ReservationOrderCreationFailed",
                    "ReservationOrderNotEnabled",
                    "CapacityUpdateScopesFailed",
                    "UnsupportedReservationTerm",
                    "ReservationOrderIdAlreadyExists",
                    "RiskCheckFailed",
                    "CreateQuoteFailed",
                    "ActivateQuoteFailed",
                    "NonsupportedAccountId",
                    "PaymentInstrumentNotFound",
                    "MissingAppliedScopesForSingle",
                    "NoValidReservationsToReRate",
                    "ReRateOnlyAllowedForEA",
                    "OperationCannotBePerformedInCurrentState",
                    "InvalidSingleAppliedScopesCount",
                    "InvalidFulfillmentRequestParameters",
                    "NotSupportedCountry",
                    "InvalidRefundQuantity",
                    "PurchaseError",
                    "BillingCustomerInputError",
                    "BillingPaymentInstrumentSoftError",
                    "BillingPaymentInstrumentHardError",
                    "BillingTransientError",
                    "BillingError",
                    "FulfillmentConfigurationError",
                    "FulfillmentOutOfStockError",
                    "FulfillmentTransientError",
                    "FulfillmentError",
                    "CalculatePriceFailed",
                    "AppliedScopesSameAsExisting",
                    "SelfServiceRefundNotSupported",
                    "RefundLimitExceeded"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ErrorResponseCode"
                  }
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RefundPolicyError"
          },
          {
            "oldValue": {
              "description": "Refund policy result",
              "properties": {
                "properties": {
                  "description": "Refund policy result property",
                  "properties": {
                    "consumedRefundsTotal": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "maxRefundLimit": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "policyErrors": {
                      "description": "Refund Policy errors",
                      "items": {
                        "description": "error details",
                        "properties": {
                          "code": {
                            "enum": [
                              "NotSpecified",
                              "InternalServerError",
                              "ServerTimeout",
                              "AuthorizationFailed",
                              "BadRequest",
                              "ClientCertificateThumbprintNotSet",
                              "InvalidRequestContent",
                              "OperationFailed",
                              "HttpMethodNotSupported",
                              "InvalidRequestUri",
                              "MissingTenantId",
                              "InvalidTenantId",
                              "InvalidReservationOrderId",
                              "InvalidReservationId",
                              "ReservationIdNotInReservationOrder",
                              "ReservationOrderNotFound",
                              "InvalidSubscriptionId",
                              "InvalidAccessToken",
                              "InvalidLocationId",
                              "UnauthenticatedRequestsThrottled",
                              "InvalidHealthCheckType",
                              "Forbidden",
                              "BillingScopeIdCannotBeChanged",
                              "AppliedScopesNotAssociatedWithCommerceAccount",
                              "PatchValuesSameAsExisting",
                              "RoleAssignmentCreationFailed",
                              "ReservationOrderCreationFailed",
                              "ReservationOrderNotEnabled",
                              "CapacityUpdateScopesFailed",
                              "UnsupportedReservationTerm",
                              "ReservationOrderIdAlreadyExists",
                              "RiskCheckFailed",
                              "CreateQuoteFailed",
                              "ActivateQuoteFailed",
                              "NonsupportedAccountId",
                              "PaymentInstrumentNotFound",
                              "MissingAppliedScopesForSingle",
                              "NoValidReservationsToReRate",
                              "ReRateOnlyAllowedForEA",
                              "OperationCannotBePerformedInCurrentState",
                              "InvalidSingleAppliedScopesCount",
                              "InvalidFulfillmentRequestParameters",
                              "NotSupportedCountry",
                              "InvalidRefundQuantity",
                              "PurchaseError",
                              "BillingCustomerInputError",
                              "BillingPaymentInstrumentSoftError",
                              "BillingPaymentInstrumentHardError",
                              "BillingTransientError",
                              "BillingError",
                              "FulfillmentConfigurationError",
                              "FulfillmentOutOfStockError",
                              "FulfillmentTransientError",
                              "FulfillmentError",
                              "CalculatePriceFailed",
                              "AppliedScopesSameAsExisting",
                              "SelfServiceRefundNotSupported",
                              "RefundLimitExceeded"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ErrorResponseCode"
                            }
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array",
                      "x-ms-identifiers": []
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RefundPolicyResult"
          },
          {
            "oldValue": {
              "description": "Refund policy result property",
              "properties": {
                "consumedRefundsTotal": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "maxRefundLimit": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "policyErrors": {
                  "description": "Refund Policy errors",
                  "items": {
                    "description": "error details",
                    "properties": {
                      "code": {
                        "enum": [
                          "NotSpecified",
                          "InternalServerError",
                          "ServerTimeout",
                          "AuthorizationFailed",
                          "BadRequest",
                          "ClientCertificateThumbprintNotSet",
                          "InvalidRequestContent",
                          "OperationFailed",
                          "HttpMethodNotSupported",
                          "InvalidRequestUri",
                          "MissingTenantId",
                          "InvalidTenantId",
                          "InvalidReservationOrderId",
                          "InvalidReservationId",
                          "ReservationIdNotInReservationOrder",
                          "ReservationOrderNotFound",
                          "InvalidSubscriptionId",
                          "InvalidAccessToken",
                          "InvalidLocationId",
                          "UnauthenticatedRequestsThrottled",
                          "InvalidHealthCheckType",
                          "Forbidden",
                          "BillingScopeIdCannotBeChanged",
                          "AppliedScopesNotAssociatedWithCommerceAccount",
                          "PatchValuesSameAsExisting",
                          "RoleAssignmentCreationFailed",
                          "ReservationOrderCreationFailed",
                          "ReservationOrderNotEnabled",
                          "CapacityUpdateScopesFailed",
                          "UnsupportedReservationTerm",
                          "ReservationOrderIdAlreadyExists",
                          "RiskCheckFailed",
                          "CreateQuoteFailed",
                          "ActivateQuoteFailed",
                          "NonsupportedAccountId",
                          "PaymentInstrumentNotFound",
                          "MissingAppliedScopesForSingle",
                          "NoValidReservationsToReRate",
                          "ReRateOnlyAllowedForEA",
                          "OperationCannotBePerformedInCurrentState",
                          "InvalidSingleAppliedScopesCount",
                          "InvalidFulfillmentRequestParameters",
                          "NotSupportedCountry",
                          "InvalidRefundQuantity",
                          "PurchaseError",
                          "BillingCustomerInputError",
                          "BillingPaymentInstrumentSoftError",
                          "BillingPaymentInstrumentHardError",
                          "BillingTransientError",
                          "BillingError",
                          "FulfillmentConfigurationError",
                          "FulfillmentOutOfStockError",
                          "FulfillmentTransientError",
                          "FulfillmentError",
                          "CalculatePriceFailed",
                          "AppliedScopesSameAsExisting",
                          "SelfServiceRefundNotSupported",
                          "RefundLimitExceeded"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ErrorResponseCode"
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-identifiers": []
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RefundPolicyResultProperty"
          },
          {
            "oldValue": {
              "properties": {
                "properties": {
                  "properties": {
                    "reservationToReturn": {
                      "description": "Reservation to return",
                      "properties": {
                        "quantity": {
                          "description": "Quantity to be returned. Must be greater than zero.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "reservationId": {
                          "description": "Fully qualified identifier of the Reservation being returned",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "returnReason": {
                      "description": "The reason of returning the reservation",
                      "type": "string"
                    },
                    "scope": {
                      "description": "The scope of the refund, e.g. Reservation",
                      "type": "string"
                    },
                    "sessionId": {
                      "description": "SessionId that was returned by CalculateRefund API.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RefundRequest"
          },
          {
            "oldValue": {
              "properties": {
                "reservationToReturn": {
                  "description": "Reservation to return",
                  "properties": {
                    "quantity": {
                      "description": "Quantity to be returned. Must be greater than zero.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "reservationId": {
                      "description": "Fully qualified identifier of the Reservation being returned",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "returnReason": {
                  "description": "The reason of returning the reservation",
                  "type": "string"
                },
                "scope": {
                  "description": "The scope of the refund, e.g. Reservation",
                  "type": "string"
                },
                "sessionId": {
                  "description": "SessionId that was returned by CalculateRefund API.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RefundRequestProperties"
          },
          {
            "oldValue": {
              "properties": {
                "id": {
                  "description": "Fully qualified identifier of the reservation being returned",
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "billingInformation": {
                      "description": "billing information",
                      "properties": {
                        "billingCurrencyProratedAmount": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "billingCurrencyRemainingCommitmentAmount": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "billingCurrencyTotalPaidAmount": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "billingPlan": {
                          "description": "Represent the billing plans.",
                          "enum": [
                            "Upfront",
                            "Monthly"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservationBillingPlan"
                          }
                        },
                        "completedTransactions": {
                          "description": "The number of completed transactions in this reservation's payment",
                          "format": "int32",
                          "type": "integer"
                        },
                        "totalTransactions": {
                          "description": "The number of total transactions in this reservation's payment",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "billingRefundAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "policyResult": {
                      "description": "Refund policy result",
                      "properties": {
                        "properties": {
                          "description": "Refund policy result property",
                          "properties": {
                            "consumedRefundsTotal": {
                              "properties": {
                                "amount": {
                                  "format": "double",
                                  "type": "number"
                                },
                                "currencyCode": {
                                  "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "maxRefundLimit": {
                              "properties": {
                                "amount": {
                                  "format": "double",
                                  "type": "number"
                                },
                                "currencyCode": {
                                  "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "policyErrors": {
                              "description": "Refund Policy errors",
                              "items": {
                                "description": "error details",
                                "properties": {
                                  "code": {
                                    "enum": [
                                      "NotSpecified",
                                      "InternalServerError",
                                      "ServerTimeout",
                                      "AuthorizationFailed",
                                      "BadRequest",
                                      "ClientCertificateThumbprintNotSet",
                                      "InvalidRequestContent",
                                      "OperationFailed",
                                      "HttpMethodNotSupported",
                                      "InvalidRequestUri",
                                      "MissingTenantId",
                                      "InvalidTenantId",
                                      "InvalidReservationOrderId",
                                      "InvalidReservationId",
                                      "ReservationIdNotInReservationOrder",
                                      "ReservationOrderNotFound",
                                      "InvalidSubscriptionId",
                                      "InvalidAccessToken",
                                      "InvalidLocationId",
                                      "UnauthenticatedRequestsThrottled",
                                      "InvalidHealthCheckType",
                                      "Forbidden",
                                      "BillingScopeIdCannotBeChanged",
                                      "AppliedScopesNotAssociatedWithCommerceAccount",
                                      "PatchValuesSameAsExisting",
                                      "RoleAssignmentCreationFailed",
                                      "ReservationOrderCreationFailed",
                                      "ReservationOrderNotEnabled",
                                      "CapacityUpdateScopesFailed",
                                      "UnsupportedReservationTerm",
                                      "ReservationOrderIdAlreadyExists",
                                      "RiskCheckFailed",
                                      "CreateQuoteFailed",
                                      "ActivateQuoteFailed",
                                      "NonsupportedAccountId",
                                      "PaymentInstrumentNotFound",
                                      "MissingAppliedScopesForSingle",
                                      "NoValidReservationsToReRate",
                                      "ReRateOnlyAllowedForEA",
                                      "OperationCannotBePerformedInCurrentState",
                                      "InvalidSingleAppliedScopesCount",
                                      "InvalidFulfillmentRequestParameters",
                                      "NotSupportedCountry",
                                      "InvalidRefundQuantity",
                                      "PurchaseError",
                                      "BillingCustomerInputError",
                                      "BillingPaymentInstrumentSoftError",
                                      "BillingPaymentInstrumentHardError",
                                      "BillingTransientError",
                                      "BillingError",
                                      "FulfillmentConfigurationError",
                                      "FulfillmentOutOfStockError",
                                      "FulfillmentTransientError",
                                      "FulfillmentError",
                                      "CalculatePriceFailed",
                                      "AppliedScopesSameAsExisting",
                                      "SelfServiceRefundNotSupported",
                                      "RefundLimitExceeded"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ErrorResponseCode"
                                    }
                                  },
                                  "message": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array",
                              "x-ms-identifiers": []
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "pricingRefundAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "quantity": {
                      "description": "Quantity to be returned",
                      "format": "int32",
                      "type": "integer"
                    },
                    "sessionId": {
                      "description": "Refund session identifier",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RefundResponse"
          },
          {
            "oldValue": {
              "properties": {
                "billingInformation": {
                  "description": "billing information",
                  "properties": {
                    "billingCurrencyProratedAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "billingCurrencyRemainingCommitmentAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "billingCurrencyTotalPaidAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "billingPlan": {
                      "description": "Represent the billing plans.",
                      "enum": [
                        "Upfront",
                        "Monthly"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationBillingPlan"
                      }
                    },
                    "completedTransactions": {
                      "description": "The number of completed transactions in this reservation's payment",
                      "format": "int32",
                      "type": "integer"
                    },
                    "totalTransactions": {
                      "description": "The number of total transactions in this reservation's payment",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "billingRefundAmount": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "policyResult": {
                  "description": "Refund policy result",
                  "properties": {
                    "properties": {
                      "description": "Refund policy result property",
                      "properties": {
                        "consumedRefundsTotal": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "maxRefundLimit": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "policyErrors": {
                          "description": "Refund Policy errors",
                          "items": {
                            "description": "error details",
                            "properties": {
                              "code": {
                                "enum": [
                                  "NotSpecified",
                                  "InternalServerError",
                                  "ServerTimeout",
                                  "AuthorizationFailed",
                                  "BadRequest",
                                  "ClientCertificateThumbprintNotSet",
                                  "InvalidRequestContent",
                                  "OperationFailed",
                                  "HttpMethodNotSupported",
                                  "InvalidRequestUri",
                                  "MissingTenantId",
                                  "InvalidTenantId",
                                  "InvalidReservationOrderId",
                                  "InvalidReservationId",
                                  "ReservationIdNotInReservationOrder",
                                  "ReservationOrderNotFound",
                                  "InvalidSubscriptionId",
                                  "InvalidAccessToken",
                                  "InvalidLocationId",
                                  "UnauthenticatedRequestsThrottled",
                                  "InvalidHealthCheckType",
                                  "Forbidden",
                                  "BillingScopeIdCannotBeChanged",
                                  "AppliedScopesNotAssociatedWithCommerceAccount",
                                  "PatchValuesSameAsExisting",
                                  "RoleAssignmentCreationFailed",
                                  "ReservationOrderCreationFailed",
                                  "ReservationOrderNotEnabled",
                                  "CapacityUpdateScopesFailed",
                                  "UnsupportedReservationTerm",
                                  "ReservationOrderIdAlreadyExists",
                                  "RiskCheckFailed",
                                  "CreateQuoteFailed",
                                  "ActivateQuoteFailed",
                                  "NonsupportedAccountId",
                                  "PaymentInstrumentNotFound",
                                  "MissingAppliedScopesForSingle",
                                  "NoValidReservationsToReRate",
                                  "ReRateOnlyAllowedForEA",
                                  "OperationCannotBePerformedInCurrentState",
                                  "InvalidSingleAppliedScopesCount",
                                  "InvalidFulfillmentRequestParameters",
                                  "NotSupportedCountry",
                                  "InvalidRefundQuantity",
                                  "PurchaseError",
                                  "BillingCustomerInputError",
                                  "BillingPaymentInstrumentSoftError",
                                  "BillingPaymentInstrumentHardError",
                                  "BillingTransientError",
                                  "BillingError",
                                  "FulfillmentConfigurationError",
                                  "FulfillmentOutOfStockError",
                                  "FulfillmentTransientError",
                                  "FulfillmentError",
                                  "CalculatePriceFailed",
                                  "AppliedScopesSameAsExisting",
                                  "SelfServiceRefundNotSupported",
                                  "RefundLimitExceeded"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ErrorResponseCode"
                                }
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array",
                          "x-ms-identifiers": []
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "pricingRefundAmount": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "quantity": {
                  "description": "Quantity to be returned",
                  "format": "int32",
                  "type": "integer"
                },
                "sessionId": {
                  "description": "Refund session identifier",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RefundResponseProperties"
          },
          {
            "oldValue": {
              "default": false,
              "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
              "type": "boolean"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/Renew"
          },
          {
            "oldValue": {
              "properties": {
                "billingCurrencyTotal": {
                  "description": "Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.",
                  "properties": {
                    "amount": {
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "pricingCurrencyTotal": {
                  "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry.",
                  "properties": {
                    "amount": {
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "purchaseProperties": {
                  "properties": {
                    "location": {
                      "description": "The Azure Region where the reserved resource lives.",
                      "type": "string"
                    },
                    "properties": {
                      "properties": {
                        "appliedScopeType": {
                          "description": "Type of the Applied Scope.",
                          "enum": [
                            "Single",
                            "Shared"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "AppliedScopeType"
                          }
                        },
                        "appliedScopes": {
                          "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                          "items": {
                            "maxItems": 1,
                            "minItems": 1,
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "billingPlan": {
                          "description": "Represent the billing plans.",
                          "enum": [
                            "Upfront",
                            "Monthly"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservationBillingPlan"
                          }
                        },
                        "billingScopeId": {
                          "description": "Subscription that will be charged for purchasing Reservation",
                          "type": "string"
                        },
                        "displayName": {
                          "description": "Friendly name of the Reservation",
                          "type": "string"
                        },
                        "quantity": {
                          "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "renew": {
                          "default": false,
                          "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                          "type": "boolean"
                        },
                        "reservedResourceProperties": {
                          "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                          "properties": {
                            "instanceFlexibility": {
                              "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                              "enum": [
                                "On",
                                "Off"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "InstanceFlexibility"
                              }
                            }
                          },
                          "type": "object"
                        },
                        "reservedResourceType": {
                          "description": "The type of the resource that is being reserved.",
                          "enum": [
                            "VirtualMachines",
                            "SqlDatabases",
                            "SuseLinux",
                            "CosmosDb",
                            "RedHat",
                            "SqlDataWarehouse",
                            "VMwareCloudSimple",
                            "RedHatOsa",
                            "Databricks",
                            "AppService",
                            "ManagedDisk",
                            "BlockBlob",
                            "RedisCache",
                            "AzureDataExplorer",
                            "MySql",
                            "MariaDb",
                            "PostgreSql",
                            "DedicatedHost",
                            "SapHana",
                            "SqlAzureHybridBenefit",
                            "AVS",
                            "DataFactory",
                            "NetAppStorage",
                            "AzureFiles",
                            "SqlEdge",
                            "VirtualMachineSoftware"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservedResourceType"
                          }
                        },
                        "term": {
                          "description": "Represent the term of Reservation.",
                          "enum": [
                            "P1Y",
                            "P3Y",
                            "P5Y"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservationTerm"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "sku": {
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RenewPropertiesResponse"
          },
          {
            "oldValue": {
              "description": "Represent the billing plans.",
              "enum": [
                "Upfront",
                "Monthly"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ReservationBillingPlan"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationBillingPlan"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "id": {
                      "description": "Resource Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "readOnly": true,
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "reservation details resource.",
              "properties": {
                "properties": {
                  "description": "The properties of the reservation details.",
                  "properties": {
                    "instanceId": {
                      "description": "This identifier is the name of the resource or the fully qualified Resource ID.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "reservationId": {
                      "description": "The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "reservationOrderId": {
                      "description": "The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "reservedHours": {
                      "description": "This is the total hours reserved for the day. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "skuName": {
                      "description": "This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "totalReservedQuantity": {
                      "description": "This is the total count of instances that are reserved for the reservationId.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "usageDate": {
                      "description": "The date on which consumption occurred.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "usedHours": {
                      "description": "This is the total hours used by the instance.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    }
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationDetails"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Result of listing reservation details.",
              "properties": {
                "nextLink": {
                  "description": "The link (url) to the next page of results.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "The list of reservation details.",
                  "items": {
                    "allOf": [
                      {
                        "description": "The Resource model definition.",
                        "properties": {
                          "id": {
                            "description": "Resource Id.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags.",
                            "readOnly": true,
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "reservation details resource.",
                    "properties": {
                      "properties": {
                        "description": "The properties of the reservation details.",
                        "properties": {
                          "instanceId": {
                            "description": "This identifier is the name of the resource or the fully qualified Resource ID.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "reservationId": {
                            "description": "The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "reservationOrderId": {
                            "description": "The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "reservedHours": {
                            "description": "This is the total hours reserved for the day. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "skuName": {
                            "description": "This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "totalReservedQuantity": {
                            "description": "This is the total count of instances that are reserved for the reservationId.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "usageDate": {
                            "description": "The date on which consumption occurred.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "usedHours": {
                            "description": "This is the total hours used by the instance.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          }
                        }
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ReservationDetailsListResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The properties of the reservation details.",
              "properties": {
                "instanceId": {
                  "description": "This identifier is the name of the resource or the fully qualified Resource ID.",
                  "readOnly": true,
                  "type": "string"
                },
                "reservationId": {
                  "description": "The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.",
                  "readOnly": true,
                  "type": "string"
                },
                "reservationOrderId": {
                  "description": "The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.",
                  "readOnly": true,
                  "type": "string"
                },
                "reservedHours": {
                  "description": "This is the total hours reserved for the day. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "skuName": {
                  "description": "This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.",
                  "readOnly": true,
                  "type": "string"
                },
                "totalReservedQuantity": {
                  "description": "This is the total count of instances that are reserved for the reservationId.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "usageDate": {
                  "description": "The date on which consumption occurred.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "usedHours": {
                  "description": "This is the total hours used by the instance.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ReservationDetailsProperties"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Url to get the next page of reservations.",
                  "type": "string"
                },
                "value": {
                  "items": {
                    "description": "The definition of the reservation.",
                    "properties": {
                      "etag": {
                        "format": "int32",
                        "type": "integer"
                      },
                      "id": {
                        "description": "Identifier of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "kind": {
                        "description": "Resource Provider type to be reserved.",
                        "enum": [
                          "Microsoft.Compute"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Kind"
                        }
                      },
                      "location": {
                        "description": "The Azure Region where the reserved resource lives.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "The properties of the reservations",
                        "properties": {
                          "appliedScopeProperties": {
                            "properties": {
                              "displayName": {
                                "description": "Management group display name",
                                "type": "string"
                              },
                              "managementGroupId": {
                                "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                "type": "string"
                              },
                              "tenantId": {
                                "description": "Tenant ID of the applied scope type",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "appliedScopeType": {
                            "description": "Type of the Applied Scope.",
                            "enum": [
                              "Single",
                              "Shared"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "AppliedScopeType"
                            }
                          },
                          "appliedScopes": {
                            "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                            "items": {
                              "maxItems": 1,
                              "minItems": 1,
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "archived": {
                            "description": "Indicates if the reservation is archived",
                            "type": "boolean"
                          },
                          "benefitStartTime": {
                            "description": "This is the DateTime when the reservation benefit started.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "billingPlan": {
                            "description": "Represent the billing plans.",
                            "enum": [
                              "Upfront",
                              "Monthly"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationBillingPlan"
                            }
                          },
                          "billingScopeId": {
                            "description": "Subscription that will be charged for purchasing Reservation",
                            "type": "string"
                          },
                          "capabilities": {
                            "description": "Capabilities of the reservation",
                            "type": "string"
                          },
                          "displayName": {
                            "description": "Friendly name for user to easily identify the reservation",
                            "type": "string"
                          },
                          "displayProvisioningState": {
                            "description": "The provisioning state of the reservation for display, e.g. Succeeded",
                            "readOnly": true,
                            "type": "string"
                          },
                          "effectiveDateTime": {
                            "description": "DateTime of the Reservation starting when this version is effective from.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "expiryDate": {
                            "description": "This is the date when the Reservation will expire.",
                            "format": "date",
                            "type": "string"
                          },
                          "extendedStatusInfo": {
                            "properties": {
                              "message": {
                                "description": "The message giving detailed information about the status code.",
                                "type": "string"
                              },
                              "statusCode": {
                                "enum": [
                                  "None",
                                  "Pending",
                                  "Processing",
                                  "Active",
                                  "PurchaseError",
                                  "PaymentInstrumentError",
                                  "Split",
                                  "Merged",
                                  "Expired",
                                  "Succeeded"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationStatusCode"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "instanceFlexibility": {
                            "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                            "enum": [
                              "On",
                              "Off"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "InstanceFlexibility"
                            }
                          },
                          "lastUpdatedDateTime": {
                            "description": "DateTime of the last time the Reservation was updated.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "mergeProperties": {
                            "properties": {
                              "mergeDestination": {
                                "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              },
                              "mergeSources": {
                                "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "provisioningState": {
                            "description": "Represent the current state of the Reservation.",
                            "enum": [
                              "Creating",
                              "PendingResourceHold",
                              "ConfirmedResourceHold",
                              "PendingBilling",
                              "ConfirmedBilling",
                              "Created",
                              "Succeeded",
                              "Cancelled",
                              "Expired",
                              "BillingFailed",
                              "Failed",
                              "Split",
                              "Merged"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ProvisioningState"
                            }
                          },
                          "provisioningSubState": {
                            "description": "The provisioning state of the reservation, e.g. Succeeded",
                            "readOnly": true,
                            "type": "string"
                          },
                          "purchaseDate": {
                            "description": "This is the date when the Reservation was purchased.",
                            "format": "date",
                            "type": "string"
                          },
                          "quantity": {
                            "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "renew": {
                            "default": false,
                            "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                            "type": "boolean"
                          },
                          "renewDestination": {
                            "description": "Reservation Id of the reservation which is purchased because of renew. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                            "type": "string"
                          },
                          "renewProperties": {
                            "properties": {
                              "billingCurrencyTotal": {
                                "description": "Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.",
                                "properties": {
                                  "amount": {
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "pricingCurrencyTotal": {
                                "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry.",
                                "properties": {
                                  "amount": {
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "purchaseProperties": {
                                "properties": {
                                  "location": {
                                    "description": "The Azure Region where the reserved resource lives.",
                                    "type": "string"
                                  },
                                  "properties": {
                                    "properties": {
                                      "appliedScopeType": {
                                        "description": "Type of the Applied Scope.",
                                        "enum": [
                                          "Single",
                                          "Shared"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "AppliedScopeType"
                                        }
                                      },
                                      "appliedScopes": {
                                        "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                        "items": {
                                          "maxItems": 1,
                                          "minItems": 1,
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "billingPlan": {
                                        "description": "Represent the billing plans.",
                                        "enum": [
                                          "Upfront",
                                          "Monthly"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReservationBillingPlan"
                                        }
                                      },
                                      "billingScopeId": {
                                        "description": "Subscription that will be charged for purchasing Reservation",
                                        "type": "string"
                                      },
                                      "displayName": {
                                        "description": "Friendly name of the Reservation",
                                        "type": "string"
                                      },
                                      "quantity": {
                                        "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "renew": {
                                        "default": false,
                                        "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                        "type": "boolean"
                                      },
                                      "reservedResourceProperties": {
                                        "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                        "properties": {
                                          "instanceFlexibility": {
                                            "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                            "enum": [
                                              "On",
                                              "Off"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "InstanceFlexibility"
                                            }
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "reservedResourceType": {
                                        "description": "The type of the resource that is being reserved.",
                                        "enum": [
                                          "VirtualMachines",
                                          "SqlDatabases",
                                          "SuseLinux",
                                          "CosmosDb",
                                          "RedHat",
                                          "SqlDataWarehouse",
                                          "VMwareCloudSimple",
                                          "RedHatOsa",
                                          "Databricks",
                                          "AppService",
                                          "ManagedDisk",
                                          "BlockBlob",
                                          "RedisCache",
                                          "AzureDataExplorer",
                                          "MySql",
                                          "MariaDb",
                                          "PostgreSql",
                                          "DedicatedHost",
                                          "SapHana",
                                          "SqlAzureHybridBenefit",
                                          "AVS",
                                          "DataFactory",
                                          "NetAppStorage",
                                          "AzureFiles",
                                          "SqlEdge",
                                          "VirtualMachineSoftware"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReservedResourceType"
                                        }
                                      },
                                      "term": {
                                        "description": "Represent the term of Reservation.",
                                        "enum": [
                                          "P1Y",
                                          "P3Y",
                                          "P5Y"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReservationTerm"
                                        }
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "sku": {
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "renewSource": {
                            "description": "Reservation Id of the reservation from which this reservation is renewed. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                            "type": "string"
                          },
                          "reservedResourceType": {
                            "description": "The type of the resource that is being reserved.",
                            "enum": [
                              "VirtualMachines",
                              "SqlDatabases",
                              "SuseLinux",
                              "CosmosDb",
                              "RedHat",
                              "SqlDataWarehouse",
                              "VMwareCloudSimple",
                              "RedHatOsa",
                              "Databricks",
                              "AppService",
                              "ManagedDisk",
                              "BlockBlob",
                              "RedisCache",
                              "AzureDataExplorer",
                              "MySql",
                              "MariaDb",
                              "PostgreSql",
                              "DedicatedHost",
                              "SapHana",
                              "SqlAzureHybridBenefit",
                              "AVS",
                              "DataFactory",
                              "NetAppStorage",
                              "AzureFiles",
                              "SqlEdge",
                              "VirtualMachineSoftware"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservedResourceType"
                            }
                          },
                          "skuDescription": {
                            "description": "Description of the SKU in english.",
                            "type": "string"
                          },
                          "splitProperties": {
                            "properties": {
                              "splitDestinations": {
                                "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "splitSource": {
                                "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "swapProperties": {
                            "properties": {
                              "swapDestination": {
                                "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              },
                              "swapSource": {
                                "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "term": {
                            "description": "Represent the term of Reservation.",
                            "enum": [
                              "P1Y",
                              "P3Y",
                              "P5Y"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationTerm"
                            }
                          },
                          "userFriendlyAppliedScopeType": {
                            "description": "The applied scope type of the reservation for display, e.g. Shared",
                            "readOnly": true,
                            "type": "string"
                          },
                          "userFriendlyRenewState": {
                            "description": "The renew state of the reservation for display, e.g. On",
                            "readOnly": true,
                            "type": "string"
                          },
                          "utilization": {
                            "description": "Reservation utilization",
                            "properties": {
                              "aggregates": {
                                "description": "The array of aggregates of a reservation's utilization",
                                "items": {
                                  "description": "The aggregate values of reservation utilization",
                                  "properties": {
                                    "grain": {
                                      "description": "The grain of the aggregate",
                                      "readOnly": true,
                                      "type": "number"
                                    },
                                    "grainUnit": {
                                      "description": "The grain unit of the aggregate",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The aggregate value",
                                      "readOnly": true,
                                      "type": "number"
                                    },
                                    "valueUnit": {
                                      "description": "The aggregate value unit",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "trend": {
                                "description": "The number of days trend for a reservation",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "readOnly": true,
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "sku": {
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationList"
          },
          {
            "oldValue": {
              "properties": {
                "mergeDestination": {
                  "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                },
                "mergeSources": {
                  "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationMergeProperties"
          },
          {
            "oldValue": {
              "description": "Information describing the type of billing plan for this reservation.",
              "properties": {
                "nextPaymentDueDate": {
                  "description": "For recurring billing plans, indicates the date when next payment will be processed. Null when total is paid off.",
                  "format": "date",
                  "type": "string"
                },
                "pricingCurrencyTotal": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "startDate": {
                  "description": "Date when the billing plan has started.",
                  "format": "date",
                  "type": "string"
                },
                "transactions": {
                  "items": {
                    "description": "Information about payment related to a reservation order.",
                    "properties": {
                      "billingAccount": {
                        "description": "Shows the Account that is charged for this payment.",
                        "type": "string"
                      },
                      "billingCurrencyTotal": {
                        "properties": {
                          "amount": {
                            "format": "double",
                            "type": "number"
                          },
                          "currencyCode": {
                            "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "dueDate": {
                        "description": "Date when the payment needs to be done.",
                        "format": "date",
                        "type": "string"
                      },
                      "extendedStatusInfo": {
                        "properties": {
                          "message": {
                            "description": "The message giving detailed information about the status code.",
                            "type": "string"
                          },
                          "statusCode": {
                            "enum": [
                              "None",
                              "Pending",
                              "Processing",
                              "Active",
                              "PurchaseError",
                              "PaymentInstrumentError",
                              "Split",
                              "Merged",
                              "Expired",
                              "Succeeded"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationStatusCode"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "paymentDate": {
                        "description": "Date when the transaction is completed. Is null when it is scheduled.",
                        "format": "date",
                        "type": "string"
                      },
                      "pricingCurrencyTotal": {
                        "properties": {
                          "amount": {
                            "format": "double",
                            "type": "number"
                          },
                          "currencyCode": {
                            "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "status": {
                        "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
                        "enum": [
                          "Succeeded",
                          "Failed",
                          "Scheduled",
                          "Cancelled"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "PaymentStatus"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationOrderBillingPlanInformation"
          },
          {
            "oldValue": {
              "properties": {
                "nextLink": {
                  "description": "Url to get the next page of reservationOrders.",
                  "type": "string"
                },
                "value": {
                  "items": {
                    "properties": {
                      "etag": {
                        "format": "int32",
                        "type": "integer"
                      },
                      "id": {
                        "description": "Identifier of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "properties": {
                          "benefitStartTime": {
                            "description": "This is the DateTime when the reservation benefit started.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "billingPlan": {
                            "description": "Represent the billing plans.",
                            "enum": [
                              "Upfront",
                              "Monthly"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationBillingPlan"
                            }
                          },
                          "createdDateTime": {
                            "description": "This is the DateTime when the reservation was created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "displayName": {
                            "description": "Friendly name for user to easily identified the reservation.",
                            "type": "string"
                          },
                          "expiryDate": {
                            "description": "This is the date when the Reservation will expire.",
                            "format": "date",
                            "type": "string"
                          },
                          "originalQuantity": {
                            "description": "Total Quantity of the SKUs purchased in the Reservation.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "planInformation": {
                            "description": "Information describing the type of billing plan for this reservation.",
                            "properties": {
                              "nextPaymentDueDate": {
                                "description": "For recurring billing plans, indicates the date when next payment will be processed. Null when total is paid off.",
                                "format": "date",
                                "type": "string"
                              },
                              "pricingCurrencyTotal": {
                                "properties": {
                                  "amount": {
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "startDate": {
                                "description": "Date when the billing plan has started.",
                                "format": "date",
                                "type": "string"
                              },
                              "transactions": {
                                "items": {
                                  "description": "Information about payment related to a reservation order.",
                                  "properties": {
                                    "billingAccount": {
                                      "description": "Shows the Account that is charged for this payment.",
                                      "type": "string"
                                    },
                                    "billingCurrencyTotal": {
                                      "properties": {
                                        "amount": {
                                          "format": "double",
                                          "type": "number"
                                        },
                                        "currencyCode": {
                                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "dueDate": {
                                      "description": "Date when the payment needs to be done.",
                                      "format": "date",
                                      "type": "string"
                                    },
                                    "extendedStatusInfo": {
                                      "properties": {
                                        "message": {
                                          "description": "The message giving detailed information about the status code.",
                                          "type": "string"
                                        },
                                        "statusCode": {
                                          "enum": [
                                            "None",
                                            "Pending",
                                            "Processing",
                                            "Active",
                                            "PurchaseError",
                                            "PaymentInstrumentError",
                                            "Split",
                                            "Merged",
                                            "Expired",
                                            "Succeeded"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "ReservationStatusCode"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "paymentDate": {
                                      "description": "Date when the transaction is completed. Is null when it is scheduled.",
                                      "format": "date",
                                      "type": "string"
                                    },
                                    "pricingCurrencyTotal": {
                                      "properties": {
                                        "amount": {
                                          "format": "double",
                                          "type": "number"
                                        },
                                        "currencyCode": {
                                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "status": {
                                      "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
                                      "enum": [
                                        "Succeeded",
                                        "Failed",
                                        "Scheduled",
                                        "Cancelled"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "PaymentStatus"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "provisioningState": {
                            "description": "Represent the current state of the Reservation.",
                            "enum": [
                              "Creating",
                              "PendingResourceHold",
                              "ConfirmedResourceHold",
                              "PendingBilling",
                              "ConfirmedBilling",
                              "Created",
                              "Succeeded",
                              "Cancelled",
                              "Expired",
                              "BillingFailed",
                              "Failed",
                              "Split",
                              "Merged"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ProvisioningState"
                            }
                          },
                          "requestDateTime": {
                            "description": "This is the DateTime when the reservation was initially requested for purchase.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "reservations": {
                            "items": {
                              "description": "The definition of the reservation.",
                              "properties": {
                                "etag": {
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "id": {
                                  "description": "Identifier of the reservation",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "kind": {
                                  "description": "Resource Provider type to be reserved.",
                                  "enum": [
                                    "Microsoft.Compute"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": false,
                                    "name": "Kind"
                                  }
                                },
                                "location": {
                                  "description": "The Azure Region where the reserved resource lives.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the reservation",
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "properties": {
                                  "description": "The properties of the reservations",
                                  "properties": {
                                    "appliedScopeProperties": {
                                      "properties": {
                                        "displayName": {
                                          "description": "Management group display name",
                                          "type": "string"
                                        },
                                        "managementGroupId": {
                                          "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                          "type": "string"
                                        },
                                        "tenantId": {
                                          "description": "Tenant ID of the applied scope type",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "appliedScopeType": {
                                      "description": "Type of the Applied Scope.",
                                      "enum": [
                                        "Single",
                                        "Shared"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "AppliedScopeType"
                                      }
                                    },
                                    "appliedScopes": {
                                      "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                      "items": {
                                        "maxItems": 1,
                                        "minItems": 1,
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "archived": {
                                      "description": "Indicates if the reservation is archived",
                                      "type": "boolean"
                                    },
                                    "benefitStartTime": {
                                      "description": "This is the DateTime when the reservation benefit started.",
                                      "format": "date-time",
                                      "type": "string"
                                    },
                                    "billingPlan": {
                                      "description": "Represent the billing plans.",
                                      "enum": [
                                        "Upfront",
                                        "Monthly"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ReservationBillingPlan"
                                      }
                                    },
                                    "billingScopeId": {
                                      "description": "Subscription that will be charged for purchasing Reservation",
                                      "type": "string"
                                    },
                                    "capabilities": {
                                      "description": "Capabilities of the reservation",
                                      "type": "string"
                                    },
                                    "displayName": {
                                      "description": "Friendly name for user to easily identify the reservation",
                                      "type": "string"
                                    },
                                    "displayProvisioningState": {
                                      "description": "The provisioning state of the reservation for display, e.g. Succeeded",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "effectiveDateTime": {
                                      "description": "DateTime of the Reservation starting when this version is effective from.",
                                      "format": "date-time",
                                      "type": "string"
                                    },
                                    "expiryDate": {
                                      "description": "This is the date when the Reservation will expire.",
                                      "format": "date",
                                      "type": "string"
                                    },
                                    "extendedStatusInfo": {
                                      "properties": {
                                        "message": {
                                          "description": "The message giving detailed information about the status code.",
                                          "type": "string"
                                        },
                                        "statusCode": {
                                          "enum": [
                                            "None",
                                            "Pending",
                                            "Processing",
                                            "Active",
                                            "PurchaseError",
                                            "PaymentInstrumentError",
                                            "Split",
                                            "Merged",
                                            "Expired",
                                            "Succeeded"
                                          ],
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "ReservationStatusCode"
                                          }
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "instanceFlexibility": {
                                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                      "enum": [
                                        "On",
                                        "Off"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "InstanceFlexibility"
                                      }
                                    },
                                    "lastUpdatedDateTime": {
                                      "description": "DateTime of the last time the Reservation was updated.",
                                      "format": "date-time",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "mergeProperties": {
                                      "properties": {
                                        "mergeDestination": {
                                          "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "type": "string"
                                        },
                                        "mergeSources": {
                                          "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "provisioningState": {
                                      "description": "Represent the current state of the Reservation.",
                                      "enum": [
                                        "Creating",
                                        "PendingResourceHold",
                                        "ConfirmedResourceHold",
                                        "PendingBilling",
                                        "ConfirmedBilling",
                                        "Created",
                                        "Succeeded",
                                        "Cancelled",
                                        "Expired",
                                        "BillingFailed",
                                        "Failed",
                                        "Split",
                                        "Merged"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ProvisioningState"
                                      }
                                    },
                                    "provisioningSubState": {
                                      "description": "The provisioning state of the reservation, e.g. Succeeded",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "purchaseDate": {
                                      "description": "This is the date when the Reservation was purchased.",
                                      "format": "date",
                                      "type": "string"
                                    },
                                    "quantity": {
                                      "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "renew": {
                                      "default": false,
                                      "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                      "type": "boolean"
                                    },
                                    "renewDestination": {
                                      "description": "Reservation Id of the reservation which is purchased because of renew. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                                      "type": "string"
                                    },
                                    "renewProperties": {
                                      "properties": {
                                        "billingCurrencyTotal": {
                                          "description": "Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.",
                                          "properties": {
                                            "amount": {
                                              "type": "number"
                                            },
                                            "currencyCode": {
                                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "pricingCurrencyTotal": {
                                          "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry.",
                                          "properties": {
                                            "amount": {
                                              "type": "number"
                                            },
                                            "currencyCode": {
                                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "purchaseProperties": {
                                          "properties": {
                                            "location": {
                                              "description": "The Azure Region where the reserved resource lives.",
                                              "type": "string"
                                            },
                                            "properties": {
                                              "properties": {
                                                "appliedScopeType": {
                                                  "description": "Type of the Applied Scope.",
                                                  "enum": [
                                                    "Single",
                                                    "Shared"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "AppliedScopeType"
                                                  }
                                                },
                                                "appliedScopes": {
                                                  "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                                  "items": {
                                                    "maxItems": 1,
                                                    "minItems": 1,
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "billingPlan": {
                                                  "description": "Represent the billing plans.",
                                                  "enum": [
                                                    "Upfront",
                                                    "Monthly"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "ReservationBillingPlan"
                                                  }
                                                },
                                                "billingScopeId": {
                                                  "description": "Subscription that will be charged for purchasing Reservation",
                                                  "type": "string"
                                                },
                                                "displayName": {
                                                  "description": "Friendly name of the Reservation",
                                                  "type": "string"
                                                },
                                                "quantity": {
                                                  "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "renew": {
                                                  "default": false,
                                                  "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                                  "type": "boolean"
                                                },
                                                "reservedResourceProperties": {
                                                  "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                                  "properties": {
                                                    "instanceFlexibility": {
                                                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                                      "enum": [
                                                        "On",
                                                        "Off"
                                                      ],
                                                      "type": "string",
                                                      "x-ms-enum": {
                                                        "modelAsString": true,
                                                        "name": "InstanceFlexibility"
                                                      }
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "reservedResourceType": {
                                                  "description": "The type of the resource that is being reserved.",
                                                  "enum": [
                                                    "VirtualMachines",
                                                    "SqlDatabases",
                                                    "SuseLinux",
                                                    "CosmosDb",
                                                    "RedHat",
                                                    "SqlDataWarehouse",
                                                    "VMwareCloudSimple",
                                                    "RedHatOsa",
                                                    "Databricks",
                                                    "AppService",
                                                    "ManagedDisk",
                                                    "BlockBlob",
                                                    "RedisCache",
                                                    "AzureDataExplorer",
                                                    "MySql",
                                                    "MariaDb",
                                                    "PostgreSql",
                                                    "DedicatedHost",
                                                    "SapHana",
                                                    "SqlAzureHybridBenefit",
                                                    "AVS",
                                                    "DataFactory",
                                                    "NetAppStorage",
                                                    "AzureFiles",
                                                    "SqlEdge",
                                                    "VirtualMachineSoftware"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "ReservedResourceType"
                                                  }
                                                },
                                                "term": {
                                                  "description": "Represent the term of Reservation.",
                                                  "enum": [
                                                    "P1Y",
                                                    "P3Y",
                                                    "P5Y"
                                                  ],
                                                  "type": "string",
                                                  "x-ms-enum": {
                                                    "modelAsString": true,
                                                    "name": "ReservationTerm"
                                                  }
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "sku": {
                                              "properties": {
                                                "name": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "renewSource": {
                                      "description": "Reservation Id of the reservation from which this reservation is renewed. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                                      "type": "string"
                                    },
                                    "reservedResourceType": {
                                      "description": "The type of the resource that is being reserved.",
                                      "enum": [
                                        "VirtualMachines",
                                        "SqlDatabases",
                                        "SuseLinux",
                                        "CosmosDb",
                                        "RedHat",
                                        "SqlDataWarehouse",
                                        "VMwareCloudSimple",
                                        "RedHatOsa",
                                        "Databricks",
                                        "AppService",
                                        "ManagedDisk",
                                        "BlockBlob",
                                        "RedisCache",
                                        "AzureDataExplorer",
                                        "MySql",
                                        "MariaDb",
                                        "PostgreSql",
                                        "DedicatedHost",
                                        "SapHana",
                                        "SqlAzureHybridBenefit",
                                        "AVS",
                                        "DataFactory",
                                        "NetAppStorage",
                                        "AzureFiles",
                                        "SqlEdge",
                                        "VirtualMachineSoftware"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ReservedResourceType"
                                      }
                                    },
                                    "skuDescription": {
                                      "description": "Description of the SKU in english.",
                                      "type": "string"
                                    },
                                    "splitProperties": {
                                      "properties": {
                                        "splitDestinations": {
                                          "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "splitSource": {
                                          "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "swapProperties": {
                                      "properties": {
                                        "swapDestination": {
                                          "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "type": "string"
                                        },
                                        "swapSource": {
                                          "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "term": {
                                      "description": "Represent the term of Reservation.",
                                      "enum": [
                                        "P1Y",
                                        "P3Y",
                                        "P5Y"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "ReservationTerm"
                                      }
                                    },
                                    "userFriendlyAppliedScopeType": {
                                      "description": "The applied scope type of the reservation for display, e.g. Shared",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "userFriendlyRenewState": {
                                      "description": "The renew state of the reservation for display, e.g. On",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "utilization": {
                                      "description": "Reservation utilization",
                                      "properties": {
                                        "aggregates": {
                                          "description": "The array of aggregates of a reservation's utilization",
                                          "items": {
                                            "description": "The aggregate values of reservation utilization",
                                            "properties": {
                                              "grain": {
                                                "description": "The grain of the aggregate",
                                                "readOnly": true,
                                                "type": "number"
                                              },
                                              "grainUnit": {
                                                "description": "The grain unit of the aggregate",
                                                "readOnly": true,
                                                "type": "string"
                                              },
                                              "value": {
                                                "description": "The aggregate value",
                                                "readOnly": true,
                                                "type": "number"
                                              },
                                              "valueUnit": {
                                                "description": "The aggregate value unit",
                                                "readOnly": true,
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "trend": {
                                          "description": "The number of days trend for a reservation",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "readOnly": true,
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "sku": {
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "systemData": {
                                  "description": "Metadata pertaining to creation and last modification of the resource.",
                                  "properties": {
                                    "createdAt": {
                                      "description": "The timestamp of resource creation (UTC).",
                                      "format": "date-time",
                                      "type": "string"
                                    },
                                    "createdBy": {
                                      "description": "The identity that created the resource.",
                                      "type": "string"
                                    },
                                    "createdByType": {
                                      "description": "The type of identity that created the resource.",
                                      "enum": [
                                        "User",
                                        "Application",
                                        "ManagedIdentity",
                                        "Key"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "createdByType"
                                      }
                                    },
                                    "lastModifiedAt": {
                                      "description": "The timestamp of resource last modification (UTC)",
                                      "format": "date-time",
                                      "type": "string"
                                    },
                                    "lastModifiedBy": {
                                      "description": "The identity that last modified the resource.",
                                      "type": "string"
                                    },
                                    "lastModifiedByType": {
                                      "description": "The type of identity that last modified the resource.",
                                      "enum": [
                                        "User",
                                        "Application",
                                        "ManagedIdentity",
                                        "Key"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "createdByType"
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "type": "object"
                                },
                                "type": {
                                  "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                                  "readOnly": true,
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "x-ms-azure-resource": true
                            },
                            "type": "array"
                          },
                          "term": {
                            "description": "Represent the term of Reservation.",
                            "enum": [
                              "P1Y",
                              "P3Y",
                              "P5Y"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationTerm"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "description": "Type of resource. \"Microsoft.Capacity/reservations\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationOrderList"
          },
          {
            "oldValue": {
              "properties": {
                "benefitStartTime": {
                  "description": "This is the DateTime when the reservation benefit started.",
                  "format": "date-time",
                  "type": "string"
                },
                "billingPlan": {
                  "description": "Represent the billing plans.",
                  "enum": [
                    "Upfront",
                    "Monthly"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationBillingPlan"
                  }
                },
                "createdDateTime": {
                  "description": "This is the DateTime when the reservation was created.",
                  "format": "date-time",
                  "type": "string"
                },
                "displayName": {
                  "description": "Friendly name for user to easily identified the reservation.",
                  "type": "string"
                },
                "expiryDate": {
                  "description": "This is the date when the Reservation will expire.",
                  "format": "date",
                  "type": "string"
                },
                "originalQuantity": {
                  "description": "Total Quantity of the SKUs purchased in the Reservation.",
                  "format": "int32",
                  "type": "integer"
                },
                "planInformation": {
                  "description": "Information describing the type of billing plan for this reservation.",
                  "properties": {
                    "nextPaymentDueDate": {
                      "description": "For recurring billing plans, indicates the date when next payment will be processed. Null when total is paid off.",
                      "format": "date",
                      "type": "string"
                    },
                    "pricingCurrencyTotal": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "startDate": {
                      "description": "Date when the billing plan has started.",
                      "format": "date",
                      "type": "string"
                    },
                    "transactions": {
                      "items": {
                        "description": "Information about payment related to a reservation order.",
                        "properties": {
                          "billingAccount": {
                            "description": "Shows the Account that is charged for this payment.",
                            "type": "string"
                          },
                          "billingCurrencyTotal": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "dueDate": {
                            "description": "Date when the payment needs to be done.",
                            "format": "date",
                            "type": "string"
                          },
                          "extendedStatusInfo": {
                            "properties": {
                              "message": {
                                "description": "The message giving detailed information about the status code.",
                                "type": "string"
                              },
                              "statusCode": {
                                "enum": [
                                  "None",
                                  "Pending",
                                  "Processing",
                                  "Active",
                                  "PurchaseError",
                                  "PaymentInstrumentError",
                                  "Split",
                                  "Merged",
                                  "Expired",
                                  "Succeeded"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationStatusCode"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "paymentDate": {
                            "description": "Date when the transaction is completed. Is null when it is scheduled.",
                            "format": "date",
                            "type": "string"
                          },
                          "pricingCurrencyTotal": {
                            "properties": {
                              "amount": {
                                "format": "double",
                                "type": "number"
                              },
                              "currencyCode": {
                                "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "status": {
                            "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Scheduled",
                              "Cancelled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "PaymentStatus"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "provisioningState": {
                  "description": "Represent the current state of the Reservation.",
                  "enum": [
                    "Creating",
                    "PendingResourceHold",
                    "ConfirmedResourceHold",
                    "PendingBilling",
                    "ConfirmedBilling",
                    "Created",
                    "Succeeded",
                    "Cancelled",
                    "Expired",
                    "BillingFailed",
                    "Failed",
                    "Split",
                    "Merged"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ProvisioningState"
                  }
                },
                "requestDateTime": {
                  "description": "This is the DateTime when the reservation was initially requested for purchase.",
                  "format": "date-time",
                  "type": "string"
                },
                "reservations": {
                  "items": {
                    "description": "The definition of the reservation.",
                    "properties": {
                      "etag": {
                        "format": "int32",
                        "type": "integer"
                      },
                      "id": {
                        "description": "Identifier of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "kind": {
                        "description": "Resource Provider type to be reserved.",
                        "enum": [
                          "Microsoft.Compute"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Kind"
                        }
                      },
                      "location": {
                        "description": "The Azure Region where the reserved resource lives.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "The properties of the reservations",
                        "properties": {
                          "appliedScopeProperties": {
                            "properties": {
                              "displayName": {
                                "description": "Management group display name",
                                "type": "string"
                              },
                              "managementGroupId": {
                                "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                "type": "string"
                              },
                              "tenantId": {
                                "description": "Tenant ID of the applied scope type",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "appliedScopeType": {
                            "description": "Type of the Applied Scope.",
                            "enum": [
                              "Single",
                              "Shared"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "AppliedScopeType"
                            }
                          },
                          "appliedScopes": {
                            "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                            "items": {
                              "maxItems": 1,
                              "minItems": 1,
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "archived": {
                            "description": "Indicates if the reservation is archived",
                            "type": "boolean"
                          },
                          "benefitStartTime": {
                            "description": "This is the DateTime when the reservation benefit started.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "billingPlan": {
                            "description": "Represent the billing plans.",
                            "enum": [
                              "Upfront",
                              "Monthly"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationBillingPlan"
                            }
                          },
                          "billingScopeId": {
                            "description": "Subscription that will be charged for purchasing Reservation",
                            "type": "string"
                          },
                          "capabilities": {
                            "description": "Capabilities of the reservation",
                            "type": "string"
                          },
                          "displayName": {
                            "description": "Friendly name for user to easily identify the reservation",
                            "type": "string"
                          },
                          "displayProvisioningState": {
                            "description": "The provisioning state of the reservation for display, e.g. Succeeded",
                            "readOnly": true,
                            "type": "string"
                          },
                          "effectiveDateTime": {
                            "description": "DateTime of the Reservation starting when this version is effective from.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "expiryDate": {
                            "description": "This is the date when the Reservation will expire.",
                            "format": "date",
                            "type": "string"
                          },
                          "extendedStatusInfo": {
                            "properties": {
                              "message": {
                                "description": "The message giving detailed information about the status code.",
                                "type": "string"
                              },
                              "statusCode": {
                                "enum": [
                                  "None",
                                  "Pending",
                                  "Processing",
                                  "Active",
                                  "PurchaseError",
                                  "PaymentInstrumentError",
                                  "Split",
                                  "Merged",
                                  "Expired",
                                  "Succeeded"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationStatusCode"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "instanceFlexibility": {
                            "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                            "enum": [
                              "On",
                              "Off"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "InstanceFlexibility"
                            }
                          },
                          "lastUpdatedDateTime": {
                            "description": "DateTime of the last time the Reservation was updated.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "mergeProperties": {
                            "properties": {
                              "mergeDestination": {
                                "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              },
                              "mergeSources": {
                                "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "provisioningState": {
                            "description": "Represent the current state of the Reservation.",
                            "enum": [
                              "Creating",
                              "PendingResourceHold",
                              "ConfirmedResourceHold",
                              "PendingBilling",
                              "ConfirmedBilling",
                              "Created",
                              "Succeeded",
                              "Cancelled",
                              "Expired",
                              "BillingFailed",
                              "Failed",
                              "Split",
                              "Merged"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ProvisioningState"
                            }
                          },
                          "provisioningSubState": {
                            "description": "The provisioning state of the reservation, e.g. Succeeded",
                            "readOnly": true,
                            "type": "string"
                          },
                          "purchaseDate": {
                            "description": "This is the date when the Reservation was purchased.",
                            "format": "date",
                            "type": "string"
                          },
                          "quantity": {
                            "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "renew": {
                            "default": false,
                            "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                            "type": "boolean"
                          },
                          "renewDestination": {
                            "description": "Reservation Id of the reservation which is purchased because of renew. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                            "type": "string"
                          },
                          "renewProperties": {
                            "properties": {
                              "billingCurrencyTotal": {
                                "description": "Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.",
                                "properties": {
                                  "amount": {
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "pricingCurrencyTotal": {
                                "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry.",
                                "properties": {
                                  "amount": {
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "purchaseProperties": {
                                "properties": {
                                  "location": {
                                    "description": "The Azure Region where the reserved resource lives.",
                                    "type": "string"
                                  },
                                  "properties": {
                                    "properties": {
                                      "appliedScopeType": {
                                        "description": "Type of the Applied Scope.",
                                        "enum": [
                                          "Single",
                                          "Shared"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "AppliedScopeType"
                                        }
                                      },
                                      "appliedScopes": {
                                        "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                        "items": {
                                          "maxItems": 1,
                                          "minItems": 1,
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "billingPlan": {
                                        "description": "Represent the billing plans.",
                                        "enum": [
                                          "Upfront",
                                          "Monthly"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReservationBillingPlan"
                                        }
                                      },
                                      "billingScopeId": {
                                        "description": "Subscription that will be charged for purchasing Reservation",
                                        "type": "string"
                                      },
                                      "displayName": {
                                        "description": "Friendly name of the Reservation",
                                        "type": "string"
                                      },
                                      "quantity": {
                                        "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "renew": {
                                        "default": false,
                                        "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                        "type": "boolean"
                                      },
                                      "reservedResourceProperties": {
                                        "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                        "properties": {
                                          "instanceFlexibility": {
                                            "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                            "enum": [
                                              "On",
                                              "Off"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "InstanceFlexibility"
                                            }
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "reservedResourceType": {
                                        "description": "The type of the resource that is being reserved.",
                                        "enum": [
                                          "VirtualMachines",
                                          "SqlDatabases",
                                          "SuseLinux",
                                          "CosmosDb",
                                          "RedHat",
                                          "SqlDataWarehouse",
                                          "VMwareCloudSimple",
                                          "RedHatOsa",
                                          "Databricks",
                                          "AppService",
                                          "ManagedDisk",
                                          "BlockBlob",
                                          "RedisCache",
                                          "AzureDataExplorer",
                                          "MySql",
                                          "MariaDb",
                                          "PostgreSql",
                                          "DedicatedHost",
                                          "SapHana",
                                          "SqlAzureHybridBenefit",
                                          "AVS",
                                          "DataFactory",
                                          "NetAppStorage",
                                          "AzureFiles",
                                          "SqlEdge",
                                          "VirtualMachineSoftware"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReservedResourceType"
                                        }
                                      },
                                      "term": {
                                        "description": "Represent the term of Reservation.",
                                        "enum": [
                                          "P1Y",
                                          "P3Y",
                                          "P5Y"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReservationTerm"
                                        }
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "sku": {
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "renewSource": {
                            "description": "Reservation Id of the reservation from which this reservation is renewed. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                            "type": "string"
                          },
                          "reservedResourceType": {
                            "description": "The type of the resource that is being reserved.",
                            "enum": [
                              "VirtualMachines",
                              "SqlDatabases",
                              "SuseLinux",
                              "CosmosDb",
                              "RedHat",
                              "SqlDataWarehouse",
                              "VMwareCloudSimple",
                              "RedHatOsa",
                              "Databricks",
                              "AppService",
                              "ManagedDisk",
                              "BlockBlob",
                              "RedisCache",
                              "AzureDataExplorer",
                              "MySql",
                              "MariaDb",
                              "PostgreSql",
                              "DedicatedHost",
                              "SapHana",
                              "SqlAzureHybridBenefit",
                              "AVS",
                              "DataFactory",
                              "NetAppStorage",
                              "AzureFiles",
                              "SqlEdge",
                              "VirtualMachineSoftware"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservedResourceType"
                            }
                          },
                          "skuDescription": {
                            "description": "Description of the SKU in english.",
                            "type": "string"
                          },
                          "splitProperties": {
                            "properties": {
                              "splitDestinations": {
                                "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "splitSource": {
                                "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "swapProperties": {
                            "properties": {
                              "swapDestination": {
                                "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              },
                              "swapSource": {
                                "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "term": {
                            "description": "Represent the term of Reservation.",
                            "enum": [
                              "P1Y",
                              "P3Y",
                              "P5Y"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationTerm"
                            }
                          },
                          "userFriendlyAppliedScopeType": {
                            "description": "The applied scope type of the reservation for display, e.g. Shared",
                            "readOnly": true,
                            "type": "string"
                          },
                          "userFriendlyRenewState": {
                            "description": "The renew state of the reservation for display, e.g. On",
                            "readOnly": true,
                            "type": "string"
                          },
                          "utilization": {
                            "description": "Reservation utilization",
                            "properties": {
                              "aggregates": {
                                "description": "The array of aggregates of a reservation's utilization",
                                "items": {
                                  "description": "The aggregate values of reservation utilization",
                                  "properties": {
                                    "grain": {
                                      "description": "The grain of the aggregate",
                                      "readOnly": true,
                                      "type": "number"
                                    },
                                    "grainUnit": {
                                      "description": "The grain unit of the aggregate",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The aggregate value",
                                      "readOnly": true,
                                      "type": "number"
                                    },
                                    "valueUnit": {
                                      "description": "The aggregate value unit",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "trend": {
                                "description": "The number of days trend for a reservation",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "readOnly": true,
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "sku": {
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "type": "array"
                },
                "term": {
                  "description": "Represent the term of Reservation.",
                  "enum": [
                    "P1Y",
                    "P3Y",
                    "P5Y"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationTerm"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationOrderProperties"
          },
          {
            "oldValue": {
              "properties": {
                "etag": {
                  "format": "int32",
                  "type": "integer"
                },
                "id": {
                  "description": "Identifier of the reservation",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "Name of the reservation",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "properties": {
                    "benefitStartTime": {
                      "description": "This is the DateTime when the reservation benefit started.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "billingPlan": {
                      "description": "Represent the billing plans.",
                      "enum": [
                        "Upfront",
                        "Monthly"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationBillingPlan"
                      }
                    },
                    "createdDateTime": {
                      "description": "This is the DateTime when the reservation was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "Friendly name for user to easily identified the reservation.",
                      "type": "string"
                    },
                    "expiryDate": {
                      "description": "This is the date when the Reservation will expire.",
                      "format": "date",
                      "type": "string"
                    },
                    "originalQuantity": {
                      "description": "Total Quantity of the SKUs purchased in the Reservation.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "planInformation": {
                      "description": "Information describing the type of billing plan for this reservation.",
                      "properties": {
                        "nextPaymentDueDate": {
                          "description": "For recurring billing plans, indicates the date when next payment will be processed. Null when total is paid off.",
                          "format": "date",
                          "type": "string"
                        },
                        "pricingCurrencyTotal": {
                          "properties": {
                            "amount": {
                              "format": "double",
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "startDate": {
                          "description": "Date when the billing plan has started.",
                          "format": "date",
                          "type": "string"
                        },
                        "transactions": {
                          "items": {
                            "description": "Information about payment related to a reservation order.",
                            "properties": {
                              "billingAccount": {
                                "description": "Shows the Account that is charged for this payment.",
                                "type": "string"
                              },
                              "billingCurrencyTotal": {
                                "properties": {
                                  "amount": {
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "dueDate": {
                                "description": "Date when the payment needs to be done.",
                                "format": "date",
                                "type": "string"
                              },
                              "extendedStatusInfo": {
                                "properties": {
                                  "message": {
                                    "description": "The message giving detailed information about the status code.",
                                    "type": "string"
                                  },
                                  "statusCode": {
                                    "enum": [
                                      "None",
                                      "Pending",
                                      "Processing",
                                      "Active",
                                      "PurchaseError",
                                      "PaymentInstrumentError",
                                      "Split",
                                      "Merged",
                                      "Expired",
                                      "Succeeded"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservationStatusCode"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "paymentDate": {
                                "description": "Date when the transaction is completed. Is null when it is scheduled.",
                                "format": "date",
                                "type": "string"
                              },
                              "pricingCurrencyTotal": {
                                "properties": {
                                  "amount": {
                                    "format": "double",
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "status": {
                                "description": "Describes whether the payment is completed, failed, cancelled or scheduled in the future.",
                                "enum": [
                                  "Succeeded",
                                  "Failed",
                                  "Scheduled",
                                  "Cancelled"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "PaymentStatus"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "provisioningState": {
                      "description": "Represent the current state of the Reservation.",
                      "enum": [
                        "Creating",
                        "PendingResourceHold",
                        "ConfirmedResourceHold",
                        "PendingBilling",
                        "ConfirmedBilling",
                        "Created",
                        "Succeeded",
                        "Cancelled",
                        "Expired",
                        "BillingFailed",
                        "Failed",
                        "Split",
                        "Merged"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ProvisioningState"
                      }
                    },
                    "requestDateTime": {
                      "description": "This is the DateTime when the reservation was initially requested for purchase.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "reservations": {
                      "items": {
                        "description": "The definition of the reservation.",
                        "properties": {
                          "etag": {
                            "format": "int32",
                            "type": "integer"
                          },
                          "id": {
                            "description": "Identifier of the reservation",
                            "readOnly": true,
                            "type": "string"
                          },
                          "kind": {
                            "description": "Resource Provider type to be reserved.",
                            "enum": [
                              "Microsoft.Compute"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": false,
                              "name": "Kind"
                            }
                          },
                          "location": {
                            "description": "The Azure Region where the reserved resource lives.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the reservation",
                            "readOnly": true,
                            "type": "string"
                          },
                          "properties": {
                            "description": "The properties of the reservations",
                            "properties": {
                              "appliedScopeProperties": {
                                "properties": {
                                  "displayName": {
                                    "description": "Management group display name",
                                    "type": "string"
                                  },
                                  "managementGroupId": {
                                    "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "Tenant ID of the applied scope type",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "appliedScopeType": {
                                "description": "Type of the Applied Scope.",
                                "enum": [
                                  "Single",
                                  "Shared"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "AppliedScopeType"
                                }
                              },
                              "appliedScopes": {
                                "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                "items": {
                                  "maxItems": 1,
                                  "minItems": 1,
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "archived": {
                                "description": "Indicates if the reservation is archived",
                                "type": "boolean"
                              },
                              "benefitStartTime": {
                                "description": "This is the DateTime when the reservation benefit started.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "billingPlan": {
                                "description": "Represent the billing plans.",
                                "enum": [
                                  "Upfront",
                                  "Monthly"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationBillingPlan"
                                }
                              },
                              "billingScopeId": {
                                "description": "Subscription that will be charged for purchasing Reservation",
                                "type": "string"
                              },
                              "capabilities": {
                                "description": "Capabilities of the reservation",
                                "type": "string"
                              },
                              "displayName": {
                                "description": "Friendly name for user to easily identify the reservation",
                                "type": "string"
                              },
                              "displayProvisioningState": {
                                "description": "The provisioning state of the reservation for display, e.g. Succeeded",
                                "readOnly": true,
                                "type": "string"
                              },
                              "effectiveDateTime": {
                                "description": "DateTime of the Reservation starting when this version is effective from.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "expiryDate": {
                                "description": "This is the date when the Reservation will expire.",
                                "format": "date",
                                "type": "string"
                              },
                              "extendedStatusInfo": {
                                "properties": {
                                  "message": {
                                    "description": "The message giving detailed information about the status code.",
                                    "type": "string"
                                  },
                                  "statusCode": {
                                    "enum": [
                                      "None",
                                      "Pending",
                                      "Processing",
                                      "Active",
                                      "PurchaseError",
                                      "PaymentInstrumentError",
                                      "Split",
                                      "Merged",
                                      "Expired",
                                      "Succeeded"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservationStatusCode"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "instanceFlexibility": {
                                "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                "enum": [
                                  "On",
                                  "Off"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "InstanceFlexibility"
                                }
                              },
                              "lastUpdatedDateTime": {
                                "description": "DateTime of the last time the Reservation was updated.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "mergeProperties": {
                                "properties": {
                                  "mergeDestination": {
                                    "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "mergeSources": {
                                    "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              },
                              "provisioningState": {
                                "description": "Represent the current state of the Reservation.",
                                "enum": [
                                  "Creating",
                                  "PendingResourceHold",
                                  "ConfirmedResourceHold",
                                  "PendingBilling",
                                  "ConfirmedBilling",
                                  "Created",
                                  "Succeeded",
                                  "Cancelled",
                                  "Expired",
                                  "BillingFailed",
                                  "Failed",
                                  "Split",
                                  "Merged"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ProvisioningState"
                                }
                              },
                              "provisioningSubState": {
                                "description": "The provisioning state of the reservation, e.g. Succeeded",
                                "readOnly": true,
                                "type": "string"
                              },
                              "purchaseDate": {
                                "description": "This is the date when the Reservation was purchased.",
                                "format": "date",
                                "type": "string"
                              },
                              "quantity": {
                                "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "renew": {
                                "default": false,
                                "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                "type": "boolean"
                              },
                              "renewDestination": {
                                "description": "Reservation Id of the reservation which is purchased because of renew. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                                "type": "string"
                              },
                              "renewProperties": {
                                "properties": {
                                  "billingCurrencyTotal": {
                                    "description": "Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.",
                                    "properties": {
                                      "amount": {
                                        "type": "number"
                                      },
                                      "currencyCode": {
                                        "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "pricingCurrencyTotal": {
                                    "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry.",
                                    "properties": {
                                      "amount": {
                                        "type": "number"
                                      },
                                      "currencyCode": {
                                        "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "purchaseProperties": {
                                    "properties": {
                                      "location": {
                                        "description": "The Azure Region where the reserved resource lives.",
                                        "type": "string"
                                      },
                                      "properties": {
                                        "properties": {
                                          "appliedScopeType": {
                                            "description": "Type of the Applied Scope.",
                                            "enum": [
                                              "Single",
                                              "Shared"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "AppliedScopeType"
                                            }
                                          },
                                          "appliedScopes": {
                                            "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                            "items": {
                                              "maxItems": 1,
                                              "minItems": 1,
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "billingPlan": {
                                            "description": "Represent the billing plans.",
                                            "enum": [
                                              "Upfront",
                                              "Monthly"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "ReservationBillingPlan"
                                            }
                                          },
                                          "billingScopeId": {
                                            "description": "Subscription that will be charged for purchasing Reservation",
                                            "type": "string"
                                          },
                                          "displayName": {
                                            "description": "Friendly name of the Reservation",
                                            "type": "string"
                                          },
                                          "quantity": {
                                            "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "renew": {
                                            "default": false,
                                            "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                            "type": "boolean"
                                          },
                                          "reservedResourceProperties": {
                                            "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                            "properties": {
                                              "instanceFlexibility": {
                                                "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                                "enum": [
                                                  "On",
                                                  "Off"
                                                ],
                                                "type": "string",
                                                "x-ms-enum": {
                                                  "modelAsString": true,
                                                  "name": "InstanceFlexibility"
                                                }
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "reservedResourceType": {
                                            "description": "The type of the resource that is being reserved.",
                                            "enum": [
                                              "VirtualMachines",
                                              "SqlDatabases",
                                              "SuseLinux",
                                              "CosmosDb",
                                              "RedHat",
                                              "SqlDataWarehouse",
                                              "VMwareCloudSimple",
                                              "RedHatOsa",
                                              "Databricks",
                                              "AppService",
                                              "ManagedDisk",
                                              "BlockBlob",
                                              "RedisCache",
                                              "AzureDataExplorer",
                                              "MySql",
                                              "MariaDb",
                                              "PostgreSql",
                                              "DedicatedHost",
                                              "SapHana",
                                              "SqlAzureHybridBenefit",
                                              "AVS",
                                              "DataFactory",
                                              "NetAppStorage",
                                              "AzureFiles",
                                              "SqlEdge",
                                              "VirtualMachineSoftware"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "ReservedResourceType"
                                            }
                                          },
                                          "term": {
                                            "description": "Represent the term of Reservation.",
                                            "enum": [
                                              "P1Y",
                                              "P3Y",
                                              "P5Y"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "ReservationTerm"
                                            }
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "sku": {
                                        "properties": {
                                          "name": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "renewSource": {
                                "description": "Reservation Id of the reservation from which this reservation is renewed. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                                "type": "string"
                              },
                              "reservedResourceType": {
                                "description": "The type of the resource that is being reserved.",
                                "enum": [
                                  "VirtualMachines",
                                  "SqlDatabases",
                                  "SuseLinux",
                                  "CosmosDb",
                                  "RedHat",
                                  "SqlDataWarehouse",
                                  "VMwareCloudSimple",
                                  "RedHatOsa",
                                  "Databricks",
                                  "AppService",
                                  "ManagedDisk",
                                  "BlockBlob",
                                  "RedisCache",
                                  "AzureDataExplorer",
                                  "MySql",
                                  "MariaDb",
                                  "PostgreSql",
                                  "DedicatedHost",
                                  "SapHana",
                                  "SqlAzureHybridBenefit",
                                  "AVS",
                                  "DataFactory",
                                  "NetAppStorage",
                                  "AzureFiles",
                                  "SqlEdge",
                                  "VirtualMachineSoftware"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservedResourceType"
                                }
                              },
                              "skuDescription": {
                                "description": "Description of the SKU in english.",
                                "type": "string"
                              },
                              "splitProperties": {
                                "properties": {
                                  "splitDestinations": {
                                    "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "splitSource": {
                                    "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "swapProperties": {
                                "properties": {
                                  "swapDestination": {
                                    "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  },
                                  "swapSource": {
                                    "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "term": {
                                "description": "Represent the term of Reservation.",
                                "enum": [
                                  "P1Y",
                                  "P3Y",
                                  "P5Y"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationTerm"
                                }
                              },
                              "userFriendlyAppliedScopeType": {
                                "description": "The applied scope type of the reservation for display, e.g. Shared",
                                "readOnly": true,
                                "type": "string"
                              },
                              "userFriendlyRenewState": {
                                "description": "The renew state of the reservation for display, e.g. On",
                                "readOnly": true,
                                "type": "string"
                              },
                              "utilization": {
                                "description": "Reservation utilization",
                                "properties": {
                                  "aggregates": {
                                    "description": "The array of aggregates of a reservation's utilization",
                                    "items": {
                                      "description": "The aggregate values of reservation utilization",
                                      "properties": {
                                        "grain": {
                                          "description": "The grain of the aggregate",
                                          "readOnly": true,
                                          "type": "number"
                                        },
                                        "grainUnit": {
                                          "description": "The grain unit of the aggregate",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "value": {
                                          "description": "The aggregate value",
                                          "readOnly": true,
                                          "type": "number"
                                        },
                                        "valueUnit": {
                                          "description": "The aggregate value unit",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "trend": {
                                    "description": "The number of days trend for a reservation",
                                    "readOnly": true,
                                    "type": "string"
                                  }
                                },
                                "readOnly": true,
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "sku": {
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "systemData": {
                            "description": "Metadata pertaining to creation and last modification of the resource.",
                            "properties": {
                              "createdAt": {
                                "description": "The timestamp of resource creation (UTC).",
                                "format": "date-time",
                                "type": "string"
                              },
                              "createdBy": {
                                "description": "The identity that created the resource.",
                                "type": "string"
                              },
                              "createdByType": {
                                "description": "The type of identity that created the resource.",
                                "enum": [
                                  "User",
                                  "Application",
                                  "ManagedIdentity",
                                  "Key"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "createdByType"
                                }
                              },
                              "lastModifiedAt": {
                                "description": "The timestamp of resource last modification (UTC)",
                                "format": "date-time",
                                "type": "string"
                              },
                              "lastModifiedBy": {
                                "description": "The identity that last modified the resource.",
                                "type": "string"
                              },
                              "lastModifiedByType": {
                                "description": "The type of identity that last modified the resource.",
                                "enum": [
                                  "User",
                                  "Application",
                                  "ManagedIdentity",
                                  "Key"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "createdByType"
                                }
                              }
                            },
                            "readOnly": true,
                            "type": "object"
                          },
                          "type": {
                            "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "x-ms-azure-resource": true
                      },
                      "type": "array"
                    },
                    "term": {
                      "description": "Represent the term of Reservation.",
                      "enum": [
                        "P1Y",
                        "P3Y",
                        "P5Y"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationTerm"
                      }
                    }
                  },
                  "type": "object"
                },
                "systemData": {
                  "description": "Metadata pertaining to creation and last modification of the resource.",
                  "properties": {
                    "createdAt": {
                      "description": "The timestamp of resource creation (UTC).",
                      "format": "date-time",
                      "type": "string"
                    },
                    "createdBy": {
                      "description": "The identity that created the resource.",
                      "type": "string"
                    },
                    "createdByType": {
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "createdByType"
                      }
                    },
                    "lastModifiedAt": {
                      "description": "The timestamp of resource last modification (UTC)",
                      "format": "date-time",
                      "type": "string"
                    },
                    "lastModifiedBy": {
                      "description": "The identity that last modified the resource.",
                      "type": "string"
                    },
                    "lastModifiedByType": {
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "createdByType"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                },
                "type": {
                  "description": "Type of resource. \"Microsoft.Capacity/reservations\"",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationOrderResponse"
          },
          {
            "oldValue": {
              "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
              "format": "int32",
              "type": "integer"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationQuantity"
          },
          {
            "oldValue": {
              "description": "The definition of the reservation.",
              "properties": {
                "etag": {
                  "format": "int32",
                  "type": "integer"
                },
                "id": {
                  "description": "Identifier of the reservation",
                  "readOnly": true,
                  "type": "string"
                },
                "kind": {
                  "description": "Resource Provider type to be reserved.",
                  "enum": [
                    "Microsoft.Compute"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": false,
                    "name": "Kind"
                  }
                },
                "location": {
                  "description": "The Azure Region where the reserved resource lives.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the reservation",
                  "readOnly": true,
                  "type": "string"
                },
                "properties": {
                  "description": "The properties of the reservations",
                  "properties": {
                    "appliedScopeProperties": {
                      "properties": {
                        "displayName": {
                          "description": "Management group display name",
                          "type": "string"
                        },
                        "managementGroupId": {
                          "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                          "type": "string"
                        },
                        "tenantId": {
                          "description": "Tenant ID of the applied scope type",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "appliedScopeType": {
                      "description": "Type of the Applied Scope.",
                      "enum": [
                        "Single",
                        "Shared"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "AppliedScopeType"
                      }
                    },
                    "appliedScopes": {
                      "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                      "items": {
                        "maxItems": 1,
                        "minItems": 1,
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "archived": {
                      "description": "Indicates if the reservation is archived",
                      "type": "boolean"
                    },
                    "benefitStartTime": {
                      "description": "This is the DateTime when the reservation benefit started.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "billingPlan": {
                      "description": "Represent the billing plans.",
                      "enum": [
                        "Upfront",
                        "Monthly"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationBillingPlan"
                      }
                    },
                    "billingScopeId": {
                      "description": "Subscription that will be charged for purchasing Reservation",
                      "type": "string"
                    },
                    "capabilities": {
                      "description": "Capabilities of the reservation",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "Friendly name for user to easily identify the reservation",
                      "type": "string"
                    },
                    "displayProvisioningState": {
                      "description": "The provisioning state of the reservation for display, e.g. Succeeded",
                      "readOnly": true,
                      "type": "string"
                    },
                    "effectiveDateTime": {
                      "description": "DateTime of the Reservation starting when this version is effective from.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "expiryDate": {
                      "description": "This is the date when the Reservation will expire.",
                      "format": "date",
                      "type": "string"
                    },
                    "extendedStatusInfo": {
                      "properties": {
                        "message": {
                          "description": "The message giving detailed information about the status code.",
                          "type": "string"
                        },
                        "statusCode": {
                          "enum": [
                            "None",
                            "Pending",
                            "Processing",
                            "Active",
                            "PurchaseError",
                            "PaymentInstrumentError",
                            "Split",
                            "Merged",
                            "Expired",
                            "Succeeded"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservationStatusCode"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "instanceFlexibility": {
                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                      "enum": [
                        "On",
                        "Off"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "InstanceFlexibility"
                      }
                    },
                    "lastUpdatedDateTime": {
                      "description": "DateTime of the last time the Reservation was updated.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "mergeProperties": {
                      "properties": {
                        "mergeDestination": {
                          "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "type": "string"
                        },
                        "mergeSources": {
                          "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "provisioningState": {
                      "description": "Represent the current state of the Reservation.",
                      "enum": [
                        "Creating",
                        "PendingResourceHold",
                        "ConfirmedResourceHold",
                        "PendingBilling",
                        "ConfirmedBilling",
                        "Created",
                        "Succeeded",
                        "Cancelled",
                        "Expired",
                        "BillingFailed",
                        "Failed",
                        "Split",
                        "Merged"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ProvisioningState"
                      }
                    },
                    "provisioningSubState": {
                      "description": "The provisioning state of the reservation, e.g. Succeeded",
                      "readOnly": true,
                      "type": "string"
                    },
                    "purchaseDate": {
                      "description": "This is the date when the Reservation was purchased.",
                      "format": "date",
                      "type": "string"
                    },
                    "quantity": {
                      "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "renew": {
                      "default": false,
                      "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                      "type": "boolean"
                    },
                    "renewDestination": {
                      "description": "Reservation Id of the reservation which is purchased because of renew. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                      "type": "string"
                    },
                    "renewProperties": {
                      "properties": {
                        "billingCurrencyTotal": {
                          "description": "Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.",
                          "properties": {
                            "amount": {
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "pricingCurrencyTotal": {
                          "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry.",
                          "properties": {
                            "amount": {
                              "type": "number"
                            },
                            "currencyCode": {
                              "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "purchaseProperties": {
                          "properties": {
                            "location": {
                              "description": "The Azure Region where the reserved resource lives.",
                              "type": "string"
                            },
                            "properties": {
                              "properties": {
                                "appliedScopeType": {
                                  "description": "Type of the Applied Scope.",
                                  "enum": [
                                    "Single",
                                    "Shared"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "AppliedScopeType"
                                  }
                                },
                                "appliedScopes": {
                                  "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                  "items": {
                                    "maxItems": 1,
                                    "minItems": 1,
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "billingPlan": {
                                  "description": "Represent the billing plans.",
                                  "enum": [
                                    "Upfront",
                                    "Monthly"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReservationBillingPlan"
                                  }
                                },
                                "billingScopeId": {
                                  "description": "Subscription that will be charged for purchasing Reservation",
                                  "type": "string"
                                },
                                "displayName": {
                                  "description": "Friendly name of the Reservation",
                                  "type": "string"
                                },
                                "quantity": {
                                  "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "renew": {
                                  "default": false,
                                  "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                  "type": "boolean"
                                },
                                "reservedResourceProperties": {
                                  "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                  "properties": {
                                    "instanceFlexibility": {
                                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                      "enum": [
                                        "On",
                                        "Off"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "InstanceFlexibility"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "reservedResourceType": {
                                  "description": "The type of the resource that is being reserved.",
                                  "enum": [
                                    "VirtualMachines",
                                    "SqlDatabases",
                                    "SuseLinux",
                                    "CosmosDb",
                                    "RedHat",
                                    "SqlDataWarehouse",
                                    "VMwareCloudSimple",
                                    "RedHatOsa",
                                    "Databricks",
                                    "AppService",
                                    "ManagedDisk",
                                    "BlockBlob",
                                    "RedisCache",
                                    "AzureDataExplorer",
                                    "MySql",
                                    "MariaDb",
                                    "PostgreSql",
                                    "DedicatedHost",
                                    "SapHana",
                                    "SqlAzureHybridBenefit",
                                    "AVS",
                                    "DataFactory",
                                    "NetAppStorage",
                                    "AzureFiles",
                                    "SqlEdge",
                                    "VirtualMachineSoftware"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReservedResourceType"
                                  }
                                },
                                "term": {
                                  "description": "Represent the term of Reservation.",
                                  "enum": [
                                    "P1Y",
                                    "P3Y",
                                    "P5Y"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReservationTerm"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "sku": {
                              "properties": {
                                "name": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "renewSource": {
                      "description": "Reservation Id of the reservation from which this reservation is renewed. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                      "type": "string"
                    },
                    "reservedResourceType": {
                      "description": "The type of the resource that is being reserved.",
                      "enum": [
                        "VirtualMachines",
                        "SqlDatabases",
                        "SuseLinux",
                        "CosmosDb",
                        "RedHat",
                        "SqlDataWarehouse",
                        "VMwareCloudSimple",
                        "RedHatOsa",
                        "Databricks",
                        "AppService",
                        "ManagedDisk",
                        "BlockBlob",
                        "RedisCache",
                        "AzureDataExplorer",
                        "MySql",
                        "MariaDb",
                        "PostgreSql",
                        "DedicatedHost",
                        "SapHana",
                        "SqlAzureHybridBenefit",
                        "AVS",
                        "DataFactory",
                        "NetAppStorage",
                        "AzureFiles",
                        "SqlEdge",
                        "VirtualMachineSoftware"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservedResourceType"
                      }
                    },
                    "skuDescription": {
                      "description": "Description of the SKU in english.",
                      "type": "string"
                    },
                    "splitProperties": {
                      "properties": {
                        "splitDestinations": {
                          "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "splitSource": {
                          "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "swapProperties": {
                      "properties": {
                        "swapDestination": {
                          "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "type": "string"
                        },
                        "swapSource": {
                          "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "term": {
                      "description": "Represent the term of Reservation.",
                      "enum": [
                        "P1Y",
                        "P3Y",
                        "P5Y"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationTerm"
                      }
                    },
                    "userFriendlyAppliedScopeType": {
                      "description": "The applied scope type of the reservation for display, e.g. Shared",
                      "readOnly": true,
                      "type": "string"
                    },
                    "userFriendlyRenewState": {
                      "description": "The renew state of the reservation for display, e.g. On",
                      "readOnly": true,
                      "type": "string"
                    },
                    "utilization": {
                      "description": "Reservation utilization",
                      "properties": {
                        "aggregates": {
                          "description": "The array of aggregates of a reservation's utilization",
                          "items": {
                            "description": "The aggregate values of reservation utilization",
                            "properties": {
                              "grain": {
                                "description": "The grain of the aggregate",
                                "readOnly": true,
                                "type": "number"
                              },
                              "grainUnit": {
                                "description": "The grain unit of the aggregate",
                                "readOnly": true,
                                "type": "string"
                              },
                              "value": {
                                "description": "The aggregate value",
                                "readOnly": true,
                                "type": "number"
                              },
                              "valueUnit": {
                                "description": "The aggregate value unit",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "trend": {
                          "description": "The number of days trend for a reservation",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "readOnly": true,
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "sku": {
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "systemData": {
                  "description": "Metadata pertaining to creation and last modification of the resource.",
                  "properties": {
                    "createdAt": {
                      "description": "The timestamp of resource creation (UTC).",
                      "format": "date-time",
                      "type": "string"
                    },
                    "createdBy": {
                      "description": "The identity that created the resource.",
                      "type": "string"
                    },
                    "createdByType": {
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "createdByType"
                      }
                    },
                    "lastModifiedAt": {
                      "description": "The timestamp of resource last modification (UTC)",
                      "format": "date-time",
                      "type": "string"
                    },
                    "lastModifiedBy": {
                      "description": "The identity that last modified the resource.",
                      "type": "string"
                    },
                    "lastModifiedByType": {
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "createdByType"
                      }
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                },
                "type": {
                  "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object",
              "x-ms-azure-resource": true
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationResponse"
          },
          {
            "oldValue": {
              "properties": {
                "splitDestinations": {
                  "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "splitSource": {
                  "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationSplitProperties"
          },
          {
            "oldValue": {
              "enum": [
                "None",
                "Pending",
                "Processing",
                "Active",
                "PurchaseError",
                "PaymentInstrumentError",
                "Split",
                "Merged",
                "Expired",
                "Succeeded"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ReservationStatusCode"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationStatusCode"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "id": {
                      "description": "Resource Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "readOnly": true,
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "reservation summaries resource.",
              "properties": {
                "properties": {
                  "description": "The properties of the reservation summaries.",
                  "properties": {
                    "avgUtilizationPercentage": {
                      "description": "This is average utilization for the entire time range. (day or month depending on the grain)",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "maxUtilizationPercentage": {
                      "description": "This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this field will return 100% for that day.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "minUtilizationPercentage": {
                      "description": "This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this field will return 10% for that day",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "reservationId": {
                      "description": "The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "reservationOrderId": {
                      "description": "The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "reservedHours": {
                      "description": "This is the total hours reserved. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "skuName": {
                      "description": "This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "usageDate": {
                      "description": "Data corresponding to the utilization record. If the grain of data is monthly, it will be first day of month.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "usedHours": {
                      "description": "Total used hours by the reservation",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    }
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/ReservationSummaries"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Result of listing reservation summaries.",
              "properties": {
                "nextLink": {
                  "description": "The link (url) to the next page of results.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "The list of reservation summaries.",
                  "items": {
                    "allOf": [
                      {
                        "description": "The Resource model definition.",
                        "properties": {
                          "id": {
                            "description": "Resource Id.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags.",
                            "readOnly": true,
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "reservation summaries resource.",
                    "properties": {
                      "properties": {
                        "description": "The properties of the reservation summaries.",
                        "properties": {
                          "avgUtilizationPercentage": {
                            "description": "This is average utilization for the entire time range. (day or month depending on the grain)",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "maxUtilizationPercentage": {
                            "description": "This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this field will return 100% for that day.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "minUtilizationPercentage": {
                            "description": "This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this field will return 10% for that day",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "reservationId": {
                            "description": "The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "reservationOrderId": {
                            "description": "The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "reservedHours": {
                            "description": "This is the total hours reserved. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "skuName": {
                            "description": "This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "usageDate": {
                            "description": "Data corresponding to the utilization record. If the grain of data is monthly, it will be first day of month.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "usedHours": {
                            "description": "Total used hours by the reservation",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          }
                        }
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ReservationSummariesListResult"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The properties of the reservation summaries.",
              "properties": {
                "avgUtilizationPercentage": {
                  "description": "This is average utilization for the entire time range. (day or month depending on the grain)",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "maxUtilizationPercentage": {
                  "description": "This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this field will return 100% for that day.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "minUtilizationPercentage": {
                  "description": "This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this field will return 10% for that day",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "reservationId": {
                  "description": "The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.",
                  "readOnly": true,
                  "type": "string"
                },
                "reservationOrderId": {
                  "description": "The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.",
                  "readOnly": true,
                  "type": "string"
                },
                "reservedHours": {
                  "description": "This is the total hours reserved. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "skuName": {
                  "description": "This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.",
                  "readOnly": true,
                  "type": "string"
                },
                "usageDate": {
                  "description": "Data corresponding to the utilization record. If the grain of data is monthly, it will be first day of month.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "usedHours": {
                  "description": "Total used hours by the reservation",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/ReservationSummariesProperties"
          },
          {
            "oldValue": {
              "description": "The roll up count summary of reservations in each state",
              "properties": {
                "cancelledCount": {
                  "description": "The number of reservation in Cancelled state",
                  "readOnly": true,
                  "type": "number"
                },
                "expiredCount": {
                  "description": "The number of reservation in Expired state",
                  "readOnly": true,
                  "type": "number"
                },
                "expiringCount": {
                  "description": "The number of reservation in Expiring state",
                  "readOnly": true,
                  "type": "number"
                },
                "failedCount": {
                  "description": "The number of reservation in Failed state",
                  "readOnly": true,
                  "type": "number"
                },
                "pendingCount": {
                  "description": "The number of reservation in Pending state",
                  "readOnly": true,
                  "type": "number"
                },
                "processingCount": {
                  "description": "The number of reservation in Processing state",
                  "readOnly": true,
                  "type": "number"
                },
                "succeededCount": {
                  "description": "The number of reservation in Succeeded state",
                  "readOnly": true,
                  "type": "number"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationSummary"
          },
          {
            "oldValue": {
              "properties": {
                "swapDestination": {
                  "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                },
                "swapSource": {
                  "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationSwapProperties"
          },
          {
            "oldValue": {
              "description": "Represent the term of Reservation.",
              "enum": [
                "P1Y",
                "P3Y",
                "P5Y"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ReservationTerm"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationTerm"
          },
          {
            "oldValue": {
              "description": "Reservation refund details",
              "properties": {
                "billingInformation": {
                  "description": "billing information",
                  "properties": {
                    "billingCurrencyProratedAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "billingCurrencyRemainingCommitmentAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "billingCurrencyTotalPaidAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "billingRefundAmount": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "quantity": {
                  "description": "Quantity to be returned",
                  "format": "int32",
                  "type": "integer"
                },
                "reservationId": {
                  "description": "Fully qualified id of the Reservation being returned.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationToExchange"
          },
          {
            "oldValue": {
              "description": "Reservation purchase details",
              "properties": {
                "billingCurrencyTotal": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "properties": {
                  "properties": {
                    "location": {
                      "description": "The Azure Region where the reserved resource lives.",
                      "type": "string"
                    },
                    "properties": {
                      "properties": {
                        "appliedScopeType": {
                          "description": "Type of the Applied Scope.",
                          "enum": [
                            "Single",
                            "Shared"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "AppliedScopeType"
                          }
                        },
                        "appliedScopes": {
                          "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                          "items": {
                            "maxItems": 1,
                            "minItems": 1,
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "billingPlan": {
                          "description": "Represent the billing plans.",
                          "enum": [
                            "Upfront",
                            "Monthly"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservationBillingPlan"
                          }
                        },
                        "billingScopeId": {
                          "description": "Subscription that will be charged for purchasing Reservation",
                          "type": "string"
                        },
                        "displayName": {
                          "description": "Friendly name of the Reservation",
                          "type": "string"
                        },
                        "quantity": {
                          "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "renew": {
                          "default": false,
                          "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                          "type": "boolean"
                        },
                        "reservedResourceProperties": {
                          "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                          "properties": {
                            "instanceFlexibility": {
                              "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                              "enum": [
                                "On",
                                "Off"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "InstanceFlexibility"
                              }
                            }
                          },
                          "type": "object"
                        },
                        "reservedResourceType": {
                          "description": "The type of the resource that is being reserved.",
                          "enum": [
                            "VirtualMachines",
                            "SqlDatabases",
                            "SuseLinux",
                            "CosmosDb",
                            "RedHat",
                            "SqlDataWarehouse",
                            "VMwareCloudSimple",
                            "RedHatOsa",
                            "Databricks",
                            "AppService",
                            "ManagedDisk",
                            "BlockBlob",
                            "RedisCache",
                            "AzureDataExplorer",
                            "MySql",
                            "MariaDb",
                            "PostgreSql",
                            "DedicatedHost",
                            "SapHana",
                            "SqlAzureHybridBenefit",
                            "AVS",
                            "DataFactory",
                            "NetAppStorage",
                            "AzureFiles",
                            "SqlEdge",
                            "VirtualMachineSoftware"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservedResourceType"
                          }
                        },
                        "term": {
                          "description": "Represent the term of Reservation.",
                          "enum": [
                            "P1Y",
                            "P3Y",
                            "P5Y"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservationTerm"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "sku": {
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationToPurchaseCalculateExchange"
          },
          {
            "oldValue": {
              "description": "Reservation purchase details",
              "properties": {
                "billingCurrencyTotal": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "properties": {
                  "properties": {
                    "location": {
                      "description": "The Azure Region where the reserved resource lives.",
                      "type": "string"
                    },
                    "properties": {
                      "properties": {
                        "appliedScopeType": {
                          "description": "Type of the Applied Scope.",
                          "enum": [
                            "Single",
                            "Shared"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "AppliedScopeType"
                          }
                        },
                        "appliedScopes": {
                          "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                          "items": {
                            "maxItems": 1,
                            "minItems": 1,
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "billingPlan": {
                          "description": "Represent the billing plans.",
                          "enum": [
                            "Upfront",
                            "Monthly"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservationBillingPlan"
                          }
                        },
                        "billingScopeId": {
                          "description": "Subscription that will be charged for purchasing Reservation",
                          "type": "string"
                        },
                        "displayName": {
                          "description": "Friendly name of the Reservation",
                          "type": "string"
                        },
                        "quantity": {
                          "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "renew": {
                          "default": false,
                          "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                          "type": "boolean"
                        },
                        "reservedResourceProperties": {
                          "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                          "properties": {
                            "instanceFlexibility": {
                              "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                              "enum": [
                                "On",
                                "Off"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "InstanceFlexibility"
                              }
                            }
                          },
                          "type": "object"
                        },
                        "reservedResourceType": {
                          "description": "The type of the resource that is being reserved.",
                          "enum": [
                            "VirtualMachines",
                            "SqlDatabases",
                            "SuseLinux",
                            "CosmosDb",
                            "RedHat",
                            "SqlDataWarehouse",
                            "VMwareCloudSimple",
                            "RedHatOsa",
                            "Databricks",
                            "AppService",
                            "ManagedDisk",
                            "BlockBlob",
                            "RedisCache",
                            "AzureDataExplorer",
                            "MySql",
                            "MariaDb",
                            "PostgreSql",
                            "DedicatedHost",
                            "SapHana",
                            "SqlAzureHybridBenefit",
                            "AVS",
                            "DataFactory",
                            "NetAppStorage",
                            "AzureFiles",
                            "SqlEdge",
                            "VirtualMachineSoftware"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservedResourceType"
                          }
                        },
                        "term": {
                          "description": "Represent the term of Reservation.",
                          "enum": [
                            "P1Y",
                            "P3Y",
                            "P5Y"
                          ],
                          "type": "string",
                          "x-ms-enum": {
                            "modelAsString": true,
                            "name": "ReservationTerm"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "sku": {
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "reservationId": {
                  "description": "Fully qualified id of the Reservation being purchased. This value is only guaranteed to be non-null if the purchase is successful.",
                  "type": "string"
                },
                "reservationOrderId": {
                  "description": "Fully qualified id of the ReservationOrder being purchased",
                  "type": "string"
                },
                "status": {
                  "description": "Status of the individual operation.",
                  "enum": [
                    "Succeeded",
                    "Failed",
                    "Cancelled",
                    "Pending"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "OperationStatus"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationToPurchaseExchange"
          },
          {
            "oldValue": {
              "description": "Reservation to return",
              "properties": {
                "quantity": {
                  "description": "Quantity to be returned. Must be greater than zero.",
                  "format": "int32",
                  "type": "integer"
                },
                "reservationId": {
                  "description": "Fully qualified identifier of the Reservation being returned",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationToReturn"
          },
          {
            "oldValue": {
              "description": "Reservation refund details",
              "properties": {
                "billingInformation": {
                  "description": "billing information",
                  "properties": {
                    "billingCurrencyProratedAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "billingCurrencyRemainingCommitmentAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "billingCurrencyTotalPaidAmount": {
                      "properties": {
                        "amount": {
                          "format": "double",
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "billingRefundAmount": {
                  "properties": {
                    "amount": {
                      "format": "double",
                      "type": "number"
                    },
                    "currencyCode": {
                      "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "quantity": {
                  "description": "Quantity to be returned",
                  "format": "int32",
                  "type": "integer"
                },
                "reservationId": {
                  "description": "Fully qualified id of the Reservation being returned.",
                  "type": "string"
                },
                "status": {
                  "description": "Status of the individual operation.",
                  "enum": [
                    "Succeeded",
                    "Failed",
                    "Cancelled",
                    "Pending"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "OperationStatus"
                  }
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationToReturnForExchange"
          },
          {
            "oldValue": {
              "description": "The aggregate values of reservation utilization",
              "properties": {
                "grain": {
                  "description": "The grain of the aggregate",
                  "readOnly": true,
                  "type": "number"
                },
                "grainUnit": {
                  "description": "The grain unit of the aggregate",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "The aggregate value",
                  "readOnly": true,
                  "type": "number"
                },
                "valueUnit": {
                  "description": "The aggregate value unit",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationUtilizationAggregates"
          },
          {
            "oldValue": {
              "description": "The list of reservations and summary of roll out count of reservations in each state.",
              "properties": {
                "nextLink": {
                  "description": "The link (url) to the next page of results.",
                  "readOnly": true,
                  "type": "string"
                },
                "summary": {
                  "description": "The roll up count summary of reservations in each state",
                  "properties": {
                    "cancelledCount": {
                      "description": "The number of reservation in Cancelled state",
                      "readOnly": true,
                      "type": "number"
                    },
                    "expiredCount": {
                      "description": "The number of reservation in Expired state",
                      "readOnly": true,
                      "type": "number"
                    },
                    "expiringCount": {
                      "description": "The number of reservation in Expiring state",
                      "readOnly": true,
                      "type": "number"
                    },
                    "failedCount": {
                      "description": "The number of reservation in Failed state",
                      "readOnly": true,
                      "type": "number"
                    },
                    "pendingCount": {
                      "description": "The number of reservation in Pending state",
                      "readOnly": true,
                      "type": "number"
                    },
                    "processingCount": {
                      "description": "The number of reservation in Processing state",
                      "readOnly": true,
                      "type": "number"
                    },
                    "succeededCount": {
                      "description": "The number of reservation in Succeeded state",
                      "readOnly": true,
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "value": {
                  "description": "The list of reservations.",
                  "items": {
                    "description": "The definition of the reservation.",
                    "properties": {
                      "etag": {
                        "format": "int32",
                        "type": "integer"
                      },
                      "id": {
                        "description": "Identifier of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "kind": {
                        "description": "Resource Provider type to be reserved.",
                        "enum": [
                          "Microsoft.Compute"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": false,
                          "name": "Kind"
                        }
                      },
                      "location": {
                        "description": "The Azure Region where the reserved resource lives.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the reservation",
                        "readOnly": true,
                        "type": "string"
                      },
                      "properties": {
                        "description": "The properties of the reservations",
                        "properties": {
                          "appliedScopeProperties": {
                            "properties": {
                              "displayName": {
                                "description": "Management group display name",
                                "type": "string"
                              },
                              "managementGroupId": {
                                "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                                "type": "string"
                              },
                              "tenantId": {
                                "description": "Tenant ID of the applied scope type",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "appliedScopeType": {
                            "description": "Type of the Applied Scope.",
                            "enum": [
                              "Single",
                              "Shared"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "AppliedScopeType"
                            }
                          },
                          "appliedScopes": {
                            "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                            "items": {
                              "maxItems": 1,
                              "minItems": 1,
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "archived": {
                            "description": "Indicates if the reservation is archived",
                            "type": "boolean"
                          },
                          "benefitStartTime": {
                            "description": "This is the DateTime when the reservation benefit started.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "billingPlan": {
                            "description": "Represent the billing plans.",
                            "enum": [
                              "Upfront",
                              "Monthly"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationBillingPlan"
                            }
                          },
                          "billingScopeId": {
                            "description": "Subscription that will be charged for purchasing Reservation",
                            "type": "string"
                          },
                          "capabilities": {
                            "description": "Capabilities of the reservation",
                            "type": "string"
                          },
                          "displayName": {
                            "description": "Friendly name for user to easily identify the reservation",
                            "type": "string"
                          },
                          "displayProvisioningState": {
                            "description": "The provisioning state of the reservation for display, e.g. Succeeded",
                            "readOnly": true,
                            "type": "string"
                          },
                          "effectiveDateTime": {
                            "description": "DateTime of the Reservation starting when this version is effective from.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "expiryDate": {
                            "description": "This is the date when the Reservation will expire.",
                            "format": "date",
                            "type": "string"
                          },
                          "extendedStatusInfo": {
                            "properties": {
                              "message": {
                                "description": "The message giving detailed information about the status code.",
                                "type": "string"
                              },
                              "statusCode": {
                                "enum": [
                                  "None",
                                  "Pending",
                                  "Processing",
                                  "Active",
                                  "PurchaseError",
                                  "PaymentInstrumentError",
                                  "Split",
                                  "Merged",
                                  "Expired",
                                  "Succeeded"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "ReservationStatusCode"
                                }
                              }
                            },
                            "type": "object"
                          },
                          "instanceFlexibility": {
                            "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                            "enum": [
                              "On",
                              "Off"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "InstanceFlexibility"
                            }
                          },
                          "lastUpdatedDateTime": {
                            "description": "DateTime of the last time the Reservation was updated.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "mergeProperties": {
                            "properties": {
                              "mergeDestination": {
                                "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              },
                              "mergeSources": {
                                "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "provisioningState": {
                            "description": "Represent the current state of the Reservation.",
                            "enum": [
                              "Creating",
                              "PendingResourceHold",
                              "ConfirmedResourceHold",
                              "PendingBilling",
                              "ConfirmedBilling",
                              "Created",
                              "Succeeded",
                              "Cancelled",
                              "Expired",
                              "BillingFailed",
                              "Failed",
                              "Split",
                              "Merged"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ProvisioningState"
                            }
                          },
                          "provisioningSubState": {
                            "description": "The provisioning state of the reservation, e.g. Succeeded",
                            "readOnly": true,
                            "type": "string"
                          },
                          "purchaseDate": {
                            "description": "This is the date when the Reservation was purchased.",
                            "format": "date",
                            "type": "string"
                          },
                          "quantity": {
                            "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "renew": {
                            "default": false,
                            "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                            "type": "boolean"
                          },
                          "renewDestination": {
                            "description": "Reservation Id of the reservation which is purchased because of renew. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                            "type": "string"
                          },
                          "renewProperties": {
                            "properties": {
                              "billingCurrencyTotal": {
                                "description": "Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.",
                                "properties": {
                                  "amount": {
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "pricingCurrencyTotal": {
                                "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry.",
                                "properties": {
                                  "amount": {
                                    "type": "number"
                                  },
                                  "currencyCode": {
                                    "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "purchaseProperties": {
                                "properties": {
                                  "location": {
                                    "description": "The Azure Region where the reserved resource lives.",
                                    "type": "string"
                                  },
                                  "properties": {
                                    "properties": {
                                      "appliedScopeType": {
                                        "description": "Type of the Applied Scope.",
                                        "enum": [
                                          "Single",
                                          "Shared"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "AppliedScopeType"
                                        }
                                      },
                                      "appliedScopes": {
                                        "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                        "items": {
                                          "maxItems": 1,
                                          "minItems": 1,
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "billingPlan": {
                                        "description": "Represent the billing plans.",
                                        "enum": [
                                          "Upfront",
                                          "Monthly"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReservationBillingPlan"
                                        }
                                      },
                                      "billingScopeId": {
                                        "description": "Subscription that will be charged for purchasing Reservation",
                                        "type": "string"
                                      },
                                      "displayName": {
                                        "description": "Friendly name of the Reservation",
                                        "type": "string"
                                      },
                                      "quantity": {
                                        "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "renew": {
                                        "default": false,
                                        "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                        "type": "boolean"
                                      },
                                      "reservedResourceProperties": {
                                        "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                        "properties": {
                                          "instanceFlexibility": {
                                            "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                            "enum": [
                                              "On",
                                              "Off"
                                            ],
                                            "type": "string",
                                            "x-ms-enum": {
                                              "modelAsString": true,
                                              "name": "InstanceFlexibility"
                                            }
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "reservedResourceType": {
                                        "description": "The type of the resource that is being reserved.",
                                        "enum": [
                                          "VirtualMachines",
                                          "SqlDatabases",
                                          "SuseLinux",
                                          "CosmosDb",
                                          "RedHat",
                                          "SqlDataWarehouse",
                                          "VMwareCloudSimple",
                                          "RedHatOsa",
                                          "Databricks",
                                          "AppService",
                                          "ManagedDisk",
                                          "BlockBlob",
                                          "RedisCache",
                                          "AzureDataExplorer",
                                          "MySql",
                                          "MariaDb",
                                          "PostgreSql",
                                          "DedicatedHost",
                                          "SapHana",
                                          "SqlAzureHybridBenefit",
                                          "AVS",
                                          "DataFactory",
                                          "NetAppStorage",
                                          "AzureFiles",
                                          "SqlEdge",
                                          "VirtualMachineSoftware"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReservedResourceType"
                                        }
                                      },
                                      "term": {
                                        "description": "Represent the term of Reservation.",
                                        "enum": [
                                          "P1Y",
                                          "P3Y",
                                          "P5Y"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "ReservationTerm"
                                        }
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "sku": {
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "renewSource": {
                            "description": "Reservation Id of the reservation from which this reservation is renewed. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                            "type": "string"
                          },
                          "reservedResourceType": {
                            "description": "The type of the resource that is being reserved.",
                            "enum": [
                              "VirtualMachines",
                              "SqlDatabases",
                              "SuseLinux",
                              "CosmosDb",
                              "RedHat",
                              "SqlDataWarehouse",
                              "VMwareCloudSimple",
                              "RedHatOsa",
                              "Databricks",
                              "AppService",
                              "ManagedDisk",
                              "BlockBlob",
                              "RedisCache",
                              "AzureDataExplorer",
                              "MySql",
                              "MariaDb",
                              "PostgreSql",
                              "DedicatedHost",
                              "SapHana",
                              "SqlAzureHybridBenefit",
                              "AVS",
                              "DataFactory",
                              "NetAppStorage",
                              "AzureFiles",
                              "SqlEdge",
                              "VirtualMachineSoftware"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservedResourceType"
                            }
                          },
                          "skuDescription": {
                            "description": "Description of the SKU in english.",
                            "type": "string"
                          },
                          "splitProperties": {
                            "properties": {
                              "splitDestinations": {
                                "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "splitSource": {
                                "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "swapProperties": {
                            "properties": {
                              "swapDestination": {
                                "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              },
                              "swapSource": {
                                "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "term": {
                            "description": "Represent the term of Reservation.",
                            "enum": [
                              "P1Y",
                              "P3Y",
                              "P5Y"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "ReservationTerm"
                            }
                          },
                          "userFriendlyAppliedScopeType": {
                            "description": "The applied scope type of the reservation for display, e.g. Shared",
                            "readOnly": true,
                            "type": "string"
                          },
                          "userFriendlyRenewState": {
                            "description": "The renew state of the reservation for display, e.g. On",
                            "readOnly": true,
                            "type": "string"
                          },
                          "utilization": {
                            "description": "Reservation utilization",
                            "properties": {
                              "aggregates": {
                                "description": "The array of aggregates of a reservation's utilization",
                                "items": {
                                  "description": "The aggregate values of reservation utilization",
                                  "properties": {
                                    "grain": {
                                      "description": "The grain of the aggregate",
                                      "readOnly": true,
                                      "type": "number"
                                    },
                                    "grainUnit": {
                                      "description": "The grain unit of the aggregate",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The aggregate value",
                                      "readOnly": true,
                                      "type": "number"
                                    },
                                    "valueUnit": {
                                      "description": "The aggregate value unit",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "trend": {
                                "description": "The number of days trend for a reservation",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "readOnly": true,
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "sku": {
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "systemData": {
                        "description": "Metadata pertaining to creation and last modification of the resource.",
                        "properties": {
                          "createdAt": {
                            "description": "The timestamp of resource creation (UTC).",
                            "format": "date-time",
                            "type": "string"
                          },
                          "createdBy": {
                            "description": "The identity that created the resource.",
                            "type": "string"
                          },
                          "createdByType": {
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          },
                          "lastModifiedAt": {
                            "description": "The timestamp of resource last modification (UTC)",
                            "format": "date-time",
                            "type": "string"
                          },
                          "lastModifiedBy": {
                            "description": "The identity that last modified the resource.",
                            "type": "string"
                          },
                          "lastModifiedByType": {
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "createdByType"
                            }
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "description": "Type of resource. \"Microsoft.Capacity/reservationOrders/reservations\"",
                        "readOnly": true,
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-ms-azure-resource": true
                  },
                  "readOnly": true,
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationsListResult"
          },
          {
            "oldValue": {
              "description": "The properties of the reservations",
              "properties": {
                "appliedScopeProperties": {
                  "properties": {
                    "displayName": {
                      "description": "Management group display name",
                      "type": "string"
                    },
                    "managementGroupId": {
                      "description": "Management group ID of the format /providers/Microsoft.Management/managementGroups/{managementGroupId}",
                      "type": "string"
                    },
                    "tenantId": {
                      "description": "Tenant ID of the applied scope type",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "appliedScopeType": {
                  "description": "Type of the Applied Scope.",
                  "enum": [
                    "Single",
                    "Shared"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "AppliedScopeType"
                  }
                },
                "appliedScopes": {
                  "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                  "items": {
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "string"
                  },
                  "type": "array"
                },
                "archived": {
                  "description": "Indicates if the reservation is archived",
                  "type": "boolean"
                },
                "benefitStartTime": {
                  "description": "This is the DateTime when the reservation benefit started.",
                  "format": "date-time",
                  "type": "string"
                },
                "billingPlan": {
                  "description": "Represent the billing plans.",
                  "enum": [
                    "Upfront",
                    "Monthly"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationBillingPlan"
                  }
                },
                "billingScopeId": {
                  "description": "Subscription that will be charged for purchasing Reservation",
                  "type": "string"
                },
                "capabilities": {
                  "description": "Capabilities of the reservation",
                  "type": "string"
                },
                "displayName": {
                  "description": "Friendly name for user to easily identify the reservation",
                  "type": "string"
                },
                "displayProvisioningState": {
                  "description": "The provisioning state of the reservation for display, e.g. Succeeded",
                  "readOnly": true,
                  "type": "string"
                },
                "effectiveDateTime": {
                  "description": "DateTime of the Reservation starting when this version is effective from.",
                  "format": "date-time",
                  "type": "string"
                },
                "expiryDate": {
                  "description": "This is the date when the Reservation will expire.",
                  "format": "date",
                  "type": "string"
                },
                "extendedStatusInfo": {
                  "properties": {
                    "message": {
                      "description": "The message giving detailed information about the status code.",
                      "type": "string"
                    },
                    "statusCode": {
                      "enum": [
                        "None",
                        "Pending",
                        "Processing",
                        "Active",
                        "PurchaseError",
                        "PaymentInstrumentError",
                        "Split",
                        "Merged",
                        "Expired",
                        "Succeeded"
                      ],
                      "type": "string",
                      "x-ms-enum": {
                        "modelAsString": true,
                        "name": "ReservationStatusCode"
                      }
                    }
                  },
                  "type": "object"
                },
                "instanceFlexibility": {
                  "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                  "enum": [
                    "On",
                    "Off"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "InstanceFlexibility"
                  }
                },
                "lastUpdatedDateTime": {
                  "description": "DateTime of the last time the Reservation was updated.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "mergeProperties": {
                  "properties": {
                    "mergeDestination": {
                      "description": "Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "type": "string"
                    },
                    "mergeSources": {
                      "description": "Resource Ids of the Source Reservation's merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "provisioningState": {
                  "description": "Represent the current state of the Reservation.",
                  "enum": [
                    "Creating",
                    "PendingResourceHold",
                    "ConfirmedResourceHold",
                    "PendingBilling",
                    "ConfirmedBilling",
                    "Created",
                    "Succeeded",
                    "Cancelled",
                    "Expired",
                    "BillingFailed",
                    "Failed",
                    "Split",
                    "Merged"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ProvisioningState"
                  }
                },
                "provisioningSubState": {
                  "description": "The provisioning state of the reservation, e.g. Succeeded",
                  "readOnly": true,
                  "type": "string"
                },
                "purchaseDate": {
                  "description": "This is the date when the Reservation was purchased.",
                  "format": "date",
                  "type": "string"
                },
                "quantity": {
                  "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                  "format": "int32",
                  "type": "integer"
                },
                "renew": {
                  "default": false,
                  "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                  "type": "boolean"
                },
                "renewDestination": {
                  "description": "Reservation Id of the reservation which is purchased because of renew. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                  "type": "string"
                },
                "renewProperties": {
                  "properties": {
                    "billingCurrencyTotal": {
                      "description": "Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included.",
                      "properties": {
                        "amount": {
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "pricingCurrencyTotal": {
                      "description": "Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry.",
                      "properties": {
                        "amount": {
                          "type": "number"
                        },
                        "currencyCode": {
                          "description": "The ISO 4217 3-letter currency code for the currency used by this purchase record.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "purchaseProperties": {
                      "properties": {
                        "location": {
                          "description": "The Azure Region where the reserved resource lives.",
                          "type": "string"
                        },
                        "properties": {
                          "properties": {
                            "appliedScopeType": {
                              "description": "Type of the Applied Scope.",
                              "enum": [
                                "Single",
                                "Shared"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "AppliedScopeType"
                              }
                            },
                            "appliedScopes": {
                              "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                              "items": {
                                "maxItems": 1,
                                "minItems": 1,
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "billingPlan": {
                              "description": "Represent the billing plans.",
                              "enum": [
                                "Upfront",
                                "Monthly"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ReservationBillingPlan"
                              }
                            },
                            "billingScopeId": {
                              "description": "Subscription that will be charged for purchasing Reservation",
                              "type": "string"
                            },
                            "displayName": {
                              "description": "Friendly name of the Reservation",
                              "type": "string"
                            },
                            "quantity": {
                              "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "renew": {
                              "default": false,
                              "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                              "type": "boolean"
                            },
                            "reservedResourceProperties": {
                              "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                              "properties": {
                                "instanceFlexibility": {
                                  "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                  "enum": [
                                    "On",
                                    "Off"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "InstanceFlexibility"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "reservedResourceType": {
                              "description": "The type of the resource that is being reserved.",
                              "enum": [
                                "VirtualMachines",
                                "SqlDatabases",
                                "SuseLinux",
                                "CosmosDb",
                                "RedHat",
                                "SqlDataWarehouse",
                                "VMwareCloudSimple",
                                "RedHatOsa",
                                "Databricks",
                                "AppService",
                                "ManagedDisk",
                                "BlockBlob",
                                "RedisCache",
                                "AzureDataExplorer",
                                "MySql",
                                "MariaDb",
                                "PostgreSql",
                                "DedicatedHost",
                                "SapHana",
                                "SqlAzureHybridBenefit",
                                "AVS",
                                "DataFactory",
                                "NetAppStorage",
                                "AzureFiles",
                                "SqlEdge",
                                "VirtualMachineSoftware"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ReservedResourceType"
                              }
                            },
                            "term": {
                              "description": "Represent the term of Reservation.",
                              "enum": [
                                "P1Y",
                                "P3Y",
                                "P5Y"
                              ],
                              "type": "string",
                              "x-ms-enum": {
                                "modelAsString": true,
                                "name": "ReservationTerm"
                              }
                            }
                          },
                          "type": "object"
                        },
                        "sku": {
                          "properties": {
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "renewSource": {
                  "description": "Reservation Id of the reservation from which this reservation is renewed. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.",
                  "type": "string"
                },
                "reservedResourceType": {
                  "description": "The type of the resource that is being reserved.",
                  "enum": [
                    "VirtualMachines",
                    "SqlDatabases",
                    "SuseLinux",
                    "CosmosDb",
                    "RedHat",
                    "SqlDataWarehouse",
                    "VMwareCloudSimple",
                    "RedHatOsa",
                    "Databricks",
                    "AppService",
                    "ManagedDisk",
                    "BlockBlob",
                    "RedisCache",
                    "AzureDataExplorer",
                    "MySql",
                    "MariaDb",
                    "PostgreSql",
                    "DedicatedHost",
                    "SapHana",
                    "SqlAzureHybridBenefit",
                    "AVS",
                    "DataFactory",
                    "NetAppStorage",
                    "AzureFiles",
                    "SqlEdge",
                    "VirtualMachineSoftware"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservedResourceType"
                  }
                },
                "skuDescription": {
                  "description": "Description of the SKU in english.",
                  "type": "string"
                },
                "splitProperties": {
                  "properties": {
                    "splitDestinations": {
                      "description": "List of destination Resource Id that are created due to split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "splitSource": {
                      "description": "Resource Id of the Reservation from which this is split. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "swapProperties": {
                  "properties": {
                    "swapDestination": {
                      "description": "Reservation Resource Id that the original resource gets swapped to. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "type": "string"
                    },
                    "swapSource": {
                      "description": "Resource Id of the Source Reservation that gets swapped. Format of the resource Id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "term": {
                  "description": "Represent the term of Reservation.",
                  "enum": [
                    "P1Y",
                    "P3Y",
                    "P5Y"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "modelAsString": true,
                    "name": "ReservationTerm"
                  }
                },
                "userFriendlyAppliedScopeType": {
                  "description": "The applied scope type of the reservation for display, e.g. Shared",
                  "readOnly": true,
                  "type": "string"
                },
                "userFriendlyRenewState": {
                  "description": "The renew state of the reservation for display, e.g. On",
                  "readOnly": true,
                  "type": "string"
                },
                "utilization": {
                  "description": "Reservation utilization",
                  "properties": {
                    "aggregates": {
                      "description": "The array of aggregates of a reservation's utilization",
                      "items": {
                        "description": "The aggregate values of reservation utilization",
                        "properties": {
                          "grain": {
                            "description": "The grain of the aggregate",
                            "readOnly": true,
                            "type": "number"
                          },
                          "grainUnit": {
                            "description": "The grain unit of the aggregate",
                            "readOnly": true,
                            "type": "string"
                          },
                          "value": {
                            "description": "The aggregate value",
                            "readOnly": true,
                            "type": "number"
                          },
                          "valueUnit": {
                            "description": "The aggregate value unit",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "trend": {
                      "description": "The number of days trend for a reservation",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationsProperties"
          },
          {
            "oldValue": {
              "description": "The type of the resource that is being reserved.",
              "enum": [
                "VirtualMachines",
                "SqlDatabases",
                "SuseLinux",
                "CosmosDb",
                "RedHat",
                "SqlDataWarehouse",
                "VMwareCloudSimple",
                "RedHatOsa",
                "Databricks",
                "AppService",
                "ManagedDisk",
                "BlockBlob",
                "RedisCache",
                "AzureDataExplorer",
                "MySql",
                "MariaDb",
                "PostgreSql",
                "DedicatedHost",
                "SapHana",
                "SqlAzureHybridBenefit",
                "AVS",
                "DataFactory",
                "NetAppStorage",
                "AzureFiles",
                "SqlEdge",
                "VirtualMachineSoftware"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "ReservedResourceType"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservedResourceType"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The Resource model definition.",
              "properties": {
                "id": {
                  "description": "Resource Id.",
                  "readOnly": true,
                  "type": "string"
                },
                "name": {
                  "description": "Resource name.",
                  "readOnly": true,
                  "type": "string"
                },
                "tags": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Resource tags.",
                  "readOnly": true,
                  "type": "object"
                },
                "type": {
                  "description": "Resource type.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "x-ms-azure-resource": true
            },
            "op": "add",
            "from": "",
            "path": "/Resource"
          },
          {
            "oldValue": {
              "properties": {
                "scope": {
                  "type": "string"
                },
                "valid": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ScopeProperties"
          },
          {
            "oldValue": {
              "properties": {
                "name": {
                  "description": "An invariant to describe the feature.",
                  "type": "string"
                },
                "value": {
                  "description": "An invariant if the feature is measured by quantity.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SkuCapability"
          },
          {
            "oldValue": {
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SkuName"
          },
          {
            "oldValue": {
              "properties": {
                "name": {
                  "description": "An invariant to describe the feature.",
                  "type": "string"
                },
                "value": {
                  "description": "An invariant if the feature is measured by quantity.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SkuProperty"
          },
          {
            "oldValue": {
              "properties": {
                "reasonCode": {
                  "description": "The reason for restriction.",
                  "type": "string"
                },
                "type": {
                  "description": "The type of restrictions.",
                  "type": "string"
                },
                "values": {
                  "description": "The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SkuRestriction"
          },
          {
            "oldValue": {
              "properties": {
                "quantities": {
                  "description": "List of the quantities in the new reservations to create.",
                  "items": {
                    "format": "int32",
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "integer"
                  },
                  "type": "array"
                },
                "reservationId": {
                  "description": "Resource id of the reservation to be split. Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SplitProperties"
          },
          {
            "oldValue": {
              "properties": {
                "properties": {
                  "properties": {
                    "quantities": {
                      "description": "List of the quantities in the new reservations to create.",
                      "items": {
                        "format": "int32",
                        "maxItems": 2,
                        "minItems": 2,
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "reservationId": {
                      "description": "Resource id of the reservation to be split. Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SplitRequest"
          },
          {
            "oldValue": {
              "properties": {
                "scopes": {
                  "items": {
                    "properties": {
                      "scope": {
                        "type": "string"
                      },
                      "valid": {
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SubscriptionScopeProperties"
          },
          {
            "oldValue": null,
            "value": {
              "allOf": [
                {
                  "description": "The Resource model definition.",
                  "properties": {
                    "id": {
                      "description": "Resource Id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Resource name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "tags": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Resource tags.",
                      "readOnly": true,
                      "type": "object"
                    },
                    "type": {
                      "description": "Resource type.",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "x-ms-azure-resource": true
                }
              ],
              "description": "An usage detail resource.",
              "properties": {
                "properties": {
                  "description": "The properties of the usage detail.",
                  "properties": {
                    "accountName": {
                      "description": "Account name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "additionalProperties": {
                      "description": "Additional details of this usage item. By default this is not populated, unless it's specified in $expand.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "billableQuantity": {
                      "description": "The billable usage quantity.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "billingPeriodId": {
                      "description": "The id of the billing period resource that the usage belongs to.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "consumedService": {
                      "description": "Consumed service name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "costCenter": {
                      "description": "The cost center of this department if it is a department and a costcenter exists",
                      "readOnly": true,
                      "type": "string"
                    },
                    "currency": {
                      "description": "The ISO currency in which the meter is charged, for example, USD.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "departmentName": {
                      "description": "Department name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "instanceId": {
                      "description": "The uri of the resource instance that the usage is about.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "instanceLocation": {
                      "description": "The location of the resource instance that the usage is about.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "instanceName": {
                      "description": "The name of the resource instance that the usage is about.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "invoiceId": {
                      "description": "The id of the invoice resource that the usage belongs to.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "isEstimated": {
                      "description": "The estimated usage is subject to change.",
                      "readOnly": true,
                      "type": "boolean"
                    },
                    "meterDetails": {
                      "description": "The properties of the meter detail.",
                      "properties": {
                        "meterCategory": {
                          "description": "The category of the meter, for example, 'Cloud services', 'Networking', etc..",
                          "readOnly": true,
                          "type": "string"
                        },
                        "meterLocation": {
                          "description": "The location in which the Azure service is available.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "meterName": {
                          "description": "The name of the meter, within the given meter category",
                          "readOnly": true,
                          "type": "string"
                        },
                        "meterSubCategory": {
                          "description": "The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..",
                          "readOnly": true,
                          "type": "string"
                        },
                        "pretaxStandardRate": {
                          "description": "The pretax listing price.",
                          "format": "decimal",
                          "readOnly": true,
                          "type": "number"
                        },
                        "totalIncludedQuantity": {
                          "description": "The total included quantity associated with the offer.",
                          "format": "decimal",
                          "readOnly": true,
                          "type": "number"
                        },
                        "unit": {
                          "description": "The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.",
                          "readOnly": true,
                          "type": "string"
                        }
                      }
                    },
                    "meterId": {
                      "description": "The meter id.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "pretaxCost": {
                      "description": "The amount of cost before tax.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "product": {
                      "description": "Product name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "subscriptionGuid": {
                      "description": "Subscription guid.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "subscriptionName": {
                      "description": "Subscription name.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "usageEnd": {
                      "description": "The end of the date time range covered by the usage detail.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "usageQuantity": {
                      "description": "The quantity of usage.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "usageStart": {
                      "description": "The start of the date time range covered by the usage detail.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                }
              },
              "type": "object"
            },
            "op": "add",
            "from": "",
            "path": "/UsageDetail"
          },
          {
            "oldValue": null,
            "value": {
              "description": "The properties of the usage detail.",
              "properties": {
                "accountName": {
                  "description": "Account name.",
                  "readOnly": true,
                  "type": "string"
                },
                "additionalProperties": {
                  "description": "Additional details of this usage item. By default this is not populated, unless it's specified in $expand.",
                  "readOnly": true,
                  "type": "string"
                },
                "billableQuantity": {
                  "description": "The billable usage quantity.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "billingPeriodId": {
                  "description": "The id of the billing period resource that the usage belongs to.",
                  "readOnly": true,
                  "type": "string"
                },
                "consumedService": {
                  "description": "Consumed service name.",
                  "readOnly": true,
                  "type": "string"
                },
                "costCenter": {
                  "description": "The cost center of this department if it is a department and a costcenter exists",
                  "readOnly": true,
                  "type": "string"
                },
                "currency": {
                  "description": "The ISO currency in which the meter is charged, for example, USD.",
                  "readOnly": true,
                  "type": "string"
                },
                "departmentName": {
                  "description": "Department name.",
                  "readOnly": true,
                  "type": "string"
                },
                "instanceId": {
                  "description": "The uri of the resource instance that the usage is about.",
                  "readOnly": true,
                  "type": "string"
                },
                "instanceLocation": {
                  "description": "The location of the resource instance that the usage is about.",
                  "readOnly": true,
                  "type": "string"
                },
                "instanceName": {
                  "description": "The name of the resource instance that the usage is about.",
                  "readOnly": true,
                  "type": "string"
                },
                "invoiceId": {
                  "description": "The id of the invoice resource that the usage belongs to.",
                  "readOnly": true,
                  "type": "string"
                },
                "isEstimated": {
                  "description": "The estimated usage is subject to change.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "meterDetails": {
                  "description": "The properties of the meter detail.",
                  "properties": {
                    "meterCategory": {
                      "description": "The category of the meter, for example, 'Cloud services', 'Networking', etc..",
                      "readOnly": true,
                      "type": "string"
                    },
                    "meterLocation": {
                      "description": "The location in which the Azure service is available.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "meterName": {
                      "description": "The name of the meter, within the given meter category",
                      "readOnly": true,
                      "type": "string"
                    },
                    "meterSubCategory": {
                      "description": "The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..",
                      "readOnly": true,
                      "type": "string"
                    },
                    "pretaxStandardRate": {
                      "description": "The pretax listing price.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "totalIncludedQuantity": {
                      "description": "The total included quantity associated with the offer.",
                      "format": "decimal",
                      "readOnly": true,
                      "type": "number"
                    },
                    "unit": {
                      "description": "The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "meterId": {
                  "description": "The meter id.",
                  "readOnly": true,
                  "type": "string"
                },
                "pretaxCost": {
                  "description": "The amount of cost before tax.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "product": {
                  "description": "Product name.",
                  "readOnly": true,
                  "type": "string"
                },
                "subscriptionGuid": {
                  "description": "Subscription guid.",
                  "readOnly": true,
                  "type": "string"
                },
                "subscriptionName": {
                  "description": "Subscription name.",
                  "readOnly": true,
                  "type": "string"
                },
                "usageEnd": {
                  "description": "The end of the date time range covered by the usage detail.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "usageQuantity": {
                  "description": "The quantity of usage.",
                  "format": "decimal",
                  "readOnly": true,
                  "type": "number"
                },
                "usageStart": {
                  "description": "The start of the date time range covered by the usage detail.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/UsageDetailProperties"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Result of listing usage details. It contains a list of available usage details in reverse chronological order by billing period.",
              "properties": {
                "nextLink": {
                  "description": "The link (url) to the next page of results.",
                  "readOnly": true,
                  "type": "string"
                },
                "value": {
                  "description": "The list of usage details.",
                  "items": {
                    "allOf": [
                      {
                        "description": "The Resource model definition.",
                        "properties": {
                          "id": {
                            "description": "Resource Id.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Resource name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "tags": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Resource tags.",
                            "readOnly": true,
                            "type": "object"
                          },
                          "type": {
                            "description": "Resource type.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "x-ms-azure-resource": true
                      }
                    ],
                    "description": "An usage detail resource.",
                    "properties": {
                      "properties": {
                        "description": "The properties of the usage detail.",
                        "properties": {
                          "accountName": {
                            "description": "Account name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "additionalProperties": {
                            "description": "Additional details of this usage item. By default this is not populated, unless it's specified in $expand.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "billableQuantity": {
                            "description": "The billable usage quantity.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "billingPeriodId": {
                            "description": "The id of the billing period resource that the usage belongs to.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "consumedService": {
                            "description": "Consumed service name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "costCenter": {
                            "description": "The cost center of this department if it is a department and a costcenter exists",
                            "readOnly": true,
                            "type": "string"
                          },
                          "currency": {
                            "description": "The ISO currency in which the meter is charged, for example, USD.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "departmentName": {
                            "description": "Department name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "instanceId": {
                            "description": "The uri of the resource instance that the usage is about.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "instanceLocation": {
                            "description": "The location of the resource instance that the usage is about.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "instanceName": {
                            "description": "The name of the resource instance that the usage is about.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "invoiceId": {
                            "description": "The id of the invoice resource that the usage belongs to.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "isEstimated": {
                            "description": "The estimated usage is subject to change.",
                            "readOnly": true,
                            "type": "boolean"
                          },
                          "meterDetails": {
                            "description": "The properties of the meter detail.",
                            "properties": {
                              "meterCategory": {
                                "description": "The category of the meter, for example, 'Cloud services', 'Networking', etc..",
                                "readOnly": true,
                                "type": "string"
                              },
                              "meterLocation": {
                                "description": "The location in which the Azure service is available.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "meterName": {
                                "description": "The name of the meter, within the given meter category",
                                "readOnly": true,
                                "type": "string"
                              },
                              "meterSubCategory": {
                                "description": "The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..",
                                "readOnly": true,
                                "type": "string"
                              },
                              "pretaxStandardRate": {
                                "description": "The pretax listing price.",
                                "format": "decimal",
                                "readOnly": true,
                                "type": "number"
                              },
                              "totalIncludedQuantity": {
                                "description": "The total included quantity associated with the offer.",
                                "format": "decimal",
                                "readOnly": true,
                                "type": "number"
                              },
                              "unit": {
                                "description": "The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.",
                                "readOnly": true,
                                "type": "string"
                              }
                            }
                          },
                          "meterId": {
                            "description": "The meter id.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "pretaxCost": {
                            "description": "The amount of cost before tax.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "product": {
                            "description": "Product name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "subscriptionGuid": {
                            "description": "Subscription guid.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "subscriptionName": {
                            "description": "Subscription name.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "usageEnd": {
                            "description": "The end of the date time range covered by the usage detail.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "usageQuantity": {
                            "description": "The quantity of usage.",
                            "format": "decimal",
                            "readOnly": true,
                            "type": "number"
                          },
                          "usageStart": {
                            "description": "The start of the date time range covered by the usage detail.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          }
                        }
                      }
                    },
                    "type": "object"
                  },
                  "readOnly": true,
                  "type": "array"
                }
              }
            },
            "op": "add",
            "from": "",
            "path": "/UsageDetailsListResult"
          },
          {
            "oldValue": {
              "description": "The applied scope type",
              "enum": [
                "None",
                "Shared",
                "Single",
                "ResourceGroup",
                "ManagementGroup"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "UserFriendlyAppliedScopeType"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/UserFriendlyAppliedScopeType"
          },
          {
            "oldValue": {
              "description": "The renew state of the reservation",
              "enum": [
                "On",
                "Off",
                "Renewed",
                "NotRenewed",
                "NotApplicable"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true,
                "name": "UserFriendlyRenewState"
              }
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/UserFriendlyRenewState"
          }
        ],
        "parameters": [
          {
            "oldValue": {
              "description": "Supported version.",
              "in": "query",
              "name": "api-version",
              "required": true,
              "type": "string"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ApiVersionParameter"
          },
          {
            "oldValue": {
              "description": "Request containing purchases and refunds that need to be executed.",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "description": "Calculate exchange request",
                "properties": {
                  "properties": {
                    "description": "Calculate exchange request properties",
                    "properties": {
                      "reservationsToExchange": {
                        "description": "List of reservations that are being returned in this exchange.",
                        "items": {
                          "description": "Reservation to return",
                          "properties": {
                            "quantity": {
                              "description": "Quantity to be returned. Must be greater than zero.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "reservationId": {
                              "description": "Fully qualified identifier of the Reservation being returned",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "reservationsToPurchase": {
                        "description": "List of reservations that are being purchased in this exchange.",
                        "items": {
                          "properties": {
                            "location": {
                              "description": "The Azure Region where the reserved resource lives.",
                              "type": "string"
                            },
                            "properties": {
                              "properties": {
                                "appliedScopeType": {
                                  "description": "Type of the Applied Scope.",
                                  "enum": [
                                    "Single",
                                    "Shared"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "AppliedScopeType"
                                  }
                                },
                                "appliedScopes": {
                                  "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                  "items": {
                                    "maxItems": 1,
                                    "minItems": 1,
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "billingPlan": {
                                  "description": "Represent the billing plans.",
                                  "enum": [
                                    "Upfront",
                                    "Monthly"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReservationBillingPlan"
                                  }
                                },
                                "billingScopeId": {
                                  "description": "Subscription that will be charged for purchasing Reservation",
                                  "type": "string"
                                },
                                "displayName": {
                                  "description": "Friendly name of the Reservation",
                                  "type": "string"
                                },
                                "quantity": {
                                  "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "renew": {
                                  "default": false,
                                  "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                  "type": "boolean"
                                },
                                "reservedResourceProperties": {
                                  "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                  "properties": {
                                    "instanceFlexibility": {
                                      "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                      "enum": [
                                        "On",
                                        "Off"
                                      ],
                                      "type": "string",
                                      "x-ms-enum": {
                                        "modelAsString": true,
                                        "name": "InstanceFlexibility"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "reservedResourceType": {
                                  "description": "The type of the resource that is being reserved.",
                                  "enum": [
                                    "VirtualMachines",
                                    "SqlDatabases",
                                    "SuseLinux",
                                    "CosmosDb",
                                    "RedHat",
                                    "SqlDataWarehouse",
                                    "VMwareCloudSimple",
                                    "RedHatOsa",
                                    "Databricks",
                                    "AppService",
                                    "ManagedDisk",
                                    "BlockBlob",
                                    "RedisCache",
                                    "AzureDataExplorer",
                                    "MySql",
                                    "MariaDb",
                                    "PostgreSql",
                                    "DedicatedHost",
                                    "SapHana",
                                    "SqlAzureHybridBenefit",
                                    "AVS",
                                    "DataFactory",
                                    "NetAppStorage",
                                    "AzureFiles",
                                    "SqlEdge",
                                    "VirtualMachineSoftware"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReservedResourceType"
                                  }
                                },
                                "term": {
                                  "description": "Represent the term of Reservation.",
                                  "enum": [
                                    "P1Y",
                                    "P3Y",
                                    "P5Y"
                                  ],
                                  "type": "string",
                                  "x-ms-enum": {
                                    "modelAsString": true,
                                    "name": "ReservationTerm"
                                  }
                                }
                              },
                              "type": "object"
                            },
                            "sku": {
                              "properties": {
                                "name": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CalculateExchangeRequestParameter"
          },
          {
            "oldValue": {
              "description": "Information needed for calculating refund of a reservation.",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "id": {
                    "description": "Fully qualified identifier of the reservation order being returned",
                    "type": "string"
                  },
                  "properties": {
                    "properties": {
                      "reservationToReturn": {
                        "description": "Reservation to return",
                        "properties": {
                          "quantity": {
                            "description": "Quantity to be returned. Must be greater than zero.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "reservationId": {
                            "description": "Fully qualified identifier of the Reservation being returned",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "scope": {
                        "description": "The scope of the refund, e.g. Reservation",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/CalculateRefundRequestParameter"
          },
          {
            "oldValue": {
              "description": "Information needed to change directory of reservation order",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "destinationTenantId": {
                    "description": "Tenant id GUID that reservation order is to be transferred to",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ChangeDirectoryParameter"
          },
          {
            "oldValue": {
              "description": "Request containing the refunds and purchases that need to be executed.",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "description": "Exchange request",
                "properties": {
                  "properties": {
                    "description": "Exchange request properties",
                    "properties": {
                      "sessionId": {
                        "description": "SessionId that was returned by CalculateExchange API.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ExchangeRequestParameter"
          },
          {
            "oldValue": {
              "description": "Supported value of this query is renewProperties",
              "in": "query",
              "name": "expand",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ExpandRenewPropertiesParameter"
          },
          {
            "oldValue": {
              "description": "Filters the skus based on the location specified in this parameter. This can be an azure region or global",
              "in": "query",
              "name": "location",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/LocationIdParameter"
          },
          {
            "oldValue": {
              "description": "Information needed for commercial request for a reservation",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "properties": {
                    "properties": {
                      "sources": {
                        "description": "Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/MergeParameter"
          },
          {
            "oldValue": {
              "description": "Information needed to patch a reservation item",
              "in": "body",
              "name": "parameters",
              "required": true,
              "schema": {
                "properties": {
                  "properties": {
                    "properties": {
                      "appliedScopeType": {
                        "description": "Type of the Applied Scope.",
                        "enum": [
                          "Single",
                          "Shared"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "AppliedScopeType"
                        }
                      },
                      "appliedScopes": {
                        "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                        "items": {
                          "maxItems": 1,
                          "minItems": 1,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "instanceFlexibility": {
                        "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                        "enum": [
                          "On",
                          "Off"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "InstanceFlexibility"
                        }
                      },
                      "name": {
                        "description": "Name of the Reservation",
                        "type": "string"
                      },
                      "renew": {
                        "default": false,
                        "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                        "type": "boolean"
                      },
                      "renewProperties": {
                        "properties": {
                          "purchaseProperties": {
                            "properties": {
                              "location": {
                                "description": "The Azure Region where the reserved resource lives.",
                                "type": "string"
                              },
                              "properties": {
                                "properties": {
                                  "appliedScopeType": {
                                    "description": "Type of the Applied Scope.",
                                    "enum": [
                                      "Single",
                                      "Shared"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "AppliedScopeType"
                                    }
                                  },
                                  "appliedScopes": {
                                    "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                                    "items": {
                                      "maxItems": 1,
                                      "minItems": 1,
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "billingPlan": {
                                    "description": "Represent the billing plans.",
                                    "enum": [
                                      "Upfront",
                                      "Monthly"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservationBillingPlan"
                                    }
                                  },
                                  "billingScopeId": {
                                    "description": "Subscription that will be charged for purchasing Reservation",
                                    "type": "string"
                                  },
                                  "displayName": {
                                    "description": "Friendly name of the Reservation",
                                    "type": "string"
                                  },
                                  "quantity": {
                                    "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "renew": {
                                    "default": false,
                                    "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                                    "type": "boolean"
                                  },
                                  "reservedResourceProperties": {
                                    "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                                    "properties": {
                                      "instanceFlexibility": {
                                        "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                                        "enum": [
                                          "On",
                                          "Off"
                                        ],
                                        "type": "string",
                                        "x-ms-enum": {
                                          "modelAsString": true,
                                          "name": "InstanceFlexibility"
                                        }
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "reservedResourceType": {
                                    "description": "The type of the resource that is being reserved.",
                                    "enum": [
                                      "VirtualMachines",
                                      "SqlDatabases",
                                      "SuseLinux",
                                      "CosmosDb",
                                      "RedHat",
                                      "SqlDataWarehouse",
                                      "VMwareCloudSimple",
                                      "RedHatOsa",
                                      "Databricks",
                                      "AppService",
                                      "ManagedDisk",
                                      "BlockBlob",
                                      "RedisCache",
                                      "AzureDataExplorer",
                                      "MySql",
                                      "MariaDb",
                                      "PostgreSql",
                                      "DedicatedHost",
                                      "SapHana",
                                      "SqlAzureHybridBenefit",
                                      "AVS",
                                      "DataFactory",
                                      "NetAppStorage",
                                      "AzureFiles",
                                      "SqlEdge",
                                      "VirtualMachineSoftware"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservedResourceType"
                                    }
                                  },
                                  "term": {
                                    "description": "Represent the term of Reservation.",
                                    "enum": [
                                      "P1Y",
                                      "P3Y",
                                      "P5Y"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "ReservationTerm"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "sku": {
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PatchParameter"
          },
          {
            "oldValue": {
              "description": "Information needed for calculate or purchase reservation",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "location": {
                    "description": "The Azure Region where the reserved resource lives.",
                    "type": "string"
                  },
                  "properties": {
                    "properties": {
                      "appliedScopeType": {
                        "description": "Type of the Applied Scope.",
                        "enum": [
                          "Single",
                          "Shared"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "AppliedScopeType"
                        }
                      },
                      "appliedScopes": {
                        "description": "List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
                        "items": {
                          "maxItems": 1,
                          "minItems": 1,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "billingPlan": {
                        "description": "Represent the billing plans.",
                        "enum": [
                          "Upfront",
                          "Monthly"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ReservationBillingPlan"
                        }
                      },
                      "billingScopeId": {
                        "description": "Subscription that will be charged for purchasing Reservation",
                        "type": "string"
                      },
                      "displayName": {
                        "description": "Friendly name of the Reservation",
                        "type": "string"
                      },
                      "quantity": {
                        "description": "Quantity of the SKUs that are part of the Reservation. Must be greater than zero.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "renew": {
                        "default": false,
                        "description": "Setting this to true will automatically purchase a new reservation on the expiration date time.",
                        "type": "boolean"
                      },
                      "reservedResourceProperties": {
                        "description": "Properties specific to each reserved resource type. Not required if not applicable.",
                        "properties": {
                          "instanceFlexibility": {
                            "description": "Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
                            "enum": [
                              "On",
                              "Off"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                              "modelAsString": true,
                              "name": "InstanceFlexibility"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "reservedResourceType": {
                        "description": "The type of the resource that is being reserved.",
                        "enum": [
                          "VirtualMachines",
                          "SqlDatabases",
                          "SuseLinux",
                          "CosmosDb",
                          "RedHat",
                          "SqlDataWarehouse",
                          "VMwareCloudSimple",
                          "RedHatOsa",
                          "Databricks",
                          "AppService",
                          "ManagedDisk",
                          "BlockBlob",
                          "RedisCache",
                          "AzureDataExplorer",
                          "MySql",
                          "MariaDb",
                          "PostgreSql",
                          "DedicatedHost",
                          "SapHana",
                          "SqlAzureHybridBenefit",
                          "AVS",
                          "DataFactory",
                          "NetAppStorage",
                          "AzureFiles",
                          "SqlEdge",
                          "VirtualMachineSoftware"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ReservedResourceType"
                        }
                      },
                      "term": {
                        "description": "Represent the term of Reservation.",
                        "enum": [
                          "P1Y",
                          "P3Y",
                          "P5Y"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                          "modelAsString": true,
                          "name": "ReservationTerm"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "sku": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/PurchaseParameter"
          },
          {
            "oldValue": {
              "description": "Information needed for returning reservation.",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "properties": {
                    "properties": {
                      "reservationToReturn": {
                        "description": "Reservation to return",
                        "properties": {
                          "quantity": {
                            "description": "Quantity to be returned. Must be greater than zero.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "reservationId": {
                            "description": "Fully qualified identifier of the Reservation being returned",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "returnReason": {
                        "description": "The reason of returning the reservation",
                        "type": "string"
                      },
                      "scope": {
                        "description": "The scope of the refund, e.g. Reservation",
                        "type": "string"
                      },
                      "sessionId": {
                        "description": "SessionId that was returned by CalculateRefund API.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/RefundRequestParameter"
          },
          {
            "oldValue": {
              "description": "Id of the Reservation Item",
              "in": "path",
              "name": "reservationId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationIdParameter"
          },
          {
            "oldValue": {
              "description": "Order Id of the reservation",
              "in": "path",
              "name": "reservationOrderId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservationOrderIdParameter"
          },
          {
            "oldValue": {
              "description": "The type of the resource for which the skus should be provided.",
              "in": "query",
              "name": "reservedResourceType",
              "required": false,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ReservedResourceTypeIdParameter"
          },
          {
            "oldValue": {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "description": "Available scope",
                "properties": {
                  "properties": {
                    "description": "Available scope request properties",
                    "properties": {
                      "scopes": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/ScopeParameter"
          },
          {
            "oldValue": {
              "description": "Information needed to Split a reservation item",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "properties": {
                    "properties": {
                      "quantities": {
                        "description": "List of the quantities in the new reservations to create.",
                        "items": {
                          "format": "int32",
                          "maxItems": 2,
                          "minItems": 2,
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "reservationId": {
                        "description": "Resource id of the reservation to be split. Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SplitParameter"
          },
          {
            "oldValue": {
              "description": "Id of the subscription",
              "in": "path",
              "name": "subscriptionId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "value": null,
            "op": "remove",
            "from": "",
            "path": "/SubscriptionIdParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Version of the API to be used with the client request. The current version is 2018-01-31.",
              "in": "query",
              "name": "api-version",
              "required": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/apiVersionParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Billing Period Name.",
              "in": "path",
              "name": "billingPeriodName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/billingPeriodNameParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Budget Name.",
              "in": "path",
              "name": "budgetName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/budgetNameParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Id of the reservation",
              "in": "path",
              "name": "reservationId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/reservationIdParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Order Id of the reservation",
              "in": "path",
              "name": "reservationOrderId",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/reservationOrderIdParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Azure Resource Group Name.",
              "in": "path",
              "name": "resourceGroupName",
              "required": true,
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "op": "add",
            "from": "",
            "path": "/resourceGroupNameParameter"
          },
          {
            "oldValue": null,
            "value": {
              "description": "Azure Subscription ID.",
              "in": "path",
              "name": "subscriptionId",
              "required": true,
              "type": "string"
            },
            "op": "add",
            "from": "",
            "path": "/subscriptionIdParameter"
          }
        ],
        "securityDefinitions": [
          {
            "oldValue": "Azure Active Directory OAuth2 Flow",
            "value": "Azure Active Directory OAuth2 Flow.",
            "op": "replace",
            "from": "",
            "path": "/azure_auth/description"
          }
        ]
      }
    },
    "info": {
      "title": {
        "from": "Azure Reservation API",
        "to": "ConsumptionManagementClient"
      },
      "description": {
        "from": "This API describe Azure Reservation",
        "to": "Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions."
      },
      "version": {
        "from": "2022-03-01",
        "to": "2018-01-31"
      }
    },
    "paths": {
      "added": [
        "/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets/{budgetName}",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/marketplaces",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/budgets",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets",
        "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/providers/Microsoft.Consumption/reservationDetails",
        "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/providers/Microsoft.Consumption/reservationSummaries",
        "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/reservations/{reservationId}/providers/Microsoft.Consumption/reservationSummaries",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/budgets/{budgetName}",
        "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/reservations/{reservationId}/providers/Microsoft.Consumption/reservationDetails",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/pricesheets/default",
        "/providers/Microsoft.Consumption/operations",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/pricesheets/default",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/marketplaces",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/usageDetails"
      ],
      "deleted": [
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/return",
        "/providers/Microsoft.Capacity/reservations",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/changeDirectory",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/appliedReservations",
        "/providers/Microsoft.Capacity/calculateExchange",
        "/providers/Microsoft.Capacity/exchange",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/catalogs",
        "/providers/Microsoft.Capacity/calculatePrice",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/calculateRefund",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/merge",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/availableScopes",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations",
        "/providers/Microsoft.Capacity/reservationOrders",
        "/providers/Microsoft.Capacity/operations",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/revisions",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/unarchive",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/split",
        "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/archive"
      ]
    },
    "security": {
      "added": [
        "azure_auth"
      ]
    }
  },
  "tools_a": {},
  "tools_b": {
    "Reservation_AvailableScopes": "FunctionDef(\n  name='Reservation_AvailableScopes',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='reservationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Check whether the scopes from request is valid for `Reservation`. ')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reservations/'),\n          FormattedValue(\n            value=Name(id='reservationId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/availableScopes')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_AvailableScopes')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get Available Scopes for `Reservation`.: Check whether the scopes from request is valid for `Reservation`.\\n'))])],\n  type_params=[])",
    "GetCatalog": "FunctionDef(\n  name='GetCatalog',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='reservedResourceType',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='location',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='publisherId',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='offerId',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='planId',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_skip',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_take',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Auto-generated MCP handler for GET /subscriptions/{subscriptionId}/providers/Microsoft.Capacity/catalogs')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/catalogs')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservedResourceType', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='reservedResourceType'),\n              ctx=Store())],\n          value=Name(id='reservedResourceType', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='location', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='location'),\n              ctx=Store())],\n          value=Name(id='location', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='publisherId', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='publisherId'),\n              ctx=Store())],\n          value=Name(id='publisherId', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='offerId', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='offerId'),\n              ctx=Store())],\n          value=Name(id='offerId', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='planId', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='planId'),\n              ctx=Store())],\n          value=Name(id='planId', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_skip', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$skip'),\n              ctx=Store())],\n          value=Name(id='_skip', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_take', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$take'),\n              ctx=Store())],\n          value=Name(id='_take', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='GetCatalog')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get the regions and skus that are available for RI purchase for the specified Azure subscription.'))])],\n  type_params=[])",
    "GetAppliedReservationList": "FunctionDef(\n  name='GetAppliedReservationList',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='subscriptionId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get applicable `Reservation`s that are applied to this subscription or a resource group under this subscription.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/subscriptions/'),\n          FormattedValue(\n            value=Name(id='subscriptionId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/appliedReservations')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='subscriptionId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: subscriptionId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='GetAppliedReservationList')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get list of applicable `Reservation`s.: Get applicable `Reservation`s that are applied to this subscription or a resource group under this subscription.'))])],\n  type_params=[])",
    "ReservationOrder_Calculate": "FunctionDef(\n  name='ReservationOrder_Calculate',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Calculate price for placing a `ReservationOrder`.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/calculatePrice')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ReservationOrder_Calculate')),\n        keyword(\n          arg='description',\n          value=Constant(value='Calculate price for a `ReservationOrder`.: Calculate price for placing a `ReservationOrder`.'))])],\n  type_params=[])",
    "ReservationOrder_List": "FunctionDef(\n  name='ReservationOrder_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List of all the `ReservationOrder`s that the user has access to in the current tenant.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ReservationOrder_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get all `ReservationOrder`s.: List of all the `ReservationOrder`s that the user has access to in the current tenant.'))])],\n  type_params=[])",
    "ReservationOrder_Purchase": "FunctionDef(\n  name='ReservationOrder_Purchase',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Purchase `ReservationOrder` and create resource under the specified URI.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='put',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ReservationOrder_Purchase')),\n        keyword(\n          arg='description',\n          value=Constant(value='Purchase `ReservationOrder`: Purchase `ReservationOrder` and create resource under the specified URI.'))])],\n  type_params=[])",
    "ReservationOrder_Get": "FunctionDef(\n  name='ReservationOrder_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_expand',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get the details of the `ReservationOrder`.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_expand', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$expand'),\n              ctx=Store())],\n          value=Name(id='_expand', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ReservationOrder_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get a specific `ReservationOrder`.: Get the details of the `ReservationOrder`.'))])],\n  type_params=[])",
    "Reservation_Split": "FunctionDef(\n  name='Reservation_Split',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Split a `Reservation` into two `Reservation`s with specified quantity distribution.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/split')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_Split')),\n        keyword(\n          arg='description',\n          value=Constant(value='Split the `Reservation`.: Split a `Reservation` into two `Reservation`s with specified quantity distribution.'))])],\n  type_params=[])",
    "Reservation_Merge": "FunctionDef(\n  name='Reservation_Merge',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged must have same properties.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/merge')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_Merge')),\n        keyword(\n          arg='description',\n          value=Constant(value='Merges two `Reservation`s.: Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged must have same properties.'))])],\n  type_params=[])",
    "Reservation_List": "FunctionDef(\n  name='Reservation_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List `Reservation`s within a single `ReservationOrder`.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reservations')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get `Reservation`s in a given reservation Order: List `Reservation`s within a single `ReservationOrder`.'))])],\n  type_params=[])",
    "Reservation_Get": "FunctionDef(\n  name='Reservation_Get',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='reservationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_expand',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Get specific `Reservation` details.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reservations/'),\n          FormattedValue(\n            value=Name(id='reservationId', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_expand', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$expand'),\n              ctx=Store())],\n          value=Name(id='_expand', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_Get')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get `Reservation` details.: Get specific `Reservation` details.'))])],\n  type_params=[])",
    "Reservation_Update": "FunctionDef(\n  name='Reservation_Update',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='reservationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Updates the applied scopes of the `Reservation`.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reservations/'),\n          FormattedValue(\n            value=Name(id='reservationId', ctx=Load()),\n            conversion=-1)])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='patch',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_Update')),\n        keyword(\n          arg='description',\n          value=Constant(value='Updates a `Reservation`.: Updates the applied scopes of the `Reservation`.'))])],\n  type_params=[])",
    "Reservation_Archive": "FunctionDef(\n  name='Reservation_Archive',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='reservationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Archiving a `Reservation` moves it to `Archived` state.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reservations/'),\n          FormattedValue(\n            value=Name(id='reservationId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/archive')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_Archive')),\n        keyword(\n          arg='description',\n          value=Constant(value='Archive a `Reservation`.: Archiving a `Reservation` moves it to `Archived` state.'))])],\n  type_params=[])",
    "Reservation_Unarchive": "FunctionDef(\n  name='Reservation_Unarchive',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='reservationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Restores a `Reservation` to the state it was before archiving. ')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reservations/'),\n          FormattedValue(\n            value=Name(id='reservationId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/unarchive')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_Unarchive')),\n        keyword(\n          arg='description',\n          value=Constant(value='Unarchive a `Reservation`.: Restores a `Reservation` to the state it was before archiving.\\n'))])],\n  type_params=[])",
    "Reservation_ListRevisions": "FunctionDef(\n  name='Reservation_ListRevisions',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='reservationId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List of all the revisions for the `Reservation`.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/reservations/'),\n          FormattedValue(\n            value=Name(id='reservationId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/revisions')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_ListRevisions')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get `Reservation` revisions.: List of all the revisions for the `Reservation`.'))])],\n  type_params=[])",
    "Operation_List": "FunctionDef(\n  name='Operation_List',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List all the operations.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/operations')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Operation_List')),\n        keyword(\n          arg='description',\n          value=Constant(value='Get operations.: List all the operations.'))])],\n  type_params=[])",
    "CalculateRefund_Post": "FunctionDef(\n  name='CalculateRefund_Post',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Calculate price for returning `Reservations` if there are no policy errors. ')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/calculateRefund')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='CalculateRefund_Post')),\n        keyword(\n          arg='description',\n          value=Constant(value='Calculate the refund amount of a reservation order.: Calculate price for returning `Reservations` if there are no policy errors.\\n'))])],\n  type_params=[])",
    "Return_Post": "FunctionDef(\n  name='Return_Post',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Return a reservation and get refund information.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/return')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Return_Post')),\n        keyword(\n          arg='description',\n          value=Constant(value='Return a reservation.: Return a reservation and get refund information.'))])],\n  type_params=[])",
    "CalculateExchange_Post": "FunctionDef(\n  name='CalculateExchange_Post',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Calculates price for exchanging `Reservations` if there are no policy errors. ')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/calculateExchange')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='CalculateExchange_Post')),\n        keyword(\n          arg='description',\n          value=Constant(value='Calculates the refund amounts and price of the new purchases.: Calculates price for exchanging `Reservations` if there are no policy errors.\\n'))])],\n  type_params=[])",
    "Exchange_Post": "FunctionDef(\n  name='Exchange_Post',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Returns one or more `Reservations` in exchange for one or more `Reservation` purchases. ')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/exchange')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Exchange_Post')),\n        keyword(\n          arg='description',\n          value=Constant(value='Exchange Reservation(s): Returns one or more `Reservations` in exchange for one or more `Reservation` purchases.\\n'))])],\n  type_params=[])",
    "Reservation_ListAll": "FunctionDef(\n  name='Reservation_ListAll',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_filter',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_orderby',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='refreshSummary',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='_skiptoken',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='selectedState',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load())),\n      arg(\n        arg='take',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None),\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='List the reservations and the roll up counts of reservations group by provisioning states that the user has access to in the current tenant.')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservations')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_filter', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$filter'),\n              ctx=Store())],\n          value=Name(id='_filter', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_orderby', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$orderby'),\n              ctx=Store())],\n          value=Name(id='_orderby', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='refreshSummary', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='refreshSummary'),\n              ctx=Store())],\n          value=Name(id='refreshSummary', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='_skiptoken', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='$skiptoken'),\n              ctx=Store())],\n          value=Name(id='_skiptoken', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='selectedState', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='selectedState'),\n              ctx=Store())],\n          value=Name(id='selectedState', ctx=Load()))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='take', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='take'),\n              ctx=Store())],\n          value=Name(id='take', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='get',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='Reservation_ListAll')),\n        keyword(\n          arg='description',\n          value=Constant(value='List the reservations and the roll up counts of reservations group by provisioning states that the user has access to in the current tenant.'))])],\n  type_params=[])",
    "ReservationOrder_ChangeDirectory": "FunctionDef(\n  name='ReservationOrder_ChangeDirectory',\n  args=arguments(\n    posonlyargs=[],\n    args=[\n      arg(\n        arg='reservationOrderId',\n        annotation=Name(id='str', ctx=Load())),\n      arg(\n        arg='api_version',\n        annotation=Subscript(\n          value=Name(id='Optional', ctx=Load()),\n          slice=Name(id='str', ctx=Load()),\n          ctx=Load()))],\n    kwonlyargs=[],\n    kw_defaults=[],\n    defaults=[\n      Constant(value=None)]),\n  body=[\n    Expr(\n      value=Constant(value='Change directory (tenant) of `ReservationOrder` and all `Reservation` under it to specified tenant id')),\n    Assign(\n      targets=[\n        Name(id='base_url', ctx=Store())],\n      value=Constant(value='https://management.azure.com')),\n    Assign(\n      targets=[\n        Name(id='url', ctx=Store())],\n      value=JoinedStr(\n        values=[\n          FormattedValue(\n            value=Name(id='base_url', ctx=Load()),\n            conversion=-1),\n          Constant(value='/providers/Microsoft.Capacity/reservationOrders/'),\n          FormattedValue(\n            value=Name(id='reservationOrderId', ctx=Load()),\n            conversion=-1),\n          Constant(value='/changeDirectory')])),\n    Assign(\n      targets=[\n        Name(id='params', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='headers', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='cookies', ctx=Store())],\n      value=Dict(keys=[], values=[])),\n    Assign(\n      targets=[\n        Name(id='extra_headers', ctx=Store())],\n      value=Call(\n        func=Attribute(\n          value=Name(id='os', ctx=Load()),\n          attr='getenv',\n          ctx=Load()),\n        args=[\n          Constant(value='EXTRA_HEADERS')],\n        keywords=[])),\n    If(\n      test=Name(id='extra_headers', ctx=Load()),\n      body=[\n        Try(\n          body=[\n            For(\n              target=Tuple(\n                elts=[\n                  Name(id='k', ctx=Store()),\n                  Name(id='v', ctx=Store())],\n                ctx=Store()),\n              iter=Call(\n                func=Attribute(\n                  value=Call(\n                    func=Attribute(\n                      value=Name(id='json', ctx=Load()),\n                      attr='loads',\n                      ctx=Load()),\n                    args=[\n                      Name(id='extra_headers', ctx=Load())],\n                    keywords=[]),\n                  attr='items',\n                  ctx=Load()),\n                args=[],\n                keywords=[]),\n              body=[\n                Assign(\n                  targets=[\n                    Subscript(\n                      value=Name(id='headers', ctx=Load()),\n                      slice=Name(id='k', ctx=Load()),\n                      ctx=Store())],\n                  value=Name(id='v', ctx=Load()))],\n              orelse=[])],\n          handlers=[\n            ExceptHandler(\n              type=Name(id='Exception', ctx=Load()),\n              name='e',\n              body=[\n                Expr(\n                  value=Call(\n                    func=Name(id='print', ctx=Load()),\n                    args=[\n                      Constant(value='Failed to parse EXTRA_HEADERS:'),\n                      Name(id='e', ctx=Load())],\n                    keywords=[]))])],\n          orelse=[],\n          finalbody=[])],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='reservationOrderId', ctx=Load()),\n        ops=[\n          Is()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Raise(\n          exc=Call(\n            func=Name(id='ValueError', ctx=Load()),\n            args=[\n              Constant(value='Missing required path parameter: reservationOrderId')],\n            keywords=[]))],\n      orelse=[]),\n    If(\n      test=Compare(\n        left=Name(id='api_version', ctx=Load()),\n        ops=[\n          IsNot()],\n        comparators=[\n          Constant(value=None)]),\n      body=[\n        Assign(\n          targets=[\n            Subscript(\n              value=Name(id='params', ctx=Load()),\n              slice=Constant(value='api-version'),\n              ctx=Store())],\n          value=Name(id='api_version', ctx=Load()))],\n      orelse=[]),\n    Try(\n      body=[\n        Assign(\n          targets=[\n            Name(id='resp', ctx=Store())],\n          value=Call(\n            func=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='post',\n              ctx=Load()),\n            args=[\n              Name(id='url', ctx=Load())],\n            keywords=[\n              keyword(\n                arg='params',\n                value=Name(id='params', ctx=Load())),\n              keyword(\n                arg='headers',\n                value=Name(id='headers', ctx=Load())),\n              keyword(\n                arg='cookies',\n                value=Name(id='cookies', ctx=Load()))])),\n        Expr(\n          value=Call(\n            func=Attribute(\n              value=Name(id='resp', ctx=Load()),\n              attr='raise_for_status',\n              ctx=Load()),\n            args=[],\n            keywords=[])),\n        If(\n          test=Compare(\n            left=Constant(value='application/json'),\n            ops=[\n              In()],\n            comparators=[\n              Call(\n                func=Attribute(\n                  value=Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='headers',\n                    ctx=Load()),\n                  attr='get',\n                  ctx=Load()),\n                args=[\n                  Constant(value='Content-Type'),\n                  Constant(value='')],\n                keywords=[])]),\n          body=[\n            Return(\n              value=Call(\n                func=Attribute(\n                  value=Name(id='resp', ctx=Load()),\n                  attr='json',\n                  ctx=Load()),\n                args=[],\n                keywords=[]))],\n          orelse=[\n            Return(\n              value=Dict(\n                keys=[\n                  Constant(value='raw'),\n                  Constant(value='status_code')],\n                values=[\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='text',\n                    ctx=Load()),\n                  Attribute(\n                    value=Name(id='resp', ctx=Load()),\n                    attr='status_code',\n                    ctx=Load())]))])],\n      handlers=[\n        ExceptHandler(\n          type=Attribute(\n            value=Attribute(\n              value=Name(id='requests', ctx=Load()),\n              attr='exceptions',\n              ctx=Load()),\n            attr='RequestException',\n            ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='HTTP request failed: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))]),\n        ExceptHandler(\n          type=Name(id='Exception', ctx=Load()),\n          name='e',\n          body=[\n            Raise(\n              exc=Call(\n                func=Name(id='ValueError', ctx=Load()),\n                args=[\n                  JoinedStr(\n                    values=[\n                      Constant(value='Unexpected error: '),\n                      FormattedValue(\n                        value=Call(\n                          func=Name(id='str', ctx=Load()),\n                          args=[\n                            Name(id='e', ctx=Load())],\n                          keywords=[]),\n                        conversion=-1)])],\n                keywords=[]))])],\n      orelse=[],\n      finalbody=[])],\n  decorator_list=[\n    Call(\n      func=Attribute(\n        value=Name(id='mcp', ctx=Load()),\n        attr='tool',\n        ctx=Load()),\n      args=[],\n      keywords=[\n        keyword(\n          arg='name',\n          value=Constant(value='ReservationOrder_ChangeDirectory')),\n        keyword(\n          arg='description',\n          value=Constant(value='Change directory of `ReservationOrder`.: Change directory (tenant) of `ReservationOrder` and all `Reservation` under it to specified tenant id'))])],\n  type_params=[])"
  }
}