{"tools_a":{"Operations_List":"@mcp.tool(name='Operations_List', description=\"\\n\\n> [!NOTE]\\n>\\n> **Mixed Reality retirement**\\n>\\n> The Mixed Reality service is now deprecated and will be retired. \\n\\n Exposing Available Operations\")\ndef Operations_List(api_version: Optional[str] = None):\n    '''  > [!NOTE] > > **Mixed Reality retirement** > > The Mixed Reality service is now deprecated and will be retired.    Exposing Available Operations'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/providers/Microsoft.MixedReality/operations\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"Operations_List":"@mcp.tool(name='Operations_List', description=\"\\n\\n> [!NOTE]\\n>\\n> **Mixed Reality retirement**\\n>\\n> The Mixed Reality service is now deprecated and will be retired. \\n\\n Exposing Available Operations\")\ndef Operations_List():\n    '''  > [!NOTE] > > **Mixed Reality retirement** > > The Mixed Reality service is now deprecated and will be retired.    Exposing Available Operations'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/providers/Microsoft.MixedReality/operations\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/providers/Microsoft.MixedReality/operations":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":null,"v":{"params":{"api-version":"2019-12-02-preview"},"resp":{"200":{"body":{"nextLink":null,"v":[{"display":{"desc":"Registers a subscription for the Mixed Reality resource provider.","operation":"Registers the Mixed Reality resource provider","provider":"Microsoft.MixedReality","resource":"Mixed Reality resource provider"},"name":"Microsoft.MixedReality/register/action"},{"display":{"desc":"Deletes the resource for Microsoft.MixedReality/SpatialAnchorsAccounts","operation":"Delete Spatial Anchors Accounts","provider":"Microsoft.MixedReality","resource":"SpatialAnchorsAccounts"},"name":"Microsoft.MixedReality/SpatialAnchorsAccounts/delete"},{"display":{"desc":"Gets the resource for Microsoft.MixedReality/SpatialAnchorsAccounts","operation":"Get Spatial Anchors Accounts","provider":"Microsoft.MixedReality","resource":"SpatialAnchorsAccounts"},"name":"Microsoft.MixedReality/SpatialAnchorsAccounts/read"},{"display":{"desc":"Updates the resource for Microsoft.MixedReality/SpatialAnchorsAccounts","operation":"Update Spatial Anchors Accounts","provider":"Microsoft.MixedReality","resource":"SpatialAnchorsAccounts"},"name":"Microsoft.MixedReality/SpatialAnchorsAccounts/write"}]}}}},"o":"add","f":"","pth":"/List available operations"},{"ov":{"params":{"api-version":"2019-02-28-preview"},"resp":{"200":{"body":{"nextLink":null,"v":[{"display":{"desc":"Registers a subscription for the Mixed Reality resource provider.","operation":"Registers the Mixed Reality resource provider","provider":"Microsoft.MixedReality","resource":"Mixed Reality resource provider"},"name":"Microsoft.MixedReality/register/action"},{"display":{"desc":"Deletes the resource for Microsoft.MixedReality/SpatialAnchorsAccounts","operation":"Delete Spatial Anchors Accounts","provider":"Microsoft.MixedReality","resource":"SpatialAnchorsAccounts"},"name":"Microsoft.MixedReality/SpatialAnchorsAccounts/delete"},{"display":{"desc":"Gets the resource for Microsoft.MixedReality/SpatialAnchorsAccounts","operation":"Get Spatial Anchors Accounts","provider":"Microsoft.MixedReality","resource":"SpatialAnchorsAccounts"},"name":"Microsoft.MixedReality/SpatialAnchorsAccounts/read"},{"display":{"desc":"Updates the resource for Microsoft.MixedReality/SpatialAnchorsAccounts","operation":"Update Spatial Anchors Accounts","provider":"Microsoft.MixedReality","resource":"SpatialAnchorsAccounts"},"name":"Microsoft.MixedReality/SpatialAnchorsAccounts/write"}]}}}},"v":null,"o":"remove","f":"","pth":"/OperationList"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":{"desc":"The origin for the operation","type":"string"},"v":null,"o":"remove","f":"","pth":"/properties/value/items/properties/origin"}]}}}}}}}}}}}}