{"tools_a":{},"tools_b":{"BlobContainers_SetLegalHold":"@mcp.tool(name='BlobContainers_SetLegalHold', description=\"Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.\")\ndef BlobContainers_SetLegalHold(containerName: str, subscriptionId: str, resourceGroupName: str, accountName: str):\n    '''Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if containerName is None:\n        raise ValueError('Missing required path parameter: containerName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    try:\n        resp = requests.post(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}":{"ops":{"a":{"put":{"t":["BlobContainers"],"opId":"BlobContainers_Create","ex":{"PutContainers":{"r":"./examples/BlobContainersPut.json"},"PutContainerWithDefaultEncryptionScope":{"r":"./examples/BlobContainersPutDefaultEncryptionScope.json"}},"desc":"Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container. ","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"./storage.json#/parameters/StorageAccountName"},{"r":"#/parameters/ContainerName"},{"name":"blobContainer","in":"body","required":true,"sch":{"r":"#/definitions/BlobContainer"},"desc":"Properties of the blob container to create."},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"201":{"desc":"Created -- Create Container operation completed successfully.","sch":{"r":"#/definitions/BlobContainer"}},"200":{"desc":"OK -- The Container is already created.","sch":{"r":"#/definitions/BlobContainer"}}}},"patch":{"t":["BlobContainers"],"opId":"BlobContainers_Update","ex":{"UpdateContainers":{"r":"./examples/BlobContainersPatch.json"}},"desc":"Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn't already exist. ","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"./storage.json#/parameters/StorageAccountName"},{"r":"#/parameters/ContainerName"},{"name":"blobContainer","in":"body","required":true,"sch":{"r":"#/definitions/BlobContainer"},"desc":"Properties to update for the blob container."},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"200":{"desc":"OK -- Update Container operation completed successfully.","sch":{"r":"#/definitions/BlobContainer","desc":"Properties of the updated blob container."}}}},"get":{"t":["BlobContainers"],"opId":"BlobContainers_Get","ex":{"GetContainers":{"r":"./examples/BlobContainersGet.json"}},"desc":"Gets properties of a specified container. ","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"./storage.json#/parameters/StorageAccountName"},{"r":"#/parameters/ContainerName"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"200":{"desc":"OK -- Get Container operation completed successfully.","sch":{"r":"#/definitions/BlobContainer"}}}},"delete":{"t":["BlobContainers"],"opId":"BlobContainers_Delete","ex":{"DeleteContainers":{"r":"./examples/BlobContainersDelete.json"}},"desc":"Deletes specified container under its account.","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"./storage.json#/parameters/StorageAccountName"},{"r":"#/parameters/ContainerName"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"200":{"desc":"OK -- Delete Container operation completed successfully."},"204":{"desc":"No Content -- The Container not exist."}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices":{"ops":{"a":{"get":{"t":["BlobService"],"opId":"BlobServices_List","ex":{"ListBlobServices":{"r":"./examples/BlobServicesList.json"}},"desc":"List blob services of storage account. It returns a collection of one object named default.","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"./storage.json#/parameters/StorageAccountName"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"200":{"desc":"OK -- List blob services operation completed successfully.","sch":{"r":"#/definitions/BlobServiceItems"}}},"page":{"nextLinkName":null}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold":{"ops":{"a":{"post":{"t":["BlobContainers"],"opId":"BlobContainers_SetLegalHold","ex":{"SetLegalHoldContainers":{"r":"./examples/BlobContainersSetLegalHold.json"}},"desc":"Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"./storage.json#/parameters/StorageAccountName"},{"r":"#/parameters/ContainerName"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"},{"name":"LegalHold","in":"body","required":true,"sch":{"r":"#/definitions/LegalHold"},"desc":"The LegalHold property that will be set to a blob container."}],"resp":{"200":{"desc":"OK -- Set legal hold tags for Container completed successfully.","sch":{"r":"#/definitions/LegalHold"}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers":{"ops":{"a":{"get":{"t":["BlobContainers"],"opId":"BlobContainers_List","ex":{"ListContainers":{"r":"./examples/BlobContainersList.json"},"ListDeletedContainers":{"r":"./examples/DeletedBlobContainersList.json"}},"desc":"Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"./storage.json#/parameters/StorageAccountName"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"},{"name":"$maxpagesize","in":"query","type":"string","desc":"Optional. Specified maximum number of containers that can be included in the list."},{"name":"$filter","in":"query","type":"string","desc":"Optional. When specified, only container names starting with the filter will be listed."},{"name":"$include","in":"query","required":false,"type":"string","enum":["deleted"],"x-ms-enum":{"name":"ListContainersInclude","modelAsString":true},"desc":"Optional, used to include the properties for soft deleted blob containers."}],"resp":{"200":{"desc":"OK -- List Container operation completed successfully.","sch":{"r":"#/definitions/ListContainerItems"}}},"page":{"nextLinkName":"nextLink"}}}}}}}}