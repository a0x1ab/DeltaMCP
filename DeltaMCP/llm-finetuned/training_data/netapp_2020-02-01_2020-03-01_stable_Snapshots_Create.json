{"tools_a":{"Snapshots_Create":"@mcp.tool(name='Snapshots_Create', description=\"Create a snapshot: Create the specified snapshot within the given volume\")\ndef Snapshots_Create(subscriptionId: str, resourceGroupName: str, accountName: str, poolName: str, volumeName: str, snapshotName: str, api_version: Optional[str] = None):\n    '''Create the specified snapshot within the given volume'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if poolName is None:\n        raise ValueError('Missing required path parameter: poolName')\n    if volumeName is None:\n        raise ValueError('Missing required path parameter: volumeName')\n    if snapshotName is None:\n        raise ValueError('Missing required path parameter: snapshotName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.put(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"Snapshots_Create":"@mcp.tool(name='Snapshots_Create', description=\"Create a snapshot: Create the specified snapshot within the given volume\")\ndef Snapshots_Create(subscriptionId: str, resourceGroupName: str, accountName: str, poolName: str, volumeName: str, snapshotName: str, api_version: Optional[str] = None):\n    '''Create the specified snapshot within the given volume'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if poolName is None:\n        raise ValueError('Missing required path parameter: poolName')\n    if volumeName is None:\n        raise ValueError('Missing required path parameter: volumeName')\n    if snapshotName is None:\n        raise ValueError('Missing required path parameter: snapshotName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.put(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}":{"ops":{"m":{"PUT":{"ext":{"m":{"ex":[{"ov":"2020-02-01","v":"2020-03-01","o":"replace","f":"","pth":"/Accounts_CreateOrUpdate/parameters/api-version"}]}},"params":{"m":{"query":{"api-version":{"ext":{"m":{"default":[{"ov":"2020-02-01","v":"2020-03-01","o":"replace","f":"","pth":""}]}}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}":{"ops":{"m":{"PUT":{"ext":{"m":{"ex":[{"ov":"2020-02-01","v":"2020-03-01","o":"replace","f":"","pth":"/Pools_CreateOrUpdate/parameters/api-version"}]}},"params":{"m":{"body":{"body":{"sch":{"prop":{"m":{"prop":{"prop":{"m":{"serviceLevel":{"ext":{"m":{"x-ms-enum":[{"ov":"PoolServiceLevel","v":"ServiceLevel","o":"replace","f":"","pth":"/name"}]}}}}}}}}}}},"query":{"api-version":{"ext":{"m":{"default":[{"ov":"2020-02-01","v":"2020-03-01","o":"replace","f":"","pth":""}]}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":"PoolServiceLevel","v":"ServiceLevel","o":"replace","f":"","pth":"/properties/properties/properties/serviceLevel/x-ms-enum/name"}]}}},"201":{"ext":{"m":{"sch":[{"ov":"PoolServiceLevel","v":"ServiceLevel","o":"replace","f":"","pth":"/properties/properties/properties/serviceLevel/x-ms-enum/name"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}":{"ops":{"m":{"PUT":{"ext":{"m":{"ex":[{"ov":"2020-02-01","v":"2020-03-01","o":"replace","f":"","pth":"/Volumes_CreateOrUpdate/parameters/api-version"}]}},"params":{"m":{"body":{"body":{"sch":{"prop":{"m":{"prop":{"prop":{"d":["usedBytes"],"m":{"dataProtection":{"prop":{"m":{"replication":{"prop":{"m":{"replicationSchedule":{"enum":{"a":["weekly","monthly"]}}}}}}}},"exportPolicy":{"prop":{"m":{"rules":{"items":{"prop":{"m":{"ruleIndex":{"format":{"f":"","to":"int32"}}}}}}}}},"serviceLevel":{"ext":{"m":{"x-ms-enum":[{"ov":"VolumeServiceLevel","v":"ServiceLevel","o":"replace","f":"","pth":"/name"}]}}},"snapshotDirectoryVisible":{"default":{"f":true,"to":null}},"snapshotId":{"ext":{"d":["x-nullable"]}}}}}}}}}},"query":{"api-version":{"ext":{"m":{"default":[{"ov":"2020-02-01","v":"2020-03-01","o":"replace","f":"","pth":""}]}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":"weekly","o":"add","f":"","pth":"/properties/properties/properties/dataProtection/properties/replication/properties/replicationSchedule/enum/-"},{"ov":null,"v":"monthly","o":"add","f":"","pth":"/properties/properties/properties/dataProtection/properties/replication/properties/replicationSchedule/enum/-"},{"ov":null,"v":"int32","o":"add","f":"","pth":"/properties/properties/properties/exportPolicy/properties/rules/items/properties/ruleIndex/format"},{"ov":"VolumeServiceLevel","v":"ServiceLevel","o":"replace","f":"","pth":"/properties/properties/properties/serviceLevel/x-ms-enum/name"},{"ov":true,"v":null,"o":"remove","f":"","pth":"/properties/properties/properties/snapshotDirectoryVisible/default"},{"ov":true,"v":null,"o":"remove","f":"","pth":"/properties/properties/properties/snapshotId/x-nullable"},{"ov":{"desc":"Resource size in bytes, current storage usage for the volume in bytes","format":"int64","readOnly":true,"type":"integer"},"v":null,"o":"remove","f":"","pth":"/properties/properties/properties/usedBytes"}]}}},"201":{"ext":{"m":{"sch":[{"ov":null,"v":"weekly","o":"add","f":"","pth":"/properties/properties/properties/dataProtection/properties/replication/properties/replicationSchedule/enum/-"},{"ov":null,"v":"monthly","o":"add","f":"","pth":"/properties/properties/properties/dataProtection/properties/replication/properties/replicationSchedule/enum/-"},{"ov":null,"v":"int32","o":"add","f":"","pth":"/properties/properties/properties/exportPolicy/properties/rules/items/properties/ruleIndex/format"},{"ov":"VolumeServiceLevel","v":"ServiceLevel","o":"replace","f":"","pth":"/properties/properties/properties/serviceLevel/x-ms-enum/name"},{"ov":true,"v":null,"o":"remove","f":"","pth":"/properties/properties/properties/snapshotDirectoryVisible/default"},{"ov":true,"v":null,"o":"remove","f":"","pth":"/properties/properties/properties/snapshotId/x-nullable"},{"ov":{"desc":"Resource size in bytes, current storage usage for the volume in bytes","format":"int64","readOnly":true,"type":"integer"},"v":null,"o":"remove","f":"","pth":"/properties/properties/properties/usedBytes"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}":{"ops":{"m":{"PUT":{"ext":{"m":{"ex":[{"ov":"2020-02-01","v":"2020-03-01","o":"replace","f":"","pth":"/Snapshots_Create/parameters/api-version"}]}},"params":{"m":{"query":{"api-version":{"ext":{"m":{"default":[{"ov":"2020-02-01","v":"2020-03-01","o":"replace","f":"","pth":""}]}}}}}}}}}}}}}