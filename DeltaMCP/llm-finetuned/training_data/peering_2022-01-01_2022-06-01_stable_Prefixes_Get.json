{"tools_a":{"Prefixes_Get":"@mcp.tool(name='Prefixes_Get', description=\"Gets an existing prefix with the specified name under the given subscription, resource group and peering service.\")\ndef Prefixes_Get(resourceGroupName: str, peeringServiceName: str, prefixName: str, subscriptionId: str, _expand: Optional[str] = None, api_version: Optional[str] = None):\n    '''Gets an existing prefix with the specified name under the given subscription, resource group and peering service.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if peeringServiceName is None:\n        raise ValueError('Missing required path parameter: peeringServiceName')\n    if prefixName is None:\n        raise ValueError('Missing required path parameter: prefixName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if _expand is not None:\n        params['$expand'] = _expand\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"Prefixes_Get":"@mcp.tool(name='Prefixes_Get', description=\"Gets an existing prefix with the specified name under the given subscription, resource group and peering service.\")\ndef Prefixes_Get(resourceGroupName: str, peeringServiceName: str, prefixName: str, subscriptionId: str, _expand: Optional[str] = None, api_version: Optional[str] = None):\n    '''Gets an existing prefix with the specified name under the given subscription, resource group and peering service.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if peeringServiceName is None:\n        raise ValueError('Missing required path parameter: peeringServiceName')\n    if prefixName is None:\n        raise ValueError('Missing required path parameter: prefixName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if _expand is not None:\n        params['$expand'] = _expand\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2022-01-01","v":"2022-06-01","o":"replace","f":"","pth":"/List peering services in a resource group/parameters/api-version"}]}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2022-01-01","v":"2022-06-01","o":"replace","f":"","pth":"/Get a peering service/parameters/api-version"}]}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2022-01-01","v":"2022-06-01","o":"replace","f":"","pth":"/List all the prefixes associated with the peering service/parameters/api-version"}]}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2022-01-01","v":"2022-06-01","o":"replace","f":"","pth":"/Get a prefix associated with the peering service/parameters/api-version"}]}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2022-01-01","v":"2022-06-01","o":"replace","f":"","pth":"/List peerings in a resource group/parameters/api-version"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":"TypeChangeRequested","o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/direct/properties/connections/items/properties/connectionState/enum/-"},{"ov":null,"v":"TypeChangeInProgress","o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/direct/properties/connections/items/properties/connectionState/enum/-"},{"ov":null,"v":"TypeChangeRequested","o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/exchange/properties/connections/items/properties/connectionState/enum/-"},{"ov":null,"v":"TypeChangeInProgress","o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/exchange/properties/connections/items/properties/connectionState/enum/-"}]}}}}}}}}}}}}