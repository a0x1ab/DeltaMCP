{"tools_a":{},"tools_b":{"RegisteredPrefixes_CreateOrUpdate":"@mcp.tool(name='RegisteredPrefixes_CreateOrUpdate', description=\"Creates a new registered prefix with the specified name under the given subscription, resource group and peering.\")\ndef RegisteredPrefixes_CreateOrUpdate(resourceGroupName: str, peeringName: str, registeredPrefixName: str, subscriptionId: str, api_version: Optional[str] = None):\n    '''Creates a new registered prefix with the specified name under the given subscription, resource group and peering.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredPrefixes/{registeredPrefixName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if peeringName is None:\n        raise ValueError('Missing required path parameter: peeringName')\n    if registeredPrefixName is None:\n        raise ValueError('Missing required path parameter: registeredPrefixName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.put(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredPrefixes":{"ops":{"a":{"get":{"t":["PeeringRegisteredPrefixes"],"desc":"Lists all registered prefixes under the given subscription, resource group and peering.","opId":"RegisteredPrefixes_ListByPeering","params":[{"name":"resourceGroupName","in":"path","desc":"The name of the resource group.","required":true,"type":"string"},{"name":"peeringName","in":"path","desc":"The name of the peering.","required":true,"type":"string"},{"r":"#/parameters/SubscriptionIdParameter"},{"r":"#/parameters/ApiVersionParameter"}],"resp":{"200":{"desc":"OK","sch":{"r":"#/definitions/PeeringRegisteredPrefixListResult"}},"default":{"desc":"Error response describing why the operation has failed.","sch":{"r":"#/definitions/ErrorResponse"}}},"ex":{"List all the registered prefixes associated with the peering":{"r":"./examples/ListRegisteredPrefixesByPeering.json"}},"page":{"nextLinkName":"nextLink"}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredPrefixes/{registeredPrefixName}":{"ops":{"a":{"put":{"t":["PeeringRegisteredPrefixes"],"desc":"Creates a new registered prefix with the specified name under the given subscription, resource group and peering.","opId":"RegisteredPrefixes_CreateOrUpdate","params":[{"name":"resourceGroupName","in":"path","desc":"The name of the resource group.","required":true,"type":"string"},{"name":"peeringName","in":"path","desc":"The name of the peering.","required":true,"type":"string"},{"name":"registeredPrefixName","in":"path","desc":"The name of the registered prefix.","required":true,"type":"string"},{"name":"registeredPrefix","in":"body","desc":"The properties needed to create a registered prefix.","required":true,"sch":{"r":"#/definitions/PeeringRegisteredPrefix"}},{"r":"#/parameters/SubscriptionIdParameter"},{"r":"#/parameters/ApiVersionParameter"}],"resp":{"200":{"desc":"OK","sch":{"r":"#/definitions/PeeringRegisteredPrefix"}},"201":{"desc":"Created","sch":{"r":"#/definitions/PeeringRegisteredPrefix"}},"default":{"desc":"Error response describing why the operation has failed.","sch":{"r":"#/definitions/ErrorResponse"}}},"ex":{"Create or update a registered prefix for the peering":{"r":"./examples/CreateRegisteredPrefix.json"}}}}}}}}}