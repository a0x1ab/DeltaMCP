{"tools_a":{"MarketplaceAgreements_Get":"@mcp.tool(name='MarketplaceAgreements_Get', description=\"Get marketplace terms.\")\ndef MarketplaceAgreements_Get(subscriptionId: str, offerType: str, publisherId: str, offerId: str, planId: str, api_version: Optional[str] = None):\n    '''Get marketplace terms.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if offerType is None:\n        raise ValueError('Missing required path parameter: offerType')\n    if publisherId is None:\n        raise ValueError('Missing required path parameter: publisherId')\n    if offerId is None:\n        raise ValueError('Missing required path parameter: offerId')\n    if planId is None:\n        raise ValueError('Missing required path parameter: planId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"MarketplaceAgreements_Get":"@mcp.tool(name='MarketplaceAgreements_Get', description=\"Get marketplace terms.\")\ndef MarketplaceAgreements_Get(subscriptionId: str, offerType: str, publisherId: str, offerId: str, planId: str, api_version: Optional[str] = None):\n    '''Get marketplace terms.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if offerType is None:\n        raise ValueError('Missing required path parameter: offerType')\n    if publisherId is None:\n        raise ValueError('Missing required path parameter: publisherId')\n    if offerId is None:\n        raise ValueError('Missing required path parameter: offerId')\n    if planId is None:\n        raise ValueError('Missing required path parameter: planId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2015-06-01","v":"2021-01-01","o":"replace","f":"","pth":"/GetMarketplaceTerms/parameters/api-version"},{"ov":null,"v":"test.marketplaceTermsLink","o":"add","f":"","pth":"/GetMarketplaceTerms/responses/200/body/properties/marketplaceTermsLink"},{"ov":{"body":{"Message":"media type unsupported"}},"v":null,"o":"remove","f":"","pth":"/GetMarketplaceTerms/responses/415"}]}},"resp":{"d":["415"],"m":{"200":{"ext":{"m":{"sch":[{"ov":"object","v":null,"o":"remove","f":"","pth":"/allOf/0/type"},{"ov":null,"v":{"desc":"Link to HTML with Azure Marketplace terms.","type":"string"},"o":"add","f":"","pth":"/properties/properties/properties/marketplaceTermsLink"},{"ov":"object","v":null,"o":"remove","f":"","pth":"/properties/properties/type"},{"ov":null,"v":{"desc":"Metadata pertaining to creation and last modification of the resource.","prop":{"createdAt":{"desc":"The timestamp of resource creation (UTC).","format":"date-time","type":"string"},"createdBy":{"desc":"The identity that created the resource.","type":"string"},"createdByType":{"desc":"The type of identity that created the resource.","enum":["User","Application","ManagedIdentity","Key"],"type":"string","x-ms-enum":{"modelAsString":true,"name":"createdByType"}},"lastModifiedAt":{"desc":"The timestamp of resource last modification (UTC)","format":"date-time","type":"string"},"lastModifiedBy":{"desc":"The identity that last modified the resource.","type":"string"},"lastModifiedByType":{"desc":"The type of identity that last modified the resource.","enum":["User","Application","ManagedIdentity","Key"],"type":"string","x-ms-enum":{"modelAsString":true,"name":"createdByType"}}},"readOnly":true,"type":"object"},"o":"add","f":"","pth":"/properties/systemData"},{"ov":"object","v":null,"o":"remove","f":"","pth":"/type"}]}}},"default":{"ext":{"m":{"sch":[{"ov":{"desc":"List of inner error messages indicating why the operation failed.","items":{"prop":{"code":{"desc":"Error code.","readOnly":true,"type":"string"},"message":{"desc":"Error message indicating why the operation failed.","readOnly":true,"type":"string"}},"type":"object"},"type":"array","uniqueItems":false,"x-ms-identifiers":[]},"v":null,"o":"remove","f":"","pth":"/properties/error/properties/details"},{"ov":"object","v":null,"o":"remove","f":"","pth":"/properties/error/type"}]}}}}}}}}}}}}