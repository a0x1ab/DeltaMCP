{"tools_a":{},"tools_b":{"Backups_Delete":"@mcp.tool(name='Backups_Delete', description=\"Delete backup: Delete a backup of the volume\")\ndef Backups_Delete(subscriptionId: str, resourceGroupName: str, accountName: str, poolName: str, volumeName: str, backupName: str, api_version: Optional[str] = None):\n    '''Delete a backup of the volume'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if poolName is None:\n        raise ValueError('Missing required path parameter: poolName')\n    if volumeName is None:\n        raise ValueError('Missing required path parameter: volumeName')\n    if backupName is None:\n        raise ValueError('Missing required path parameter: backupName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.delete(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}":{"ops":{"a":{"delete":{"t":["Backups"],"summary":"Delete backup","desc":"Delete a backup of the volume","opId":"Backups_Delete","params":[{"r":"#/parameters/SubscriptionId"},{"r":"#/parameters/ResourceGroup"},{"r":"#/parameters/AccountName"},{"r":"#/parameters/PoolName"},{"r":"#/parameters/VolumeName"},{"r":"#/parameters/BackupName"},{"r":"#/parameters/ApiVersionParameter"}],"resp":{"200":{"desc":"OK"},"202":{"desc":"Accepted -- Create or update request accepted; operation will complete asynchronously"},"204":{"desc":"NoContent -- Resource does not exist."},"default":{"desc":"Error response describing why the operation failed."}},"lro":true,"x-ms-long-running-operation-options":{"final-state-via":"location"},"ex":{"Backups_Delete":{"r":"./examples/Backups_Delete.json"}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups":{"ops":{"a":{"get":{"t":["Backups"],"summary":"List Backups","desc":"List all backups for a volume","opId":"Backups_List","params":[{"r":"#/parameters/SubscriptionId"},{"r":"#/parameters/ResourceGroup"},{"r":"#/parameters/AccountName"},{"r":"#/parameters/PoolName"},{"r":"#/parameters/VolumeName"},{"r":"#/parameters/ApiVersionParameter"}],"page":{"nextLinkName":null},"resp":{"200":{"desc":"OK","sch":{"r":"#/definitions/backupsList"}},"default":{"desc":"Error response describing why the operation failed."}},"ex":{"Backups_List":{"r":"./examples/Backups_List.json"}}}}}}}}}