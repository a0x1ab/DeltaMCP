{"tools_a":{"Operations_List":"@mcp.tool(name='Operations_List', description=\"List all the available operations the KubernetesConfiguration resource provider supports.\")\ndef Operations_List(api_version: Optional[str] = None):\n    '''List all the available operations the KubernetesConfiguration resource provider supports.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/providers/Microsoft.KubernetesConfiguration/operations\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"Operations_List":"@mcp.tool(name='Operations_List', description=\"List all the available operations the KubernetesConfiguration resource provider supports.\")\ndef Operations_List(api_version: Optional[str] = None):\n    '''List all the available operations the KubernetesConfiguration resource provider supports.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/providers/Microsoft.KubernetesConfiguration/operations\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/providers/Microsoft.KubernetesConfiguration/operations":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2020-07-01-preview","v":"2020-10-01-preview","o":"replace","f":"","pth":"/BatchAccountDelete/parameters/api-version"},{"ov":[{"display":{"desc":"Get the specified Source Control Configuration.","operation":"Get Source Control Configuration","provider":"Microsoft KubernetesConfiguration","resource":"sourceControlConfigurations"},"name":"Microsoft.KubernetesConfiguration/sourceControlConfigurations/read"},{"display":{"desc":"Create the Source Control Configuration specified.","operation":"Create a Source Control Configuration","provider":"Microsoft KubernetesConfiguration","resource":"sourceControlConfigurations"},"name":"Microsoft.KubernetesConfiguration/sourceControlConfigurations/write"},{"display":{"desc":"Delete the specified Source Control Configuration.","operation":"Delete Source Control Configuration","provider":"Microsoft KubernetesConfiguration","resource":"sourceControlConfigurations"},"name":"Microsoft.KubernetesConfiguration/sourceControlConfigurations/delete"},{"display":{"desc":"Get the specified Extension Instance.","operation":"Get extension instance","provider":"Microsoft KubernetesConfiguration","resource":"extensions"},"name":"Microsoft.KubernetesConfiguration/extensions/read"},{"display":{"desc":"Create the Extension Instance specified.","operation":"Create a Extension Instance","provider":"Microsoft KubernetesConfiguration","resource":"extensions"},"name":"Microsoft.KubernetesConfiguration/extensions/write"},{"display":{"desc":"Delete the specified Extension Instance.","operation":"Delete Extension Instance","provider":"Microsoft KubernetesConfiguration","resource":"extensions"},"name":"Microsoft.KubernetesConfiguration/extensions/delete"}],"v":{"v":[{"display":{"desc":"Creates or updates source control configuration.","operation":"Microsoft.KubernetesConfiguration/sourceControlConfigurations/write","provider":"Microsoft Kubernetes Configuration","resource":"Microsoft.KubernetesConfiguration/sourceControlConfigurations"},"isDataAction":false,"name":"Microsoft.KubernetesConfiguration/sourceControlConfigurations/write"},{"display":{"desc":"Gets source control configuration.","operation":"Microsoft.KubernetesConfiguration/sourceControlConfigurations/read","provider":"Microsoft Kubernetes Configuration","resource":"Microsoft.KubernetesConfiguration/sourceControlConfigurations"},"isDataAction":false,"name":"Microsoft.KubernetesConfiguration/sourceControlConfigurations/read"},{"display":{"desc":"Deletes source control configuration.","operation":"Microsoft.KubernetesConfiguration/sourceControlConfigurations/delete","provider":"Microsoft Kubernetes Configuration","resource":"Microsoft.KubernetesConfiguration/sourceControlConfigurations"},"isDataAction":false,"name":"Microsoft.KubernetesConfiguration/sourceControlConfigurations/delete"},{"display":{"desc":"Registers subscription to Microsoft.KubernetesConfiguration resource provider.","operation":"Microsoft.KubernetesConfiguration/register/action","provider":"Microsoft Kubernetes Configuration","resource":"Register"},"isDataAction":false,"name":"Microsoft.KubernetesConfiguration/register/action"}]},"o":"replace","f":"","pth":"/BatchAccountDelete/responses/200/body"}]}}}}}}}}}