{"tools_a":{"getTestResultFile":"@mcp.tool(name='getTestResultFile', description=\"Returns a file test result for the matching test\")\ndef getTestResultFile(webTestName: str, subscriptionId: str, resourceGroupName: str, geoLocationId: Optional[str] = None, timeStamp: Optional[str] = None, downloadAs: Optional[str] = None, testSuccessfulCriteria: Optional[str] = None, continuationToken: Optional[str] = None):\n    '''Returns a file test result for the matching test'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/webtests/{webTestName}/getTestResultFile\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if webTestName is None:\n        raise ValueError('Missing required path parameter: webTestName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if geoLocationId is not None:\n        params['geoLocationId'] = geoLocationId\n    if timeStamp is not None:\n        params['timeStamp'] = timeStamp\n    if downloadAs is not None:\n        params['downloadAs'] = downloadAs\n    if testSuccessfulCriteria is not None:\n        params['testSuccessfulCriteria'] = testSuccessfulCriteria\n    if continuationToken is not None:\n        params['continuationToken'] = continuationToken\n    try:\n        resp = requests.post(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{},"p":{"d":{"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/webtests/{webTestName}/getTestResultFile":{"ops":{"d":{"post":{"t":["WebTests_GetTestResultFile"],"opId":"getTestResultFile","desc":"Returns a file test result for the matching test","params":[{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ResourceGroupNameParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"},{"r":"#/parameters/WebTestNameParameter"},{"r":"#/parameters/GeolocationIdParameter"},{"r":"#/parameters/TimeStampParameter"},{"r":"#/parameters/DownloadAsParameter"},{"r":"#/parameters/TestSuccessfulCriteriaParameter"},{"r":"#/parameters/ContinuationTokenParameter"}],"resp":{"default":{"desc":"Error response describing why the operation failed.","sch":{"r":"#/definitions/ErrorResponse"}},"200":{"desc":"OK","sch":{"r":"#/definitions/TestResultFileResponse"}}},"ex":{"Example Get call:":{"r":"./examples/WebTestResultsTestResultFile.json"}}}}}}}}}