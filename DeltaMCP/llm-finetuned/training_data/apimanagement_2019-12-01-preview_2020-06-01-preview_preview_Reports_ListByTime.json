{"tools_a":{"Reports_ListByTime":"@mcp.tool(name='Reports_ListByTime', description=\"Lists report records by Time.\")\ndef Reports_ListByTime(subscriptionId: str, resourceGroupName: str, serviceName: str, _filter: Optional[str] = None, _orderby: Optional[str] = None, interval: Optional[str] = None):\n    '''Lists report records by Time.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byTime\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if serviceName is None:\n        raise ValueError('Missing required path parameter: serviceName')\n    if _filter is not None:\n        params['$filter'] = _filter\n    if _orderby is not None:\n        params['$orderby'] = _orderby\n    if interval is not None:\n        params['interval'] = interval\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{},"p":{"d":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byTime":{"ops":{"d":{"get":{"t":["Reports"],"opId":"Reports_ListByTime","desc":"Lists report records by Time.","ex":{"ApiManagementGetReportsByTime":{"r":"./examples/ApiManagementGetReportsByTime.json"}},"params":[{"r":"./apimanagement.json#/parameters/ResourceGroupNameParameter"},{"r":"./apimanagement.json#/parameters/ServiceNameParameter"},{"name":"$filter","in":"query","required":true,"type":"string","desc":"|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| timestamp | filter, select | ge, le |     | </br>| interval | select |     |     | </br>| apiRegion | filter | eq |     | </br>| userId | filter | eq |     | </br>| productId | filter | eq |     | </br>| subscriptionId | filter | eq |     | </br>| apiId | filter | eq |     | </br>| operationId | filter | eq |     | </br>| callCountSuccess | select |     |     | </br>| callCountBlocked | select |     |     | </br>| callCountFailed | select |     |     | </br>| callCountOther | select |     |     | </br>| bandwidth | select, orderBy |     |     | </br>| cacheHitsCount | select |     |     | </br>| cacheMissCount | select |     |     | </br>| apiTimeAvg | select |     |     | </br>| apiTimeMin | select |     |     | </br>| apiTimeMax | select |     |     | </br>| serviceTimeAvg | select |     |     | </br>| serviceTimeMin | select |     |     | </br>| serviceTimeMax | select |     |     | </br>"},{"r":"./apimanagement.json#/parameters/TopQueryParameter"},{"r":"./apimanagement.json#/parameters/SkipQueryParameter"},{"name":"$orderby","in":"query","required":false,"type":"string","desc":"OData order by query option."},{"name":"interval","in":"query","required":true,"type":"string","format":"duration","desc":"By time interval. Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))."},{"r":"./apimanagement.json#/parameters/ApiVersionParameter"},{"r":"./apimanagement.json#/parameters/SubscriptionIdParameter"}],"resp":{"200":{"desc":"Lists a collection of Report record.","sch":{"r":"./definitions.json#/definitions/ReportCollection"}}},"page":{"nextLinkName":"nextLink"},"x-ms-odata":"./definitions.json#/definitions/ReportRecordContract"}}}}}}}