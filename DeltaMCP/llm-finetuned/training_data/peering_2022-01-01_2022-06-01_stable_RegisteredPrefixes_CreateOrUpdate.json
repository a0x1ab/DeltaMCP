{"tools_a":{"RegisteredPrefixes_CreateOrUpdate":"@mcp.tool(name='RegisteredPrefixes_CreateOrUpdate', description=\"Creates a new registered prefix with the specified name under the given subscription, resource group and peering.\")\ndef RegisteredPrefixes_CreateOrUpdate(resourceGroupName: str, peeringName: str, registeredPrefixName: str, subscriptionId: str, api_version: Optional[str] = None):\n    '''Creates a new registered prefix with the specified name under the given subscription, resource group and peering.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredPrefixes/{registeredPrefixName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if peeringName is None:\n        raise ValueError('Missing required path parameter: peeringName')\n    if registeredPrefixName is None:\n        raise ValueError('Missing required path parameter: registeredPrefixName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.put(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"RegisteredPrefixes_CreateOrUpdate":"@mcp.tool(name='RegisteredPrefixes_CreateOrUpdate', description=\"Creates a new registered prefix with the specified name under the given subscription, resource group and peering.\")\ndef RegisteredPrefixes_CreateOrUpdate(resourceGroupName: str, peeringName: str, registeredPrefixName: str, subscriptionId: str, api_version: Optional[str] = None):\n    '''Creates a new registered prefix with the specified name under the given subscription, resource group and peering.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredPrefixes/{registeredPrefixName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if peeringName is None:\n        raise ValueError('Missing required path parameter: peeringName')\n    if registeredPrefixName is None:\n        raise ValueError('Missing required path parameter: registeredPrefixName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.put(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}":{"ops":{"m":{"PUT":{"ext":{"m":{"ex":[{"ov":"2022-01-01","v":"2022-06-01","o":"replace","f":"","pth":"/Create a direct peering/parameters/api-version"},{"ov":"2022-01-01","v":"2022-06-01","o":"replace","f":"","pth":"/Create a peering with exchange route server/parameters/api-version"},{"ov":"2022-01-01","v":"2022-06-01","o":"replace","f":"","pth":"/Create an exchange peering/parameters/api-version"}]}},"params":{"m":{"body":{"peering":{"sch":{"prop":{"m":{"prop":{"prop":{"m":{"direct":{"prop":{"m":{"connections":{"items":{"prop":{"m":{"connectionState":{"enum":{"a":["TypeChangeRequested","TypeChangeInProgress"]}}}}}}}}},"exchange":{"prop":{"m":{"connections":{"items":{"prop":{"m":{"connectionState":{"enum":{"a":["TypeChangeRequested","TypeChangeInProgress"]}}}}}}}}}}}}}}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":"TypeChangeRequested","o":"add","f":"","pth":"/properties/properties/properties/direct/properties/connections/items/properties/connectionState/enum/-"},{"ov":null,"v":"TypeChangeInProgress","o":"add","f":"","pth":"/properties/properties/properties/direct/properties/connections/items/properties/connectionState/enum/-"},{"ov":null,"v":"TypeChangeRequested","o":"add","f":"","pth":"/properties/properties/properties/exchange/properties/connections/items/properties/connectionState/enum/-"},{"ov":null,"v":"TypeChangeInProgress","o":"add","f":"","pth":"/properties/properties/properties/exchange/properties/connections/items/properties/connectionState/enum/-"}]}}},"201":{"ext":{"m":{"sch":[{"ov":null,"v":"TypeChangeRequested","o":"add","f":"","pth":"/properties/properties/properties/direct/properties/connections/items/properties/connectionState/enum/-"},{"ov":null,"v":"TypeChangeInProgress","o":"add","f":"","pth":"/properties/properties/properties/direct/properties/connections/items/properties/connectionState/enum/-"},{"ov":null,"v":"TypeChangeRequested","o":"add","f":"","pth":"/properties/properties/properties/exchange/properties/connections/items/properties/connectionState/enum/-"},{"ov":null,"v":"TypeChangeInProgress","o":"add","f":"","pth":"/properties/properties/properties/exchange/properties/connections/items/properties/connectionState/enum/-"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredPrefixes/{registeredPrefixName}":{"ops":{"m":{"PUT":{"ext":{"m":{"ex":[{"ov":"2022-01-01","v":"2022-06-01","o":"replace","f":"","pth":"/Create or update a registered prefix for the peering/parameters/api-version"}]}}}}}}}}}