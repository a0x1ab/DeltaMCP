{"tools_a":{"SmartDetectorAlertRules_List":"@mcp.tool(name='SmartDetectorAlertRules_List', description=\"List all the existing Smart Detector alert rules within the subscription.\")\ndef SmartDetectorAlertRules_List(subscriptionId: str, api_version: Optional[str] = None):\n    '''List all the existing Smart Detector alert rules within the subscription.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/microsoft.alertsManagement/smartDetectorAlertRules\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"SmartDetectorAlertRules_List":"@mcp.tool(name='SmartDetectorAlertRules_List', description=\"List all the existing Smart Detector alert rules within the subscription.\")\ndef SmartDetectorAlertRules_List(subscriptionId: str, api_version: Optional[str] = None, expandDetector: Optional[str] = None):\n    '''List all the existing Smart Detector alert rules within the subscription.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/microsoft.alertsManagement/smartDetectorAlertRules\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    if expandDetector is not None:\n        params['expandDetector'] = expandDetector\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/providers/microsoft.alertsManagement/smartDetectorAlertRules":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2019-03-01","v":"2019-06-01","o":"replace","f":"","pth":"/List Smart Detector alert rules/parameters/api-version"},{"ov":null,"v":"global","o":"add","f":"","pth":"/List Smart Detector alert rules/responses/200/body/value/0/location"},{"ov":null,"v":{},"o":"add","f":"","pth":"/List Smart Detector alert rules/responses/200/body/value/0/tags"},{"ov":null,"v":"global","o":"add","f":"","pth":"/List Smart Detector alert rules/responses/200/body/value/1/location"},{"ov":null,"v":{},"o":"add","f":"","pth":"/List Smart Detector alert rules/responses/200/body/value/1/tags"}]}},"params":{"a":{"query":["expandDetector"]},"m":{"pth":{"subscriptionId":{"ext":{"a":["minLength"]},"desc":{"f":"The Azure subscription id.","to":"The ID of the target subscription."}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"default":"global","desc":"The resource location.","type":"string"},"o":"add","f":"","pth":"/properties/value/items/allOf/0/properties/location"},{"ov":null,"v":{"additionalProperties":{"type":"string"},"desc":"The resource tags.","type":"object"},"o":"add","f":"","pth":"/properties/value/items/allOf/0/properties/tags"}]}}}}}}}}}}}}