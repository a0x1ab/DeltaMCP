{"tools_a":{"Workflows_Disable":"@mcp.tool(name='Workflows_Disable', description=\"Disables a workflow.\")\ndef Workflows_Disable(subscriptionId: str, resourceGroupName: str, workflowName: str, api_version: Optional[str] = None):\n    '''Disables a workflow.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/disable\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if workflowName is None:\n        raise ValueError('Missing required path parameter: workflowName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.post(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{},"p":{"d":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows":{"ops":{"d":{"get":{"t":["Workflows"],"opId":"Workflows_ListByResourceGroup","desc":"Gets a list of workflows by resource group.","params":[{"r":"#/parameters/subscriptionId"},{"name":"resourceGroupName","desc":"The resource group name.","in":"path","required":true,"type":"string"},{"r":"#/parameters/api-version"},{"name":"$top","desc":"The number of items to be included in the result.","in":"query","required":false,"type":"integer","format":"int32"},{"name":"$filter","desc":"The filter to apply on the operation.","in":"query","required":false,"type":"string"}],"resp":{"200":{"desc":"OK","sch":{"r":"#/definitions/WorkflowListResult"}}},"page":{"nextLinkName":"nextLink"},"x-ms-odata":"#/definitions/WorkflowFilter"}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}":{"ops":{"d":{"get":{"t":["Workflows"],"opId":"Workflows_Get","desc":"Gets a workflow.","params":[{"r":"#/parameters/subscriptionId"},{"name":"resourceGroupName","desc":"The resource group name.","in":"path","required":true,"type":"string"},{"name":"workflowName","desc":"The workflow name.","in":"path","required":true,"type":"string"},{"r":"#/parameters/api-version"}],"resp":{"200":{"desc":"OK","sch":{"r":"#/definitions/Workflow"}}}},"put":{"t":["Workflows"],"opId":"Workflows_CreateOrUpdate","desc":"Creates or updates a workflow.","params":[{"r":"#/parameters/subscriptionId"},{"name":"resourceGroupName","desc":"The resource group name.","in":"path","required":true,"type":"string"},{"name":"workflowName","desc":"The workflow name.","in":"path","required":true,"type":"string"},{"r":"#/parameters/api-version"},{"name":"workflow","desc":"The workflow.","in":"body","required":true,"sch":{"r":"#/definitions/Workflow"}}],"resp":{"200":{"desc":"OK","sch":{"r":"#/definitions/Workflow"}},"201":{"desc":"Created","sch":{"r":"#/definitions/Workflow"}}}},"patch":{"t":["Workflows"],"opId":"Workflows_Update","desc":"Updates a workflow.","params":[{"r":"#/parameters/subscriptionId"},{"name":"resourceGroupName","desc":"The resource group name.","in":"path","required":true,"type":"string"},{"name":"workflowName","desc":"The workflow name.","in":"path","required":true,"type":"string"},{"r":"#/parameters/api-version"},{"name":"workflow","desc":"The workflow.","in":"body","required":true,"sch":{"r":"#/definitions/Workflow"}}],"resp":{"200":{"desc":"OK","sch":{"r":"#/definitions/Workflow"}}}},"delete":{"t":["Workflows"],"opId":"Workflows_Delete","desc":"Deletes a workflow.","params":[{"r":"#/parameters/subscriptionId"},{"name":"resourceGroupName","desc":"The resource group name.","in":"path","required":true,"type":"string"},{"name":"workflowName","desc":"The workflow name.","in":"path","required":true,"type":"string"},{"r":"#/parameters/api-version"}],"resp":{"200":{"desc":"OK"},"204":{"desc":"No Content"}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/disable":{"ops":{"d":{"post":{"t":["Workflows"],"opId":"Workflows_Disable","desc":"Disables a workflow.","params":[{"r":"#/parameters/subscriptionId"},{"name":"resourceGroupName","desc":"The resource group name.","in":"path","required":true,"type":"string"},{"name":"workflowName","desc":"The workflow name.","in":"path","required":true,"type":"string"},{"r":"#/parameters/api-version"}],"resp":{"200":{"desc":"OK"}}}}}}}}}