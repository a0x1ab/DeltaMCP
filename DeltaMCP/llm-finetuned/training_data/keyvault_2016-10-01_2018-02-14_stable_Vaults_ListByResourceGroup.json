{
  "oasdiff": {
    "paths": {
      "modified": {
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2016-10-01",
                        "value": "2018-02-14",
                        "op": "replace",
                        "from": "",
                        "path": "/List vaults in the specified resource group/parameters/api-version"
                      },
                      {
                        "oldValue": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults?api-version=2016-10-01&$skiptoken=dmF1bHQtcGVza3ktanVyeS03MzA3Ng==",
                        "value": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults?api-version=2018-02-14&$skiptoken=dmF1bHQtcGVza3ktanVyeS03MzA3Ng==",
                        "op": "replace",
                        "from": "",
                        "path": "/List vaults in the specified resource group/responses/200/body/nextLink"
                      },
                      {
                        "oldValue": null,
                        "value": true,
                        "op": "add",
                        "from": "",
                        "path": "/List vaults in the specified resource group/responses/200/body/value/0/properties/enableSoftDelete"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": [
                                {
                                  "description": "Key Vault resource",
                                  "properties": {
                                    "id": {
                                      "description": "The Azure Resource Manager resource ID for the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "location": {
                                      "description": "The supported Azure location where the key vault should be created.",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "The name of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    },
                                    "tags": {
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "description": "The tags that will be assigned to the key vault. ",
                                      "type": "object"
                                    },
                                    "type": {
                                      "description": "The resource type of the key vault.",
                                      "readOnly": true,
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "location"
                                  ],
                                  "x-ms-azure-resource": true
                                }
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/allOf"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Fully qualified identifier of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/id"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Azure location of the key vault resource.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/location"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Name of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/name"
                            },
                            {
                              "oldValue": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
                              "value": "An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/description"
                            },
                            {
                              "oldValue": null,
                              "value": "backup",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
                            },
                            {
                              "oldValue": null,
                              "value": "restore",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/accessPolicies/items/properties/permissions/properties/certificates/items/enum/-"
                            },
                            {
                              "oldValue": "Property specifying whether recoverable deletion is enabled for this key vault. Setting this property to true activates the soft delete feature, whereby vaults or vault entities can be recovered after deletion. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
                              "value": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/enableSoftDelete/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "A set of rules governing the network accessibility of a vault.",
                                "properties": {
                                  "bypass": {
                                    "description": "Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'.",
                                    "enum": [
                                      "AzureServices",
                                      "None"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "NetworkRuleBypassOptions"
                                    }
                                  },
                                  "defaultAction": {
                                    "description": "The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.",
                                    "enum": [
                                      "Allow",
                                      "Deny"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "NetworkRuleAction"
                                    }
                                  },
                                  "ipRules": {
                                    "description": "The list of IP address rules.",
                                    "items": {
                                      "description": "A rule governing the accessibility of a vault from a specific ip address or ip range.",
                                      "properties": {
                                        "value": {
                                          "description": "An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "value"
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  "virtualNetworkRules": {
                                    "description": "The list of virtual network rules.",
                                    "items": {
                                      "description": "A rule governing the accessibility of a vault from a specific virtual network.",
                                      "properties": {
                                        "id": {
                                          "description": "Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/networkAcls"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "List of private endpoint connections associated with the key vault.",
                                "items": {
                                  "description": "Private endpoint connection item.",
                                  "properties": {
                                    "properties": {
                                      "description": "Properties of the private endpoint connection resource.",
                                      "properties": {
                                        "privateEndpoint": {
                                          "description": "Private endpoint object properties.",
                                          "properties": {
                                            "id": {
                                              "description": "Full identifier of the private endpoint resource.",
                                              "readOnly": true,
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "privateLinkServiceConnectionState": {
                                          "description": "An object that represents the approval state of the private link connection.",
                                          "properties": {
                                            "actionRequired": {
                                              "description": "A message indicating if changes on the service provider require any updates on the consumer.",
                                              "type": "string"
                                            },
                                            "description": {
                                              "description": "The reason for approval or rejection.",
                                              "type": "string"
                                            },
                                            "status": {
                                              "description": "The private endpoint connection status.",
                                              "enum": [
                                                "Pending",
                                                "Approved",
                                                "Rejected",
                                                "Disconnected"
                                              ],
                                              "type": "string",
                                              "x-ms-enum": {
                                                "modelAsString": true,
                                                "name": "PrivateEndpointServiceConnectionStatus"
                                              }
                                            }
                                          }
                                        },
                                        "provisioningState": {
                                          "description": "The current provisioning state.",
                                          "enum": [
                                            "Succeeded",
                                            "Creating",
                                            "Updating",
                                            "Deleting",
                                            "Failed",
                                            "Disconnected"
                                          ],
                                          "readOnly": true,
                                          "type": "string",
                                          "x-ms-enum": {
                                            "modelAsString": true,
                                            "name": "PrivateEndpointConnectionProvisioningState"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "readOnly": true,
                                "type": "array"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/privateEndpointConnections"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "description": "Tags assigned to the key vault resource.",
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/tags"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Resource type of the key vault resource.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/type"
                            },
                            {
                              "oldValue": null,
                              "value": true,
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/x-ms-azure-resource"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {
    "Vaults_ListByResourceGroup": "FunctionDef(name='Vaults_ListByResourceGroup', args=arguments(posonlyargs=[], args=[arg(arg='resourceGroupName', annotation=Name(id='str', ctx=Load())), arg(arg='subscriptionId', annotation=Name(id='str', ctx=Load())), arg(arg='_top', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='api_version', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.')), Assign(targets=[Name(id='base_url', ctx=Store())], value=Constant(value='https://management.azure.com')), Assign(targets=[Name(id='url', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='base_url', ctx=Load()), conversion=-1), Constant(value='/subscriptions/'), FormattedValue(value=Name(id='subscriptionId', ctx=Load()), conversion=-1), Constant(value='/resourceGroups/'), FormattedValue(value=Name(id='resourceGroupName', ctx=Load()), conversion=-1), Constant(value='/providers/Microsoft.KeyVault/vaults')])), Assign(targets=[Name(id='params', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cookies', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='extra_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='EXTRA_HEADERS')], keywords=[])), If(test=Name(id='extra_headers', ctx=Load()), body=[Try(body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='extra_headers', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Failed to parse EXTRA_HEADERS:'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Name(id='resourceGroupName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: resourceGroupName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='subscriptionId', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: subscriptionId')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='_top', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='$top'), ctx=Store())], value=Name(id='_top', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='api_version', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='api-version'), ctx=Store())], value=Name(id='api_version', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='params', value=Name(id='params', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='cookies', value=Name(id='cookies', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='application/json'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Dict(keys=[Constant(value='raw'), Constant(value='status_code')], values=[Attribute(value=Name(id='resp', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Load())]))])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='requests', ctx=Load()), attr='exceptions', ctx=Load()), attr='RequestException', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='HTTP request failed: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected error: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='mcp', ctx=Load()), attr='tool', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='Vaults_ListByResourceGroup')), keyword(arg='description', value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.'))])])"
  },
  "tools_b": {
    "Vaults_ListByResourceGroup": "FunctionDef(name='Vaults_ListByResourceGroup', args=arguments(posonlyargs=[], args=[arg(arg='resourceGroupName', annotation=Name(id='str', ctx=Load())), arg(arg='subscriptionId', annotation=Name(id='str', ctx=Load())), arg(arg='_top', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='api_version', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.')), Assign(targets=[Name(id='base_url', ctx=Store())], value=Constant(value='https://management.azure.com')), Assign(targets=[Name(id='url', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='base_url', ctx=Load()), conversion=-1), Constant(value='/subscriptions/'), FormattedValue(value=Name(id='subscriptionId', ctx=Load()), conversion=-1), Constant(value='/resourceGroups/'), FormattedValue(value=Name(id='resourceGroupName', ctx=Load()), conversion=-1), Constant(value='/providers/Microsoft.KeyVault/vaults')])), Assign(targets=[Name(id='params', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cookies', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='extra_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='EXTRA_HEADERS')], keywords=[])), If(test=Name(id='extra_headers', ctx=Load()), body=[Try(body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='extra_headers', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Failed to parse EXTRA_HEADERS:'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Name(id='resourceGroupName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: resourceGroupName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='subscriptionId', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: subscriptionId')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='_top', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='$top'), ctx=Store())], value=Name(id='_top', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='api_version', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='api-version'), ctx=Store())], value=Name(id='api_version', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='params', value=Name(id='params', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='cookies', value=Name(id='cookies', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='application/json'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Dict(keys=[Constant(value='raw'), Constant(value='status_code')], values=[Attribute(value=Name(id='resp', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Load())]))])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='requests', ctx=Load()), attr='exceptions', ctx=Load()), attr='RequestException', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='HTTP request failed: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected error: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='mcp', ctx=Load()), attr='tool', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='Vaults_ListByResourceGroup')), keyword(arg='description', value=Constant(value='The List operation gets information about the vaults associated with the subscription and within the specified resource group.'))])])"
  }
}