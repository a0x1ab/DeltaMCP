{"tools_a":{},"tools_b":{"CassandraResources_ListCassandraKeyspaces":"@mcp.tool(name='CassandraResources_ListCassandraKeyspaces', description=\"Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.\")\ndef CassandraResources_ListCassandraKeyspaces(resourceGroupName: str, accountName: str, subscriptionId: str, api_version: Optional[str] = None):\n    '''Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces":{"ops":{"a":{"get":{"opId":"CassandraResources_ListCassandraKeyspaces","ex":{"CosmosDBCassandraKeyspaceList":{"r":"./examples/CosmosDBCassandraKeyspaceList.json"}},"desc":"Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.","params":[{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"},{"r":"#/parameters/resourceGroupNameParameter"},{"r":"#/parameters/accountNameParameter"},{"r":"#/parameters/apiVersionParameter"}],"resp":{"200":{"desc":"The Cassandra keyspace properties were retrieved successfully.","sch":{"r":"#/definitions/CassandraKeyspaceListResult"}}},"page":{"nextLinkName":null}}}}}}}}