{"tools_a":{"ActivityLogAlerts_CreateOrUpdate":"@mcp.tool(name='ActivityLogAlerts_CreateOrUpdate', description=\"Create a new Activity Log Alert rule or update an existing one.\")\ndef ActivityLogAlerts_CreateOrUpdate(activityLogAlertName: str, subscriptionId: str, resourceGroupName: str):\n    '''Create a new Activity Log Alert rule or update an existing one.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/activityLogAlerts/{activityLogAlertName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if activityLogAlertName is None:\n        raise ValueError('Missing required path parameter: activityLogAlertName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    try:\n        resp = requests.put(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{},"p":{"d":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/activityLogAlerts":{"ops":{"d":{"get":{"desc":"Get a list of all Activity Log Alert rules in a resource group.","opId":"ActivityLogAlerts_ListByResourceGroup","ex":{"List activity log alerts":{"r":"./examples/ActivityLogAlertRule_ListByResourceGroupName.json"}},"page":{"nextLinkName":"nextLink"},"params":[{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"},{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"},{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"}],"resp":{"200":{"desc":"The request succeeded.","sch":{"r":"#/definitions/AlertRuleList"}},"default":{"desc":"An error occurred and the list of Activity Log Alert rules could not be retrieved.","sch":{"r":"#/definitions/ErrorResponse"}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/activityLogAlerts/{activityLogAlertName}":{"ops":{"d":{"put":{"desc":"Create a new Activity Log Alert rule or update an existing one.","opId":"ActivityLogAlerts_CreateOrUpdate","ex":{"Create or update an Activity Log Alert rule":{"r":"./examples/ActivityLogAlertRule_CreateOrUpdate.json"},"Create or update an Activity Log Alert rule with 'anyOf' condition":{"r":"./examples/ActivityLogAlertRule_CreateOrUpdateRuleWithAnyOfCondition.json"},"Create or update an Activity Log Alert rule with 'containsAny'":{"r":"./examples/ActivityLogAlertRule_CreateOrUpdateRuleWithContainsAny.json"},"Create or update an Activity Log Alert rule for tenant level events":{"r":"./examples/ActivityLogAlertRule_CreateOrUpdateTenantLevelServiceHealthRule.json"}},"params":[{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"},{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"},{"r":"#/parameters/ActivityLogAlertNameParameter"},{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"},{"name":"activityLogAlertRule","desc":"The Activity Log Alert rule to create or use for the update.","in":"body","required":true,"sch":{"r":"#/definitions/ActivityLogAlertResource"}}],"resp":{"200":{"desc":"An existing Activity Log Alert rule was successfully updated.","sch":{"r":"#/definitions/ActivityLogAlertResource"}},"201":{"desc":"A new Activity Log Alert rule was successfully created.","sch":{"r":"#/definitions/ActivityLogAlertResource"}},"default":{"desc":"An error occurred and the Activity Log Alert rule could not be created or updated.","sch":{"r":"#/definitions/ErrorResponse"}}}}}}}}}}