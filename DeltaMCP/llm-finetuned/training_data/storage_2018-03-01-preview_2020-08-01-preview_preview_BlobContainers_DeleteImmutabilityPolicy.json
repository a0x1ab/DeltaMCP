{"tools_a":{},"tools_b":{"BlobContainers_DeleteImmutabilityPolicy":"@mcp.tool(name='BlobContainers_DeleteImmutabilityPolicy', description=\"Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, the only way is to delete the container after deleting all expired blobs inside the policy locked container.\")\ndef BlobContainers_DeleteImmutabilityPolicy(containerName: str, immutabilityPolicyName: str, subscriptionId: str, resourceGroupName: str, accountName: str, If_Match: Optional[str] = None):\n    '''Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, the only way is to delete the container after deleting all expired blobs inside the policy locked container.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if containerName is None:\n        raise ValueError('Missing required path parameter: containerName')\n    if immutabilityPolicyName is None:\n        raise ValueError('Missing required path parameter: immutabilityPolicyName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    header_value = If_Match if If_Match is not None else os.getenv('IF_MATCH')\n    if header_value is not None:\n        headers['If-Match'] = header_value\n    try:\n        resp = requests.delete(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}":{"ops":{"a":{"delete":{"t":["BlobContainers"],"opId":"BlobContainers_Delete","ex":{"DeleteContainers":{"r":"./examples/BlobContainersDelete.json"}},"desc":"Deletes specified container under its account.","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"./storage.json#/parameters/StorageAccountName"},{"r":"#/parameters/ContainerName"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"200":{"desc":"OK -- Delete Container operation completed successfully."},"204":{"desc":"No Content -- The Container not exist."}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}":{"ops":{"a":{"delete":{"t":["BlobContainers"],"opId":"BlobContainers_DeleteImmutabilityPolicy","ex":{"DeleteImmutabilityPolicy":{"r":"./examples/BlobContainersDeleteImmutabilityPolicy.json"}},"desc":"Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, the only way is to delete the container after deleting all expired blobs inside the policy locked container.","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"./storage.json#/parameters/StorageAccountName"},{"r":"#/parameters/ContainerName"},{"r":"#/parameters/ImmutabilityPolicyName"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"},{"name":"If-Match","in":"header","required":true,"type":"string","desc":"The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied."}],"resp":{"200":{"desc":"OK -- Deletes container ImmutabilityPolicy operation completed successfully.","sch":{"r":"#/definitions/ImmutabilityPolicy"},"headers":{"ETag":{"desc":"The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers.","type":"string"}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices":{"ops":{"a":{"get":{"t":["BlobService"],"opId":"BlobServices_List","ex":{"ListBlobServices":{"r":"./examples/BlobServicesList.json"}},"desc":"List blob services of storage account. It returns a collection of one object named default.","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"./storage.json#/parameters/StorageAccountName"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"200":{"desc":"OK -- List blob services operation completed successfully.","sch":{"r":"#/definitions/BlobServiceItems"}}},"page":{"nextLinkName":null}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers":{"ops":{"a":{"get":{"t":["BlobContainers"],"opId":"BlobContainers_List","ex":{"ListContainers":{"r":"./examples/BlobContainersList.json"},"ListDeletedContainers":{"r":"./examples/DeletedBlobContainersList.json"}},"desc":"Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"./storage.json#/parameters/StorageAccountName"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"},{"name":"$maxpagesize","in":"query","type":"string","desc":"Optional. Specified maximum number of containers that can be included in the list."},{"name":"$filter","in":"query","type":"string","desc":"Optional. When specified, only container names starting with the filter will be listed."},{"name":"$include","in":"query","required":false,"type":"string","enum":["deleted"],"x-ms-enum":{"name":"ListContainersInclude","modelAsString":true},"desc":"Optional, used to include the properties for soft deleted blob containers."}],"resp":{"200":{"desc":"OK -- List Container operation completed successfully.","sch":{"r":"#/definitions/ListContainerItems"}}},"page":{"nextLinkName":"nextLink"}}}}}}}}