{"tools_a":{},"tools_b":{"Quota_CreateOrUpdate":"@mcp.tool(name='Quota_CreateOrUpdate', description=\"Create or update the quota (service limits) of a resource to the requested value.\\n Steps:\\r\\n  1. Make the Get request to get the quota information for specific resource.\\r\\n  2. To increase the quota, update the limit field in the response from Get request to new value.\\r\\n  3. Submit the JSON to the quota request API to update the quota.\\r\\n  The Create quota request may be constructed as follows. The PUT operation can be used to update the quota.\")\ndef Quota_CreateOrUpdate(subscriptionId: str, providerId: str, location: str, resourceName: str, api_version: Optional[str] = None):\n    '''Create or update the quota (service limits) of a resource to the requested value.  Steps:    1. Make the Get request to get the quota information for specific resource.    2. To increase the quota, update the limit field in the response from Get request to new value.    3. Submit the JSON to the quota request API to update the quota.    The Create quota request may be constructed as follows. The PUT operation can be used to update the quota.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits/{resourceName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if providerId is None:\n        raise ValueError('Missing required path parameter: providerId')\n    if location is None:\n        raise ValueError('Missing required path parameter: location')\n    if resourceName is None:\n        raise ValueError('Missing required path parameter: resourceName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.put(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits":{"ops":{"a":{"get":{"t":["QuotaInformation"],"desc":"Gets a list of current quotas (service limits) and usage for all resources. The response from the list quota operation can be leveraged to request quota updates.","opId":"Quota_List","ex":{"Quotas_listUsagesForCompute":{"r":"./examples/getComputeUsages.json"},"Quotas_listUsagesMachineLearningServices":{"r":"./examples/getMachineLearningServicesUsages.json"}},"params":[{"r":"#/parameters/SubscriptionIdInParameters"},{"r":"#/parameters/ProviderIdInParameters"},{"r":"#/parameters/LocationIdInParameters"},{"r":"#/parameters/ApiVersionParameter"}],"resp":{"200":{"desc":"OK. Returns the paginated quota information.","sch":{"r":"#/definitions/QuotaLimits"},"headers":{"ETag":{"desc":"Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.","type":"string"}}},"default":{"desc":"Error description in the response.","sch":{"r":"#/definitions/ExceptionResponse"}}},"page":{"nextLinkName":"nextLink"}}}}},"/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits/{resourceName}":{"ops":{"a":{"put":{"t":["QuotaInformation"],"desc":"Create or update the quota (service limits) of a resource to the requested value.\n Steps:\r\n  1. Make the Get request to get the quota information for specific resource.\r\n  2. To increase the quota, update the limit field in the response from Get request to new value.\r\n  3. Submit the JSON to the quota request API to update the quota.\r\n  The Create quota request may be constructed as follows. The PUT operation can be used to update the quota.","opId":"Quota_CreateOrUpdate","ex":{"Quotas_Request_PutForCompute":{"r":"./examples/putComputeOneSkuQuotaRequest.json"},"Quotas_Request_PutForMachineLearningServices_DedicatedResource":{"r":"./examples/putMachineLearningServicesQuotaRequestDedicated.json"},"Quotas_Request_PutForMachineLearningServices_LowPriorityResource":{"r":"./examples/putMachineLearningServicesQuotaRequestLowPriority.json"}},"lro":true,"x-ms-long-running-operation-options":{"final-state-via":"original-uri"},"params":[{"r":"#/parameters/SubscriptionIdInParameters"},{"r":"#/parameters/ProviderIdInParameters"},{"r":"#/parameters/LocationIdInParameters"},{"r":"#/parameters/ResourceNameInParameters"},{"r":"#/parameters/ApiVersionParameter"},{"name":"createQuotaRequest","in":"body","desc":"Quota requests payload.","required":true,"sch":{"r":"#/definitions/CurrentQuotaLimitBase"}}],"resp":{"200":{"desc":"OK. Returns details of the quota request.","sch":{"r":"#/definitions/CurrentQuotaLimitBase"}},"201":{"desc":"The request is accepted and being processed. Use the requestId parameter to check the status of the request.","sch":{"r":"#/definitions/QuotaRequestSubmitResponse201"}},"default":{"desc":"Error description in the response.","sch":{"r":"#/definitions/ExceptionResponse"}}}}}}}}}}