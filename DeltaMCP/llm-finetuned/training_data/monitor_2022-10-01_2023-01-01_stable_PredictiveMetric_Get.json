{"tools_a":{"PredictiveMetric_Get":"@mcp.tool(name='PredictiveMetric_Get', description=\"get predictive autoscale metric future data\")\ndef PredictiveMetric_Get(autoscaleSettingName: str, subscriptionId: str, resourceGroupName: str, timespan: Optional[str] = None, interval: Optional[str] = None, metricNamespace: Optional[str] = None, metricName: Optional[str] = None, aggregation: Optional[str] = None):\n    '''get predictive autoscale metric future data'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}/predictiveMetrics\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if autoscaleSettingName is None:\n        raise ValueError('Missing required path parameter: autoscaleSettingName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if timespan is not None:\n        params['timespan'] = timespan\n    if interval is not None:\n        params['interval'] = interval\n    if metricNamespace is not None:\n        params['metricNamespace'] = metricNamespace\n    if metricName is not None:\n        params['metricName'] = metricName\n    if aggregation is not None:\n        params['aggregation'] = aggregation\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{},"p":{"d":{"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings":{"ops":{"d":{"get":{"desc":"Lists the autoscale settings for a resource group","t":["AutoscaleSettings"],"opId":"AutoscaleSettings_ListByResourceGroup","params":[{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"},{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"default":{"desc":"Error response describing why the operation failed.","sch":{"r":"#/definitions/AutoscaleErrorResponse"}},"200":{"desc":"Successful request for a list of autoscale settings","sch":{"r":"#/definitions/AutoscaleSettingResourceCollection"}}},"page":{"nextLinkName":"nextLink"},"ex":{"List autoscale settings":{"r":"./examples/listAutoscaleSetting.json"}}}}}},"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}":{"ops":{"d":{"get":{"desc":"Gets an autoscale setting","t":["AutoscaleSettings"],"opId":"AutoscaleSettings_Get","params":[{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"},{"r":"#/parameters/AutoscaleSettingNameParameter"},{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"default":{"desc":"Error response describing why the operation failed.","sch":{"r":"#/definitions/AutoscaleErrorResponse"}},"200":{"desc":"Successful request to get one autoscale setting","sch":{"r":"#/definitions/AutoscaleSettingResource"}}},"ex":{"Get an autoscale setting":{"r":"./examples/getAutoscaleSetting.json"}}}}}},"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}/predictiveMetrics":{"ops":{"d":{"get":{"t":["Metrics"],"opId":"PredictiveMetric_Get","desc":"get predictive autoscale metric future data","params":[{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"},{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"},{"r":"#/parameters/AutoscaleSettingNameParameter"},{"r":"#/parameters/TimespanParameter"},{"r":"#/parameters/IntervalParameter"},{"r":"#/parameters/MetricNamespaceParameter"},{"r":"#/parameters/MetricNamesParameter"},{"r":"#/parameters/AggregationParameter"},{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"}],"resp":{"default":{"desc":"Error response describing why the operation failed.","sch":{"r":"#/definitions/AutoscaleErrorResponse"}},"200":{"desc":"Successful request to get the list of metric values.","sch":{"r":"#/definitions/PredictiveResponse"}}},"ex":{"Get Metric for data":{"r":"./examples/GetPredictiveMetric.json"}}}}}}}}}