{"tools_a":{},"tools_b":{"BlobContainers_GetImmutabilityPolicy":"@mcp.tool(name='BlobContainers_GetImmutabilityPolicy', description=\"Gets the existing immutability policy along with the corresponding ETag in response headers and body.\")\ndef BlobContainers_GetImmutabilityPolicy(accountName: str, containerName: str, immutabilityPolicyName: str, subscriptionId: str, resourceGroupName: str, If_Match: Optional[str] = None):\n    '''Gets the existing immutability policy along with the corresponding ETag in response headers and body.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if containerName is None:\n        raise ValueError('Missing required path parameter: containerName')\n    if immutabilityPolicyName is None:\n        raise ValueError('Missing required path parameter: immutabilityPolicyName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    header_value = If_Match if If_Match is not None else os.getenv('IF_MATCH')\n    if header_value is not None:\n        headers['If-Match'] = header_value\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}":{"ops":{"a":{"get":{"t":["BlobContainers"],"opId":"BlobContainers_GetImmutabilityPolicy","ex":{"GetImmutabilityPolicy":{"r":"./examples/BlobContainersGetImmutabilityPolicy.json"}},"desc":"Gets the existing immutability policy along with the corresponding ETag in response headers and body.","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"#/parameters/AccountName"},{"r":"#/parameters/ContainerName"},{"r":"#/parameters/ImmutabilityPolicyName"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"},{"name":"If-Match","in":"header","required":false,"type":"string","desc":"The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied."}],"resp":{"200":{"desc":"OK -- Gets container ImmutabilityPolicy operation completed successfully.","sch":{"r":"#/definitions/ImmutabilityPolicy"},"headers":{"ETag":{"desc":"The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers.","type":"string"}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers":{"ops":{"a":{"get":{"t":["BlobContainers"],"opId":"BlobContainers_List","ex":{"ListContainers":{"r":"./examples/BlobContainersList.json"}},"desc":"Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"#/parameters/AccountName"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"200":{"desc":"OK -- List Container operation completed successfully.","sch":{"r":"#/definitions/ListContainerItems"}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}":{"ops":{"a":{"get":{"t":["BlobContainers"],"opId":"BlobContainers_Get","ex":{"GetContainers":{"r":"./examples/BlobContainersGet.json"}},"desc":"Gets properties of a specified container. ","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"#/parameters/AccountName"},{"r":"#/parameters/ContainerName"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"200":{"desc":"OK -- Get Container operation completed successfully.","sch":{"r":"#/definitions/BlobContainer"}}}}}}}}}}