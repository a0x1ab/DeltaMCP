{"tools_a":{"FrontDoors_ListByResourceGroup":"@mcp.tool(name='FrontDoors_ListByResourceGroup', description=\"Lists all of the Front Doors within a resource group under a subscription.\")\ndef FrontDoors_ListByResourceGroup(resourceGroupName: str, subscriptionId: str):\n    '''Lists all of the Front Doors within a resource group under a subscription.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{},"p":{"d":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors":{"ops":{"d":{"get":{"t":["FrontDoors"],"desc":"Lists all of the Front Doors within a resource group under a subscription.","opId":"FrontDoors_ListByResourceGroup","params":[{"r":"./network.json#/parameters/SubscriptionIdParameter"},{"r":"#/parameters/resourceGroupNameParameter"},{"r":"./network.json#/parameters/ApiVersionParameter"}],"resp":{"200":{"desc":"OK. The request has succeeded.","sch":{"r":"#/definitions/FrontDoorListResult"}},"default":{"desc":"Front Door error response describing why the operation failed.","sch":{"r":"#/definitions/ErrorResponse"}}},"page":{"nextLinkName":"nextLink"},"ex":{"List Front Doors in a Resource Group":{"r":"./examples/FrontdoorList.json"}}}}}}}}}