{"tools_a":{"StorageAccounts_List":"@mcp.tool(name='StorageAccounts_List', description=\"Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.\")\ndef StorageAccounts_List(subscriptionId: str, api_version: Optional[str] = None):\n    '''Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"StorageAccounts_List":"@mcp.tool(name='StorageAccounts_List', description=\"Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.\")\ndef StorageAccounts_List(subscriptionId: str, api_version: Optional[str] = None):\n    '''Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts":{"ops":{"m":{"GET":{"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"A service that allows server-side encryption to be used.","prop":{"enabled":{"desc":"A boolean indicating whether or not the service encrypts the data as it is stored.","type":"boolean"},"lastEnabledTime":{"desc":"Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.","format":"date-time","readOnly":true,"type":"string"}}},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/encryption/properties/services/properties/file"},{"ov":null,"v":{"desc":"A service that allows server-side encryption to be used.","prop":{"enabled":{"desc":"A boolean indicating whether or not the service encrypts the data as it is stored.","type":"boolean"},"lastEnabledTime":{"desc":"Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.","format":"date-time","readOnly":true,"type":"string"}}},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/encryption/properties/services/properties/queue"},{"ov":null,"v":{"desc":"A service that allows server-side encryption to be used.","prop":{"enabled":{"desc":"A boolean indicating whether or not the service encrypts the data as it is stored.","type":"boolean"},"lastEnabledTime":{"desc":"Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.","format":"date-time","readOnly":true,"type":"string"}}},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/encryption/properties/services/properties/table"},{"ov":null,"v":{"default":false,"desc":"Allows https traffic only to storage service if sets to true.","type":"boolean","x-ms-client-name":"EnableHttpsTrafficOnly"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/supportsHttpsTrafficOnly"}]}}}}}}}}}}}}