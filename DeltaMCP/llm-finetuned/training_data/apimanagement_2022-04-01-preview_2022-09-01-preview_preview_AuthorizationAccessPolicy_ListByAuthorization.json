{"tools_a":{"AuthorizationAccessPolicy_ListByAuthorization":"@mcp.tool(name='AuthorizationAccessPolicy_ListByAuthorization', description=\"Lists a collection of authorization access policy defined within a authorization.\")\ndef AuthorizationAccessPolicy_ListByAuthorization(subscriptionId: str, resourceGroupName: str, serviceName: str, authorizationProviderId: str, authorizationId: str, _filter: Optional[str] = None):\n    '''Lists a collection of authorization access policy defined within a authorization.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationProviders/{authorizationProviderId}/authorizations/{authorizationId}/accessPolicies\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if serviceName is None:\n        raise ValueError('Missing required path parameter: serviceName')\n    if authorizationProviderId is None:\n        raise ValueError('Missing required path parameter: authorizationProviderId')\n    if authorizationId is None:\n        raise ValueError('Missing required path parameter: authorizationId')\n    if _filter is not None:\n        params['$filter'] = _filter\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"AuthorizationAccessPolicy_ListByAuthorization":"@mcp.tool(name='AuthorizationAccessPolicy_ListByAuthorization', description=\"Lists a collection of authorization access policy defined within a authorization.\")\ndef AuthorizationAccessPolicy_ListByAuthorization(subscriptionId: str, resourceGroupName: str, serviceName: str, authorizationProviderId: str, authorizationId: str, _filter: Optional[str] = None):\n    '''Lists a collection of authorization access policy defined within a authorization.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationProviders/{authorizationProviderId}/authorizations/{authorizationId}/accessPolicies\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if serviceName is None:\n        raise ValueError('Missing required path parameter: serviceName')\n    if authorizationProviderId is None:\n        raise ValueError('Missing required path parameter: authorizationProviderId')\n    if authorizationId is None:\n        raise ValueError('Missing required path parameter: authorizationId')\n    if _filter is not None:\n        params['$filter'] = _filter\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationProviders":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2023-03-01-preview","v":"2023-05-01-preview","o":"replace","f":"","pth":"/ApiManagementListAuthorizationProviders/parameters/api-version"}]}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationProviders/{authorizationProviderId}":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2023-03-01-preview","v":"2023-05-01-preview","o":"replace","f":"","pth":"/ApiManagementGetAuthorizationProvider/parameters/api-version"}]}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationProviders/{authorizationProviderId}/authorizations":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2023-03-01-preview","v":"2023-05-01-preview","o":"replace","f":"","pth":"/ApiManagementListAuthorizationsAuthCode/parameters/api-version"},{"ov":"2023-03-01-preview","v":"2023-05-01-preview","o":"replace","f":"","pth":"/ApiManagementListAuthorizationsClientCred/parameters/api-version"}]}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationProviders/{authorizationProviderId}/authorizations/{authorizationId}":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2023-03-01-preview","v":"2023-05-01-preview","o":"replace","f":"","pth":"/ApiManagementGetAuthorization/parameters/api-version"}]}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationProviders/{authorizationProviderId}/authorizations/{authorizationId}/accessPolicies":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2023-03-01-preview","v":"2023-05-01-preview","o":"replace","f":"","pth":"/ApiManagementListAuthorizationAccessPolicies/parameters/api-version"},{"ov":null,"v":["d5f04bb0-ba78-4878-a43e-35a0b74fe315"],"o":"add","f":"","pth":"/ApiManagementListAuthorizationAccessPolicies/responses/200/body/value/0/properties/appIds"},{"ov":null,"v":["d5f04bb0-ba78-4878-a43e-35a0b74fe315"],"o":"add","f":"","pth":"/ApiManagementListAuthorizationAccessPolicies/responses/200/body/value/1/properties/appIds"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"The allowed Azure Active Directory Application IDs","items":{"type":"string"},"type":"array"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/appIds"}]}}}}}}}}}}}}