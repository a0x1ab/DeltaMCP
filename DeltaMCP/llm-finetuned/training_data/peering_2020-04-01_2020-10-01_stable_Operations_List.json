{"tools_a":{"Operations_List":"@mcp.tool(name='Operations_List', description=\"Lists all of the available API operations for peering resources.\")\ndef Operations_List(api_version: Optional[str] = None):\n    '''Lists all of the available API operations for peering resources.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/providers/Microsoft.Peering/operations\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"Operations_List":"@mcp.tool(name='Operations_List', description=\"Lists all of the available API operations for peering resources.\")\ndef Operations_List(api_version: Optional[str] = None):\n    '''Lists all of the available API operations for peering resources.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/providers/Microsoft.Peering/operations\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/providers/Microsoft.Peering/operations":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2021-01-01","v":"2021-06-01","o":"replace","f":"","pth":"/List peering operations/parameters/api-version"},{"ov":null,"v":{"display":{"desc":"Read any Peering Service Connection Monitor Tests","operation":"Read Peering Service Connection Monitor Tests","provider":"Microsoft.Peering","resource":"connectionMonitorTests"},"isDataAction":false,"name":"Microsoft.Peering/peeringServices/connectionMonitorTests/read"},"o":"add","f":"","pth":"/List peering operations/responses/200/body/value/-"},{"ov":null,"v":{"display":{"desc":"Write any connectionMonitorTests","operation":"Write Peering Service Connection Monitor Tests","provider":"Microsoft.Peering","resource":"connectionMonitorTests"},"isDataAction":false,"name":"Microsoft.Peering/peeringServices/connectionMonitorTests/write"},"o":"add","f":"","pth":"/List peering operations/responses/200/body/value/-"},{"ov":null,"v":{"display":{"desc":"Delete any Peering Service Connection Monitor Tests","operation":"Delete Peering Service Connection Monitor Tests","provider":"Microsoft.Peering","resource":"connectionMonitorTests"},"isDataAction":false,"name":"Microsoft.Peering/peeringServices/connectionMonitorTests/delete"},"o":"add","f":"","pth":"/List peering operations/responses/200/body/value/-"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"The properties of the operation.","prop":{"serviceSpecification":{"desc":"Service specification payload.","prop":{"metricSpecifications":{"desc":"Specifications of the Metrics for Azure Monitoring.","items":{"desc":"Specifications of the Metrics for Azure Monitoring.","prop":{"aggregationType":{"desc":"Aggregation type will be set to one of the values: Average, Minimum, Maximum, Total, Count.","readOnly":true,"type":"string"},"dimensions":{"desc":"Dimensions of the metric.","items":{"desc":"Dimensions of the metric.","prop":{"displayName":{"desc":"Localized friendly display name of the dimension.","readOnly":true,"type":"string"},"name":{"desc":"Name of the dimension.","readOnly":true,"type":"string"}},"type":"object"},"readOnly":true,"type":"array","x-ms-identifiers":["name"]},"displayDescription":{"desc":"Localized friendly description of the metric.","readOnly":true,"type":"string"},"displayName":{"desc":"Localized friendly display name of the metric.","readOnly":true,"type":"string"},"name":{"desc":"Name of the metric.","readOnly":true,"type":"string"},"supportedTimeGrainTypes":{"desc":"Supported time grain types for the metric.","items":{"type":"string"},"readOnly":true,"type":"array"},"unit":{"desc":"Unit that makes sense for the metric.","readOnly":true,"type":"string"}},"type":"object"},"readOnly":true,"type":"array","x-ms-identifiers":["name"]}},"type":"object"}},"type":"object"},"o":"add","f":"","pth":"/properties/value/items/properties/properties"},{"ov":null,"v":["name"],"o":"add","f":"","pth":"/properties/value/x-ms-identifiers"}]}}}}}}}}}}}}