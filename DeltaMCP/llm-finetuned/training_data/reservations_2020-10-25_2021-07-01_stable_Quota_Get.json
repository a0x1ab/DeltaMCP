{"tools_a":{"Quota_Get":"@mcp.tool(name='Quota_Get', description=\"Get the current quota (service limit) and usage of a resource. You can use the response from the GET operation to submit quota update request.\")\ndef Quota_Get(subscriptionId: str, providerId: str, location: str, resourceName: str, api_version: Optional[str] = None):\n    '''Get the current quota (service limit) and usage of a resource. You can use the response from the GET operation to submit quota update request.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits/{resourceName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if providerId is None:\n        raise ValueError('Missing required path parameter: providerId')\n    if location is None:\n        raise ValueError('Missing required path parameter: location')\n    if resourceName is None:\n        raise ValueError('Missing required path parameter: resourceName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{},"p":{"d":{"/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits":{"ops":{"d":{"get":{"t":["QuotaInformation"],"desc":"Gets a list of current quotas (service limits) and usage for all resources. The response from the list quota operation can be leveraged to request quota updates.","opId":"Quota_List","ex":{"Quotas_listUsagesForCompute":{"r":"./examples/getComputeUsages.json"},"Quotas_listUsagesMachineLearningServices":{"r":"./examples/getMachineLearningServicesUsages.json"}},"params":[{"r":"#/parameters/SubscriptionIdInParameters"},{"r":"#/parameters/ProviderIdInParameters"},{"r":"#/parameters/LocationIdInParameters"},{"r":"#/parameters/ApiVersionParameter"}],"resp":{"200":{"desc":"OK. Returns the paginated quota information.","sch":{"r":"#/definitions/QuotaLimits"},"headers":{"ETag":{"desc":"Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.","type":"string"}}},"default":{"desc":"Error description in the response.","sch":{"r":"#/definitions/ExceptionResponse"}}},"page":{"nextLinkName":"nextLink"}}}}},"/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits/{resourceName}":{"ops":{"d":{"get":{"t":["QuotaInformation"],"desc":"Get the current quota (service limit) and usage of a resource. You can use the response from the GET operation to submit quota update request.","opId":"Quota_Get","ex":{"Quotas_Request_ForCompute":{"r":"./examples/getComputeOneSkuUsages.json"}},"params":[{"r":"#/parameters/SubscriptionIdInParameters"},{"r":"#/parameters/ProviderIdInParameters"},{"r":"#/parameters/LocationIdInParameters"},{"r":"#/parameters/ApiVersionParameter"},{"r":"#/parameters/ResourceNameInParameters"}],"resp":{"200":{"desc":"OK. Returns the paginated quota information.","sch":{"r":"#/definitions/CurrentQuotaLimitBase"},"headers":{"ETag":{"desc":"Current entity state version. It should be treated as opaque and used to make conditional HTTP requests.","type":"string"}}},"default":{"desc":"Error description in the response.","sch":{"r":"#/definitions/ExceptionResponse"}}}}}}}}}}