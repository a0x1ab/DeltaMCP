{"tools_a":{"Operation_List":"@mcp.tool(name='Operation_List', description=\"Get operations.: List all the operations.\")\ndef Operation_List(api_version: Optional[str] = None):\n    '''List all the operations.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/providers/Microsoft.Capacity/operations\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"Operation_List":"@mcp.tool(name='Operation_List', description=\"Get operations.: List all the operations.\")\ndef Operation_List(api_version: Optional[str] = None):\n    '''List all the operations.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/providers/Microsoft.Capacity/operations\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/providers/Microsoft.Capacity/operations":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2022-03-01","v":"2022-11-01","o":"replace","f":"","pth":"/GetOperations/parameters/api-version"}]}},"params":{"m":{"query":{"api-version":{"ext":{"a":["x-ms-parameter-location"]}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":"Paginated list of operations","o":"add","f":"","pth":"/description"},{"ov":null,"v":"The response containing operation information","o":"add","f":"","pth":"/properties/value/items/description"},{"ov":null,"v":"Information about an operation","o":"add","f":"","pth":"/properties/value/items/properties/display/description"},{"ov":null,"v":["name"],"o":"add","f":"","pth":"/properties/value/x-ms-identifiers"}]}}},"default":{"ext":{"m":{"sch":[{"ov":null,"v":"Error information","o":"add","f":"","pth":"/description"},{"ov":null,"v":"Extended error information including error code and error message","o":"add","f":"","pth":"/properties/error/description"},{"ov":null,"v":"Error code describing the reason that service is not able to process the incoming request","o":"add","f":"","pth":"/properties/error/properties/code/description"}]}}}}}}}}}}}}