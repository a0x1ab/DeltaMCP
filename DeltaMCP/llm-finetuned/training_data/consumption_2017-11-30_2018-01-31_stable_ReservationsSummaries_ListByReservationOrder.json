{"tools_a":{},"tools_b":{"ReservationsSummaries_ListByReservationOrder":"@mcp.tool(name='ReservationsSummaries_ListByReservationOrder', description=\"Lists the reservations summaries for daily or monthly grain.\")\ndef ReservationsSummaries_ListByReservationOrder(reservationOrderId: str, grain: Optional[str] = None, _filter: Optional[str] = None, api_version: Optional[str] = None):\n    '''Lists the reservations summaries for daily or monthly grain.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/providers/Microsoft.Consumption/reservationSummaries\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if reservationOrderId is None:\n        raise ValueError('Missing required path parameter: reservationOrderId')\n    if grain is not None:\n        params['grain'] = grain\n    if _filter is not None:\n        params['$filter'] = _filter\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/providers/Microsoft.Consumption/reservationSummaries":{"ops":{"a":{"get":{"t":["ReservedInstances"],"opId":"ReservationsSummaries_ListByReservationOrder","desc":"Lists the reservations summaries for daily or monthly grain.","externalDocs":{"url":"https://docs.microsoft.com/en-us/rest/api/consumption/"},"ex":{"ReservationSummariesDaily":{"r":"./examples/ReservationSummariesDaily.json"},"ReservationSummariesMonthly":{"r":"./examples/ReservationSummariesMonthly.json"}},"params":[{"r":"#/parameters/reservationOrderIdParameter"},{"name":"grain","desc":"Can be daily or monthly","in":"query","required":true,"type":"string","enum":["daily","monthly"],"x-ms-enum":{"name":"datagrain","modelAsString":true,"values":[{"v":"daily","desc":"Daily grain of data","name":"DailyGrain"},{"v":"monthly","desc":"Monthly grain of data","name":"MonthlyGrain"}]}},{"name":"$filter","desc":"Required only for daily grain. The properties/UsageDate for start date and end date. The filter supports 'le' and  'ge'","in":"query","required":false,"type":"string"},{"r":"#/parameters/apiVersionParameter"}],"resp":{"200":{"desc":"OK. The request has succeeded.","sch":{"r":"#/definitions/ReservationSummariesListResult"}},"default":{"desc":"Error response describing why the operation failed.","sch":{"r":"#/definitions/ErrorResponse"}}},"page":{"nextLinkName":"nextLink"}}}}}}}}