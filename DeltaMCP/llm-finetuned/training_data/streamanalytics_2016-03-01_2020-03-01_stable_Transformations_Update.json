{"tools_a":{"Transformations_Update":"@mcp.tool(name='Transformations_Update', description=\"Updates an existing transformation under an existing streaming job. This can be used to partially update (ie. update one or two properties) a transformation without affecting the rest the job or transformation definition.\")\ndef Transformations_Update(subscriptionId: str, resourceGroupName: str, jobName: str, transformationName: str, api_version: Optional[str] = None, If_Match: Optional[str] = None):\n    '''Updates an existing transformation under an existing streaming job. This can be used to partially update (ie. update one or two properties) a transformation without affecting the rest the job or transformation definition.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/transformations/{transformationName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if jobName is None:\n        raise ValueError('Missing required path parameter: jobName')\n    if transformationName is None:\n        raise ValueError('Missing required path parameter: transformationName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    header_value = If_Match if If_Match is not None else os.getenv('IF_MATCH')\n    if header_value is not None:\n        headers['If-Match'] = header_value\n    try:\n        resp = requests.patch(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"Transformations_Update":"@mcp.tool(name='Transformations_Update', description=\"Updates an existing transformation under an existing streaming job. This can be used to partially update (ie. update one or two properties) a transformation without affecting the rest the job or transformation definition.\")\ndef Transformations_Update(transformationName: str, subscriptionId: str, resourceGroupName: str, jobName: str, If_Match: Optional[str] = None):\n    '''Updates an existing transformation under an existing streaming job. This can be used to partially update (ie. update one or two properties) a transformation without affecting the rest the job or transformation definition.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/transformations/{transformationName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if transformationName is None:\n        raise ValueError('Missing required path parameter: transformationName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if jobName is None:\n        raise ValueError('Missing required path parameter: jobName')\n    header_value = If_Match if If_Match is not None else os.getenv('IF_MATCH')\n    if header_value is not None:\n        headers['If-Match'] = header_value\n    try:\n        resp = requests.patch(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/transformations/{transformationName}":{"ops":{"m":{"PATCH":{"ext":{"m":{"ex":[{"ov":"2016-03-01","v":"2020-03-01","o":"replace","f":"","pth":"/Update a transformation/parameters/api-version"}]}},"params":{"m":{"body":{"transformation":{"sch":{"allOf":{"m":[{"base":{"index":0},"revision":{"index":0},"diff":{"type":{"a":["object"]}}}]},"type":{"a":["object"]},"prop":{"m":{"prop":{"type":{"a":["object"]},"prop":{"a":["validStreamingUnits"],"m":{"streamingUnits":{"default":{"f":null,"to":3}}}}}}}}}},"pth":{"resourceGroupName":{"ext":{"a":["maxLength","pattern","minLength"]},"desc":{"f":"The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.","to":"The name of the resource group. The name is case insensitive."}},"subscriptionId":{"ext":{"a":["minLength"]},"desc":{"f":"GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.","to":"The ID of the target subscription."}}},"query":{"api-version":{"ext":{"a":["minLength"]},"desc":{"f":"Client Api Version.","to":"The API version to use for this operation."}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":"object","o":"add","f":"","pth":"/allOf/0/type"},{"ov":null,"v":3,"o":"add","f":"","pth":"/properties/properties/properties/streamingUnits/default"},{"ov":null,"v":{"desc":"Specifies the valid streaming units a streaming job can scale to.","items":{"desc":"Specifies the number of streaming units that the streaming job can use.","format":"int32","type":"integer"},"type":"array"},"o":"add","f":"","pth":"/properties/properties/properties/validStreamingUnits"},{"ov":null,"v":"object","o":"add","f":"","pth":"/properties/properties/type"},{"ov":null,"v":"object","o":"add","f":"","pth":"/type"}]}}}}}}}}}}}}