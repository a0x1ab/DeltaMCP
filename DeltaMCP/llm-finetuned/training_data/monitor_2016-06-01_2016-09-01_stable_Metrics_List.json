{"tools_a":{"Metrics_List":"@mcp.tool(name='Metrics_List', description=\"Lists the metric values for a resource.\")\ndef Metrics_List(resourceUri: str, _filter: Optional[str] = None):\n    '''Lists the metric values for a resource.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/{resourceUri}/providers/Microsoft.Insights/metrics\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if resourceUri is None:\n        raise ValueError('Missing required path parameter: resourceUri')\n    if _filter is not None:\n        params['$filter'] = _filter\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{},"p":{"d":{"/{resourceUri}/providers/Microsoft.Insights/metrics":{"ops":{"d":{"get":{"t":["Metrics"],"opId":"Metrics_List","desc":"Lists the metric values for a resource.","params":[{"name":"resourceUri","in":"path","required":true,"type":"string","desc":"The identifier of the resource.","x-ms-parameter-location":"method","x-ms-skip-url-encoding":true},{"name":"$filter","in":"query","type":"string","desc":"Specifies the set of data returned.<br>The filter is optional. If present it must contain a list of metric names to retrieve of the form: *(name.value eq 'metricName' [or name.value eq 'metricName' or ...])*. Optionally, the filter can contain conditions for the following attributes *aggregationType*, *startTime*, *endTime*, and *timeGrain* of the form *attributeName operator value*. Where operator is one of *ne*, *eq*, *gt*, *lt*.<br>Several conditions can be combined with parentheses and logical operators, e.g: *and*, *or*.<br>Some example filter expressions are:<br>- $filter=(name.value eq 'RunsSucceeded') and aggregationType eq 'Total' and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration'PT1M',<br>- $filter=(name.value eq 'RunsSucceeded') and (aggregationType eq 'Total' or aggregationType eq 'Average') and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration'PT1H',<br>- $filter=(name.value eq 'ActionsCompleted' or name.value eq 'RunsSucceeded') and (aggregationType eq 'Total' or aggregationType eq 'Average') and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration'PT1M'.<br><br>**NOTE**: When a metrics query comes in with multiple metrics, but with no aggregation types defined, the service will pick the Primary aggregation type of the first metrics to be used as the default aggregation type for all the metrics.","required":true},{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"}],"resp":{"default":{"desc":"Error response describing why the operation failed.","sch":{"r":"#/definitions/ErrorResponse"}},"200":{"desc":"Successful request to get the list of metric values","sch":{"r":"#/definitions/MetricCollection"}}},"page":{"nextLinkName":null},"x-ms-odata":"#/definitions/Metric","ex":{"Get Metric with filter":{"r":"./examples/GetMetric.json"}}}}}}}}}