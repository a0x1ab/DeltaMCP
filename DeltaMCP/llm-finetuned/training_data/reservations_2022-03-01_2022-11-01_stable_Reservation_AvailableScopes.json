{"tools_a":{"Reservation_AvailableScopes":"@mcp.tool(name='Reservation_AvailableScopes', description=\"Get Available Scopes for `Reservation`.: Get Available Scopes for `Reservation`.\\n\")\ndef Reservation_AvailableScopes(reservationOrderId: str, reservationId: str, api_version: Optional[str] = None):\n    '''Get Available Scopes for `Reservation`. '''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/availableScopes\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    if reservationOrderId is None:\n        raise ValueError('Missing required path parameter: reservationOrderId')\n    if reservationId is None:\n        raise ValueError('Missing required path parameter: reservationId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.post(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"Reservation_AvailableScopes":"@mcp.tool(name='Reservation_AvailableScopes', description=\"Get Available Scopes for `Reservation`.: Check whether the scopes from request is valid for `Reservation`.\\n\")\ndef Reservation_AvailableScopes(reservationOrderId: str, reservationId: str, api_version: Optional[str] = None):\n    '''Check whether the scopes from request is valid for `Reservation`. '''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/availableScopes\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    if reservationOrderId is None:\n        raise ValueError('Missing required path parameter: reservationOrderId')\n    if reservationId is None:\n        raise ValueError('Missing required path parameter: reservationId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.post(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/availableScopes":{"ops":{"m":{"POST":{"ext":{"m":{"ex":[{"ov":"2022-03-01","v":"2022-11-01","o":"replace","f":"","pth":"/AvailableScopes/parameters/api-version"}]}},"desc":{"f":"Get Available Scopes for `Reservation`.\n","to":"Check whether the scopes from request is valid for `Reservation`.\n"},"params":{"m":{"body":{"body":{"desc":{"f":"","to":"Scopes to be checked for eligibility."}}},"pth":{"reservationId":{"desc":{"f":"Id of the Reservation Item","to":"Id of the reservation item"}}},"query":{"api-version":{"ext":{"a":["x-ms-parameter-location"]}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":"The response of available scope api containing scopes and their eligibilities.","o":"add","f":"","pth":"/description"},{"ov":null,"v":"The scopes checked by the available scope api.","o":"add","f":"","pth":"/properties/properties/description"},{"ov":null,"v":"The scope and whether it is valid.","o":"add","f":"","pth":"/properties/properties/properties/scopes/items/description"},{"ov":null,"v":[],"o":"add","f":"","pth":"/properties/properties/properties/scopes/x-ms-identifiers"}]}}},"default":{"ext":{"m":{"sch":[{"ov":null,"v":"Error information","o":"add","f":"","pth":"/description"},{"ov":null,"v":"Extended error information including error code and error message","o":"add","f":"","pth":"/properties/error/description"},{"ov":null,"v":"Error code describing the reason that service is not able to process the incoming request","o":"add","f":"","pth":"/properties/error/properties/code/description"}]}}}}}}}}}}}}