{
  "oasdiff": {
    "paths": {
      "modified": {
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2019-04-01",
                        "value": "2019-06-01",
                        "op": "replace",
                        "from": "",
                        "path": "/ListBlobServices/parameters/api-version"
                      },
                      {
                        "oldValue": true,
                        "value": null,
                        "op": "remove",
                        "from": "",
                        "path": "/ListBlobServices/responses/200/body/value/0/properties/automaticSnapshotPolicyEnabled"
                      },
                      {
                        "oldValue": null,
                        "value": 7,
                        "op": "add",
                        "from": "",
                        "path": "/ListBlobServices/responses/200/body/value/0/properties/changeFeed/retentionInDays"
                      },
                      {
                        "oldValue": null,
                        "value": true,
                        "op": "add",
                        "from": "",
                        "path": "/ListBlobServices/responses/200/body/value/0/properties/isVersioningEnabled"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "name": "Standard_GRS",
                          "tier": "Standard"
                        },
                        "op": "add",
                        "from": "",
                        "path": "/ListBlobServices/responses/200/body/value/0/sku"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": "Automatic Snapshot is enabled if set to true.",
                              "value": "Deprecated in favor of isVersioningEnabled property.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/automaticSnapshotPolicyEnabled/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Indicates the duration of changeFeed retention in days. Minimum value is 1 day and maximum value is 146000 days (400 years). A null value indicates an infinite retention of the change feed.",
                                "format": "int32",
                                "maximum": 146000,
                                "minimum": 1,
                                "type": "integer"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/changeFeed/properties/retentionInDays"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The service properties for soft delete.",
                                "properties": {
                                  "days": {
                                    "description": "Indicates the number of days that the deleted item should be retained. The minimum specified value can be 1 and the maximum value can be 365.",
                                    "maximum": 365,
                                    "minimum": 1,
                                    "type": "integer"
                                  },
                                  "enabled": {
                                    "description": "Indicates whether DeleteRetentionPolicy is enabled.",
                                    "type": "boolean"
                                  }
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/containerDeleteRetentionPolicy"
                            },
                            {
                              "oldValue": "The blob service properties for soft delete.",
                              "value": "The service properties for soft delete.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/deleteRetentionPolicy/description"
                            },
                            {
                              "oldValue": "Indicates the number of days that the deleted blob should be retained. The minimum specified value can be 1 and the maximum value can be 365.",
                              "value": "Indicates the number of days that the deleted item should be retained. The minimum specified value can be 1 and the maximum value can be 365.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/deleteRetentionPolicy/properties/days/description"
                            },
                            {
                              "oldValue": "Indicates whether DeleteRetentionPolicy is enabled for the Blob service.",
                              "value": "Indicates whether DeleteRetentionPolicy is enabled.",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/deleteRetentionPolicy/properties/enabled/description"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Versioning is enabled if set to true.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/isVersioningEnabled"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The blob service properties for Last access time based tracking policy.",
                                "properties": {
                                  "blobType": {
                                    "description": "An array of predefined supported blob types. Only blockBlob is the supported value. This field is currently read only",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "enable": {
                                    "description": "When set to true last access time based tracking is enabled.",
                                    "type": "boolean"
                                  },
                                  "name": {
                                    "description": "Name of the policy. The valid value is AccessTimeTracking. This field is currently read only",
                                    "enum": [
                                      "AccessTimeTracking"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "name"
                                    }
                                  },
                                  "trackingGranularityInDays": {
                                    "description": "The field specifies blob object tracking granularity in days, typically how often the blob object should be tracked.This field is currently read only with value as 1",
                                    "format": "int32",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "enable"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/lastAccessTimeTrackingPolicy"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The blob service properties for blob restore policy",
                                "properties": {
                                  "days": {
                                    "description": "how long this blob can be restored. It should be great than zero and less than DeleteRetentionPolicy.days.",
                                    "maximum": 365,
                                    "minimum": 1,
                                    "type": "integer"
                                  },
                                  "enabled": {
                                    "description": "Blob restore is enabled if set to true.",
                                    "type": "boolean"
                                  },
                                  "lastEnabledTime": {
                                    "description": "Deprecated in favor of minRestoreTime property.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "minRestoreTime": {
                                    "description": "Returns the minimum date and time that the restore can be started.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "enabled"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/restorePolicy"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The SKU of the storage account.",
                                "properties": {
                                  "name": {
                                    "description": "The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.",
                                    "enum": [
                                      "Standard_LRS",
                                      "Standard_GRS",
                                      "Standard_RAGRS",
                                      "Standard_ZRS",
                                      "Premium_LRS",
                                      "Premium_ZRS",
                                      "Standard_GZRS",
                                      "Standard_RAGZRS"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "SkuName"
                                    }
                                  },
                                  "tier": {
                                    "description": "The SKU tier. This is based on the SKU name.",
                                    "enum": [
                                      "Standard",
                                      "Premium"
                                    ],
                                    "readOnly": true,
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": false,
                                      "name": "SkuTier"
                                    }
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/sku"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2019-04-01",
                        "value": "2019-06-01",
                        "op": "replace",
                        "from": "",
                        "path": "/ListContainers/parameters/api-version"
                      },
                      {
                        "oldValue": "https://sto1590endpoint/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers?api-version=2019-04-01&$maxpagesize=2&$skipToken=/sto1590/container5103",
                        "value": "https://sto1590endpoint/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers?api-version=2019-06-01&$maxpagesize=2&$skipToken=/sto1590/container5103",
                        "op": "replace",
                        "from": "",
                        "path": "/ListContainers/responses/200/body/nextLink"
                      },
                      {
                        "oldValue": null,
                        "value": {
                          "parameters": {
                            "$include": "deleted",
                            "accountName": "sto1590",
                            "api-version": "2019-06-01",
                            "monitor": "true",
                            "resourceGroupName": "res9290",
                            "subscriptionId": "{subscription-id}"
                          },
                          "responses": {
                            "200": {
                              "body": {
                                "value": [
                                  {
                                    "etag": "\"0x8D589847D51C7DE\"",
                                    "id": "/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers/container1644",
                                    "name": "container1644",
                                    "properties": {
                                      "hasImmutabilityPolicy": false,
                                      "hasLegalHold": false,
                                      "lastModifiedTime": "2018-03-14T08:20:47Z",
                                      "leaseState": "Available",
                                      "leaseStatus": "Unlocked",
                                      "publicAccess": "Container"
                                    },
                                    "type": "Microsoft.Storage/storageAccounts/blobServices/containers"
                                  },
                                  {
                                    "etag": "\"0x8D589847DAB5AF9\"",
                                    "id": "/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers/container4052",
                                    "name": "container4052",
                                    "properties": {
                                      "deleted": true,
                                      "deletedTime": "2019-12-14T08:20:47Z",
                                      "hasImmutabilityPolicy": false,
                                      "hasLegalHold": false,
                                      "lastModifiedTime": "2018-03-14T08:20:47Z",
                                      "leaseState": "Expired",
                                      "leaseStatus": "Unlocked",
                                      "publicAccess": "None",
                                      "remainingRetentionDays": 30,
                                      "version": "1234567890"
                                    },
                                    "type": "Microsoft.Storage/storageAccounts/blobServices/containers"
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "op": "add",
                        "from": "",
                        "path": "/ListDeletedContainers"
                      }
                    ]
                  }
                },
                "parameters": {
                  "added": {
                    "query": [
                      "$include"
                    ]
                  },
                  "deleted": {
                    "query": [
                      "$skipToken"
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Default the container to use specified encryption scope for all writes.",
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/defaultEncryptionScope"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Indicates whether the blob container was deleted.",
                                "readOnly": true,
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/deleted"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Blob container deletion time.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/deletedTime"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Block override of encryption scope from the container default.",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/denyEncryptionScopeOverride"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/immutabilityPolicy/properties/properties/properties/allowProtectedAppendWrites"
                            },
                            {
                              "oldValue": [
                                "immutabilityPeriodSinceCreationInDays"
                              ],
                              "value": null,
                              "op": "remove",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/immutabilityPolicy/properties/properties/required"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Remaining retention days for soft deleted blob container.",
                                "readOnly": true,
                                "type": "integer"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/remainingRetentionDays"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "The version of the deleted blob container.",
                                "readOnly": true,
                                "type": "string"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/version"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {
    "BlobContainers_List": "FunctionDef(name='BlobContainers_List', args=arguments(posonlyargs=[], args=[arg(arg='subscriptionId', annotation=Name(id='str', ctx=Load())), arg(arg='resourceGroupName', annotation=Name(id='str', ctx=Load())), arg(arg='accountName', annotation=Name(id='str', ctx=Load())), arg(arg='_skipToken', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='_maxpagesize', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='_filter', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.')), Assign(targets=[Name(id='base_url', ctx=Store())], value=Constant(value='https://management.azure.com')), Assign(targets=[Name(id='url', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='base_url', ctx=Load()), conversion=-1), Constant(value='/subscriptions/'), FormattedValue(value=Name(id='subscriptionId', ctx=Load()), conversion=-1), Constant(value='/resourceGroups/'), FormattedValue(value=Name(id='resourceGroupName', ctx=Load()), conversion=-1), Constant(value='/providers/Microsoft.Storage/storageAccounts/'), FormattedValue(value=Name(id='accountName', ctx=Load()), conversion=-1), Constant(value='/blobServices/default/containers')])), Assign(targets=[Name(id='params', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cookies', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='extra_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='EXTRA_HEADERS')], keywords=[])), If(test=Name(id='extra_headers', ctx=Load()), body=[Try(body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='extra_headers', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Failed to parse EXTRA_HEADERS:'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='auth_error_msgs', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='access_token', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='access_token', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Authorization'), ctx=Store())], value=JoinedStr(values=[Constant(value='Bearer '), FormattedValue(value=Name(id='access_token', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='auth_error_msgs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='No valid authentication found. Details: '), op=Add(), right=Call(func=Attribute(value=Constant(value='; '), attr='join', ctx=Load()), args=[Name(id='auth_error_msgs', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='subscriptionId', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: subscriptionId')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='resourceGroupName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: resourceGroupName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='accountName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: accountName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='_skipToken', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='$skipToken'), ctx=Store())], value=Name(id='_skipToken', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='_maxpagesize', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='$maxpagesize'), ctx=Store())], value=Name(id='_maxpagesize', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='_filter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='$filter'), ctx=Store())], value=Name(id='_filter', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='params', value=Name(id='params', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='cookies', value=Name(id='cookies', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='application/json'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Dict(keys=[Constant(value='raw'), Constant(value='status_code')], values=[Attribute(value=Name(id='resp', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Load())]))])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='requests', ctx=Load()), attr='exceptions', ctx=Load()), attr='RequestException', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='HTTP request failed: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected error: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='mcp', ctx=Load()), attr='tool', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='BlobContainers_List')), keyword(arg='description', value=Constant(value='Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.'))])])"
  },
  "tools_b": {
    "BlobContainers_List": "FunctionDef(name='BlobContainers_List', args=arguments(posonlyargs=[], args=[arg(arg='subscriptionId', annotation=Name(id='str', ctx=Load())), arg(arg='resourceGroupName', annotation=Name(id='str', ctx=Load())), arg(arg='accountName', annotation=Name(id='str', ctx=Load())), arg(arg='_maxpagesize', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='_filter', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='_include', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.')), Assign(targets=[Name(id='base_url', ctx=Store())], value=Constant(value='https://management.azure.com')), Assign(targets=[Name(id='url', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='base_url', ctx=Load()), conversion=-1), Constant(value='/subscriptions/'), FormattedValue(value=Name(id='subscriptionId', ctx=Load()), conversion=-1), Constant(value='/resourceGroups/'), FormattedValue(value=Name(id='resourceGroupName', ctx=Load()), conversion=-1), Constant(value='/providers/Microsoft.Storage/storageAccounts/'), FormattedValue(value=Name(id='accountName', ctx=Load()), conversion=-1), Constant(value='/blobServices/default/containers')])), Assign(targets=[Name(id='params', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cookies', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='extra_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='EXTRA_HEADERS')], keywords=[])), If(test=Name(id='extra_headers', ctx=Load()), body=[Try(body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='extra_headers', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Failed to parse EXTRA_HEADERS:'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='auth_error_msgs', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='access_token', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='access_token', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Authorization'), ctx=Store())], value=JoinedStr(values=[Constant(value='Bearer '), FormattedValue(value=Name(id='access_token', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='auth_error_msgs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='No valid authentication found. Details: '), op=Add(), right=Call(func=Attribute(value=Constant(value='; '), attr='join', ctx=Load()), args=[Name(id='auth_error_msgs', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='subscriptionId', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: subscriptionId')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='resourceGroupName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: resourceGroupName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='accountName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: accountName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='_maxpagesize', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='$maxpagesize'), ctx=Store())], value=Name(id='_maxpagesize', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='_filter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='$filter'), ctx=Store())], value=Name(id='_filter', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='_include', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='$include'), ctx=Store())], value=Name(id='_include', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='params', value=Name(id='params', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='cookies', value=Name(id='cookies', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='application/json'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Dict(keys=[Constant(value='raw'), Constant(value='status_code')], values=[Attribute(value=Name(id='resp', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Load())]))])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='requests', ctx=Load()), attr='exceptions', ctx=Load()), attr='RequestException', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='HTTP request failed: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected error: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='mcp', ctx=Load()), attr='tool', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='BlobContainers_List')), keyword(arg='description', value=Constant(value='Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.'))])])"
  }
}