{"tools_a":{"PeerAsns_ListBySubscription":"@mcp.tool(name='PeerAsns_ListBySubscription', description=\"Lists all of the peer ASNs under the given subscription.\")\ndef PeerAsns_ListBySubscription(subscriptionId: str, api_version: Optional[str] = None):\n    '''Lists all of the peer ASNs under the given subscription.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerAsns\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"PeerAsns_ListBySubscription":"@mcp.tool(name='PeerAsns_ListBySubscription', description=\"Lists all of the peer ASNs under the given subscription.\")\ndef PeerAsns_ListBySubscription(subscriptionId: str, api_version: Optional[str] = None):\n    '''Lists all of the peer ASNs under the given subscription.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerAsns\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerAsns":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2019-09-01-preview","v":"2020-01-01-preview","o":"replace","f":"","pth":"/List peer ASNs in a subscription/parameters/api-version"},{"ov":"/subscriptions/subId/providers/Microsoft.Peering/peerAsns/MyPeerAsn","v":"/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.Peering/peerAsns/peerAsnName","o":"replace","f":"","pth":"/List peer ASNs in a subscription/responses/200/body/value/0/id"},{"ov":"MyPeerAsn","v":"peerAsnName","o":"replace","f":"","pth":"/List peer ASNs in a subscription/responses/200/body/value/0/name"},{"ov":null,"v":[{"email":"noc@contoso.com","phone":"+1 (234) 567-8999","role":"Noc"},{"email":"abc@contoso.com","phone":"+1 (234) 567-8900","role":"Policy"},{"email":"xyz@contoso.com","phone":"+1 (234) 567-8900","role":"Technical"}],"o":"add","f":"","pth":"/List peer ASNs in a subscription/responses/200/body/value/0/properties/peerContactDetail"},{"ov":{"emails":["abc@contoso.com","xyz@contoso.com"],"phone":["+1 (234) 567-8900"]},"v":null,"o":"remove","f":"","pth":"/List peer ASNs in a subscription/responses/200/body/value/0/properties/peerContactInfo"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"The contact details of the peer.","items":{"desc":"The contact detail class.","prop":{"email":{"desc":"The e-mail address of the contact.","type":"string"},"phone":{"desc":"The phone number of the contact.","type":"string"},"role":{"desc":"The role of the contact.","enum":["Noc","Policy","Technical","Service","Other"],"type":"string","x-ms-enum":{"modelAsString":true,"name":"role"}}},"type":"object"},"type":"array"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/peerContactDetail"},{"ov":{"desc":"The contact information of the peer.","prop":{"emails":{"desc":"The list of email addresses.","items":{"type":"string"},"type":"array"},"phone":{"desc":"The list of contact numbers.","items":{"type":"string"},"type":"array"}},"type":"object"},"v":null,"o":"remove","f":"","pth":"/properties/value/items/properties/properties/properties/peerContactInfo"}]}}}}}}}}}}}}