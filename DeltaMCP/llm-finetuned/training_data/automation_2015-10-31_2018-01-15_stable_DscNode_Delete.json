{"tools_a":{"DscNode_Delete":"@mcp.tool(name='DscNode_Delete', description=\"Delete the dsc node identified by node id.\")\ndef DscNode_Delete(nodeId: str, subscriptionId: str, resourceGroupName: str, automationAccountName: str):\n    '''Delete the dsc node identified by node id.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if nodeId is None:\n        raise ValueError('Missing required path parameter: nodeId')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if automationAccountName is None:\n        raise ValueError('Missing required path parameter: automationAccountName')\n    try:\n        resp = requests.delete(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"DscNode_Delete":"@mcp.tool(name='DscNode_Delete', description=\"Delete the dsc node identified by node id.\")\ndef DscNode_Delete(nodeId: str, subscriptionId: str, resourceGroupName: str, automationAccountName: str):\n    '''Delete the dsc node identified by node id.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if nodeId is None:\n        raise ValueError('Missing required path parameter: nodeId')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if automationAccountName is None:\n        raise ValueError('Missing required path parameter: automationAccountName')\n    try:\n        resp = requests.delete(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}":{"ops":{"m":{"DELETE":{"ext":{"m":{"ex":[{"ov":"2015-10-31","v":"2018-01-15","o":"replace","f":"","pth":"/Delete a DSC Node/parameters/api-version"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":"Definition of the dsc node type.","v":"Definition of a DscNode","o":"replace","f":"","pth":"/description"},{"ov":{"desc":"Gets or sets the account id of the node.","type":"string"},"v":null,"o":"remove","f":"","pth":"/properties/accountId"},{"ov":{"desc":"Gets or sets the etag of the resource.","type":"string"},"v":null,"o":"remove","f":"","pth":"/properties/etag"},{"ov":{"desc":"Gets or sets the list of extensionHandler properties for a Node.","items":{"desc":"The dsc extensionHandler property associated with the node","prop":{"name":{"desc":"Gets or sets the name of the extension handler.","type":"string"},"version":{"desc":"Gets or sets the version of the extension handler.","type":"string"}}},"type":"array"},"v":null,"o":"remove","f":"","pth":"/properties/extensionHandler"},{"ov":{"desc":"Gets or sets the ip of the node.","type":"string"},"v":null,"o":"remove","f":"","pth":"/properties/ip"},{"ov":{"desc":"Gets or sets the last seen time of the node.","format":"date-time","type":"string","x-nullable":false},"v":null,"o":"remove","f":"","pth":"/properties/lastSeen"},{"ov":{"desc":"The dsc node configuration property associated with the entity.","prop":{"name":{"desc":"Gets or sets the name of the dsc node configuration.","type":"string"}}},"v":null,"o":"remove","f":"","pth":"/properties/nodeConfiguration"},{"ov":{"desc":"Gets or sets the node id.","type":"string"},"v":null,"o":"remove","f":"","pth":"/properties/nodeId"},{"ov":null,"v":{"desc":"The properties of a DscNode","prop":{"accountId":{"desc":"Gets or sets the account id of the node.","type":"string"},"etag":{"desc":"Gets or sets the etag of the resource.","type":"string"},"extensionHandler":{"desc":"Gets or sets the list of extensionHandler properties for a Node.","items":{"desc":"The dsc extensionHandler property associated with the node","prop":{"name":{"desc":"Gets or sets the name of the extension handler.","type":"string"},"version":{"desc":"Gets or sets the version of the extension handler.","type":"string"}}},"type":"array"},"ip":{"desc":"Gets or sets the ip of the node.","type":"string"},"lastSeen":{"desc":"Gets or sets the last seen time of the node.","format":"date-time","type":"string","x-nullable":false},"nodeConfiguration":{"desc":"The dsc node configuration property associated with the entity.","prop":{"name":{"desc":"Gets or sets the name of the dsc node configuration.","type":"string"}}},"nodeId":{"desc":"Gets or sets the node id.","type":"string"},"registrationTime":{"desc":"Gets or sets the registration time of the node.","format":"date-time","type":"string","x-nullable":false},"status":{"desc":"Gets or sets the status of the node.","type":"string"},"totalCount":{"desc":"Gets the total number of records matching filter criteria.","type":"integer"}}},"o":"add","f":"","pth":"/properties/properties"},{"ov":{"desc":"Gets or sets the registration time of the node.","format":"date-time","type":"string","x-nullable":false},"v":null,"o":"remove","f":"","pth":"/properties/registrationTime"},{"ov":{"desc":"Gets or sets the status of the node.","type":"string"},"v":null,"o":"remove","f":"","pth":"/properties/status"}]}}}}}}}}}}}}