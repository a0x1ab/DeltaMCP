{"tools_a":{},"tools_b":{"Vaults_PurgeDeleted":"@mcp.tool(name='Vaults_PurgeDeleted', description=\"Permanently deletes the specified vault. aka Purges the deleted Azure key vault.\")\ndef Vaults_PurgeDeleted(vaultName: str, location: str, subscriptionId: str, api_version: Optional[str] = None):\n    '''Permanently deletes the specified vault. aka Purges the deleted Azure key vault.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}/purge\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    if vaultName is None:\n        raise ValueError('Missing required path parameter: vaultName')\n    if location is None:\n        raise ValueError('Missing required path parameter: location')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.post(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}":{"ops":{"a":{"get":{"t":["Vaults"],"opId":"Vaults_GetDeleted","desc":"Gets the deleted Azure key vault.","params":[{"name":"vaultName","in":"path","required":true,"type":"string","desc":"The name of the vault."},{"name":"location","in":"path","required":true,"type":"string","desc":"The location of the deleted vault."},{"r":"#/parameters/ApiVersionParameter"},{"r":"#/parameters/SubscriptionIdParameter"}],"resp":{"200":{"desc":"Retrieved information about the deleted vault.","sch":{"r":"#/definitions/DeletedVault"}}},"ex":{"Retrieve a deleted vault":{"r":"./examples/getDeletedVault.json"}},"produces":["application/json"],"consumes":["application/json"]}}}},"/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}/purge":{"ops":{"a":{"post":{"t":["Vaults"],"opId":"Vaults_PurgeDeleted","lro":true,"desc":"Permanently deletes the specified vault. aka Purges the deleted Azure key vault.","params":[{"name":"vaultName","in":"path","required":true,"type":"string","desc":"The name of the soft-deleted vault."},{"name":"location","in":"path","required":true,"type":"string","desc":"The location of the soft-deleted vault."},{"r":"#/parameters/ApiVersionParameter"},{"r":"#/parameters/SubscriptionIdParameter"}],"resp":{"200":{"desc":"The vault is purged."},"202":{"desc":"Vault is being purged."}},"ex":{"Purge a deleted vault":{"r":"./examples/purgeDeletedVault.json"}},"produces":["application/json"],"consumes":["application/json"]}}}}}}}