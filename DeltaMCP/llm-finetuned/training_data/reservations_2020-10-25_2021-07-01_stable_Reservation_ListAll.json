{"tools_a":{},"tools_b":{"Reservation_ListAll":"@mcp.tool(name='Reservation_ListAll', description=\"List the reservations and the roll up counts of reservations group by provisioning states that the user has access to in the current tenant.\")\ndef Reservation_ListAll(api_version: Optional[str] = None, _filter: Optional[str] = None, _orderby: Optional[str] = None, refreshSummary: Optional[str] = None, _skiptoken: Optional[str] = None, selectedState: Optional[str] = None, take: Optional[str] = None):\n    '''List the reservations and the roll up counts of reservations group by provisioning states that the user has access to in the current tenant.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/providers/Microsoft.Capacity/reservations\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    if api_version is not None:\n        params['api-version'] = api_version\n    if _filter is not None:\n        params['$filter'] = _filter\n    if _orderby is not None:\n        params['$orderby'] = _orderby\n    if refreshSummary is not None:\n        params['refreshSummary'] = refreshSummary\n    if _skiptoken is not None:\n        params['$skiptoken'] = _skiptoken\n    if selectedState is not None:\n        params['selectedState'] = selectedState\n    if take is not None:\n        params['take'] = take\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/providers/Microsoft.Capacity/reservations":{"ops":{"a":{"get":{"desc":"List the reservations and the roll up counts of reservations group by provisioning states that the user has access to in the current tenant.","opId":"Reservation_ListAll","ex":{"Catalog":{"r":"./examples/GetReservations.json"}},"params":[{"r":"#/parameters/ApiVersionParameter"},{"name":"$filter","desc":"May be used to filter by reservation properties. The filter supports 'eq', 'or', and 'and'. It does not currently support 'ne', 'gt', 'le', 'ge', or 'not'. Reservation properties include sku/name, properties/{appliedScopeType, archived, displayName, displayProvisioningState, effectiveDateTime, expiryDate, provisioningState, quantity, renew, reservedResourceType, term, userFriendlyAppliedScopeType, userFriendlyRenewState}","in":"query","required":false,"type":"string"},{"name":"$orderby","desc":"May be used to sort order by reservation properties.","in":"query","required":false,"type":"string"},{"name":"refreshSummary","desc":"To indicate whether to refresh the roll up counts of the reservations group by provisioning states","in":"query","required":false,"type":"string"},{"name":"$skiptoken","desc":"The number of reservations to skip from the list before returning results","in":"query","required":false,"type":"number"},{"name":"selectedState","desc":"The selected provisioning state","in":"query","required":false,"type":"string"},{"name":"take","desc":"To number of reservations to return","in":"query","required":false,"type":"number"}],"resp":{"200":{"desc":"OK. The request has succeeded.","sch":{"r":"#/definitions/ReservationsListResult"}},"default":{"desc":"Error response describing why the operation failed.","sch":{"r":"#/definitions/ErrorResponse"}}},"page":{"nextLinkName":"nextLink"}}}}}}}}