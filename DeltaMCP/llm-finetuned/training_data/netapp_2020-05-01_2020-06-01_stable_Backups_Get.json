{"tools_a":{"Backups_Get":"@mcp.tool(name='Backups_Get', description=\"Get a backup: Get a particular backup of the volume\")\ndef Backups_Get(subscriptionId: str, resourceGroupName: str, accountName: str, poolName: str, volumeName: str, backupName: str, api_version: Optional[str] = None):\n    '''Get a particular backup of the volume'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if poolName is None:\n        raise ValueError('Missing required path parameter: poolName')\n    if volumeName is None:\n        raise ValueError('Missing required path parameter: volumeName')\n    if backupName is None:\n        raise ValueError('Missing required path parameter: backupName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"Backups_Get":"@mcp.tool(name='Backups_Get', description=\"Get a backup: Get a particular backup of the volume\")\ndef Backups_Get(subscriptionId: str, resourceGroupName: str, accountName: str, poolName: str, volumeName: str, backupName: str, api_version: Optional[str] = None):\n    '''Get a particular backup of the volume'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if poolName is None:\n        raise ValueError('Missing required path parameter: poolName')\n    if volumeName is None:\n        raise ValueError('Missing required path parameter: volumeName')\n    if backupName is None:\n        raise ValueError('Missing required path parameter: backupName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":"/Accounts_List/parameters/api-version"}]}},"params":{"m":{"query":{"api-version":{"ext":{"m":{"default":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":""}]}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.","example":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuVENDQW9XZ0F3SUJBZ0lRR3FXdnRxeHBvSTFJV3Z4VGdJbElWREFOQmdrcWhraUc5dzBCQVFzRkFEQlYKTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEWTI5dE1SY3dGUVlLQ1pJbWlaUHlMR1FCR1JZSGFHRnlhV3R5WWpFbApNQ01HQTFVRUF4TWNhR0Z5YVd0eVlpMVhTVTR0TWtKUFZrRkZTMEkwTkVJdFEwRXRNakFlRncweU1EQTFNRFV3Ck56TTVORGxhRncweU1EQTFNRFl3TnpRNU5EaGFNRlV4RXpBUkJnb0praWFKay9Jc1pBRVpGZ05qYjIweEZ6QVYKQmdvSmtpYUprL0lzWkFFWkZnZG9ZWEpwYTNKaU1TVXdJd1lEVlFRREV4eG9ZWEpwYTNKaUxWZEpUaTB5UWs5VwpRVVZMUWpRMFFpMURRUzB5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFqMHByCnhaaXpNaDBqYnRwN1ZOc0JrRVJ2MVpZT0MzMEtqaGRWdEExRm1MeFM2cXlycmpMZUdXOXRSd2ZnUkR0eVBodTIKZVJTcVpTUjF6Z1hZR0s0Nys3Y3F0YnB2UElOektCb0dOWERIVTNxVWlleXJWSjFDVzRKNjJodUdrbUV1VVVkMApKMXBxNTVxbjk1SmRUbWh1dmZlTUxxeHB5c01nbGVnY281ZFhoN0hsQkhwaTNKMFN4ZnhVWmxKMVZiOFJZVEZhCkJiMGFlTVZaRzRKeVREaktiMlR1TmFXOG1aUE5vOFBMRDRocjdndFNZUEQvQ1dVVGV5QlpoZC9LTzNPczlWVEIKYmpLUGtWd0J2WEs2SlFMSGprNFBHS3VYZDhaWVFyajBtOWNIZDNmcWNYTXlQUnQ2TlJ4ak0yMTUxckFzSkVhNgpWZC9ta056akpXalBrT2VZUVFJREFRQUJvMmt3WnpBVEJna3JCZ0VFQVlJM0ZBSUVCaDRFQUVNQVFUQU9CZ05WCkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVDVEc2ODJSay9kMysKWGtHa0VMakRFMjI4ZjNnd0VBWUpLd1lCQkFHQ054VUJCQU1DQVFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQgpBR1RjTTNnWExIU05wS014RHEvUFpZbWZCMmNlN3VhMmxxbXpzZSt4QmthSTE0WXdzZE5ZQjZBVTNFWDM3QWpZCjd3bm9xQzY1N0U2RVhTODVDckoyNXJNTHo4OEtONGI3cUg5RUowSS9XVHg5YTdUT0ZENENWQThuL0xwNGh1Ym4KNlBFalY5NFlZWXBXTG1hTkkvbGFReWsxSHVJbDFSTCttVDFnSWQ4ZWZXZ1UvNmlVVEw3eGMrdjkyNHBuTHhISwpOSnNTV3c0NFk5a0R5SU9KOXFjWUlBN1lhTkxPZTRjSysvQlRvdDh0dVVKT1hHLzdBRmtxR2EyQVA4MmFZOStKCnkwSmU2OG5nTHJ1dVU4VHpneVpqdkFHcTRrVEVOdWFoaFdHVC9KWkEzOXhSNUV4MmNMUUplcE5NdnlZbUZ3Z1UKME8zYlA0OWNBVFVCMXoyQ3Y5aTRQbVk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K","maxLength":10240,"minLength":1,"type":"string"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/activeDirectories/items/properties/serverRootCACertificate"},{"ov":null,"v":["Created","Updating","InUse","Deleted","Error"],"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/activeDirectories/items/properties/status/enum"},{"ov":null,"v":true,"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/activeDirectories/items/properties/status/readOnly"},{"ov":null,"v":{"modelAsString":true,"name":"ActiveDirectoryStatus","values":[{"desc":"Active Directory created but not in use","v":"Created"},{"desc":"Active Directory in use by SMB Volume","v":"InUse"},{"desc":"Active Directory Deleted","v":"Deleted"},{"desc":"Error with the Active Directory","v":"Error"},{"desc":"Active Directory Updating","v":"Updating"}]},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/activeDirectories/items/properties/status/x-ms-enum"},{"ov":null,"v":{"desc":"Any details in regards to the Status of the Active Directory","readOnly":true,"type":"string"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/activeDirectories/items/properties/statusDetails"},{"ov":"Username of Active Directory domain administrator","v":"A domain user account with permission to create machine accounts","o":"replace","f":"","pth":"/properties/value/items/properties/properties/properties/activeDirectories/items/properties/username/description"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":"/Accounts_Get/parameters/api-version"},{"ov":null,"v":"Status Details","o":"add","f":"","pth":"/Accounts_Get/responses/200/body/properties/activeDirectories/0/statusDetails"}]}},"params":{"m":{"query":{"api-version":{"ext":{"m":{"default":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":""}]}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.","example":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuVENDQW9XZ0F3SUJBZ0lRR3FXdnRxeHBvSTFJV3Z4VGdJbElWREFOQmdrcWhraUc5dzBCQVFzRkFEQlYKTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEWTI5dE1SY3dGUVlLQ1pJbWlaUHlMR1FCR1JZSGFHRnlhV3R5WWpFbApNQ01HQTFVRUF4TWNhR0Z5YVd0eVlpMVhTVTR0TWtKUFZrRkZTMEkwTkVJdFEwRXRNakFlRncweU1EQTFNRFV3Ck56TTVORGxhRncweU1EQTFNRFl3TnpRNU5EaGFNRlV4RXpBUkJnb0praWFKay9Jc1pBRVpGZ05qYjIweEZ6QVYKQmdvSmtpYUprL0lzWkFFWkZnZG9ZWEpwYTNKaU1TVXdJd1lEVlFRREV4eG9ZWEpwYTNKaUxWZEpUaTB5UWs5VwpRVVZMUWpRMFFpMURRUzB5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFqMHByCnhaaXpNaDBqYnRwN1ZOc0JrRVJ2MVpZT0MzMEtqaGRWdEExRm1MeFM2cXlycmpMZUdXOXRSd2ZnUkR0eVBodTIKZVJTcVpTUjF6Z1hZR0s0Nys3Y3F0YnB2UElOektCb0dOWERIVTNxVWlleXJWSjFDVzRKNjJodUdrbUV1VVVkMApKMXBxNTVxbjk1SmRUbWh1dmZlTUxxeHB5c01nbGVnY281ZFhoN0hsQkhwaTNKMFN4ZnhVWmxKMVZiOFJZVEZhCkJiMGFlTVZaRzRKeVREaktiMlR1TmFXOG1aUE5vOFBMRDRocjdndFNZUEQvQ1dVVGV5QlpoZC9LTzNPczlWVEIKYmpLUGtWd0J2WEs2SlFMSGprNFBHS3VYZDhaWVFyajBtOWNIZDNmcWNYTXlQUnQ2TlJ4ak0yMTUxckFzSkVhNgpWZC9ta056akpXalBrT2VZUVFJREFRQUJvMmt3WnpBVEJna3JCZ0VFQVlJM0ZBSUVCaDRFQUVNQVFUQU9CZ05WCkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVDVEc2ODJSay9kMysKWGtHa0VMakRFMjI4ZjNnd0VBWUpLd1lCQkFHQ054VUJCQU1DQVFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQgpBR1RjTTNnWExIU05wS014RHEvUFpZbWZCMmNlN3VhMmxxbXpzZSt4QmthSTE0WXdzZE5ZQjZBVTNFWDM3QWpZCjd3bm9xQzY1N0U2RVhTODVDckoyNXJNTHo4OEtONGI3cUg5RUowSS9XVHg5YTdUT0ZENENWQThuL0xwNGh1Ym4KNlBFalY5NFlZWXBXTG1hTkkvbGFReWsxSHVJbDFSTCttVDFnSWQ4ZWZXZ1UvNmlVVEw3eGMrdjkyNHBuTHhISwpOSnNTV3c0NFk5a0R5SU9KOXFjWUlBN1lhTkxPZTRjSysvQlRvdDh0dVVKT1hHLzdBRmtxR2EyQVA4MmFZOStKCnkwSmU2OG5nTHJ1dVU4VHpneVpqdkFHcTRrVEVOdWFoaFdHVC9KWkEzOXhSNUV4MmNMUUplcE5NdnlZbUZ3Z1UKME8zYlA0OWNBVFVCMXoyQ3Y5aTRQbVk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K","maxLength":10240,"minLength":1,"type":"string"},"o":"add","f":"","pth":"/properties/properties/properties/activeDirectories/items/properties/serverRootCACertificate"},{"ov":null,"v":["Created","Updating","InUse","Deleted","Error"],"o":"add","f":"","pth":"/properties/properties/properties/activeDirectories/items/properties/status/enum"},{"ov":null,"v":true,"o":"add","f":"","pth":"/properties/properties/properties/activeDirectories/items/properties/status/readOnly"},{"ov":null,"v":{"modelAsString":true,"name":"ActiveDirectoryStatus","values":[{"desc":"Active Directory created but not in use","v":"Created"},{"desc":"Active Directory in use by SMB Volume","v":"InUse"},{"desc":"Active Directory Deleted","v":"Deleted"},{"desc":"Error with the Active Directory","v":"Error"},{"desc":"Active Directory Updating","v":"Updating"}]},"o":"add","f":"","pth":"/properties/properties/properties/activeDirectories/items/properties/status/x-ms-enum"},{"ov":null,"v":{"desc":"Any details in regards to the Status of the Active Directory","readOnly":true,"type":"string"},"o":"add","f":"","pth":"/properties/properties/properties/activeDirectories/items/properties/statusDetails"},{"ov":"Username of Active Directory domain administrator","v":"A domain user account with permission to create machine accounts","o":"replace","f":"","pth":"/properties/properties/properties/activeDirectories/items/properties/username/description"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":"/Pools_List/parameters/api-version"},{"ov":null,"v":"Auto","o":"add","f":"","pth":"/Pools_List/responses/200/body/value/0/properties/qosType"},{"ov":null,"v":281.474,"o":"add","f":"","pth":"/Pools_List/responses/200/body/value/0/properties/totalThroughputMibps"}]}},"params":{"m":{"query":{"api-version":{"ext":{"m":{"default":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":""}]}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"default":"Auto","desc":"The qos type of the pool","enum":["Auto","Manual"],"example":"Manual","title":"qosType","type":"string","x-ms-enum":{"modelAsString":true,"name":"qosType","values":[{"desc":"qos type Auto","v":"Auto"},{"desc":"qos type Manual","v":"Manual"}]}},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/qosType"},{"ov":null,"v":{"desc":"Total throughput of pool in Mibps","example":164.221,"readOnly":true,"type":"number"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/totalThroughputMibps"},{"ov":null,"v":{"desc":"Utilized throughput of pool in Mibps","example":164.221,"readOnly":true,"type":"number"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/utilizedThroughputMibps"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":"/Pools_Get/parameters/api-version"},{"ov":null,"v":"Manual","o":"add","f":"","pth":"/Pools_Get/responses/200/body/properties/qosType"},{"ov":null,"v":281.474,"o":"add","f":"","pth":"/Pools_Get/responses/200/body/properties/totalThroughputMibps"},{"ov":null,"v":100.47,"o":"add","f":"","pth":"/Pools_Get/responses/200/body/properties/utilizedThroughputMibps"}]}},"params":{"m":{"query":{"api-version":{"ext":{"m":{"default":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":""}]}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"default":"Auto","desc":"The qos type of the pool","enum":["Auto","Manual"],"example":"Manual","title":"qosType","type":"string","x-ms-enum":{"modelAsString":true,"name":"qosType","values":[{"desc":"qos type Auto","v":"Auto"},{"desc":"qos type Manual","v":"Manual"}]}},"o":"add","f":"","pth":"/properties/properties/properties/qosType"},{"ov":null,"v":{"desc":"Total throughput of pool in Mibps","example":164.221,"readOnly":true,"type":"number"},"o":"add","f":"","pth":"/properties/properties/properties/totalThroughputMibps"},{"ov":null,"v":{"desc":"Utilized throughput of pool in Mibps","example":164.221,"readOnly":true,"type":"number"},"o":"add","f":"","pth":"/properties/properties/properties/utilizedThroughputMibps"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":"/Volumes_List/parameters/api-version"},{"ov":null,"v":128,"o":"add","f":"","pth":"/Volumes_List/responses/200/body/value/0/properties/throughputMibps"}]}},"params":{"m":{"query":{"api-version":{"ext":{"m":{"default":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":""}]}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"default":"unix","desc":"The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol","enum":["ntfs","unix"],"type":"string","x-ms-enum":{"modelAsString":true,"name":"SecurityStyle"}},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/securityStyle"},{"ov":null,"v":true,"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/snapshotDirectoryVisible/default"},{"ov":null,"v":true,"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/snapshotId/x-nullable"},{"ov":null,"v":{"default":0,"example":128.22,"maximum":4500,"minimum":0,"multipleOf":0.001,"title":"Maximum throughput in Mibps that can be achieved by this volume","type":"number"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/throughputMibps"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":"/Volumes_Get/parameters/api-version"},{"ov":null,"v":128,"o":"add","f":"","pth":"/Volumes_Get/responses/200/body/properties/throughputMibps"}]}},"params":{"m":{"query":{"api-version":{"ext":{"m":{"default":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":""}]}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"default":"unix","desc":"The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol","enum":["ntfs","unix"],"type":"string","x-ms-enum":{"modelAsString":true,"name":"SecurityStyle"}},"o":"add","f":"","pth":"/properties/properties/properties/securityStyle"},{"ov":null,"v":true,"o":"add","f":"","pth":"/properties/properties/properties/snapshotDirectoryVisible/default"},{"ov":null,"v":true,"o":"add","f":"","pth":"/properties/properties/properties/snapshotId/x-nullable"},{"ov":null,"v":{"default":0,"example":128.22,"maximum":4500,"minimum":0,"multipleOf":0.001,"title":"Maximum throughput in Mibps that can be achieved by this volume","type":"number"},"o":"add","f":"","pth":"/properties/properties/properties/throughputMibps"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":"/Backups_List/parameters/api-version"}]}},"params":{"m":{"query":{"api-version":{"ext":{"m":{"default":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":""}]}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"UUID v4 used to identify the Backup","example":"9760acf5-4638-11e7-9bdb-020073ca3333","maxLength":36,"minLength":36,"pattern":"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$","readOnly":true,"title":"backupId","type":"string"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/backupId"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":"/Backups_Get/parameters/api-version"}]}},"params":{"m":{"query":{"api-version":{"ext":{"m":{"default":[{"ov":"2020-05-01","v":"2020-06-01","o":"replace","f":"","pth":""}]}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"UUID v4 used to identify the Backup","example":"9760acf5-4638-11e7-9bdb-020073ca3333","maxLength":36,"minLength":36,"pattern":"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$","readOnly":true,"title":"backupId","type":"string"},"o":"add","f":"","pth":"/properties/properties/properties/backupId"}]}}}}}}}}}}}}