{"tools_a":{},"tools_b":{"AuthorizationProvider_CreateOrUpdate":"@mcp.tool(name='AuthorizationProvider_CreateOrUpdate', description=\"Creates or updates authorization provider.\")\ndef AuthorizationProvider_CreateOrUpdate(subscriptionId: str, resourceGroupName: str, serviceName: str, authorizationProviderId: str):\n    '''Creates or updates authorization provider.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationProviders/{authorizationProviderId}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if serviceName is None:\n        raise ValueError('Missing required path parameter: serviceName')\n    if authorizationProviderId is None:\n        raise ValueError('Missing required path parameter: authorizationProviderId')\n    try:\n        resp = requests.put(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationProviders":{"ops":{"a":{"get":{"t":["AuthorizationProvider"],"opId":"AuthorizationProvider_ListByService","desc":"Lists a collection of authorization providers defined within a service instance.","ex":{"ApiManagementListAuthorizationProviders":{"r":"./examples/ApiManagementListAuthorizationProviders.json"}},"params":[{"r":"../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"},{"r":"./apimanagement.json#/parameters/ServiceNameParameter"},{"name":"$filter","in":"query","required":false,"type":"string","desc":"|     Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |</br>"},{"r":"./apimanagement.json#/parameters/TopQueryParameter"},{"r":"./apimanagement.json#/parameters/SkipQueryParameter"},{"r":"../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"200":{"desc":"A Collection of the Authorization Provider entities for the specified API Management service instance.","sch":{"r":"./definitions.json#/definitions/AuthorizationProviderCollection"}},"default":{"desc":"Error response describing why the operation failed.","sch":{"r":"./apimanagement.json#/definitions/ErrorResponse"}}},"page":{"nextLinkName":"nextLink"},"x-ms-odata":"./definitions.json#/definitions/AuthorizationProviderContract"}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationProviders/{authorizationProviderId}":{"ops":{"a":{"put":{"t":["AuthorizationProvider"],"opId":"AuthorizationProvider_CreateOrUpdate","desc":"Creates or updates authorization provider.","ex":{"ApiManagementCreateAuthorizationProviderAADAuthCode":{"r":"./examples/ApiManagementCreateAuthorizationProviderAADAuthCode.json"},"ApiManagementCreateAuthorizationProviderAADClientCred":{"r":"./examples/ApiManagementCreateAuthorizationProviderAADClientCred.json"},"ApiManagementCreateAuthorizationProviderGenericOAuth2":{"r":"./examples/ApiManagementCreateAuthorizationProviderGenericOAuth2.json"},"ApiManagementCreateAuthorizationProviderOOBGoogle":{"r":"./examples/ApiManagementCreateAuthorizationProviderOOBGoogle.json"}},"params":[{"r":"../../../../../common-types/resource-management/v3/types.json#/parameters/ResourceGroupNameParameter"},{"r":"./apimanagement.json#/parameters/ServiceNameParameter"},{"r":"./apimanagement.json#/parameters/AuthorizationProviderIdParameter"},{"name":"parameters","in":"body","required":true,"sch":{"r":"./definitions.json#/definitions/AuthorizationProviderContract"},"desc":"Create parameters."},{"r":"./apimanagement.json#/parameters/IfMatchOptionalParameter"},{"r":"../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v3/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"201":{"desc":"Authorization provider was successfully created.","sch":{"r":"./definitions.json#/definitions/AuthorizationProviderContract"},"headers":{"ETag":{"desc":"Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.","type":"string"}}},"200":{"desc":"The existing Authorization provider was successfully updated.","sch":{"r":"./definitions.json#/definitions/AuthorizationProviderContract"},"headers":{"ETag":{"desc":"Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.","type":"string"}}},"default":{"desc":"Error response describing why the operation failed.","sch":{"r":"./apimanagement.json#/definitions/ErrorResponse"}}}}}}}}}}