{
  "oasdiff": {
    "paths": {
      "added": {
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimitsRequests": {
          "operations": {
            "added": {
              "get": {
                "tags": [
                  "QuotaRequests"
                ],
                "x-ms-examples": {
                  "QuotaRequestHistory": {
                    "$ref": "./examples/getQuotaRequestsHistory.json"
                  }
                },
                "description": "For the specified Azure region (location), subscription, and resource provider, get the history of the quota requests for the past year. To select specific quota requests, use the oData filter.",
                "operationId": "QuotaRequestStatus_List",
                "parameters": [
                  {
                    "$ref": "#/parameters/SubscriptionIdInParameters"
                  },
                  {
                    "$ref": "#/parameters/ApiVersionParameter"
                  },
                  {
                    "$ref": "#/parameters/ProviderIdInParameters"
                  },
                  {
                    "$ref": "#/parameters/LocationIdInParameters"
                  },
                  {
                    "name": "$filter",
                    "in": "query",
                    "required": false,
                    "type": "string",
                    "description": "| Field | Supported operators |\r\n|---------------------|------------------------|\r\n|requestSubmitTime | ge, le, eq, gt, lt |"
                  },
                  {
                    "$ref": "#/parameters/TopQueryParameter"
                  },
                  {
                    "$ref": "#/parameters/SkipTokenParameter"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Ok. Returns details and status of the quota request.",
                    "schema": {
                      "$ref": "#/definitions/QuotaRequestDetailsList"
                    }
                  },
                  "default": {
                    "description": "Error description in the response.",
                    "schema": {
                      "$ref": "#/definitions/ExceptionResponse"
                    }
                  }
                },
                "x-ms-pageable": {
                  "nextLinkName": "nextLink"
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimitsRequests/{id}": {
          "operations": {
            "added": {
              "get": {
                "tags": [
                  "QuotaRequests"
                ],
                "x-ms-examples": {
                  "QuotaRequestStatus": {
                    "$ref": "./examples/getQuotaRequestStatusById.json"
                  },
                  "QuotaRequestInProgress": {
                    "$ref": "./examples/getQuotaRequestStatusInProgress.json"
                  },
                  "QuotaRequestFailed": {
                    "$ref": "./examples/getQuotaRequestStatusFailed.json"
                  }
                },
                "description": "For the specified Azure region (location), get the details and status of the quota request by the quota request ID for the resources of the resource provider. The PUT request for the quota (service limit) returns a response with the requestId parameter.",
                "operationId": "QuotaRequestStatus_Get",
                "parameters": [
                  {
                    "$ref": "#/parameters/SubscriptionIdInParameters"
                  },
                  {
                    "$ref": "#/parameters/ApiVersionParameter"
                  },
                  {
                    "$ref": "#/parameters/ProviderIdInParameters"
                  },
                  {
                    "$ref": "#/parameters/LocationIdInParameters"
                  },
                  {
                    "$ref": "#/parameters/RequestIdInParameters"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Ok. Returns the status of the quota request.",
                    "schema": {
                      "$ref": "#/definitions/QuotaRequestDetails"
                    }
                  },
                  "default": {
                    "description": "Error description in the response.",
                    "schema": {
                      "$ref": "#/definitions/ExceptionResponse"
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits": {
          "operations": {
            "added": {
              "get": {
                "tags": [
                  "QuotaInformation"
                ],
                "description": "Gets a list of current quotas (service limits) and usage for all resources. The response from the list quota operation can be leveraged to request quota updates.",
                "operationId": "Quota_List",
                "x-ms-examples": {
                  "Quotas_listUsagesForCompute": {
                    "$ref": "./examples/getComputeUsages.json"
                  },
                  "Quotas_listUsagesMachineLearningServices": {
                    "$ref": "./examples/getMachineLearningServicesUsages.json"
                  }
                },
                "parameters": [
                  {
                    "$ref": "#/parameters/SubscriptionIdInParameters"
                  },
                  {
                    "$ref": "#/parameters/ProviderIdInParameters"
                  },
                  {
                    "$ref": "#/parameters/LocationIdInParameters"
                  },
                  {
                    "$ref": "#/parameters/ApiVersionParameter"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "OK. Returns the paginated quota information.",
                    "schema": {
                      "$ref": "#/definitions/QuotaLimits"
                    },
                    "headers": {
                      "ETag": {
                        "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                        "type": "string"
                      }
                    }
                  },
                  "default": {
                    "description": "Error description in the response.",
                    "schema": {
                      "$ref": "#/definitions/ExceptionResponse"
                    }
                  }
                },
                "x-ms-pageable": {
                  "nextLinkName": "nextLink"
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {},
  "tools_b": {
    "QuotaRequestStatus_Get": "FunctionDef(name='QuotaRequestStatus_Get', args=arguments(posonlyargs=[], args=[arg(arg='subscriptionId', annotation=Name(id='str', ctx=Load())), arg(arg='providerId', annotation=Name(id='str', ctx=Load())), arg(arg='location', annotation=Name(id='str', ctx=Load())), arg(arg='id', annotation=Name(id='str', ctx=Load())), arg(arg='api_version', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='For the specified Azure region (location), get the details and status of the quota request by the quota request ID for the resources of the resource provider. The PUT request for the quota (service limit) returns a response with the requestId parameter.')), Assign(targets=[Name(id='base_url', ctx=Store())], value=Constant(value='https://management.azure.com')), Assign(targets=[Name(id='url', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='base_url', ctx=Load()), conversion=-1), Constant(value='/subscriptions/'), FormattedValue(value=Name(id='subscriptionId', ctx=Load()), conversion=-1), Constant(value='/providers/Microsoft.Capacity/resourceProviders/'), FormattedValue(value=Name(id='providerId', ctx=Load()), conversion=-1), Constant(value='/locations/'), FormattedValue(value=Name(id='location', ctx=Load()), conversion=-1), Constant(value='/serviceLimitsRequests/'), FormattedValue(value=Name(id='id', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='params', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cookies', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='extra_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='EXTRA_HEADERS')], keywords=[])), If(test=Name(id='extra_headers', ctx=Load()), body=[Try(body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='extra_headers', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Failed to parse EXTRA_HEADERS:'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='auth_error_msgs', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='access_token', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='access_token', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Authorization'), ctx=Store())], value=JoinedStr(values=[Constant(value='Bearer '), FormattedValue(value=Name(id='access_token', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='auth_error_msgs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='No valid authentication found. Details: '), op=Add(), right=Call(func=Attribute(value=Constant(value='; '), attr='join', ctx=Load()), args=[Name(id='auth_error_msgs', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='subscriptionId', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: subscriptionId')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='providerId', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: providerId')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='location', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: location')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='id', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: id')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='api_version', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='api-version'), ctx=Store())], value=Name(id='api_version', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='params', value=Name(id='params', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='cookies', value=Name(id='cookies', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='application/json'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Dict(keys=[Constant(value='raw'), Constant(value='status_code')], values=[Attribute(value=Name(id='resp', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Load())]))])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='requests', ctx=Load()), attr='exceptions', ctx=Load()), attr='RequestException', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='HTTP request failed: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected error: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='mcp', ctx=Load()), attr='tool', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='QuotaRequestStatus_Get')), keyword(arg='description', value=Constant(value='For the specified Azure region (location), get the details and status of the quota request by the quota request ID for the resources of the resource provider. The PUT request for the quota (service limit) returns a response with the requestId parameter.'))])])"
  }
}