{"tools_a":{"Locations_ValidateClusterCreateRequest":"@mcp.tool(name='Locations_ValidateClusterCreateRequest', description=\"Validate the cluster create request spec is valid or not.\")\ndef Locations_ValidateClusterCreateRequest(subscriptionId: str, location: str, api_version: Optional[str] = None):\n    '''Validate the cluster create request spec is valid or not.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/validateCreateRequest\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if location is None:\n        raise ValueError('Missing required path parameter: location')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.post(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"Locations_ValidateClusterCreateRequest":"@mcp.tool(name='Locations_ValidateClusterCreateRequest', description=\"Validate the cluster create request spec is valid or not.\")\ndef Locations_ValidateClusterCreateRequest(subscriptionId: str, location: str, api_version: Optional[str] = None):\n    '''Validate the cluster create request spec is valid or not.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/validateCreateRequest\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if location is None:\n        raise ValueError('Missing required path parameter: location')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.post(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/validateCreateRequest":{"ops":{"m":{"POST":{"ext":{"m":{"ex":[{"ov":"2018-06-01-preview","v":"2021-06-01","o":"replace","f":"","pth":"/Get the subscription usages for specific location/parameters/api-version"}]}},"params":{"m":{"body":{"params":{"sch":{"allOf":{"m":[{"base":{"index":0},"revision":{"index":0},"diff":{"type":{"a":["object"]},"prop":{"a":["zones"],"m":{"identity":{"type":{"a":["object"]},"prop":{"m":{"type":{"ext":{"m":{"x-ms-enum":[{"ov":false,"v":true,"o":"replace","f":"","pth":"/modelAsString"}]}}},"userAssignedIdentities":{"additionalProperties":{"desc":{"f":"","to":"The User Assigned Identity"}}}}}},"prop":{"type":{"a":["object"]},"prop":{"a":["privateLinkConfigurations"],"m":{"clusterDefinition":{"type":{"a":["object"]}},"computeIsolationProperties":{"type":{"a":["object"]}},"computeProfile":{"type":{"a":["object"]},"prop":{"m":{"roles":{"ext":{"a":["x-ms-identifiers"]},"items":{"type":{"a":["object"]},"prop":{"m":{"autoscale":{"type":{"a":["object"]},"prop":{"m":{"capacity":{"type":{"a":["object"]}},"recurrence":{"type":{"a":["object"]},"prop":{"m":{"schedule":{"ext":{"a":["x-ms-identifiers"]},"items":{"type":{"a":["object"]},"prop":{"m":{"days":{"items":{"ext":{"m":{"x-ms-enum":[{"ov":false,"v":true,"o":"replace","f":"","pth":"/modelAsString"}]}}}},"timeAndCapacity":{"type":{"a":["object"]}}}}}}}}}}}},"dataDisksGroups":{"ext":{"a":["x-ms-identifiers"]},"items":{"type":{"a":["object"]}}},"hardwareProfile":{"type":{"a":["object"]}},"osProfile":{"type":{"a":["object"]},"prop":{"m":{"linuxOperatingSystemProfile":{"type":{"a":["object"]},"prop":{"m":{"sshProfile":{"type":{"a":["object"]},"prop":{"m":{"publicKeys":{"ext":{"a":["x-ms-identifiers"]},"items":{"type":{"a":["object"]}}}}}}}}}}}},"scriptActions":{"ext":{"a":["x-ms-identifiers"]},"items":{"type":{"a":["object"]}}},"virtualNetworkProfile":{"type":{"a":["object"]}}}}}}}}},"diskEncryptionProperties":{"type":{"a":["object"]}},"encryptionInTransitProperties":{"type":{"a":["object"]}},"kafkaRestProperties":{"type":{"a":["object"]},"prop":{"m":{"clientGroupInfo":{"type":{"a":["object"]}}}}},"networkProperties":{"type":{"a":["object"]}},"osType":{"ext":{"m":{"x-ms-enum":[{"ov":false,"v":true,"o":"replace","f":"","pth":"/modelAsString"}]}}},"securityProfile":{"type":{"a":["object"]},"prop":{"m":{"directoryType":{"ext":{"m":{"x-ms-enum":[{"ov":false,"v":true,"o":"replace","f":"","pth":"/modelAsString"}]}}}}}},"storageProfile":{"type":{"a":["object"]},"prop":{"m":{"storageaccounts":{"ext":{"a":["x-ms-identifiers"]},"items":{"type":{"a":["object"]}}}}}},"tier":{"ext":{"m":{"x-ms-enum":[{"ov":false,"v":true,"o":"replace","f":"","pth":"/modelAsString"}]}}}}}}}}}}]},"type":{"a":["object"]}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":["resourceId"],"o":"add","f":"","pth":"/properties/aaddsResourcesDetails/x-ms-identifiers"},{"ov":null,"v":["code"],"o":"add","f":"","pth":"/properties/validationErrors/x-ms-identifiers"},{"ov":null,"v":["code"],"o":"add","f":"","pth":"/properties/validationWarnings/x-ms-identifiers"}]}}}}}}}}}}}}