{"tools_a":{"SubscriptionOperation_Get":"@mcp.tool(name='SubscriptionOperation_Get', description=\"Get the status of the pending Microsoft.Subscription API operations.\")\ndef SubscriptionOperation_Get(operationId: str, api_version: Optional[str] = None):\n    '''Get the status of the pending Microsoft.Subscription API operations.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/providers/Microsoft.Subscription/subscriptionOperations/{operationId}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if operationId is None:\n        raise ValueError('Missing required path parameter: operationId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"SubscriptionOperation_Get":"@mcp.tool(name='SubscriptionOperation_Get', description=\"Get the status of the pending Microsoft.Subscription API operations.\")\ndef SubscriptionOperation_Get(operationId: str, api_version: Optional[str] = None):\n    '''Get the status of the pending Microsoft.Subscription API operations.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/providers/Microsoft.Subscription/subscriptionOperations/{operationId}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if operationId is None:\n        raise ValueError('Missing required path parameter: operationId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/providers/Microsoft.Subscription/subscriptionOperations/{operationId}":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2018-03-01-preview","v":"2018-11-01-preview","o":"replace","f":"","pth":"/getPendingSubscriptionOperations/parameters/api-version"},{"ov":"/providers/Microsoft.Subscription/subscriptionOperations/e4b8d068-f574-462a-a76f-6fa0afc613c9?api-version=2018-03-01-preview","v":"/providers/Microsoft.Subscription/subscriptionOperations/e4b8d068-f574-462a-a76f-6fa0afc613c9?api-version=2018-11-01-preview","o":"replace","f":"","pth":"/getPendingSubscriptionOperations/responses/202/headers/Location"}]}},"params":{"m":{"query":{"api-version":{"desc":{"f":"Version of the API to be used with the client request. Current version is 2015-06-01","to":"Version of the API to be used with the client request. Current version is 2018-11-01-preview"}}}}},"resp":{"d":["default"],"m":{"202":{"headers":{"m":{"Retry-After":{"ext":{"d":["format"]}}}}}}}}}}}}}}