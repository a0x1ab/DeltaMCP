{"tools_a":{},"tools_b":{"BlobContainers_GetImmutabilityPolicy":"@mcp.tool(name='BlobContainers_GetImmutabilityPolicy', description=\"Gets the existing immutability policy along with the corresponding ETag in response headers and body.\")\ndef BlobContainers_GetImmutabilityPolicy(containerName: str, immutabilityPolicyName: str, subscriptionId: str, resourceGroupName: str, accountName: str, If_Match: Optional[str] = None):\n    '''Gets the existing immutability policy along with the corresponding ETag in response headers and body.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if containerName is None:\n        raise ValueError('Missing required path parameter: containerName')\n    if immutabilityPolicyName is None:\n        raise ValueError('Missing required path parameter: immutabilityPolicyName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    header_value = If_Match if If_Match is not None else os.getenv('IF_MATCH')\n    if header_value is not None:\n        headers['If-Match'] = header_value\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices":{"ops":{"a":{"get":{"t":["BlobService"],"opId":"BlobServices_List","ex":{"ListBlobServices":{"r":"./examples/BlobServicesList.json"}},"desc":"List blob services of storage account. It returns a collection of one object named default.","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"./storage.json#/parameters/StorageAccountName"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"200":{"desc":"OK -- List blob services operation completed successfully.","sch":{"r":"#/definitions/BlobServiceItems"}}},"page":{"nextLinkName":null}}}}}}}}