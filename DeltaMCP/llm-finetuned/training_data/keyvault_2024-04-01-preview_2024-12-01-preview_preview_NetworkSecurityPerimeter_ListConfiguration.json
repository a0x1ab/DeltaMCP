{"tools_a":{"NetworkSecurityPerimeter_ListConfiguration":"@mcp.tool(name='NetworkSecurityPerimeter_ListConfiguration', description=\"The List operation gets information about the network security perimeter associations for the key vault.\")\ndef NetworkSecurityPerimeter_ListConfiguration(subscriptionId: str, resourceGroupName: str, vaultName: str, api_version: Optional[str] = None):\n    '''The List operation gets information about the network security perimeter associations for the key vault.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/networkSecurityPerimeterConfigurations\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if vaultName is None:\n        raise ValueError('Missing required path parameter: vaultName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"NetworkSecurityPerimeter_ListConfiguration":"@mcp.tool(name='NetworkSecurityPerimeter_ListConfiguration', description=\"The List operation gets information about the network security perimeter associations for the key vault.\")\ndef NetworkSecurityPerimeter_ListConfiguration(subscriptionId: str, resourceGroupName: str, vaultName: str, api_version: Optional[str] = None):\n    '''The List operation gets information about the network security perimeter associations for the key vault.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/networkSecurityPerimeterConfigurations\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if vaultName is None:\n        raise ValueError('Missing required path parameter: vaultName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2024-04-01-preview","v":"2024-12-01-preview","o":"replace","f":"","pth":"/List vaults in the specified resource group/parameters/api-version"},{"ov":"https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults?api-version=2024-04-01-preview&$skiptoken=dmF1bHQtcGVza3ktanVyeS03MzA3Ng==","v":"https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults?api-version=2024-12-01-preview&$skiptoken=dmF1bHQtcGVza3ktanVyeS03MzA3Ng==","o":"replace","f":"","pth":"/List vaults in the specified resource group/responses/200/body/nextLink"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":false,"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/enabledForDeployment/default"},{"ov":null,"v":false,"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/enabledForDiskEncryption/default"},{"ov":null,"v":false,"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/enabledForTemplateDeployment/default"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2024-04-01-preview","v":"2024-12-01-preview","o":"replace","f":"","pth":"/Retrieve a vault/parameters/api-version"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":false,"o":"add","f":"","pth":"/properties/properties/properties/enabledForDeployment/default"},{"ov":null,"v":false,"o":"add","f":"","pth":"/properties/properties/properties/enabledForDiskEncryption/default"},{"ov":null,"v":false,"o":"add","f":"","pth":"/properties/properties/properties/enabledForTemplateDeployment/default"}]}}}}}}}}}}}}