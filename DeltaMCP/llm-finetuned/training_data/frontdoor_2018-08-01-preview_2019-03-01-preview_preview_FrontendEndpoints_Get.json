{
  "oasdiff": {
    "paths": {
      "deleted": {
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors": {
          "operations": {
            "deleted": {
              "get": {
                "tags": [
                  "FrontDoors"
                ],
                "description": "Lists all of the Front Doors within a resource group under a subscription.",
                "operationId": "FrontDoors_ListByResourceGroup",
                "parameters": [
                  {
                    "$ref": "./network.json#/parameters/SubscriptionIdParameter"
                  },
                  {
                    "$ref": "#/parameters/resourceGroupNameParameter"
                  },
                  {
                    "$ref": "./network.json#/parameters/ApiVersionParameter"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "OK. The request has succeeded.",
                    "schema": {
                      "$ref": "#/definitions/FrontDoorListResult"
                    }
                  },
                  "default": {
                    "description": "Front Door error response describing why the operation failed.",
                    "schema": {
                      "$ref": "#/definitions/ErrorResponse"
                    }
                  }
                },
                "x-ms-pageable": {
                  "nextLinkName": "nextLink"
                },
                "x-ms-examples": {
                  "List Front Doors in a Resource Group": {
                    "$ref": "./examples/FrontdoorList.json"
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}": {
          "operations": {
            "deleted": {
              "get": {
                "tags": [
                  "FrontDoors"
                ],
                "description": "Gets a Frontend endpoint with the specified name within the specified Front Door.",
                "operationId": "FrontendEndpoints_Get",
                "parameters": [
                  {
                    "$ref": "./network.json#/parameters/SubscriptionIdParameter"
                  },
                  {
                    "$ref": "#/parameters/resourceGroupNameParameter"
                  },
                  {
                    "$ref": "#/parameters/frontDoorNameParameter"
                  },
                  {
                    "$ref": "#/parameters/frontendEndpointNameParameter"
                  },
                  {
                    "$ref": "./network.json#/parameters/ApiVersionParameter"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "OK. The request has succeeded.",
                    "schema": {
                      "$ref": "#/definitions/FrontendEndpoint"
                    }
                  },
                  "default": {
                    "description": "Front Door error response describing why the operation failed.",
                    "schema": {
                      "$ref": "#/definitions/ErrorResponse"
                    }
                  }
                },
                "x-ms-examples": {
                  "Get Frontend Endpoint": {
                    "$ref": "./examples/FrontdoorFrontendEndpointGet.json"
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}": {
          "operations": {
            "deleted": {
              "get": {
                "tags": [
                  "FrontDoors"
                ],
                "description": "Gets a Front Door with the specified Front Door name under the specified subscription and resource group.",
                "operationId": "FrontDoors_Get",
                "parameters": [
                  {
                    "$ref": "./network.json#/parameters/SubscriptionIdParameter"
                  },
                  {
                    "$ref": "#/parameters/resourceGroupNameParameter"
                  },
                  {
                    "$ref": "#/parameters/frontDoorNameParameter"
                  },
                  {
                    "$ref": "./network.json#/parameters/ApiVersionParameter"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "OK. The request has succeeded.",
                    "schema": {
                      "$ref": "#/definitions/FrontDoor"
                    }
                  },
                  "default": {
                    "description": "Front Door error response describing why the operation failed.",
                    "schema": {
                      "$ref": "#/definitions/ErrorResponse"
                    }
                  }
                },
                "x-ms-examples": {
                  "Get Front Door": {
                    "$ref": "./examples/FrontdoorGet.json"
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints": {
          "operations": {
            "deleted": {
              "get": {
                "tags": [
                  "FrontDoors"
                ],
                "description": "Lists all of the frontend endpoints within a Front Door.",
                "operationId": "FrontendEndpoints_ListByFrontDoor",
                "parameters": [
                  {
                    "$ref": "./network.json#/parameters/SubscriptionIdParameter"
                  },
                  {
                    "$ref": "#/parameters/resourceGroupNameParameter"
                  },
                  {
                    "$ref": "#/parameters/frontDoorNameParameter"
                  },
                  {
                    "$ref": "./network.json#/parameters/ApiVersionParameter"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "OK. The request has succeeded.",
                    "schema": {
                      "$ref": "#/definitions/FrontendEndpointsListResult"
                    }
                  },
                  "default": {
                    "description": "Front Door error response describing why the operation failed.",
                    "schema": {
                      "$ref": "#/definitions/ErrorResponse"
                    }
                  }
                },
                "x-ms-pageable": {
                  "nextLinkName": "nextLink"
                },
                "x-ms-examples": {
                  "List Frontend endpoints in a Front Door": {
                    "$ref": "./examples/FrontdoorFrontendEndpointList.json"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {
    "FrontendEndpoints_Get": "FunctionDef(name='FrontendEndpoints_Get', args=arguments(posonlyargs=[], args=[arg(arg='resourceGroupName', annotation=Name(id='str', ctx=Load())), arg(arg='frontDoorName', annotation=Name(id='str', ctx=Load())), arg(arg='frontendEndpointName', annotation=Name(id='str', ctx=Load())), arg(arg='subscriptionId', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Gets a Frontend endpoint with the specified name within the specified Front Door.')), Assign(targets=[Name(id='base_url', ctx=Store())], value=Constant(value='https://management.azure.com')), Assign(targets=[Name(id='url', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='base_url', ctx=Load()), conversion=-1), Constant(value='/subscriptions/'), FormattedValue(value=Name(id='subscriptionId', ctx=Load()), conversion=-1), Constant(value='/resourceGroups/'), FormattedValue(value=Name(id='resourceGroupName', ctx=Load()), conversion=-1), Constant(value='/providers/Microsoft.Network/frontDoors/'), FormattedValue(value=Name(id='frontDoorName', ctx=Load()), conversion=-1), Constant(value='/frontendEndpoints/'), FormattedValue(value=Name(id='frontendEndpointName', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='params', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cookies', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='extra_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='EXTRA_HEADERS')], keywords=[])), If(test=Name(id='extra_headers', ctx=Load()), body=[Try(body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='extra_headers', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Failed to parse EXTRA_HEADERS:'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='auth_error_msgs', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='access_token', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='access_token', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Authorization'), ctx=Store())], value=JoinedStr(values=[Constant(value='Bearer '), FormattedValue(value=Name(id='access_token', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='auth_error_msgs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='No valid authentication found. Details: '), op=Add(), right=Call(func=Attribute(value=Constant(value='; '), attr='join', ctx=Load()), args=[Name(id='auth_error_msgs', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='resourceGroupName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: resourceGroupName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='frontDoorName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: frontDoorName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='frontendEndpointName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: frontendEndpointName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='subscriptionId', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: subscriptionId')], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='params', value=Name(id='params', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='cookies', value=Name(id='cookies', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='application/json'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Dict(keys=[Constant(value='raw'), Constant(value='status_code')], values=[Attribute(value=Name(id='resp', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Load())]))])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='requests', ctx=Load()), attr='exceptions', ctx=Load()), attr='RequestException', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='HTTP request failed: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected error: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='mcp', ctx=Load()), attr='tool', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='FrontendEndpoints_Get')), keyword(arg='description', value=Constant(value='Gets a Frontend endpoint with the specified name within the specified Front Door.'))])])"
  },
  "tools_b": {}
}