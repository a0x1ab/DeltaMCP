{"tools_a":{"Vaults_List":"@mcp.tool(name='Vaults_List', description=\"The List operation gets information about the vaults associated with the subscription.\")\ndef Vaults_List(subscriptionId: str, _filter: Optional[str] = None, _top: Optional[str] = None, api_version: Optional[str] = None):\n    '''The List operation gets information about the vaults associated with the subscription.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resources\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if _filter is not None:\n        params['$filter'] = _filter\n    if _top is not None:\n        params['$top'] = _top\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"Vaults_List":"@mcp.tool(name='Vaults_List', description=\"The List operation gets information about the vaults associated with the subscription.\")\ndef Vaults_List(subscriptionId: str, _filter: Optional[str] = None, _top: Optional[str] = None, api_version: Optional[str] = None):\n    '''The List operation gets information about the vaults associated with the subscription.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resources\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if _filter is not None:\n        params['$filter'] = _filter\n    if _top is not None:\n        params['$top'] = _top\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resources":{"ops":{"m":{"GET":{"ext":{"d":["consumes"]},"resp":{"a":["default"],"m":{"200":{"ext":{"m":{"sch":[{"ov":"The Azure Resource Manager resource ID for the key vault.","v":"Fully qualified identifier of the key vault resource.","o":"replace","f":"","pth":"/properties/value/items/properties/id/description"},{"ov":"The supported Azure location where the key vault should be created.","v":"Azure location of the key vault resource.","o":"replace","f":"","pth":"/properties/value/items/properties/location/description"},{"ov":null,"v":true,"o":"add","f":"","pth":"/properties/value/items/properties/location/readOnly"},{"ov":"The name of the key vault.","v":"Name of the key vault resource.","o":"replace","f":"","pth":"/properties/value/items/properties/name/description"},{"ov":"The tags that will be assigned to the key vault. ","v":"Tags assigned to the key vault resource.","o":"replace","f":"","pth":"/properties/value/items/properties/tags/description"},{"ov":null,"v":true,"o":"add","f":"","pth":"/properties/value/items/properties/tags/readOnly"},{"ov":"The resource type of the key vault.","v":"Resource type of the key vault resource.","o":"replace","f":"","pth":"/properties/value/items/properties/type/description"},{"ov":["location"],"v":null,"o":"remove","f":"","pth":"/properties/value/items/required"}]}}}}}}}}}}}}