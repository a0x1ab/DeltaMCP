{"tools_a":{"Pools_List":"@mcp.tool(name='Pools_List', description=\"Describe all Capacity Pools: List all capacity pools in the NetApp Account\")\ndef Pools_List(subscriptionId: str, resourceGroupName: str, accountName: str, api_version: Optional[str] = None):\n    '''List all capacity pools in the NetApp Account'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"Pools_List":"@mcp.tool(name='Pools_List', description=\"Describe all Capacity Pools: List all capacity pools in the NetApp Account\")\ndef Pools_List(subscriptionId: str, resourceGroupName: str, accountName: str, api_version: Optional[str] = None):\n    '''List all capacity pools in the NetApp Account'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2019-07-01","v":"2019-08-01","o":"replace","f":"","pth":"/Accounts_List/parameters/api-version"},{"ov":"resourceGroup","v":"myRG","o":"replace","f":"","pth":"/Accounts_List/parameters/resourceGroupName"},{"ov":"subscriptionId","v":"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9","o":"replace","f":"","pth":"/Accounts_List/parameters/subscriptionId"},{"ov":null,"v":"/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1","o":"add","f":"","pth":"/Accounts_List/responses/200/body/value/0/id"},{"ov":null,"v":"account1","o":"add","f":"","pth":"/Accounts_List/responses/200/body/value/0/name"},{"ov":"Created","v":"Succeeded","o":"replace","f":"","pth":"/Accounts_List/responses/200/body/value/0/properties/provisioningState"},{"ov":null,"v":"Microsoft.NetApp/netAppAccounts","o":"add","f":"","pth":"/Accounts_List/responses/200/body/value/0/type"}]}},"desc":{"f":"List and describe all NetApp accounts in the resource group","to":"List and describe all NetApp accounts in the resource group."},"params":{"m":{"query":{"api-version":{"ext":{"m":{"default":[{"ov":"2019-07-01","v":"2019-08-01","o":"replace","f":"","pth":""}]}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":"Comma separated list of DNS server IP addresses for the Active Directory domain","v":"Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain","o":"replace","f":"","pth":"/properties/value/items/properties/properties/properties/activeDirectories/items/properties/dns/description"},{"ov":null,"v":{"type":"string"},"o":"add","f":"","pth":"/properties/value/items/properties/tags/additionalProperties"},{"ov":"Resource tags","v":"Tags are a list of key-value pairs that describe the resource","o":"replace","f":"","pth":"/properties/value/items/properties/tags/description"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"accountName","v":"account1","o":"replace","f":"","pth":"/Accounts_Get/parameters/accountName"},{"ov":"2019-07-01","v":"2019-08-01","o":"replace","f":"","pth":"/Accounts_Get/parameters/api-version"},{"ov":"resourceGroup","v":"myRG","o":"replace","f":"","pth":"/Accounts_Get/parameters/resourceGroupName"},{"ov":"subscriptionId","v":"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9","o":"replace","f":"","pth":"/Accounts_Get/parameters/subscriptionId"},{"ov":null,"v":"/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1","o":"add","f":"","pth":"/Accounts_Get/responses/200/body/id"},{"ov":null,"v":"account1","o":"add","f":"","pth":"/Accounts_Get/responses/200/body/name"},{"ov":"Created","v":"Succeeded","o":"replace","f":"","pth":"/Accounts_Get/responses/200/body/properties/provisioningState"},{"ov":null,"v":"Microsoft.NetApp/netAppAccounts","o":"add","f":"","pth":"/Accounts_Get/responses/200/body/type"}]}},"params":{"m":{"query":{"api-version":{"ext":{"m":{"default":[{"ov":"2019-07-01","v":"2019-08-01","o":"replace","f":"","pth":""}]}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":"Comma separated list of DNS server IP addresses for the Active Directory domain","v":"Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain","o":"replace","f":"","pth":"/properties/properties/properties/activeDirectories/items/properties/dns/description"},{"ov":null,"v":{"type":"string"},"o":"add","f":"","pth":"/properties/tags/additionalProperties"},{"ov":"Resource tags","v":"Tags are a list of key-value pairs that describe the resource","o":"replace","f":"","pth":"/properties/tags/description"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"accountName","v":"account1","o":"replace","f":"","pth":"/Pools_List/parameters/accountName"},{"ov":"2019-07-01","v":"2019-08-01","o":"replace","f":"","pth":"/Pools_List/parameters/api-version"},{"ov":"resourceGroup","v":"myRG","o":"replace","f":"","pth":"/Pools_List/parameters/resourceGroupName"},{"ov":"subscriptionId","v":"D633CC2E-722B-4AE1-B636-BBD9E4C60ED9","o":"replace","f":"","pth":"/Pools_List/parameters/subscriptionId"},{"ov":null,"v":"/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/resourceGroups/myRG/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1","o":"add","f":"","pth":"/Pools_List/responses/200/body/value/0/id"},{"ov":null,"v":"account1/pool1","o":"add","f":"","pth":"/Pools_List/responses/200/body/value/0/name"},{"ov":"Created","v":"Succeeded","o":"replace","f":"","pth":"/Pools_List/responses/200/body/value/0/properties/provisioningState"},{"ov":null,"v":"Microsoft.NetApp/netAppAccounts/capacityPools","o":"add","f":"","pth":"/Pools_List/responses/200/body/value/0/type"}]}},"params":{"m":{"query":{"api-version":{"ext":{"m":{"default":[{"ov":"2019-07-01","v":"2019-08-01","o":"replace","f":"","pth":""}]}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"type":"string"},"o":"add","f":"","pth":"/properties/value/items/properties/tags/additionalProperties"},{"ov":"Resource tags","v":"Tags are a list of key-value pairs that describe the resource","o":"replace","f":"","pth":"/properties/value/items/properties/tags/description"}]}}}}}}}}}}}}