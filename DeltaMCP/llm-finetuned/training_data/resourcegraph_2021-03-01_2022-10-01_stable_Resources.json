{"tools_a":{},"tools_b":{"Resources":"@mcp.tool(name='Resources', description=\"Queries the resources managed by Azure Resource Manager for scopes specified in the request.\")\ndef Resources(api_version: Optional[str] = None):\n    '''Queries the resources managed by Azure Resource Manager for scopes specified in the request.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/providers/Microsoft.ResourceGraph/resources\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.post(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/providers/Microsoft.ResourceGraph/resources":{"ops":{"a":{"post":{"t":["Resources"],"opId":"Resources","desc":"Queries the resources managed by Azure Resource Manager for scopes specified in the request.","externalDocs":{"desc":"Learn more about the query syntax here","url":"https://aka.ms/resource-graph/learntoquery"},"params":[{"r":"#/parameters/ApiVersionParameter"},{"name":"query","in":"body","required":true,"sch":{"r":"#/definitions/QueryRequest"},"desc":"Request specifying query and its options."}],"resp":{"200":{"desc":"Result of the query operation","sch":{"r":"#/definitions/QueryResponse"}},"default":{"desc":"An error occurred while processing the request. See the error.code parameter to identify the specific error.","sch":{"r":"#/definitions/ErrorResponse"}}},"ex":{"Basic query":{"r":"./examples/ResourcesBasicQuery.json"},"Basic tenant query":{"r":"./examples/ResourcesTenantBasicQuery.json"},"Basic management group query":{"r":"./examples/ResourcesMgBasicQuery.json"},"Filter resources":{"r":"./examples/ResourcesFilterQuery.json"},"Summarize resources by location":{"r":"./examples/ResourcesSummarizeQuery.json"},"Complex query":{"r":"./examples/ResourcesComplexQuery.json"},"Access a properties field":{"r":"./examples/ResourcesPropertiesQuery.json"},"Query with a facet request":{"r":"./examples/ResourcesFacetQuery.json"},"First page query":{"r":"./examples/ResourcesFirstPageQuery.json"},"Next page query":{"r":"./examples/ResourcesNextPageQuery.json"},"Random page query":{"r":"./examples/ResourcesRandomPageQuery.json"}}}}}}}}}