{"tools_a":{"RestorableGremlinDatabases_List":"@mcp.tool(name='RestorableGremlinDatabases_List', description=\"Show the event feed of all mutations done on all the Azure Cosmos DB Gremlin databases under the restorable account. This helps in scenario where database was accidentally deleted to get the deletion time. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\")\ndef RestorableGremlinDatabases_List(location: str, instanceId: str, subscriptionId: str):\n    '''Show the event feed of all mutations done on all the Azure Cosmos DB Gremlin databases under the restorable account. This helps in scenario where database was accidentally deleted to get the deletion time. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableGremlinDatabases\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if location is None:\n        raise ValueError('Missing required path parameter: location')\n    if instanceId is None:\n        raise ValueError('Missing required path parameter: instanceId')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"RestorableGremlinDatabases_List":"@mcp.tool(name='RestorableGremlinDatabases_List', description=\"Show the event feed of all mutations done on all the Azure Cosmos DB Gremlin databases under the restorable account. This helps in scenario where database was accidentally deleted to get the deletion time. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\")\ndef RestorableGremlinDatabases_List(location: str, instanceId: str, subscriptionId: str):\n    '''Show the event feed of all mutations done on all the Azure Cosmos DB Gremlin databases under the restorable account. This helps in scenario where database was accidentally deleted to get the deletion time. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableGremlinDatabases\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if location is None:\n        raise ValueError('Missing required path parameter: location')\n    if instanceId is None:\n        raise ValueError('Missing required path parameter: instanceId')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2023-03-15","v":"2023-04-15","o":"replace","f":"","pth":"/CosmosDBRestorableDatabaseAccountList/parameters/api-version"},{"ov":null,"v":"2021-03-12T22:05:09Z","o":"add","f":"","pth":"/CosmosDBRestorableDatabaseAccountList/responses/200/body/value/0/properties/oldestRestorableTime"},{"ov":null,"v":"2020-05-01T08:05:18Z","o":"add","f":"","pth":"/CosmosDBRestorableDatabaseAccountList/responses/200/body/value/1/properties/oldestRestorableTime"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"The least recent time at which the database account can be restored to (ISO-8601 format).","format":"date-time","type":"string"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/oldestRestorableTime"}]}}}}}}}}},"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2023-03-15","v":"2023-04-15","o":"replace","f":"","pth":"/CosmosDBRestorableDatabaseAccountGet/parameters/api-version"},{"ov":null,"v":"2021-03-01T22:05:09Z","o":"add","f":"","pth":"/CosmosDBRestorableDatabaseAccountGet/responses/200/body/properties/oldestRestorableTime"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"The least recent time at which the database account can be restored to (ISO-8601 format).","format":"date-time","type":"string"},"o":"add","f":"","pth":"/properties/properties/properties/oldestRestorableTime"}]}}}}}}}}},"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableGremlinDatabases":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2023-03-15","v":"2023-04-15","o":"replace","f":"","pth":"/CosmosDBRestorableGremlinDatabaseList/parameters/api-version"}]}}}}}}}}}