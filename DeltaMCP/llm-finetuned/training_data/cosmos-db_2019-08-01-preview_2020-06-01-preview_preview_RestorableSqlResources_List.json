{"tools_a":{},"tools_b":{"RestorableSqlResources_List":"@mcp.tool(name='RestorableSqlResources_List', description=\"Return a list of database and container combo that exist on the account at the given timestamp and location. This helps in scenarios to validate what resources exist at given timestamp and location. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.\")\ndef RestorableSqlResources_List(subscriptionId: str, location: str, instanceId: str, restoreLocation: Optional[str] = None, restoreTimestampInUtc: Optional[str] = None):\n    '''Return a list of database and container combo that exist on the account at the given timestamp and location. This helps in scenarios to validate what resources exist at given timestamp and location. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableSqlResources\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if location is None:\n        raise ValueError('Missing required path parameter: location')\n    if instanceId is None:\n        raise ValueError('Missing required path parameter: instanceId')\n    if restoreLocation is not None:\n        params['restoreLocation'] = restoreLocation\n    if restoreTimestampInUtc is not None:\n        params['restoreTimestampInUtc'] = restoreTimestampInUtc\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableSqlResources":{"ops":{"a":{"get":{"opId":"RestorableSqlResources_List","ex":{"CosmosDBRestorableSqlResourceList":{"r":"./examples/CosmosDBRestorableSqlResourceList.json"}},"desc":"Return a list of database and container combo that exist on the account at the given timestamp and location. This helps in scenarios to validate what resources exist at given timestamp and location. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.","params":[{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"},{"r":"../../preview/2020-06-01-preview/cosmos-db.json#/parameters/locationParameter"},{"r":"../../preview/2020-06-01-preview/cosmos-db.json#/parameters/instanceIdParameter"},{"r":"#/parameters/restoreLocationParameter"},{"r":"#/parameters/restoreTimestampInUtcParameter"}],"resp":{"200":{"desc":"The operation completed successfully.","sch":{"r":"#/definitions/RestorableSqlResourcesListResult"}},"default":{"desc":"Error response describing why the operation failed.","sch":{"r":"cosmos-db.json#/definitions/CloudError"}}},"page":{"nextLinkName":null}}}}}}}}