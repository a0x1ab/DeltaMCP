{"tools_a":{},"tools_b":{"BlobContainers_Update":"@mcp.tool(name='BlobContainers_Update', description=\"Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn't already exist. \")\ndef BlobContainers_Update(accountName: str, containerName: str, subscriptionId: str, resourceGroupName: str):\n    '''Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn't already exist. '''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if containerName is None:\n        raise ValueError('Missing required path parameter: containerName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    try:\n        resp = requests.patch(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers":{"ops":{"a":{"get":{"t":["BlobContainers"],"opId":"BlobContainers_List","ex":{"ListContainers":{"r":"./examples/BlobContainersList.json"}},"desc":"Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"#/parameters/AccountName"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"200":{"desc":"OK -- List Container operation completed successfully.","sch":{"r":"#/definitions/ListContainerItems"}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}":{"ops":{"a":{"patch":{"t":["BlobContainers"],"opId":"BlobContainers_Update","ex":{"UpdateContainers":{"r":"./examples/BlobContainersPatch.json"}},"desc":"Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn't already exist. ","params":[{"r":"./storage.json#/parameters/ResourceGroupName"},{"r":"#/parameters/AccountName"},{"r":"#/parameters/ContainerName"},{"name":"blobContainer","in":"body","required":true,"sch":{"r":"#/definitions/BlobContainer"},"desc":"Properties to update for the blob container."},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"}],"resp":{"200":{"desc":"OK -- Update Container operation completed successfully.","sch":{"r":"#/definitions/BlobContainer","desc":"Properties of the updated blob container."}}}}}}}}}}