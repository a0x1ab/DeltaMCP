{"tools_a":{"LiveToken_Get":"@mcp.tool(name='LiveToken_Get', description=\"**Gets an access token for live metrics stream data.**\")\ndef LiveToken_Get(resourceUri: str):\n    '''**Gets an access token for live metrics stream data.**'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/{resourceUri}/providers/Microsoft.Insights/generatelivetoken\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if resourceUri is None:\n        raise ValueError('Missing required path parameter: resourceUri')\n    try:\n        resp = requests.post(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{},"p":{"d":{"/{resourceUri}/providers/Microsoft.Insights/generatelivetoken":{"ops":{"d":{"post":{"t":["LiveToken"],"opId":"LiveToken_Get","desc":"**Gets an access token for live metrics stream data.**","params":[{"r":"#/parameters/ResourceUriParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"}],"resp":{"200":{"desc":"Successful response containing the live metrics stream token.","sch":{"r":"#/definitions/LiveTokenResponse"},"examples":{"application/json":{"liveToken":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"}}},"default":{"desc":"Error response describing why the operation failed.","sch":{"r":"../../preview/2020-03-01-preview/componentLinkedStorageAccounts_API.json#/definitions/ErrorResponseLinkedStorage"}}},"ex":{"Get live token for resource":{"r":"./examples/LiveTokenGet.json"}}}}}}}}}