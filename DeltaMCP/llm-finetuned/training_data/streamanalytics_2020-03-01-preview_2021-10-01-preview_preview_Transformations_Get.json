{"tools_a":{},"tools_b":{"Transformations_Get":"@mcp.tool(name='Transformations_Get', description=\"Gets details about the specified transformation.\")\ndef Transformations_Get(transformationName: str, subscriptionId: str, resourceGroupName: str, jobName: str):\n    '''Gets details about the specified transformation.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/transformations/{transformationName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if transformationName is None:\n        raise ValueError('Missing required path parameter: transformationName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if jobName is None:\n        raise ValueError('Missing required path parameter: jobName')\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/transformations/{transformationName}":{"ops":{"a":{"get":{"t":["Transformations"],"opId":"Transformations_Get","desc":"Gets details about the specified transformation.","ex":{"Get a transformation":{"r":"./examples/Transformation_Get.json"}},"params":[{"r":"../../common/v1/definitions.json#/parameters/ApiVersionParameter"},{"r":"../../common/v1/definitions.json#/parameters/SubscriptionIdParameter"},{"r":"../../common/v1/definitions.json#/parameters/ResourceGroupNameParameter"},{"r":"../../common/v1/definitions.json#/parameters/StreamingJobNameParameter"},{"r":"#/parameters/TransformationNameParameter"}],"resp":{"200":{"desc":"Successfully retrieved the specified transformation.","sch":{"r":"#/definitions/Transformation"},"headers":{"ETag":{"desc":"The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.","type":"string"}}},"default":{"desc":"Error.","sch":{"r":"../../common/v1/definitions.json#/definitions/Error"}}}}}}}}}}