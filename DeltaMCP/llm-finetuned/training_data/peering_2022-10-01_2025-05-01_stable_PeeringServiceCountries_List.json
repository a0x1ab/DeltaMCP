{"tools_a":{"PeeringServiceCountries_List":"@mcp.tool(name='PeeringServiceCountries_List', description=\"Lists all of the available countries for peering service.\")\ndef PeeringServiceCountries_List(subscriptionId: str, api_version: Optional[str] = None):\n    '''Lists all of the available countries for peering service.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServiceCountries\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"PeeringServiceCountries_List":"@mcp.tool(name='PeeringServiceCountries_List', description=\"Lists all of the available countries for peering service.\")\ndef PeeringServiceCountries_List(subscriptionId: str, api_version: Optional[str] = None):\n    '''Lists all of the available countries for peering service.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServiceCountries\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServiceCountries":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2022-10-01","v":"2025-05-01","o":"replace","f":"","pth":"/List peering service countries/parameters/api-version"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":[],"o":"add","f":"","pth":"/properties/value/x-ms-identifiers"}]}}}}}}}}},"/subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerings":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2022-10-01","v":"2025-05-01","o":"replace","f":"","pth":"/List peerings in a subscription/parameters/api-version"},{"ov":null,"v":[{"azureRegion":"eastus","endpoint":"192.168.0.1","prefixesToAccesslist":["104.44.0.0/28"],"protocol":"ICMP"}],"o":"add","f":"","pth":"/List peerings in a subscription/responses/200/body/value/0/properties/connectivityProbes"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"The connectivity probes associated with the peering.","items":{"desc":"Represents a connectivity probe, a configuration peers can add to direct and exchange peerings to create ping tests. These ping\r\ntests will allow us to generate availability, jitter, and latency data for traffic (using ICMP or TCP) from Azure to an endpoint\r\nIP address given by the customer. This data will be emitted such that the peer can view these metrics in the Azure portal in the\r\nConnectivity probe blade of their peering.","prop":{"azureRegion":{"desc":"The Azure region where traffic will originate from for the connectivity probe.","type":"string","x-ms-mutability":["read","create"]},"endpoint":{"desc":"The endpoint IP address where traffic will be sent to from Azure for the connectivity probe.","type":"string","x-ms-mutability":["read","create"]},"prefixesToAccesslist":{"desc":"Set to contain the prefixes that agents in Azure will send traffic from. For peers to allow into their\r\nnetwork the connectivity probe traffic can reach their endpoint for the connectivity probe.","items":{"type":"string"},"readOnly":true,"type":"array","x-ms-identifiers":[]},"protocol":{"desc":"The protocol of the traffic that will be sent for the connectivity probe.","enum":["None","ICMP","TCP"],"type":"string","x-ms-enum":{"modelAsString":true,"name":"protocol"}}},"type":"object"},"type":"array","x-ms-identifiers":[]},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/connectivityProbes"},{"ov":null,"v":"ExternalBlocker","o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/direct/properties/connections/items/properties/connectionState/enum/-"},{"ov":null,"v":"PeerProp","o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/direct/properties/directPeeringType/enum/-"},{"ov":null,"v":"ExternalBlocker","o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/exchange/properties/connections/items/properties/connectionState/enum/-"},{"ov":null,"v":"Canceled","o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/provisioningState/enum/-"},{"ov":null,"v":[],"o":"add","f":"","pth":"/properties/value/x-ms-identifiers"}]}}}}}}}}}}}}