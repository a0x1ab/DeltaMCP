{"tools_a":{"Pools_Update":"@mcp.tool(name='Pools_Update', description=\"Update a capacity pool: Patch the specified capacity pool\")\ndef Pools_Update(subscriptionId: str, resourceGroupName: str, accountName: str, poolName: str, api_version: Optional[str] = None):\n    '''Patch the specified capacity pool'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if poolName is None:\n        raise ValueError('Missing required path parameter: poolName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.patch(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"Pools_Update":"@mcp.tool(name='Pools_Update', description=\"Update a capacity pool: Patch the specified capacity pool\")\ndef Pools_Update(subscriptionId: str, resourceGroupName: str, accountName: str, poolName: str):\n    '''Patch the specified capacity pool'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if poolName is None:\n        raise ValueError('Missing required path parameter: poolName')\n    try:\n        resp = requests.patch(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}":{"ops":{"m":{"PATCH":{"ext":{"m":{"ex":[{"ov":"2021-02-01","v":"2021-04-01","o":"replace","f":"","pth":"/Accounts_Update/parameters/api-version"}]}},"params":{"m":{"body":{"body":{"sch":{"prop":{"m":{"prop":{"prop":{"m":{"activeDirectories":{"items":{"prop":{"a":["administrators"]}}}}}}}}}}},"query":{"api-version":{"ext":{"a":["minLength"],"d":["default"]},"desc":{"f":"Version of the API to be used with the client request.","to":"The API version to use for this operation."}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"A unique read-only string that changes whenever the resource is updated.","readOnly":true,"type":"string"},"o":"add","f":"","pth":"/properties/etag"},{"ov":null,"v":{"desc":"Users to be added to the Built-in Administrators active directory group. A list of unique usernames without domain specifier","example":["user1","user2"],"items":{"maxLength":255,"minLength":1,"type":"string"},"type":"array"},"o":"add","f":"","pth":"/properties/properties/properties/activeDirectories/items/properties/administrators"}]}}},"202":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"A unique read-only string that changes whenever the resource is updated.","readOnly":true,"type":"string"},"o":"add","f":"","pth":"/properties/etag"},{"ov":null,"v":{"desc":"Users to be added to the Built-in Administrators active directory group. A list of unique usernames without domain specifier","example":["user1","user2"],"items":{"maxLength":255,"minLength":1,"type":"string"},"type":"array"},"o":"add","f":"","pth":"/properties/properties/properties/activeDirectories/items/properties/administrators"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}":{"ops":{"m":{"PATCH":{"ext":{"m":{"ex":[{"ov":"2021-02-01","v":"2021-04-01","o":"replace","f":"","pth":"/Pools_Update/parameters/api-version"}]}},"params":{"m":{"query":{"api-version":{"ext":{"a":["minLength"],"d":["default"]},"desc":{"f":"Version of the API to be used with the client request.","to":"The API version to use for this operation."}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"A unique read-only string that changes whenever the resource is updated.","readOnly":true,"type":"string"},"o":"add","f":"","pth":"/properties/etag"},{"ov":null,"v":{"default":false,"desc":"If enabled (true) the pool can contain cool Access enabled volumes.","example":false,"type":"boolean"},"o":"add","f":"","pth":"/properties/properties/properties/coolAccess"},{"ov":null,"v":{"default":"Single","desc":"Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool.","enum":["Single","Double"],"example":"Single","title":"encryptionType","type":"string","x-ms-enum":{"modelAsString":true,"name":"encryptionType","values":[{"desc":"EncryptionType Single, volumes will use single encryption at rest","v":"Single"},{"desc":"EncryptionType Double, volumes will use double encryption at rest","v":"Double"}]},"x-ms-mutability":["read","create"],"x-nullable":true},"o":"add","f":"","pth":"/properties/properties/properties/encryptionType"}]}}}}}}}}}}}}