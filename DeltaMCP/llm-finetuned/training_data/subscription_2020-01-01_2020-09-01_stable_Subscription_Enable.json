{"tools_a":{"Subscription_Enable":"@mcp.tool(name='Subscription_Enable', description=\"The operation to enable a subscription\")\ndef Subscription_Enable(subscriptionId: str, api_version: Optional[str] = None):\n    '''The operation to enable a subscription'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/enable\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.post(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"Subscription_Enable":"@mcp.tool(name='Subscription_Enable', description=\"The operation to enable a subscription\")\ndef Subscription_Enable(subscriptionId: str, api_version: Optional[str] = None):\n    '''The operation to enable a subscription'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/enable\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.post(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/enable":{"ops":{"m":{"POST":{"ext":{"m":{"ex":[{"ov":"2020-01-01","v":"2020-09-01","o":"replace","f":"","pth":"/enableSubscription/parameters/api-version"},{"ov":null,"v":"7948bcee-488c-47ce-941c-38e20ede803d","o":"add","f":"","pth":"/enableSubscription/responses/200/body/subscriptionId"},{"ov":"7948bcee-488c-47ce-941c-38e20ede803d","v":null,"o":"remove","f":"","pth":"/enableSubscription/responses/200/body/value"}]}},"t":{"a":["Subscription"]},"params":{"m":{"query":{"api-version":{"desc":{"f":"Version of the API to be used with the client request. Current version is 2020-01-01","to":"Version of the API to be used with the client request. Current version is 2020-09-01"}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"The ID of the subscriptions that is being enabled","readOnly":true,"type":"string"},"o":"add","f":"","pth":"/properties/subscriptionId"},{"ov":{"desc":"The ID of the subscriptions that is being enabled","readOnly":true,"type":"string"},"v":null,"o":"remove","f":"","pth":"/properties/value"}]}}},"default":{"ext":{"m":{"sch":[{"ov":"Describes the format of Error response.","v":"Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message.","o":"replace","f":"","pth":"/description"},{"ov":null,"v":{"desc":"Describes the format of Error response.","prop":{"code":{"desc":"Error code","type":"string"},"message":{"desc":"Error message indicating why the operation failed.","type":"string"}},"type":"object"},"o":"add","f":"","pth":"/properties/error"}]}}}}}}}}}}}}