{"tools_a":{"Accounts_List":"@mcp.tool(name='Accounts_List', description=\"Describe all NetApp Accounts in a resource group: List and describe all NetApp accounts in the resource group.\")\ndef Accounts_List(subscriptionId: str, resourceGroupName: str):\n    '''List and describe all NetApp accounts in the resource group.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"Accounts_List":"@mcp.tool(name='Accounts_List', description=\"Describe all NetApp Accounts in a resource group: List and describe all NetApp accounts in the resource group.\")\ndef Accounts_List(subscriptionId: str, resourceGroupName: str):\n    '''List and describe all NetApp accounts in the resource group.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2022-03-01","v":"2022-05-01","o":"replace","f":"","pth":"/Accounts_List/parameters/api-version"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"Identity for the resource.","prop":{"principalId":{"desc":"The principal ID of resource identity.","readOnly":true,"type":"string"},"tenantId":{"desc":"The tenant ID of resource.","readOnly":true,"type":"string"},"type":{"desc":"The identity type.","enum":["None","SystemAssigned","UserAssigned","SystemAssigned,UserAssigned"],"type":"string","x-ms-enum":{"modelAsString":true,"name":"IdentityType"}},"userAssignedIdentities":{"additionalProperties":{"desc":"UserAssignedIdentity for the resource.","prop":{"clientId":{"desc":"The client ID of the identity.","readOnly":true,"type":"string"},"principalId":{"desc":"The principal ID of the identity.","readOnly":true,"type":"string"}},"type":"object"},"desc":"Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.","type":"object"}},"required":["type"],"type":"object"},"o":"add","f":"","pth":"/properties/value/items/properties/identity"},{"ov":null,"v":{"desc":"Shows the status of disableShowmount for all volumes under the subscription, null equals false","readOnly":true,"type":"boolean","x-nullable":true},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/disableShowmount"},{"ov":null,"v":{"desc":"Identity used to authenticate with key vault.","prop":{"principalId":{"desc":"The principal ID (object ID) of the identity used to authenticate with key vault. Read-only.","readOnly":true,"type":"string"},"userAssignedIdentity":{"desc":"The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type has 'UserAssigned'. It should match key of identity.userAssignedIdentities.","type":"string"}},"type":"object"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/encryption/properties/identity"},{"ov":null,"v":"Microsoft.NetApp","o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/encryption/properties/keySource/default"},{"ov":"Encryption Key Source. Possible values are: 'Microsoft.NetApp'.","v":"The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.NetApp, Microsoft.KeyVault","o":"replace","f":"","pth":"/properties/value/items/properties/properties/properties/encryption/properties/keySource/description"},{"ov":null,"v":["Microsoft.NetApp","Microsoft.KeyVault"],"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/encryption/properties/keySource/enum"},{"ov":null,"v":{"modelAsString":true,"name":"KeySource","values":[{"desc":"Microsoft-managed key encryption","v":"Microsoft.NetApp"},{"desc":"Customer-managed key encryption","v":"Microsoft.KeyVault"}]},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/encryption/properties/keySource/x-ms-enum"},{"ov":null,"v":{"desc":"Properties of key vault.","prop":{"keyName":{"desc":"The name of KeyVault key.","type":"string"},"keyVaultId":{"desc":"UUID v4 used to identify the Azure Key Vault configuration","example":"9760acf5-4638-11e7-9bdb-020073ca7778","maxLength":36,"minLength":36,"pattern":"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$","readOnly":true,"type":"string"},"keyVaultResourceId":{"desc":"The resource ID of KeyVault.","type":"string"},"keyVaultUri":{"desc":"The Uri of KeyVault.","type":"string"},"status":{"desc":"Status of the KeyVault connection.","enum":["Created","Updating","InUse","Deleted","Error"],"readOnly":true,"type":"string","x-ms-enum":{"modelAsString":true,"name":"KeyVaultStatus","values":[{"desc":"KeyVault connection created but not in use","v":"Created"},{"desc":"KeyVault connection in use by SMB Volume","v":"InUse"},{"desc":"KeyVault connection Deleted","v":"Deleted"},{"desc":"Error with the KeyVault connection","v":"Error"},{"desc":"KeyVault connection Updating","v":"Updating"}]}}},"required":["keyVaultUri","keyName","keyVaultResourceId"],"type":"object"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/encryption/properties/keyVaultProperties"}]}}}}}}}}}}}}