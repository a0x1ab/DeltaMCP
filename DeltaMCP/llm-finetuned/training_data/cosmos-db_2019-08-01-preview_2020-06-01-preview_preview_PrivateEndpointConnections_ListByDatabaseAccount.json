{"tools_a":{"PrivateEndpointConnections_ListByDatabaseAccount":"@mcp.tool(name='PrivateEndpointConnections_ListByDatabaseAccount', description=\"List all private endpoint connections on a Cosmos DB account.\")\ndef PrivateEndpointConnections_ListByDatabaseAccount(accountName: str, subscriptionId: str, resourceGroupName: str):\n    '''List all private endpoint connections on a Cosmos DB account.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{},"p":{"d":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections":{"ops":{"d":{"get":{"t":["PrivateEndpointConnections"],"desc":"List all private endpoint connections on a Cosmos DB account.","opId":"PrivateEndpointConnections_ListByDatabaseAccount","page":{"nextLinkName":null},"params":[{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/SubscriptionIdParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ResourceGroupNameParameter"},{"r":"../../../../../common-types/resource-management/v1/types.json#/parameters/ApiVersionParameter"},{"r":"#/parameters/accountNameParameter"}],"resp":{"200":{"desc":"Successfully retrieved private endpoint connections.","sch":{"r":"#/definitions/PrivateEndpointConnectionListResult"}}},"ex":{"Gets private endpoint connection.":{"r":"./examples/CosmosDBPrivateEndpointConnectionListGet.json"}}}}}}}}}