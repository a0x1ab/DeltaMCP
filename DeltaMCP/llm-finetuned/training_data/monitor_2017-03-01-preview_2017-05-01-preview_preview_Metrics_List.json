{"tools_a":{},"tools_b":{"Metrics_List":"@mcp.tool(name='Metrics_List', description=\"**Lists the metric values for a resource**.\")\ndef Metrics_List(resourceUri: str, timespan: Optional[str] = None, interval: Optional[str] = None, metric: Optional[str] = None, aggregation: Optional[str] = None, _top: Optional[str] = None, _orderby: Optional[str] = None, _filter: Optional[str] = None, resultType: Optional[str] = None):\n    '''**Lists the metric values for a resource**.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/{resourceUri}/providers/microsoft.insights/metrics\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if resourceUri is None:\n        raise ValueError('Missing required path parameter: resourceUri')\n    if timespan is not None:\n        params['timespan'] = timespan\n    if interval is not None:\n        params['interval'] = interval\n    if metric is not None:\n        params['metric'] = metric\n    if aggregation is not None:\n        params['aggregation'] = aggregation\n    if _top is not None:\n        params['$top'] = _top\n    if _orderby is not None:\n        params['$orderby'] = _orderby\n    if _filter is not None:\n        params['$filter'] = _filter\n    if resultType is not None:\n        params['resultType'] = resultType\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/{resourceUri}/providers/microsoft.insights/metrics":{"ops":{"a":{"get":{"t":["Metrics"],"opId":"Metrics_List","desc":"**Lists the metric values for a resource**.","params":[{"r":"#/parameters/ResourceUriParameter"},{"r":"#/parameters/TimespanParameter"},{"r":"#/parameters/IntervalParameter"},{"r":"#/parameters/MetricParameter"},{"r":"#/parameters/AggregationsParameter"},{"r":"#/parameters/TopParameter"},{"r":"#/parameters/OrderByParameter"},{"name":"$filter","in":"query","type":"string","desc":"The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.","required":false},{"r":"#/parameters/ResultTypeParameter"},{"r":"../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"}],"resp":{"default":{"desc":"Error response describing why the operation failed.","sch":{"r":"#/definitions/ErrorResponse"}},"200":{"desc":"Successful request to get the list of metric values.","sch":{"r":"#/definitions/Response"},"examples":{"application/json":{"cost":0,"timespan":"2017-08-10T21:44:34Z/2017-08-10T22:44:34Z","interval":"PT1M","v":[{"id":"/subscriptions/07c0b09d-9f69-4e6e-8d05-f59f67299cb2/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/alertruleTest/providers/Microsoft.Insights/metrics/CpuTime","type":"Microsoft.Insights/metrics","name":{"v":"CpuTime","localizedValue":"CPU Time"},"displayDescription":"CPU Time","unit":"Seconds","timeseries":[{"metadatavalues":[],"data":[{"timeStamp":"2017-08-10T21:44:00Z","total":0.0},{"timeStamp":"2017-08-10T21:45:00Z","total":0.0},{"timeStamp":"2017-08-10T21:46:00Z","total":0.0},{"timeStamp":"2017-08-10T21:47:00Z","total":0.0},{"timeStamp":"2017-08-10T21:48:00Z","total":0.0},{"timeStamp":"2017-08-10T21:49:00Z","total":0.0},{"timeStamp":"2017-08-10T21:50:00Z","total":0.0}]}]}]}}}},"x-ms-odata":"#/definitions/MetadataValue","ex":{"Get Metric for data":{"r":"./examples/GetMetric.json"},"Get Metric for metadata":{"r":"./examples/GetMetricMetadata.json"}}}}}}}}}