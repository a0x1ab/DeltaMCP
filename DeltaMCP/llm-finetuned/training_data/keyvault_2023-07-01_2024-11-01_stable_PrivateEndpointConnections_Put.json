{"tools_a":{"PrivateEndpointConnections_Put":"@mcp.tool(name='PrivateEndpointConnections_Put', description=\"Updates the specified private endpoint connection associated with the key vault.\")\ndef PrivateEndpointConnections_Put(subscriptionId: str, resourceGroupName: str, vaultName: str, privateEndpointConnectionName: str, api_version: Optional[str] = None):\n    '''Updates the specified private endpoint connection associated with the key vault.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/privateEndpointConnections/{privateEndpointConnectionName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if vaultName is None:\n        raise ValueError('Missing required path parameter: vaultName')\n    if privateEndpointConnectionName is None:\n        raise ValueError('Missing required path parameter: privateEndpointConnectionName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.put(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"PrivateEndpointConnections_Put":"@mcp.tool(name='PrivateEndpointConnections_Put', description=\"Updates the specified private endpoint connection associated with the key vault.\")\ndef PrivateEndpointConnections_Put(subscriptionId: str, resourceGroupName: str, vaultName: str, privateEndpointConnectionName: str, api_version: Optional[str] = None):\n    '''Updates the specified private endpoint connection associated with the key vault.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/privateEndpointConnections/{privateEndpointConnectionName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if vaultName is None:\n        raise ValueError('Missing required path parameter: vaultName')\n    if privateEndpointConnectionName is None:\n        raise ValueError('Missing required path parameter: privateEndpointConnectionName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.put(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}":{"ops":{"m":{"PUT":{"ext":{"m":{"ex":[{"ov":"2023-07-01","v":"2024-11-01","o":"replace","f":"","pth":"/Create a new vault or update an existing vault/parameters/api-version"},{"ov":"2023-07-01","v":"2024-11-01","o":"replace","f":"","pth":"/Create or update a vault with network acls/parameters/api-version"}]}},"params":{"m":{"body":{"params":{"sch":{"prop":{"m":{"prop":{"prop":{"m":{"enabledForDeployment":{"default":{"f":null,"to":false}},"enabledForDiskEncryption":{"default":{"f":null,"to":false}},"enabledForTemplateDeployment":{"default":{"f":null,"to":false}}}}}}}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":false,"o":"add","f":"","pth":"/properties/properties/properties/enabledForDeployment/default"},{"ov":null,"v":false,"o":"add","f":"","pth":"/properties/properties/properties/enabledForDiskEncryption/default"},{"ov":null,"v":false,"o":"add","f":"","pth":"/properties/properties/properties/enabledForTemplateDeployment/default"}]}}},"201":{"ext":{"m":{"sch":[{"ov":null,"v":false,"o":"add","f":"","pth":"/properties/properties/properties/enabledForDeployment/default"},{"ov":null,"v":false,"o":"add","f":"","pth":"/properties/properties/properties/enabledForDiskEncryption/default"},{"ov":null,"v":false,"o":"add","f":"","pth":"/properties/properties/properties/enabledForTemplateDeployment/default"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/privateEndpointConnections/{privateEndpointConnectionName}":{"ops":{"m":{"PUT":{"ext":{"m":{"ex":[{"ov":"2023-07-01","v":"2024-11-01","o":"replace","f":"","pth":"/KeyVaultPutPrivateEndpointConnection/parameters/api-version"}]}}}}}}}}}