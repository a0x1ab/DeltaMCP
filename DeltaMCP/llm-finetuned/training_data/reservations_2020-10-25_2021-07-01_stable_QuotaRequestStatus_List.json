{"tools_a":{"QuotaRequestStatus_List":"@mcp.tool(name='QuotaRequestStatus_List', description=\"For the specified Azure region (location), subscription, and resource provider, get the history of the quota requests for the past year. To select specific quota requests, use the oData filter.\")\ndef QuotaRequestStatus_List(subscriptionId: str, providerId: str, location: str, api_version: Optional[str] = None, _filter: Optional[str] = None, _top: Optional[str] = None, _skiptoken: Optional[str] = None):\n    '''For the specified Azure region (location), subscription, and resource provider, get the history of the quota requests for the past year. To select specific quota requests, use the oData filter.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimitsRequests\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if providerId is None:\n        raise ValueError('Missing required path parameter: providerId')\n    if location is None:\n        raise ValueError('Missing required path parameter: location')\n    if api_version is not None:\n        params['api-version'] = api_version\n    if _filter is not None:\n        params['$filter'] = _filter\n    if _top is not None:\n        params['$top'] = _top\n    if _skiptoken is not None:\n        params['$skiptoken'] = _skiptoken\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{},"p":{"d":{"/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimitsRequests":{"ops":{"d":{"get":{"t":["QuotaRequests"],"ex":{"QuotaRequestHistory":{"r":"./examples/getQuotaRequestsHistory.json"}},"desc":"For the specified Azure region (location), subscription, and resource provider, get the history of the quota requests for the past year. To select specific quota requests, use the oData filter.","opId":"QuotaRequestStatus_List","params":[{"r":"#/parameters/SubscriptionIdInParameters"},{"r":"#/parameters/ApiVersionParameter"},{"r":"#/parameters/ProviderIdInParameters"},{"r":"#/parameters/LocationIdInParameters"},{"name":"$filter","in":"query","required":false,"type":"string","desc":"| Field | Supported operators |\r\n|---------------------|------------------------|\r\n|requestSubmitTime | ge, le, eq, gt, lt |"},{"r":"#/parameters/TopQueryParameter"},{"r":"#/parameters/SkipTokenParameter"}],"resp":{"200":{"desc":"Ok. Returns details and status of the quota request.","sch":{"r":"#/definitions/QuotaRequestDetailsList"}},"default":{"desc":"Error description in the response.","sch":{"r":"#/definitions/ExceptionResponse"}}},"page":{"nextLinkName":"nextLink"}}}}},"/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits":{"ops":{"d":{"get":{"t":["QuotaInformation"],"desc":"Gets a list of current quotas (service limits) and usage for all resources. The response from the list quota operation can be leveraged to request quota updates.","opId":"Quota_List","ex":{"Quotas_listUsagesForCompute":{"r":"./examples/getComputeUsages.json"},"Quotas_listUsagesMachineLearningServices":{"r":"./examples/getMachineLearningServicesUsages.json"}},"params":[{"r":"#/parameters/SubscriptionIdInParameters"},{"r":"#/parameters/ProviderIdInParameters"},{"r":"#/parameters/LocationIdInParameters"},{"r":"#/parameters/ApiVersionParameter"}],"resp":{"200":{"desc":"OK. Returns the paginated quota information.","sch":{"r":"#/definitions/QuotaLimits"},"headers":{"ETag":{"desc":"Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.","type":"string"}}},"default":{"desc":"Error description in the response.","sch":{"r":"#/definitions/ExceptionResponse"}}},"page":{"nextLinkName":"nextLink"}}}}}}}}