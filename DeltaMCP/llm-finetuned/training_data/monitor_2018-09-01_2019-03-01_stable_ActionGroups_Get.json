{"tools_a":{"ActionGroups_Get":"@mcp.tool(name='ActionGroups_Get', description=\"Get an action group.\")\ndef ActionGroups_Get(actionGroupName: str, subscriptionId: str, resourceGroupName: str):\n    '''Get an action group.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if actionGroupName is None:\n        raise ValueError('Missing required path parameter: actionGroupName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"ActionGroups_Get":"@mcp.tool(name='ActionGroups_Get', description=\"Get an action group.\")\ndef ActionGroups_Get(actionGroupName: str, subscriptionId: str, resourceGroupName: str):\n    '''Get an action group.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if actionGroupName is None:\n        raise ValueError('Missing required path parameter: actionGroupName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2019-03-01","v":"2019-06-01","o":"replace","f":"","pth":"/List action groups/parameters/api-version"},{"ov":null,"v":[],"o":"add","f":"","pth":"/List action groups/responses/200/body/value/0/properties/armRoleReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/List action groups/responses/200/body/value/0/properties/automationRunbookReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/List action groups/responses/200/body/value/0/properties/azureAppPushReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/List action groups/responses/200/body/value/0/properties/azureFunctionReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/List action groups/responses/200/body/value/0/properties/itsmReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/List action groups/responses/200/body/value/0/properties/logicAppReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/List action groups/responses/200/body/value/0/properties/voiceReceivers"},{"ov":null,"v":{"identifierUri":"http://someidentifier/d7811ba3-7996-4a93-99b6-6b2f3f355f8a","name":"Sample webhook 2","objectId":"d3bb868c-fe44-452c-aa26-769a6538c808","serviceUri":"http://www.example.com/webhook2","tenantId":"68a4459a-ccb8-493c-b9da-dd30457d1b84","useAadAuth":true,"useCommonAlertSchema":true},"o":"add","f":"","pth":"/List action groups/responses/200/body/value/0/properties/webhookReceivers/-"},{"ov":null,"v":[],"o":"add","f":"","pth":"/List action groups/responses/200/body/value/1/properties/armRoleReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/List action groups/responses/200/body/value/1/properties/automationRunbookReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/List action groups/responses/200/body/value/1/properties/azureAppPushReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/List action groups/responses/200/body/value/1/properties/azureFunctionReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/List action groups/responses/200/body/value/1/properties/itsmReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/List action groups/responses/200/body/value/1/properties/logicAppReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/List action groups/responses/200/body/value/1/properties/voiceReceivers"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"Indicates the identifier uri for aad auth.","type":"string"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/webhookReceivers/items/properties/identifierUri"},{"ov":null,"v":{"desc":"Indicates the webhook app object Id for aad auth.","type":"string"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/webhookReceivers/items/properties/objectId"},{"ov":null,"v":{"desc":"Indicates the tenant id for aad auth.","type":"string"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/webhookReceivers/items/properties/tenantId"},{"ov":null,"v":{"default":false,"desc":"Indicates whether or not use AAD authentication.","type":"boolean"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/webhookReceivers/items/properties/useAadAuth"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2019-03-01","v":"2019-06-01","o":"replace","f":"","pth":"/Get an action group/parameters/api-version"},{"ov":null,"v":[],"o":"add","f":"","pth":"/Get an action group/responses/200/body/properties/armRoleReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/Get an action group/responses/200/body/properties/automationRunbookReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/Get an action group/responses/200/body/properties/azureAppPushReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/Get an action group/responses/200/body/properties/azureFunctionReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/Get an action group/responses/200/body/properties/itsmReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/Get an action group/responses/200/body/properties/logicAppReceivers"},{"ov":null,"v":[],"o":"add","f":"","pth":"/Get an action group/responses/200/body/properties/voiceReceivers"},{"ov":null,"v":{"identifierUri":"http://someidentifier/d7811ba3-7996-4a93-99b6-6b2f3f355f8a","name":"Sample webhook 2","objectId":"d3bb868c-fe44-452c-aa26-769a6538c808","serviceUri":"http://www.example.com/webhook2","tenantId":"68a4459a-ccb8-493c-b9da-dd30457d1b84","useAadAuth":true,"useCommonAlertSchema":true},"o":"add","f":"","pth":"/Get an action group/responses/200/body/properties/webhookReceivers/-"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"Indicates the identifier uri for aad auth.","type":"string"},"o":"add","f":"","pth":"/properties/properties/properties/webhookReceivers/items/properties/identifierUri"},{"ov":null,"v":{"desc":"Indicates the webhook app object Id for aad auth.","type":"string"},"o":"add","f":"","pth":"/properties/properties/properties/webhookReceivers/items/properties/objectId"},{"ov":null,"v":{"desc":"Indicates the tenant id for aad auth.","type":"string"},"o":"add","f":"","pth":"/properties/properties/properties/webhookReceivers/items/properties/tenantId"},{"ov":null,"v":{"default":false,"desc":"Indicates whether or not use AAD authentication.","type":"boolean"},"o":"add","f":"","pth":"/properties/properties/properties/webhookReceivers/items/properties/useAadAuth"}]}}}}}}}}}}}}