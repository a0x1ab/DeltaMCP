{"tools_a":{"MarketplaceAgreements_List":"@mcp.tool(name='MarketplaceAgreements_List', description=\"List marketplace agreements in the subscription.\")\ndef MarketplaceAgreements_List(subscriptionId: str, api_version: Optional[str] = None):\n    '''List marketplace agreements in the subscription.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"MarketplaceAgreements_List":"@mcp.tool(name='MarketplaceAgreements_List', description=\"List marketplace agreements in the subscription.\")\ndef MarketplaceAgreements_List(subscriptionId: str, api_version: Optional[str] = None):\n    '''List marketplace agreements in the subscription.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":null,"v":{"params":{"api-version":"2021-01-01","subscriptionId":"subid"},"resp":{"200":{"body":{"v":[{"id":"id1","name":"planid1","prop":{"offer":"offer1","publisher":"publisher1","signDate":"2021-05-01T08:05:53.8374396Z","state":"Active"},"type":"Microsoft.MarketplaceOrdering/agreements"},{"id":"id2","name":"planid2","prop":{"cancelDate":"2021-11-14T16:21:43.6945196Z","offer":"offer2","publisher":"publisher2","state":"Canceled"},"type":"Microsoft.MarketplaceOrdering/agreements"}]}}}},"o":"add","f":"","pth":"/ListMarketplaceTerms"},{"ov":{"params":{"api-version":"2015-06-01","subscriptionId":"subid"},"resp":{"200":{"body":{"v":[{"id":"id","name":"planid","prop":{"cancelDate":"2019-04-27T05:57:25.3013164Z","offer":"offid","publisher":"pubid","signDate":"2019-04-26T05:57:25.3013164Z","state":"Active"},"type":"Microsoft.MarketplaceOrdering/offertypes"}]}},"415":{"body":{"Message":"media type unsupported"}}}},"v":null,"o":"remove","f":"","pth":"/SetMarketplaceTerms"}]}},"resp":{"d":["415"],"m":{"200":{"ext":{"m":{"sch":[{"ov":"Represents the list of AgreementTerms objects","v":"Agreement Terms definition list","o":"replace","f":"","pth":"/description"},{"ov":"The value of the array.","v":null,"o":"remove","f":"","pth":"/properties/value/description"},{"ov":"object","v":null,"o":"remove","f":"","pth":"/properties/value/items/allOf/0/type"}]}}},"default":{"ext":{"m":{"sch":[{"ov":{"desc":"List of inner error messages indicating why the operation failed.","items":{"prop":{"code":{"desc":"Error code.","readOnly":true,"type":"string"},"message":{"desc":"Error message indicating why the operation failed.","readOnly":true,"type":"string"}},"type":"object"},"type":"array","uniqueItems":false,"x-ms-identifiers":[]},"v":null,"o":"remove","f":"","pth":"/properties/error/properties/details"},{"ov":"object","v":null,"o":"remove","f":"","pth":"/properties/error/type"}]}}}}}}}}}}}}