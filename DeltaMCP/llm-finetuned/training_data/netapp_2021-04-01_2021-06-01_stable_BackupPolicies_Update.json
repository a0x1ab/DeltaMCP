{"tools_a":{"BackupPolicies_Update":"@mcp.tool(name='BackupPolicies_Update', description=\"Patch a backup policy: Patch a backup policy for Netapp Account\")\ndef BackupPolicies_Update(subscriptionId: str, resourceGroupName: str, accountName: str, backupPolicyName: str):\n    '''Patch a backup policy for Netapp Account'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/backupPolicies/{backupPolicyName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if backupPolicyName is None:\n        raise ValueError('Missing required path parameter: backupPolicyName')\n    try:\n        resp = requests.patch(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"BackupPolicies_Update":"@mcp.tool(name='BackupPolicies_Update', description=\"Patch a backup policy: Patch a backup policy for Netapp Account\")\ndef BackupPolicies_Update(subscriptionId: str, resourceGroupName: str, accountName: str, backupPolicyName: str):\n    '''Patch a backup policy for Netapp Account'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/backupPolicies/{backupPolicyName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if backupPolicyName is None:\n        raise ValueError('Missing required path parameter: backupPolicyName')\n    try:\n        resp = requests.patch(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}":{"ops":{"m":{"PATCH":{"ext":{"m":{"ex":[{"ov":"2021-04-01","v":"2021-06-01","o":"replace","f":"","pth":"/Accounts_Update/parameters/api-version"},{"ov":"https://management.azure.com/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/providers/Microsoft.NetApp/locations/eastus/operationResults/616ee961-4042-4935-b4a0-ed6f4dae0172?api-version=2021-10-01&operationResultResponseType=Location","v":"https://management.azure.com/subscriptions/D633CC2E-722B-4AE1-B636-BBD9E4C60ED9/providers/Microsoft.NetApp/locations/eastus/operationResults/18c499e1-2a3c-441c-950e-4b456c991c18?api-version=2021-08-01&operationResultResponseType=Location","o":"replace","f":"","pth":"/Accounts_Update/responses/202/headers/Location"}]}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/backupPolicies/{backupPolicyName}":{"ops":{"m":{"PATCH":{"ext":{"m":{"ex":[{"ov":"2021-04-01","v":"2021-06-01","o":"replace","f":"","pth":"/BackupPolicies_Update/parameters/api-version"},{"ov":0,"v":null,"o":"remove","f":"","pth":"/BackupPolicies_Update/responses/200/body/properties/yearlyBackupsToKeep"},{"ov":0,"v":null,"o":"remove","f":"","pth":"/BackupPolicies_Update/responses/202/body/properties/yearlyBackupsToKeep"}]}},"params":{"m":{"body":{"body":{"sch":{"prop":{"m":{"prop":{"prop":{"d":["yearlyBackupsToKeep"],"m":{"volumeBackups":{"readOnly":{"f":false,"to":true}},"volumesAssigned":{"readOnly":{"f":false,"to":true}}}}}}}}}}}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":true,"o":"add","f":"","pth":"/properties/properties/properties/volumeBackups/readOnly"},{"ov":null,"v":true,"o":"add","f":"","pth":"/properties/properties/properties/volumesAssigned/readOnly"},{"ov":{"desc":"Yearly backups count to keep","format":"int32","type":"integer"},"v":null,"o":"remove","f":"","pth":"/properties/properties/properties/yearlyBackupsToKeep"},{"ov":{"desc":"Metadata pertaining to creation and last modification of the resource.","prop":{"createdAt":{"desc":"The timestamp of resource creation (UTC).","format":"date-time","type":"string"},"createdBy":{"desc":"The identity that created the resource.","type":"string"},"createdByType":{"desc":"The type of identity that created the resource.","enum":["User","Application","ManagedIdentity","Key"],"type":"string","x-ms-enum":{"modelAsString":true,"name":"createdByType"}},"lastModifiedAt":{"desc":"The timestamp of resource last modification (UTC)","format":"date-time","type":"string"},"lastModifiedBy":{"desc":"The identity that last modified the resource.","type":"string"},"lastModifiedByType":{"desc":"The type of identity that last modified the resource.","enum":["User","Application","ManagedIdentity","Key"],"type":"string","x-ms-enum":{"modelAsString":true,"name":"createdByType"}}},"readOnly":true,"type":"object"},"v":null,"o":"remove","f":"","pth":"/properties/systemData"}]}}},"202":{"ext":{"m":{"sch":[{"ov":null,"v":true,"o":"add","f":"","pth":"/properties/properties/properties/volumeBackups/readOnly"},{"ov":null,"v":true,"o":"add","f":"","pth":"/properties/properties/properties/volumesAssigned/readOnly"},{"ov":{"desc":"Yearly backups count to keep","format":"int32","type":"integer"},"v":null,"o":"remove","f":"","pth":"/properties/properties/properties/yearlyBackupsToKeep"},{"ov":{"desc":"Metadata pertaining to creation and last modification of the resource.","prop":{"createdAt":{"desc":"The timestamp of resource creation (UTC).","format":"date-time","type":"string"},"createdBy":{"desc":"The identity that created the resource.","type":"string"},"createdByType":{"desc":"The type of identity that created the resource.","enum":["User","Application","ManagedIdentity","Key"],"type":"string","x-ms-enum":{"modelAsString":true,"name":"createdByType"}},"lastModifiedAt":{"desc":"The timestamp of resource last modification (UTC)","format":"date-time","type":"string"},"lastModifiedBy":{"desc":"The identity that last modified the resource.","type":"string"},"lastModifiedByType":{"desc":"The type of identity that last modified the resource.","enum":["User","Application","ManagedIdentity","Key"],"type":"string","x-ms-enum":{"modelAsString":true,"name":"createdByType"}}},"readOnly":true,"type":"object"},"v":null,"o":"remove","f":"","pth":"/properties/systemData"}]}}}}}}}}}}}}