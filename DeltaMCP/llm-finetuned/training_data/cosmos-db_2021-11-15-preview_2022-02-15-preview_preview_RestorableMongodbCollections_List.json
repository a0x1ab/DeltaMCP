{"tools_a":{"RestorableMongodbCollections_List":"@mcp.tool(name='RestorableMongodbCollections_List', description=\"Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB collections under a specific database.  This helps in scenario where container was accidentally deleted.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\")\ndef RestorableMongodbCollections_List(location: str, instanceId: str, subscriptionId: str, restorableMongodbDatabaseRid: Optional[str] = None, startTime: Optional[str] = None, endTime: Optional[str] = None):\n    '''Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB collections under a specific database.  This helps in scenario where container was accidentally deleted.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableMongodbCollections\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if location is None:\n        raise ValueError('Missing required path parameter: location')\n    if instanceId is None:\n        raise ValueError('Missing required path parameter: instanceId')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if restorableMongodbDatabaseRid is not None:\n        params['restorableMongodbDatabaseRid'] = restorableMongodbDatabaseRid\n    if startTime is not None:\n        params['startTime'] = startTime\n    if endTime is not None:\n        params['endTime'] = endTime\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"RestorableMongodbCollections_List":"@mcp.tool(name='RestorableMongodbCollections_List', description=\"Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB collections under a specific database.  This helps in scenario where container was accidentally deleted.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\")\ndef RestorableMongodbCollections_List(location: str, instanceId: str, subscriptionId: str, restorableMongodbDatabaseRid: Optional[str] = None, startTime: Optional[str] = None, endTime: Optional[str] = None):\n    '''Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB collections under a specific database.  This helps in scenario where container was accidentally deleted.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableMongodbCollections\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if location is None:\n        raise ValueError('Missing required path parameter: location')\n    if instanceId is None:\n        raise ValueError('Missing required path parameter: instanceId')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if restorableMongodbDatabaseRid is not None:\n        params['restorableMongodbDatabaseRid'] = restorableMongodbDatabaseRid\n    if startTime is not None:\n        params['startTime'] = startTime\n    if endTime is not None:\n        params['endTime'] = endTime\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2021-11-15-preview","v":"2022-02-15-preview","o":"replace","f":"","pth":"/CosmosDBRestorableDatabaseAccountList/parameters/api-version"},{"ov":null,"v":"2021-03-01T22:05:09Z","o":"add","f":"","pth":"/CosmosDBRestorableDatabaseAccountList/responses/200/body/value/0/properties/oldestRestorableTime"},{"ov":null,"v":"2021-03-01T22:05:09Z","o":"add","f":"","pth":"/CosmosDBRestorableDatabaseAccountList/responses/200/body/value/1/properties/oldestRestorableTime"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"The least recent time at which the database account can be restored to (ISO-8601 format).","format":"date-time","type":"string"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/oldestRestorableTime"}]}}}}}}}}},"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2021-11-15-preview","v":"2022-02-15-preview","o":"replace","f":"","pth":"/CosmosDBRestorableDatabaseAccountGet/parameters/api-version"},{"ov":null,"v":"2021-03-01T22:05:09Z","o":"add","f":"","pth":"/CosmosDBRestorableDatabaseAccountGet/responses/200/body/properties/oldestRestorableTime"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"The least recent time at which the database account can be restored to (ISO-8601 format).","format":"date-time","type":"string"},"o":"add","f":"","pth":"/properties/properties/properties/oldestRestorableTime"}]}}}}}}}}},"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableMongodbCollections":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2021-11-15-preview","v":"2022-02-15-preview","o":"replace","f":"","pth":"/CosmosDBRestorableMongodbCollectionList/parameters/api-version"}]}}}}}}}}}