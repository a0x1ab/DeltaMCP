{"tools_a":{},"tools_b":{"Quota_Update":"@mcp.tool(name='Quota_Update', description=\"Update the quota (service limits) of this resource to the requested value.\\r\\n  \\u2022 To get the quota information for specific resource, send a GET request.\\r\\n  \\u2022 To increase the quota, update the limit field from the GET response to a new value.\\r\\n  \\u2022 To update the quota value, submit the JSON response to the quota request API to update the quota.\\r\\n  \\u2022 To update the quota. use the PATCH operation.\")\ndef Quota_Update(subscriptionId: str, providerId: str, location: str, resourceName: str, api_version: Optional[str] = None):\n    '''Update the quota (service limits) of this resource to the requested value.    • To get the quota information for specific resource, send a GET request.    • To increase the quota, update the limit field from the GET response to a new value.    • To update the quota value, submit the JSON response to the quota request API to update the quota.    • To update the quota. use the PATCH operation.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits/{resourceName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if providerId is None:\n        raise ValueError('Missing required path parameter: providerId')\n    if location is None:\n        raise ValueError('Missing required path parameter: location')\n    if resourceName is None:\n        raise ValueError('Missing required path parameter: resourceName')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.patch(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"a":{"/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits":{"ops":{"a":{"get":{"t":["QuotaInformation"],"desc":"Gets a list of current quotas (service limits) and usage for all resources. The response from the list quota operation can be leveraged to request quota updates.","opId":"Quota_List","ex":{"Quotas_listUsagesForCompute":{"r":"./examples/getComputeUsages.json"},"Quotas_listUsagesMachineLearningServices":{"r":"./examples/getMachineLearningServicesUsages.json"}},"params":[{"r":"#/parameters/SubscriptionIdInParameters"},{"r":"#/parameters/ProviderIdInParameters"},{"r":"#/parameters/LocationIdInParameters"},{"r":"#/parameters/ApiVersionParameter"}],"resp":{"200":{"desc":"OK. Returns the paginated quota information.","sch":{"r":"#/definitions/QuotaLimits"},"headers":{"ETag":{"desc":"Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.","type":"string"}}},"default":{"desc":"Error description in the response.","sch":{"r":"#/definitions/ExceptionResponse"}}},"page":{"nextLinkName":"nextLink"}}}}},"/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits/{resourceName}":{"ops":{"a":{"patch":{"t":["QuotaInformation"],"desc":"Update the quota (service limits) of this resource to the requested value.\r\n  • To get the quota information for specific resource, send a GET request.\r\n  • To increase the quota, update the limit field from the GET response to a new value.\r\n  • To update the quota value, submit the JSON response to the quota request API to update the quota.\r\n  • To update the quota. use the PATCH operation.","opId":"Quota_Update","ex":{"Quotas_Request_PatchForCompute":{"r":"./examples/patchComputeQuotaRequest.json"}},"lro":true,"x-ms-long-running-operation-options":{"final-state-via":"original-uri"},"params":[{"r":"#/parameters/SubscriptionIdInParameters"},{"r":"#/parameters/ProviderIdInParameters"},{"r":"#/parameters/LocationIdInParameters"},{"r":"#/parameters/ResourceNameInParameters"},{"r":"#/parameters/ApiVersionParameter"},{"name":"createQuotaRequest","in":"body","desc":"Payload for the quota request.","required":true,"sch":{"r":"#/definitions/CurrentQuotaLimitBase"}}],"resp":{"200":{"desc":"OK. Returns details of the quota request.","sch":{"r":"#/definitions/CurrentQuotaLimitBase"}},"201":{"desc":"The request is accepted and is being processed. Use the requestId parameter to check the status.","sch":{"r":"#/definitions/QuotaRequestSubmitResponse201"}},"default":{"desc":"Error description in the response.","sch":{"r":"#/definitions/ExceptionResponse"}}}}}}}}}}