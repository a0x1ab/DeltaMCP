{"tools_a":{"LegacyPeerings_List":"@mcp.tool(name='LegacyPeerings_List', description=\"Lists all of the legacy peerings under the given subscription matching the specified kind and location.\")\ndef LegacyPeerings_List(subscriptionId: str, peeringLocation: Optional[str] = None, kind: Optional[str] = None, api_version: Optional[str] = None):\n    '''Lists all of the legacy peerings under the given subscription matching the specified kind and location.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Peering/legacyPeerings\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if peeringLocation is not None:\n        params['peeringLocation'] = peeringLocation\n    if kind is not None:\n        params['kind'] = kind\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"LegacyPeerings_List":"@mcp.tool(name='LegacyPeerings_List', description=\"Lists all of the legacy peerings under the given subscription matching the specified kind and location.\")\ndef LegacyPeerings_List(subscriptionId: str, peeringLocation: Optional[str] = None, kind: Optional[str] = None, asn: Optional[str] = None, api_version: Optional[str] = None):\n    '''Lists all of the legacy peerings under the given subscription matching the specified kind and location.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Peering/legacyPeerings\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if peeringLocation is not None:\n        params['peeringLocation'] = peeringLocation\n    if kind is not None:\n        params['kind'] = kind\n    if asn is not None:\n        params['asn'] = asn\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/providers/Microsoft.Peering/legacyPeerings":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2019-09-01-preview","v":"2020-01-01-preview","o":"replace","f":"","pth":"/List legacy peerings/parameters/api-version"},{"ov":null,"v":65000,"o":"add","f":"","pth":"/List legacy peerings/parameters/asn"},{"ov":"/subscriptions/subId/providers/Microsoft.Peering/peerings/MyPeering","v":"/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.Peering/peerings/myPeering","o":"replace","f":"","pth":"/List legacy peerings/responses/200/body/value/0/id"},{"ov":"MyPeering","v":"peeringName","o":"replace","f":"","pth":"/List legacy peerings/responses/200/body/value/0/name"},{"ov":"/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1","v":"65000","o":"replace","f":"","pth":"/List legacy peerings/responses/200/body/value/0/properties/exchange/peerAsn/id"}]}},"params":{"a":{"query":["asn"]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":true,"v":null,"o":"remove","f":"","pth":"/properties/value/items/properties/properties/properties/direct/properties/connections/items/properties/bgpSession/properties/microsoftSessionIPv4Address/readOnly"},{"ov":true,"v":null,"o":"remove","f":"","pth":"/properties/value/items/properties/properties/properties/direct/properties/connections/items/properties/bgpSession/properties/microsoftSessionIPv6Address/readOnly"},{"ov":null,"v":"Ix","o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/direct/properties/directPeeringType/enum/-"},{"ov":null,"v":"IxRs","o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/direct/properties/directPeeringType/enum/-"},{"ov":true,"v":null,"o":"remove","f":"","pth":"/properties/value/items/properties/properties/properties/exchange/properties/connections/items/properties/bgpSession/properties/microsoftSessionIPv4Address/readOnly"},{"ov":true,"v":null,"o":"remove","f":"","pth":"/properties/value/items/properties/properties/properties/exchange/properties/connections/items/properties/bgpSession/properties/microsoftSessionIPv6Address/readOnly"},{"ov":["Basic_Exchange_Free","Basic_Direct_Free","Premium_Exchange_Metered","Premium_Direct_Free","Premium_Direct_Metered","Premium_Direct_Unlimited"],"v":null,"o":"remove","f":"","pth":"/properties/value/items/properties/sku/properties/name/enum"},{"ov":{"modelAsString":true,"name":"name"},"v":null,"o":"remove","f":"","pth":"/properties/value/items/properties/sku/properties/name/x-ms-enum"}]}}}}}}}}}}}}