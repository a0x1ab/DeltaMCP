{"tools_a":{"PeeringServices_ListByResourceGroup":"@mcp.tool(name='PeeringServices_ListByResourceGroup', description=\"Lists all of the peering services under the given subscription and resource group.\")\ndef PeeringServices_ListByResourceGroup(resourceGroupName: str, subscriptionId: str, api_version: Optional[str] = None):\n    '''Lists all of the peering services under the given subscription and resource group.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"PeeringServices_ListByResourceGroup":"@mcp.tool(name='PeeringServices_ListByResourceGroup', description=\"Lists all of the peering services under the given subscription and resource group.\")\ndef PeeringServices_ListByResourceGroup(resourceGroupName: str, subscriptionId: str, api_version: Optional[str] = None):\n    '''Lists all of the peering services under the given subscription and resource group.'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if api_version is not None:\n        params['api-version'] = api_version\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2021-01-01","v":"2021-06-01","o":"replace","f":"","pth":"/List peering services in a resource group/parameters/api-version"},{"ov":null,"v":{"connectedAgents":["Agent1","Agent2"],"key":"key","workspaceID":"00000000-0000-0000-0000-000000000000"},"o":"add","f":"","pth":"/List peering services in a resource group/responses/200/body/value/0/properties/logAnalyticsWorkspaceProperties"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":{"desc":"The properties that define a Log Analytics Workspace.","prop":{"connectedAgents":{"desc":"The list of connected agents.","items":{"type":"string"},"readOnly":true,"type":"array"},"key":{"desc":"The Workspace Key.","readOnly":true,"type":"string"},"workspaceID":{"desc":"The Workspace ID.","readOnly":true,"type":"string"}},"type":"object"},"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/logAnalyticsWorkspaceProperties"}]}}}}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2021-01-01","v":"2021-06-01","o":"replace","f":"","pth":"/List peerings in a resource group/parameters/api-version"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":null,"v":["connectionIdentifier"],"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/direct/properties/connections/x-ms-identifiers"},{"ov":null,"v":["connectionIdentifier"],"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/exchange/properties/connections/x-ms-identifiers"},{"ov":null,"v":true,"o":"add","f":"","pth":"/properties/value/items/properties/sku/properties/family/readOnly"},{"ov":null,"v":true,"o":"add","f":"","pth":"/properties/value/items/properties/sku/properties/size/readOnly"},{"ov":null,"v":true,"o":"add","f":"","pth":"/properties/value/items/properties/sku/properties/tier/readOnly"}]}}}}}}}}}}}}