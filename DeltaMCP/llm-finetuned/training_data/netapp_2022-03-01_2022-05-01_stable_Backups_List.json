{
  "oasdiff": {
    "paths": {
      "modified": {
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2022-03-01",
                        "value": "2022-05-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_List/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Identity for the resource.",
                                "properties": {
                                  "principalId": {
                                    "description": "The principal ID of resource identity.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "The tenant ID of resource.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "The identity type.",
                                    "enum": [
                                      "None",
                                      "SystemAssigned",
                                      "UserAssigned",
                                      "SystemAssigned,UserAssigned"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "IdentityType"
                                    }
                                  },
                                  "userAssignedIdentities": {
                                    "additionalProperties": {
                                      "description": "UserAssignedIdentity for the resource.",
                                      "properties": {
                                        "clientId": {
                                          "description": "The client ID of the identity.",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "principalId": {
                                          "description": "The principal ID of the identity.",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "description": "Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.",
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/identity"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Shows the status of disableShowmount for all volumes under the subscription, null equals false",
                                "readOnly": true,
                                "type": "boolean",
                                "x-nullable": true
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/disableShowmount"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Identity used to authenticate with key vault.",
                                "properties": {
                                  "principalId": {
                                    "description": "The principal ID (object ID) of the identity used to authenticate with key vault. Read-only.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "userAssignedIdentity": {
                                    "description": "The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type has 'UserAssigned'. It should match key of identity.userAssignedIdentities.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/identity"
                            },
                            {
                              "oldValue": null,
                              "value": "Microsoft.NetApp",
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/keySource/default"
                            },
                            {
                              "oldValue": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'.",
                              "value": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.NetApp, Microsoft.KeyVault",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/keySource/description"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "Microsoft.NetApp",
                                "Microsoft.KeyVault"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/keySource/enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "KeySource",
                                "values": [
                                  {
                                    "description": "Microsoft-managed key encryption",
                                    "value": "Microsoft.NetApp"
                                  },
                                  {
                                    "description": "Customer-managed key encryption",
                                    "value": "Microsoft.KeyVault"
                                  }
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/keySource/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Properties of key vault.",
                                "properties": {
                                  "keyName": {
                                    "description": "The name of KeyVault key.",
                                    "type": "string"
                                  },
                                  "keyVaultId": {
                                    "description": "UUID v4 used to identify the Azure Key Vault configuration",
                                    "example": "9760acf5-4638-11e7-9bdb-020073ca7778",
                                    "maxLength": 36,
                                    "minLength": 36,
                                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "keyVaultResourceId": {
                                    "description": "The resource ID of KeyVault.",
                                    "type": "string"
                                  },
                                  "keyVaultUri": {
                                    "description": "The Uri of KeyVault.",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "Status of the KeyVault connection.",
                                    "enum": [
                                      "Created",
                                      "Updating",
                                      "InUse",
                                      "Deleted",
                                      "Error"
                                    ],
                                    "readOnly": true,
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "KeyVaultStatus",
                                      "values": [
                                        {
                                          "description": "KeyVault connection created but not in use",
                                          "value": "Created"
                                        },
                                        {
                                          "description": "KeyVault connection in use by SMB Volume",
                                          "value": "InUse"
                                        },
                                        {
                                          "description": "KeyVault connection Deleted",
                                          "value": "Deleted"
                                        },
                                        {
                                          "description": "Error with the KeyVault connection",
                                          "value": "Error"
                                        },
                                        {
                                          "description": "KeyVault connection Updating",
                                          "value": "Updating"
                                        }
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "keyVaultUri",
                                  "keyName",
                                  "keyVaultResourceId"
                                ],
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/encryption/properties/keyVaultProperties"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2022-03-01",
                        "value": "2022-05-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Accounts_Get/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Identity for the resource.",
                                "properties": {
                                  "principalId": {
                                    "description": "The principal ID of resource identity.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "tenantId": {
                                    "description": "The tenant ID of resource.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "The identity type.",
                                    "enum": [
                                      "None",
                                      "SystemAssigned",
                                      "UserAssigned",
                                      "SystemAssigned,UserAssigned"
                                    ],
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "IdentityType"
                                    }
                                  },
                                  "userAssignedIdentities": {
                                    "additionalProperties": {
                                      "description": "UserAssignedIdentity for the resource.",
                                      "properties": {
                                        "clientId": {
                                          "description": "The client ID of the identity.",
                                          "readOnly": true,
                                          "type": "string"
                                        },
                                        "principalId": {
                                          "description": "The principal ID of the identity.",
                                          "readOnly": true,
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "description": "Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.",
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/identity"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Shows the status of disableShowmount for all volumes under the subscription, null equals false",
                                "readOnly": true,
                                "type": "boolean",
                                "x-nullable": true
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/disableShowmount"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Identity used to authenticate with key vault.",
                                "properties": {
                                  "principalId": {
                                    "description": "The principal ID (object ID) of the identity used to authenticate with key vault. Read-only.",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "userAssignedIdentity": {
                                    "description": "The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type has 'UserAssigned'. It should match key of identity.userAssignedIdentities.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/identity"
                            },
                            {
                              "oldValue": null,
                              "value": "Microsoft.NetApp",
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/default"
                            },
                            {
                              "oldValue": "Encryption Key Source. Possible values are: 'Microsoft.NetApp'.",
                              "value": "The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.NetApp, Microsoft.KeyVault",
                              "op": "replace",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/description"
                            },
                            {
                              "oldValue": null,
                              "value": [
                                "Microsoft.NetApp",
                                "Microsoft.KeyVault"
                              ],
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "modelAsString": true,
                                "name": "KeySource",
                                "values": [
                                  {
                                    "description": "Microsoft-managed key encryption",
                                    "value": "Microsoft.NetApp"
                                  },
                                  {
                                    "description": "Customer-managed key encryption",
                                    "value": "Microsoft.KeyVault"
                                  }
                                ]
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keySource/x-ms-enum"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Properties of key vault.",
                                "properties": {
                                  "keyName": {
                                    "description": "The name of KeyVault key.",
                                    "type": "string"
                                  },
                                  "keyVaultId": {
                                    "description": "UUID v4 used to identify the Azure Key Vault configuration",
                                    "example": "9760acf5-4638-11e7-9bdb-020073ca7778",
                                    "maxLength": 36,
                                    "minLength": 36,
                                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "keyVaultResourceId": {
                                    "description": "The resource ID of KeyVault.",
                                    "type": "string"
                                  },
                                  "keyVaultUri": {
                                    "description": "The Uri of KeyVault.",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "Status of the KeyVault connection.",
                                    "enum": [
                                      "Created",
                                      "Updating",
                                      "InUse",
                                      "Deleted",
                                      "Error"
                                    ],
                                    "readOnly": true,
                                    "type": "string",
                                    "x-ms-enum": {
                                      "modelAsString": true,
                                      "name": "KeyVaultStatus",
                                      "values": [
                                        {
                                          "description": "KeyVault connection created but not in use",
                                          "value": "Created"
                                        },
                                        {
                                          "description": "KeyVault connection in use by SMB Volume",
                                          "value": "InUse"
                                        },
                                        {
                                          "description": "KeyVault connection Deleted",
                                          "value": "Deleted"
                                        },
                                        {
                                          "description": "Error with the KeyVault connection",
                                          "value": "Error"
                                        },
                                        {
                                          "description": "KeyVault connection Updating",
                                          "value": "Updating"
                                        }
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "keyVaultUri",
                                  "keyName",
                                  "keyVaultResourceId"
                                ],
                                "type": "object"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/encryption/properties/keyVaultProperties"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2022-03-01",
                        "value": "2022-05-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_List/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2022-03-01",
                        "value": "2022-05-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Pools_Get/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2022-03-01",
                        "value": "2022-05-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_List/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/deleteBaseSnapshot"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Enables access based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume",
                                "enum": [
                                  "Disabled",
                                  "Enabled"
                                ],
                                "example": "Enabled",
                                "title": "smbAccessBasedEnumeration",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "smbAccessBasedEnumeration",
                                  "values": [
                                    {
                                      "description": "smbAccessBasedEnumeration share setting is disabled",
                                      "value": "Disabled"
                                    },
                                    {
                                      "description": "smbAccessBasedEnumeration share setting is enabled",
                                      "value": "Enabled"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/smbAccessBasedEnumeration"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Enables non browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume",
                                "enum": [
                                  "Disabled",
                                  "Enabled"
                                ],
                                "example": "Enabled",
                                "title": "smbNonBrowsable",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "smbNonBrowsable",
                                  "values": [
                                    {
                                      "description": "smbNonBrowsable share setting is disabled",
                                      "value": "Disabled"
                                    },
                                    {
                                      "description": "smbNonBrowsable share setting is enabled",
                                      "value": "Enabled"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/value/items/properties/properties/properties/smbNonBrowsable"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2022-03-01",
                        "value": "2022-05-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Volumes_Get/parameters/api-version"
                      }
                    ]
                  }
                },
                "responses": {
                  "modified": {
                    "200": {
                      "extensions": {
                        "modified": {
                          "schema": [
                            {
                              "oldValue": null,
                              "value": {
                                "description": "If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false",
                                "type": "boolean"
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/deleteBaseSnapshot"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Enables access based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume",
                                "enum": [
                                  "Disabled",
                                  "Enabled"
                                ],
                                "example": "Enabled",
                                "title": "smbAccessBasedEnumeration",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "smbAccessBasedEnumeration",
                                  "values": [
                                    {
                                      "description": "smbAccessBasedEnumeration share setting is disabled",
                                      "value": "Disabled"
                                    },
                                    {
                                      "description": "smbAccessBasedEnumeration share setting is enabled",
                                      "value": "Enabled"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/smbAccessBasedEnumeration"
                            },
                            {
                              "oldValue": null,
                              "value": {
                                "description": "Enables non browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume",
                                "enum": [
                                  "Disabled",
                                  "Enabled"
                                ],
                                "example": "Enabled",
                                "title": "smbNonBrowsable",
                                "type": "string",
                                "x-ms-enum": {
                                  "modelAsString": true,
                                  "name": "smbNonBrowsable",
                                  "values": [
                                    {
                                      "description": "smbNonBrowsable share setting is disabled",
                                      "value": "Disabled"
                                    },
                                    {
                                      "description": "smbNonBrowsable share setting is enabled",
                                      "value": "Enabled"
                                    }
                                  ]
                                }
                              },
                              "op": "add",
                              "from": "",
                              "path": "/properties/properties/properties/smbNonBrowsable"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups": {
          "operations": {
            "modified": {
              "GET": {
                "extensions": {
                  "modified": {
                    "x-ms-examples": [
                      {
                        "oldValue": "2022-03-01",
                        "value": "2022-05-01",
                        "op": "replace",
                        "from": "",
                        "path": "/Backups_List/parameters/api-version"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tools_a": {
    "Backups_List": "FunctionDef(name='Backups_List', args=arguments(posonlyargs=[], args=[arg(arg='subscriptionId', annotation=Name(id='str', ctx=Load())), arg(arg='resourceGroupName', annotation=Name(id='str', ctx=Load())), arg(arg='accountName', annotation=Name(id='str', ctx=Load())), arg(arg='poolName', annotation=Name(id='str', ctx=Load())), arg(arg='volumeName', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='List all backups for a volume')), Assign(targets=[Name(id='base_url', ctx=Store())], value=Constant(value='https://management.azure.com')), Assign(targets=[Name(id='url', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='base_url', ctx=Load()), conversion=-1), Constant(value='/subscriptions/'), FormattedValue(value=Name(id='subscriptionId', ctx=Load()), conversion=-1), Constant(value='/resourceGroups/'), FormattedValue(value=Name(id='resourceGroupName', ctx=Load()), conversion=-1), Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'), FormattedValue(value=Name(id='accountName', ctx=Load()), conversion=-1), Constant(value='/capacityPools/'), FormattedValue(value=Name(id='poolName', ctx=Load()), conversion=-1), Constant(value='/volumes/'), FormattedValue(value=Name(id='volumeName', ctx=Load()), conversion=-1), Constant(value='/backups')])), Assign(targets=[Name(id='params', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cookies', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='extra_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='EXTRA_HEADERS')], keywords=[])), If(test=Name(id='extra_headers', ctx=Load()), body=[Try(body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='extra_headers', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Failed to parse EXTRA_HEADERS:'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='auth_error_msgs', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='access_token', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='access_token', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Authorization'), ctx=Store())], value=JoinedStr(values=[Constant(value='Bearer '), FormattedValue(value=Name(id='access_token', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='auth_error_msgs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='No valid authentication found. Details: '), op=Add(), right=Call(func=Attribute(value=Constant(value='; '), attr='join', ctx=Load()), args=[Name(id='auth_error_msgs', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='subscriptionId', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: subscriptionId')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='resourceGroupName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: resourceGroupName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='accountName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: accountName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='poolName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: poolName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='volumeName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: volumeName')], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='params', value=Name(id='params', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='cookies', value=Name(id='cookies', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='application/json'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Dict(keys=[Constant(value='raw'), Constant(value='status_code')], values=[Attribute(value=Name(id='resp', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Load())]))])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='requests', ctx=Load()), attr='exceptions', ctx=Load()), attr='RequestException', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='HTTP request failed: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected error: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='mcp', ctx=Load()), attr='tool', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='Backups_List')), keyword(arg='description', value=Constant(value='List Backups: List all backups for a volume'))])])"
  },
  "tools_b": {
    "Backups_List": "FunctionDef(name='Backups_List', args=arguments(posonlyargs=[], args=[arg(arg='subscriptionId', annotation=Name(id='str', ctx=Load())), arg(arg='resourceGroupName', annotation=Name(id='str', ctx=Load())), arg(arg='accountName', annotation=Name(id='str', ctx=Load())), arg(arg='poolName', annotation=Name(id='str', ctx=Load())), arg(arg='volumeName', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='List all backups for a volume')), Assign(targets=[Name(id='base_url', ctx=Store())], value=Constant(value='https://management.azure.com')), Assign(targets=[Name(id='url', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='base_url', ctx=Load()), conversion=-1), Constant(value='/subscriptions/'), FormattedValue(value=Name(id='subscriptionId', ctx=Load()), conversion=-1), Constant(value='/resourceGroups/'), FormattedValue(value=Name(id='resourceGroupName', ctx=Load()), conversion=-1), Constant(value='/providers/Microsoft.NetApp/netAppAccounts/'), FormattedValue(value=Name(id='accountName', ctx=Load()), conversion=-1), Constant(value='/capacityPools/'), FormattedValue(value=Name(id='poolName', ctx=Load()), conversion=-1), Constant(value='/volumes/'), FormattedValue(value=Name(id='volumeName', ctx=Load()), conversion=-1), Constant(value='/backups')])), Assign(targets=[Name(id='params', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cookies', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='extra_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='EXTRA_HEADERS')], keywords=[])), If(test=Name(id='extra_headers', ctx=Load()), body=[Try(body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='extra_headers', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Failed to parse EXTRA_HEADERS:'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='auth_error_msgs', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='access_token', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='access_token', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Authorization'), ctx=Store())], value=JoinedStr(values=[Constant(value='Bearer '), FormattedValue(value=Name(id='access_token', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='auth_satisfied', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='auth_error_msgs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='auth_satisfied', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='No valid authentication found. Details: '), op=Add(), right=Call(func=Attribute(value=Constant(value='; '), attr='join', ctx=Load()), args=[Name(id='auth_error_msgs', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='subscriptionId', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: subscriptionId')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='resourceGroupName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: resourceGroupName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='accountName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: accountName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='poolName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: poolName')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='volumeName', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required path parameter: volumeName')], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='params', value=Name(id='params', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='cookies', value=Name(id='cookies', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='application/json'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Dict(keys=[Constant(value='raw'), Constant(value='status_code')], values=[Attribute(value=Name(id='resp', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Load())]))])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='requests', ctx=Load()), attr='exceptions', ctx=Load()), attr='RequestException', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='HTTP request failed: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected error: '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='mcp', ctx=Load()), attr='tool', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='Backups_List')), keyword(arg='description', value=Constant(value='List Backups: List all backups for a volume'))])])"
  }
}