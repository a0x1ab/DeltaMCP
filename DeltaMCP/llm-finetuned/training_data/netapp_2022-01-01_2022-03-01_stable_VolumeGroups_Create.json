{"tools_a":{"VolumeGroups_Create":"@mcp.tool(name='VolumeGroups_Create', description=\"Create the specified volume group and volumes. Creating volume group will create all the volumes specified in request body implicitly. Once volumes are created using volume group, those will be treated as regular volumes thereafter.: Create a volume group along with specified volumes\")\ndef VolumeGroups_Create(subscriptionId: str, resourceGroupName: str, accountName: str, volumeGroupName: str):\n    '''Create a volume group along with specified volumes'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/volumeGroups/{volumeGroupName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if volumeGroupName is None:\n        raise ValueError('Missing required path parameter: volumeGroupName')\n    try:\n        resp = requests.put(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"VolumeGroups_Create":"@mcp.tool(name='VolumeGroups_Create', description=\"Create the specified volume group and volumes. Creating volume group will create all the volumes specified in request body implicitly. Once volumes are created using volume group, those will be treated as regular volumes thereafter.: Create a volume group along with specified volumes\")\ndef VolumeGroups_Create(subscriptionId: str, resourceGroupName: str, accountName: str, volumeGroupName: str):\n    '''Create a volume group along with specified volumes'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/volumeGroups/{volumeGroupName}\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if resourceGroupName is None:\n        raise ValueError('Missing required path parameter: resourceGroupName')\n    if accountName is None:\n        raise ValueError('Missing required path parameter: accountName')\n    if volumeGroupName is None:\n        raise ValueError('Missing required path parameter: volumeGroupName')\n    try:\n        resp = requests.put(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}":{"ops":{"m":{"PUT":{"ext":{"m":{"ex":[{"ov":"2022-01-01","v":"2022-03-01","o":"replace","f":"","pth":"/Accounts_CreateOrUpdate/parameters/api-version"}]}}}}}},"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/volumeGroups/{volumeGroupName}":{"ops":{"m":{"PUT":{"ext":{"m":{"ex":[{"ov":"2022-01-01","v":"2022-03-01","o":"replace","f":"","pth":"/VolumeGroups_Create/parameters/api-version"}]}},"params":{"m":{"body":{"body":{"sch":{"prop":{"m":{"prop":{"prop":{"m":{"volumes":{"items":{"prop":{"m":{"prop":{"prop":{"a":["keyVaultPrivateEndpointResourceId"],"m":{"encryptionKeySource":{"ext":{"m":{"x-ms-enum":[{"ov":null,"v":{"desc":"Customer-managed key encryption","v":"Microsoft.KeyVault"},"o":"add","f":"","pth":"/values/-"}]}},"desc":{"f":"Source of key used to encrypt data in volume. Possible values (case-insensitive) are: 'Microsoft.NetApp'","to":"Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'"},"enum":{"a":["Microsoft.KeyVault"]}},"exportPolicy":{"prop":{"m":{"rules":{"items":{"prop":{"m":{"kerberos5ReadWrite":{"example":{"f":true,"to":false}},"kerberos5iReadWrite":{"example":{"f":true,"to":false}},"kerberos5pReadWrite":{"example":{"f":true,"to":false}}}}}}}}},"kerberosEnabled":{"ext":{"a":["x-ms-mutability"]}},"throughputMibps":{"title":{"f":"Maximum throughput in Mibps that can be achieved by this volume and this will be accepted as input only for manual qosType volume","to":"Maximum throughput in MiB/s that can be achieved by this volume and this will be accepted as input only for manual qosType volume"}},"usageThreshold":{"desc":{"f":"Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 500 GiB. Upper limit is 100TiB, 500Tib for LargeVolume. Specified in bytes.","to":"Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume. Specified in bytes."}}}}}}}}}}}}}}}}}}},"resp":{"m":{"201":{"ext":{"m":{"sch":[{"ov":"Source of key used to encrypt data in volume. Possible values (case-insensitive) are: 'Microsoft.NetApp'","v":"Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'","o":"replace","f":"","pth":"/properties/properties/properties/volumes/items/properties/properties/properties/encryptionKeySource/description"},{"ov":null,"v":"Microsoft.KeyVault","o":"add","f":"","pth":"/properties/properties/properties/volumes/items/properties/properties/properties/encryptionKeySource/enum/-"},{"ov":null,"v":{"desc":"Customer-managed key encryption","v":"Microsoft.KeyVault"},"o":"add","f":"","pth":"/properties/properties/properties/volumes/items/properties/properties/properties/encryptionKeySource/x-ms-enum/values/-"},{"ov":true,"v":false,"o":"replace","f":"","pth":"/properties/properties/properties/volumes/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5ReadWrite/example"},{"ov":true,"v":false,"o":"replace","f":"","pth":"/properties/properties/properties/volumes/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5iReadWrite/example"},{"ov":true,"v":false,"o":"replace","f":"","pth":"/properties/properties/properties/volumes/items/properties/properties/properties/exportPolicy/properties/rules/items/properties/kerberos5pReadWrite/example"},{"ov":null,"v":["read","create"],"o":"add","f":"","pth":"/properties/properties/properties/volumes/items/properties/properties/properties/kerberosEnabled/x-ms-mutability"},{"ov":null,"v":{"desc":"The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'.","type":"string"},"o":"add","f":"","pth":"/properties/properties/properties/volumes/items/properties/properties/properties/keyVaultPrivateEndpointResourceId"},{"ov":"Maximum throughput in Mibps that can be achieved by this volume and this will be accepted as input only for manual qosType volume","v":"Maximum throughput in MiB/s that can be achieved by this volume and this will be accepted as input only for manual qosType volume","o":"replace","f":"","pth":"/properties/properties/properties/volumes/items/properties/properties/properties/throughputMibps/title"},{"ov":"Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 500 GiB. Upper limit is 100TiB, 500Tib for LargeVolume. Specified in bytes.","v":"Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume. Specified in bytes.","o":"replace","f":"","pth":"/properties/properties/properties/volumes/items/properties/properties/properties/usageThreshold/description"}]}}}}}}}}}}}}