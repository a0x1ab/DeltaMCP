{"tools_a":{"RestorableSqlContainers_List":"@mcp.tool(name='RestorableSqlContainers_List', description=\"Show the event feed of all mutations done on all the Azure Cosmos DB SQL containers under a specific database.  This helps in scenario where container was accidentally deleted.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\")\ndef RestorableSqlContainers_List(location: str, instanceId: str, subscriptionId: str, restorableSqlDatabaseRid: Optional[str] = None, startTime: Optional[str] = None, endTime: Optional[str] = None):\n    '''Show the event feed of all mutations done on all the Azure Cosmos DB SQL containers under a specific database.  This helps in scenario where container was accidentally deleted.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableSqlContainers\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if location is None:\n        raise ValueError('Missing required path parameter: location')\n    if instanceId is None:\n        raise ValueError('Missing required path parameter: instanceId')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if restorableSqlDatabaseRid is not None:\n        params['restorableSqlDatabaseRid'] = restorableSqlDatabaseRid\n    if startTime is not None:\n        params['startTime'] = startTime\n    if endTime is not None:\n        params['endTime'] = endTime\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"tools_b":{"RestorableSqlContainers_List":"@mcp.tool(name='RestorableSqlContainers_List', description=\"Show the event feed of all mutations done on all the Azure Cosmos DB SQL containers under a specific database.  This helps in scenario where container was accidentally deleted.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission\")\ndef RestorableSqlContainers_List(location: str, instanceId: str, subscriptionId: str, restorableSqlDatabaseRid: Optional[str] = None, startTime: Optional[str] = None, endTime: Optional[str] = None):\n    '''Show the event feed of all mutations done on all the Azure Cosmos DB SQL containers under a specific database.  This helps in scenario where container was accidentally deleted.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission'''\n    base_url = \"https://management.azure.com\"\n    url = f\"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableSqlContainers\"\n    params = {}\n    headers = {}\n    cookies = {}\n    extra_headers = os.getenv('EXTRA_HEADERS')\n    if extra_headers:\n        try:\n            for k, v in json.loads(extra_headers).items():\n                headers[k] = v\n        except Exception as e:\n            print('Failed to parse EXTRA_HEADERS:', e)\n    auth_satisfied = False\n    auth_error_msgs = []\n    if not auth_satisfied:\n        try:\n            access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            if not access_token:\n                raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')\n            headers['Authorization'] = f'Bearer {access_token}'\n            auth_satisfied = True\n        except Exception as e:\n            auth_error_msgs.append(str(e))\n    if not auth_satisfied:\n        raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))\n    if location is None:\n        raise ValueError('Missing required path parameter: location')\n    if instanceId is None:\n        raise ValueError('Missing required path parameter: instanceId')\n    if subscriptionId is None:\n        raise ValueError('Missing required path parameter: subscriptionId')\n    if restorableSqlDatabaseRid is not None:\n        params['restorableSqlDatabaseRid'] = restorableSqlDatabaseRid\n    if startTime is not None:\n        params['startTime'] = startTime\n    if endTime is not None:\n        params['endTime'] = endTime\n    try:\n        resp = requests.get(url, params=params, headers=headers, cookies=cookies)\n        resp.raise_for_status()  # Raise an exception for bad status codes\n        if 'application/json' in resp.headers.get('Content-Type', ''):\n            return resp.json()\n        else:\n            return {'raw': resp.text, 'status_code': resp.status_code}\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f'HTTP request failed: {str(e)}')\n    except Exception as e:\n        raise ValueError(f'Unexpected error: {str(e)}')"},"p":{"m":{"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2022-08-15-preview","v":"2022-11-15-preview","o":"replace","f":"","pth":"/CosmosDBRestorableDatabaseAccountList/parameters/api-version"}]}}}}}},"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2022-08-15-preview","v":"2022-11-15-preview","o":"replace","f":"","pth":"/CosmosDBRestorableDatabaseAccountGet/parameters/api-version"}]}}}}}},"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableSqlContainers":{"ops":{"m":{"GET":{"ext":{"m":{"ex":[{"ov":"2022-08-15-preview","v":"2022-11-15-preview","o":"replace","f":"","pth":"/CosmosDBRestorableSqlContainerList/parameters/api-version"}]}},"resp":{"m":{"200":{"ext":{"m":{"sch":[{"ov":1,"v":null,"o":"remove","f":"","pth":"/properties/value/items/properties/properties/properties/resource/properties/container/allOf/0/properties/clientEncryptionPolicy/properties/policyFormatVersion/default"},{"ov":"Version of the client encryption policy definition. Please note, user passed value is ignored. Default policy version is 1.","v":"Version of the client encryption policy definition. Supported versions are 1 and 2. Version 2 supports id and partition key path encryption. ","o":"replace","f":"","pth":"/properties/value/items/properties/properties/properties/resource/properties/container/allOf/0/properties/clientEncryptionPolicy/properties/policyFormatVersion/description"},{"ov":null,"v":2,"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/resource/properties/container/allOf/0/properties/clientEncryptionPolicy/properties/policyFormatVersion/maximum"},{"ov":null,"v":1,"o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/resource/properties/container/allOf/0/properties/clientEncryptionPolicy/properties/policyFormatVersion/minimum"},{"ov":null,"v":"policyFormatVersion","o":"add","f":"","pth":"/properties/value/items/properties/properties/properties/resource/properties/container/allOf/0/properties/clientEncryptionPolicy/required/-"}]}}}}}}}}}}}}