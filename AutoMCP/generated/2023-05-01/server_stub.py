# This file is auto-generated by mcp_generator.py.
# MCP server stub generated from OpenAPI spec.
import os
import json
from typing import Optional, Union, Any
from dotenv import load_dotenv
load_dotenv()
from fastmcp import FastMCP
import requests
print("[MCP SERVER] FastMCP server running.")
if __name__ == "__main__":
    mcp = FastMCP("my-server")

    @mcp.tool(name='Operations_List', description="Lists all of the available Storage Rest API operations.")
    def Operations_List():
        '''Lists all of the available Storage Rest API operations.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/providers/Microsoft.Storage/operations"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='Skus_List', description="Lists the available SKUs supported by Microsoft.Storage for given subscription.")
    def Skus_List(subscriptionId: str):
        '''Lists the available SKUs supported by Microsoft.Storage for given subscription.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Storage/skus"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_CheckNameAvailability', description="Checks that the storage account name is valid and is not already in use.")
    def StorageAccounts_CheckNameAvailability(subscriptionId: str):
        '''Checks that the storage account name is valid and is not already in use.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_Create', description="Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.")
    def StorageAccounts_Create(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.put(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_Delete', description="Deletes a storage account in Microsoft Azure.")
    def StorageAccounts_Delete(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''Deletes a storage account in Microsoft Azure.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.delete(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_GetProperties', description="Returns the properties for the specified storage account including but not limited to name, SKU name, location, and account status. The ListKeys operation should be used to retrieve storage keys.")
    def StorageAccounts_GetProperties(resourceGroupName: str, accountName: str, subscriptionId: str, _expand: Optional[str] = None):
        '''Returns the properties for the specified storage account including but not limited to name, SKU name, location, and account status. The ListKeys operation should be used to retrieve storage keys.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        if _expand is not None:
            params['$expand'] = _expand
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_Update', description="The update operation can be used to update the SKU, encryption, access tier, or tags for a storage account. It can also be used to map the account to a custom domain. Only one custom domain is supported per storage account; the replacement/change of custom domain is not supported. In order to replace an old custom domain, the old value must be cleared/unregistered before a new value can be set. The update of multiple properties is supported. This call does not change the storage keys for the account. If you want to change the storage account keys, use the regenerate keys operation. The location and name of the storage account cannot be changed after creation.")
    def StorageAccounts_Update(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''The update operation can be used to update the SKU, encryption, access tier, or tags for a storage account. It can also be used to map the account to a custom domain. Only one custom domain is supported per storage account; the replacement/change of custom domain is not supported. In order to replace an old custom domain, the old value must be cleared/unregistered before a new value can be set. The update of multiple properties is supported. This call does not change the storage keys for the account. If you want to change the storage account keys, use the regenerate keys operation. The location and name of the storage account cannot be changed after creation.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.patch(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='DeletedAccounts_List', description="Lists deleted accounts under the subscription.")
    def DeletedAccounts_List(subscriptionId: str):
        '''Lists deleted accounts under the subscription.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Storage/deletedAccounts"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='DeletedAccounts_Get', description="Get properties of specified deleted account resource.")
    def DeletedAccounts_Get(deletedAccountName: str, location: str, subscriptionId: str):
        '''Get properties of specified deleted account resource.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Storage/locations/{location}/deletedAccounts/{deletedAccountName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if deletedAccountName is None:
            raise ValueError('Missing required path parameter: deletedAccountName')
        if location is None:
            raise ValueError('Missing required path parameter: location')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_List', description="Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.")
    def StorageAccounts_List(subscriptionId: str):
        '''Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_ListByResourceGroup', description="Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.")
    def StorageAccounts_ListByResourceGroup(resourceGroupName: str, subscriptionId: str):
        '''Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_ListKeys', description="Lists the access keys or Kerberos keys (if active directory enabled) for the specified storage account.")
    def StorageAccounts_ListKeys(resourceGroupName: str, accountName: str, subscriptionId: str, _expand: Optional[str] = None):
        '''Lists the access keys or Kerberos keys (if active directory enabled) for the specified storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        if _expand is not None:
            params['$expand'] = _expand
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_RegenerateKey', description="Regenerates one of the access keys or Kerberos keys for the specified storage account.")
    def StorageAccounts_RegenerateKey(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''Regenerates one of the access keys or Kerberos keys for the specified storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='Usages_ListByLocation', description="Gets the current usage count and the limit for the resources of the location under the subscription.")
    def Usages_ListByLocation(location: str, subscriptionId: str):
        '''Gets the current usage count and the limit for the resources of the location under the subscription.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Storage/locations/{location}/usages"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if location is None:
            raise ValueError('Missing required path parameter: location')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_ListAccountSAS', description="List SAS credentials of a storage account.")
    def StorageAccounts_ListAccountSAS(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''List SAS credentials of a storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListAccountSas"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_ListServiceSAS', description="List service SAS credentials of a specific resource.")
    def StorageAccounts_ListServiceSAS(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''List service SAS credentials of a specific resource.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListServiceSas"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_Failover', description="A failover request can be triggered for a storage account in the event a primary endpoint becomes unavailable for any reason. The failover occurs from the storage account's primary cluster to the secondary cluster for RA-GRS accounts. The secondary cluster will become primary after failover and the account is converted to LRS. In the case of a Planned Failover, the primary and secondary clusters are swapped after failover and the account remains geo-replicated. Failover should continue to be used in the event of availability issues as Planned failover is only available while the primary and secondary endpoints are available. The primary use case of a Planned Failover is disaster recovery testing drills. This type of failover is invoked by setting FailoverType parameter to 'Planned'. Learn more about the failover options here- https://learn.microsoft.com/en-us/azure/storage/common/storage-disaster-recovery-guidance")
    def StorageAccounts_Failover(resourceGroupName: str, accountName: str, subscriptionId: str, failoverType: Optional[str] = None):
        '''A failover request can be triggered for a storage account in the event a primary endpoint becomes unavailable for any reason. The failover occurs from the storage account's primary cluster to the secondary cluster for RA-GRS accounts. The secondary cluster will become primary after failover and the account is converted to LRS. In the case of a Planned Failover, the primary and secondary clusters are swapped after failover and the account remains geo-replicated. Failover should continue to be used in the event of availability issues as Planned failover is only available while the primary and secondary endpoints are available. The primary use case of a Planned Failover is disaster recovery testing drills. This type of failover is invoked by setting FailoverType parameter to 'Planned'. Learn more about the failover options here- https://learn.microsoft.com/en-us/azure/storage/common/storage-disaster-recovery-guidance'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/failover"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        if failoverType is not None:
            params['failoverType'] = failoverType
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_HierarchicalNamespaceMigration', description="Live Migration of storage account to enable Hns")
    def StorageAccounts_HierarchicalNamespaceMigration(resourceGroupName: str, accountName: str, subscriptionId: str, requestType: Optional[str] = None):
        '''Live Migration of storage account to enable Hns'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/hnsonmigration"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        if requestType is not None:
            params['requestType'] = requestType
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_AbortHierarchicalNamespaceMigration', description="Abort live Migration of storage account to enable Hns")
    def StorageAccounts_AbortHierarchicalNamespaceMigration(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''Abort live Migration of storage account to enable Hns'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/aborthnsonmigration"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_CustomerInitiatedMigration', description="Account Migration request can be triggered for a storage account to change its redundancy level. The migration updates the non-zonal redundant storage account to a zonal redundant account or vice-versa in order to have better reliability and availability. Zone-redundant storage (ZRS) replicates your storage account synchronously across three Azure availability zones in the primary region.")
    def StorageAccounts_CustomerInitiatedMigration(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''Account Migration request can be triggered for a storage account to change its redundancy level. The migration updates the non-zonal redundant storage account to a zonal redundant account or vice-versa in order to have better reliability and availability. Zone-redundant storage (ZRS) replicates your storage account synchronously across three Azure availability zones in the primary region.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/startAccountMigration"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_GetCustomerInitiatedMigration', description="Gets the status of the ongoing migration for the specified storage account.")
    def StorageAccounts_GetCustomerInitiatedMigration(resourceGroupName: str, accountName: str, migrationName: str, subscriptionId: str):
        '''Gets the status of the ongoing migration for the specified storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/accountMigrations/{migrationName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if migrationName is None:
            raise ValueError('Missing required path parameter: migrationName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_RestoreBlobRanges', description="Restore blobs in the specified blob ranges")
    def StorageAccounts_RestoreBlobRanges(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''Restore blobs in the specified blob ranges'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/restoreBlobRanges"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='ManagementPolicies_Get', description="Gets the managementpolicy associated with the specified storage account.")
    def ManagementPolicies_Get(resourceGroupName: str, accountName: str, managementPolicyName: str, subscriptionId: str):
        '''Gets the managementpolicy associated with the specified storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if managementPolicyName is None:
            raise ValueError('Missing required path parameter: managementPolicyName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='ManagementPolicies_CreateOrUpdate', description="Sets the managementpolicy to the specified storage account.")
    def ManagementPolicies_CreateOrUpdate(resourceGroupName: str, accountName: str, managementPolicyName: str, subscriptionId: str):
        '''Sets the managementpolicy to the specified storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if managementPolicyName is None:
            raise ValueError('Missing required path parameter: managementPolicyName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.put(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='ManagementPolicies_Delete', description="Deletes the managementpolicy associated with the specified storage account.")
    def ManagementPolicies_Delete(resourceGroupName: str, accountName: str, managementPolicyName: str, subscriptionId: str):
        '''Deletes the managementpolicy associated with the specified storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if managementPolicyName is None:
            raise ValueError('Missing required path parameter: managementPolicyName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.delete(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='BlobInventoryPolicies_Get', description="Gets the blob inventory policy associated with the specified storage account.")
    def BlobInventoryPolicies_Get(resourceGroupName: str, accountName: str, blobInventoryPolicyName: str, subscriptionId: str):
        '''Gets the blob inventory policy associated with the specified storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies/{blobInventoryPolicyName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if blobInventoryPolicyName is None:
            raise ValueError('Missing required path parameter: blobInventoryPolicyName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='BlobInventoryPolicies_CreateOrUpdate', description="Sets the blob inventory policy to the specified storage account.")
    def BlobInventoryPolicies_CreateOrUpdate(resourceGroupName: str, accountName: str, blobInventoryPolicyName: str, subscriptionId: str):
        '''Sets the blob inventory policy to the specified storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies/{blobInventoryPolicyName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if blobInventoryPolicyName is None:
            raise ValueError('Missing required path parameter: blobInventoryPolicyName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.put(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='BlobInventoryPolicies_Delete', description="Deletes the blob inventory policy associated with the specified storage account.")
    def BlobInventoryPolicies_Delete(resourceGroupName: str, accountName: str, blobInventoryPolicyName: str, subscriptionId: str):
        '''Deletes the blob inventory policy associated with the specified storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies/{blobInventoryPolicyName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if blobInventoryPolicyName is None:
            raise ValueError('Missing required path parameter: blobInventoryPolicyName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.delete(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='BlobInventoryPolicies_List', description="Gets the blob inventory policy associated with the specified storage account.")
    def BlobInventoryPolicies_List(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''Gets the blob inventory policy associated with the specified storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='PrivateEndpointConnections_List', description="List all the private endpoint connections associated with the storage account.")
    def PrivateEndpointConnections_List(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''List all the private endpoint connections associated with the storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='PrivateEndpointConnections_Get', description="Gets the specified private endpoint connection associated with the storage account.")
    def PrivateEndpointConnections_Get(resourceGroupName: str, accountName: str, subscriptionId: str, privateEndpointConnectionName: str):
        '''Gets the specified private endpoint connection associated with the storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        if privateEndpointConnectionName is None:
            raise ValueError('Missing required path parameter: privateEndpointConnectionName')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='PrivateEndpointConnections_Put', description="Update the state of specified private endpoint connection associated with the storage account.")
    def PrivateEndpointConnections_Put(resourceGroupName: str, accountName: str, subscriptionId: str, privateEndpointConnectionName: str):
        '''Update the state of specified private endpoint connection associated with the storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        if privateEndpointConnectionName is None:
            raise ValueError('Missing required path parameter: privateEndpointConnectionName')
        try:
            resp = requests.put(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='PrivateEndpointConnections_Delete', description="Deletes the specified private endpoint connection associated with the storage account.")
    def PrivateEndpointConnections_Delete(resourceGroupName: str, accountName: str, subscriptionId: str, privateEndpointConnectionName: str):
        '''Deletes the specified private endpoint connection associated with the storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        if privateEndpointConnectionName is None:
            raise ValueError('Missing required path parameter: privateEndpointConnectionName')
        try:
            resp = requests.delete(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='PrivateLinkResources_ListByStorageAccount', description="Gets the private link resources that need to be created for a storage account.")
    def PrivateLinkResources_ListByStorageAccount(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''Gets the private link resources that need to be created for a storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateLinkResources"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='ObjectReplicationPolicies_List', description="List the object replication policies associated with the storage account.")
    def ObjectReplicationPolicies_List(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''List the object replication policies associated with the storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='ObjectReplicationPolicies_Get', description="Get the object replication policy of the storage account by policy ID.")
    def ObjectReplicationPolicies_Get(resourceGroupName: str, accountName: str, objectReplicationPolicyId: str, subscriptionId: str):
        '''Get the object replication policy of the storage account by policy ID.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies/{objectReplicationPolicyId}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if objectReplicationPolicyId is None:
            raise ValueError('Missing required path parameter: objectReplicationPolicyId')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='ObjectReplicationPolicies_CreateOrUpdate', description="Create or update the object replication policy of the storage account.")
    def ObjectReplicationPolicies_CreateOrUpdate(resourceGroupName: str, accountName: str, objectReplicationPolicyId: str, subscriptionId: str):
        '''Create or update the object replication policy of the storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies/{objectReplicationPolicyId}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if objectReplicationPolicyId is None:
            raise ValueError('Missing required path parameter: objectReplicationPolicyId')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.put(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='ObjectReplicationPolicies_Delete', description="Deletes the object replication policy associated with the specified storage account.")
    def ObjectReplicationPolicies_Delete(resourceGroupName: str, accountName: str, objectReplicationPolicyId: str, subscriptionId: str):
        '''Deletes the object replication policy associated with the specified storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies/{objectReplicationPolicyId}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if objectReplicationPolicyId is None:
            raise ValueError('Missing required path parameter: objectReplicationPolicyId')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.delete(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_RevokeUserDelegationKeys', description="Revoke user delegation keys.")
    def StorageAccounts_RevokeUserDelegationKeys(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''Revoke user delegation keys.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/revokeUserDelegationKeys"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='LocalUsers_List', description="List the local users associated with the storage account.")
    def LocalUsers_List(resourceGroupName: str, accountName: str, subscriptionId: str, _maxpagesize: Optional[str] = None, _filter: Optional[str] = None, _include: Optional[str] = None):
        '''List the local users associated with the storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        if _maxpagesize is not None:
            params['$maxpagesize'] = _maxpagesize
        if _filter is not None:
            params['$filter'] = _filter
        if _include is not None:
            params['$include'] = _include
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='LocalUsers_Get', description="Get the local user of the storage account by username.")
    def LocalUsers_Get(resourceGroupName: str, accountName: str, username: str, subscriptionId: str):
        '''Get the local user of the storage account by username.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers/{username}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if username is None:
            raise ValueError('Missing required path parameter: username')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='LocalUsers_CreateOrUpdate', description="Create or update the properties of a local user associated with the storage account. Properties for NFSv3 enablement and extended groups cannot be set with other properties.")
    def LocalUsers_CreateOrUpdate(resourceGroupName: str, accountName: str, username: str, subscriptionId: str):
        '''Create or update the properties of a local user associated with the storage account. Properties for NFSv3 enablement and extended groups cannot be set with other properties.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers/{username}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if username is None:
            raise ValueError('Missing required path parameter: username')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.put(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='LocalUsers_Delete', description="Deletes the local user associated with the specified storage account.")
    def LocalUsers_Delete(resourceGroupName: str, accountName: str, username: str, subscriptionId: str):
        '''Deletes the local user associated with the specified storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers/{username}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if username is None:
            raise ValueError('Missing required path parameter: username')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.delete(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='LocalUsers_ListKeys', description="List SSH authorized keys and shared key of the local user.")
    def LocalUsers_ListKeys(resourceGroupName: str, accountName: str, username: str, subscriptionId: str):
        '''List SSH authorized keys and shared key of the local user.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers/{username}/listKeys"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if username is None:
            raise ValueError('Missing required path parameter: username')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='LocalUsers_RegeneratePassword', description="Regenerate the local user SSH password.")
    def LocalUsers_RegeneratePassword(resourceGroupName: str, accountName: str, username: str, subscriptionId: str):
        '''Regenerate the local user SSH password.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers/{username}/regeneratePassword"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if username is None:
            raise ValueError('Missing required path parameter: username')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='EncryptionScopes_Put', description="Synchronously creates or updates an encryption scope under the specified storage account. If an encryption scope is already created and a subsequent request is issued with different properties, the encryption scope properties will be updated per the specified request.")
    def EncryptionScopes_Put(resourceGroupName: str, accountName: str, encryptionScopeName: str, subscriptionId: str):
        '''Synchronously creates or updates an encryption scope under the specified storage account. If an encryption scope is already created and a subsequent request is issued with different properties, the encryption scope properties will be updated per the specified request.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if encryptionScopeName is None:
            raise ValueError('Missing required path parameter: encryptionScopeName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.put(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='EncryptionScopes_Patch', description="Update encryption scope properties as specified in the request body. Update fails if the specified encryption scope does not already exist.")
    def EncryptionScopes_Patch(resourceGroupName: str, accountName: str, encryptionScopeName: str, subscriptionId: str):
        '''Update encryption scope properties as specified in the request body. Update fails if the specified encryption scope does not already exist.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if encryptionScopeName is None:
            raise ValueError('Missing required path parameter: encryptionScopeName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.patch(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='EncryptionScopes_Get', description="Returns the properties for the specified encryption scope.")
    def EncryptionScopes_Get(resourceGroupName: str, accountName: str, encryptionScopeName: str, subscriptionId: str):
        '''Returns the properties for the specified encryption scope.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if encryptionScopeName is None:
            raise ValueError('Missing required path parameter: encryptionScopeName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='EncryptionScopes_List', description="Lists all the encryption scopes available under the specified storage account.")
    def EncryptionScopes_List(resourceGroupName: str, accountName: str, subscriptionId: str, _maxpagesize: Optional[str] = None, _filter: Optional[str] = None, _include: Optional[str] = None):
        '''Lists all the encryption scopes available under the specified storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        if _maxpagesize is not None:
            params['$maxpagesize'] = _maxpagesize
        if _filter is not None:
            params['$filter'] = _filter
        if _include is not None:
            params['$include'] = _include
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    mcp.run(transport="stdio")
