# This file is auto-generated by mcp_generator.py.
# MCP server stub generated from OpenAPI spec.
import os
import json
from typing import Optional, Union, Any
from dotenv import load_dotenv
load_dotenv()
from fastmcp import FastMCP
import requests
print("[MCP SERVER] FastMCP server running.")
if __name__ == "__main__":
    mcp = FastMCP("my-server")

    @mcp.tool(name='Operations_List', description="Lists all of the available Storage Rest API operations.")
    def Operations_List():
        '''Lists all of the available Storage Rest API operations.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/providers/Microsoft.Storage/operations"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='Skus_List', description="Lists the available SKUs supported by Microsoft.Storage for given subscription.")
    def Skus_List(subscriptionId: str):
        '''Lists the available SKUs supported by Microsoft.Storage for given subscription.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Storage/skus"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_CheckNameAvailability', description="Checks that the storage account name is valid and is not already in use.")
    def StorageAccounts_CheckNameAvailability(subscriptionId: str):
        '''Checks that the storage account name is valid and is not already in use.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_Create', description="Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.")
    def StorageAccounts_Create(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.put(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_Delete', description="Deletes a storage account in Microsoft Azure.")
    def StorageAccounts_Delete(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''Deletes a storage account in Microsoft Azure.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.delete(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_GetProperties', description="Returns the properties for the specified storage account including but not limited to name, SKU name, location, and account status. The ListKeys operation should be used to retrieve storage keys.")
    def StorageAccounts_GetProperties(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''Returns the properties for the specified storage account including but not limited to name, SKU name, location, and account status. The ListKeys operation should be used to retrieve storage keys.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_Update', description="The update operation can be used to update the SKU, encryption, access tier, or tags for a storage account. It can also be used to map the account to a custom domain. Only one custom domain is supported per storage account; the replacement/change of custom domain is not supported. In order to replace an old custom domain, the old value must be cleared/unregistered before a new value can be set. The update of multiple properties is supported. This call does not change the storage keys for the account. If you want to change the storage account keys, use the regenerate keys operation. The location and name of the storage account cannot be changed after creation.")
    def StorageAccounts_Update(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''The update operation can be used to update the SKU, encryption, access tier, or tags for a storage account. It can also be used to map the account to a custom domain. Only one custom domain is supported per storage account; the replacement/change of custom domain is not supported. In order to replace an old custom domain, the old value must be cleared/unregistered before a new value can be set. The update of multiple properties is supported. This call does not change the storage keys for the account. If you want to change the storage account keys, use the regenerate keys operation. The location and name of the storage account cannot be changed after creation.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.patch(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_List', description="Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.")
    def StorageAccounts_List(subscriptionId: str):
        '''Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_ListByResourceGroup', description="Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.")
    def StorageAccounts_ListByResourceGroup(resourceGroupName: str, subscriptionId: str):
        '''Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_ListKeys', description="Lists the access keys for the specified storage account.")
    def StorageAccounts_ListKeys(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''Lists the access keys for the specified storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_RegenerateKey', description="Regenerates one of the access keys for the specified storage account.")
    def StorageAccounts_RegenerateKey(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''Regenerates one of the access keys for the specified storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='Usage_List', description="Gets the current usage count and the limit for the resources under the subscription.")
    def Usage_List(subscriptionId: str):
        '''Gets the current usage count and the limit for the resources under the subscription.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Storage/usages"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='Usage_ListByLocation', description="Gets the current usage count and the limit for the resources of the location under the subscription.")
    def Usage_ListByLocation(location: str, subscriptionId: str):
        '''Gets the current usage count and the limit for the resources of the location under the subscription.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/providers/Microsoft.Storage/locations/{location}/usages"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if location is None:
            raise ValueError('Missing required path parameter: location')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.get(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_ListAccountSAS', description="List SAS credentials of a storage account.")
    def StorageAccounts_ListAccountSAS(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''List SAS credentials of a storage account.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListAccountSas"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    @mcp.tool(name='StorageAccounts_ListServiceSAS', description="List service SAS credentials of a specific resource.")
    def StorageAccounts_ListServiceSAS(resourceGroupName: str, accountName: str, subscriptionId: str):
        '''List service SAS credentials of a specific resource.'''
        base_url = "https://management.azure.com"
        url = f"{base_url}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListServiceSas"
        params = {}
        headers = {}
        cookies = {}
        extra_headers = os.getenv('EXTRA_HEADERS')
        if extra_headers:
            try:
                for k, v in json.loads(extra_headers).items():
                    headers[k] = v
            except Exception as e:
                print('Failed to parse EXTRA_HEADERS:', e)
        auth_satisfied = False
        auth_error_msgs = []
        if not auth_satisfied:
            try:
                access_token = os.getenv('AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                if not access_token:
                    raise ValueError('Missing OAuth2 access token in .env: AZURE_AUTH_AUTHORIZATIONCODE_ACCESS_TOKEN')
                headers['Authorization'] = f'Bearer {access_token}'
                auth_satisfied = True
            except Exception as e:
                auth_error_msgs.append(str(e))
        if not auth_satisfied:
            raise ValueError('No valid authentication found. Details: ' + '; '.join(auth_error_msgs))
        if resourceGroupName is None:
            raise ValueError('Missing required path parameter: resourceGroupName')
        if accountName is None:
            raise ValueError('Missing required path parameter: accountName')
        if subscriptionId is None:
            raise ValueError('Missing required path parameter: subscriptionId')
        try:
            resp = requests.post(url, params=params, headers=headers, cookies=cookies)
            resp.raise_for_status()  # Raise an exception for bad status codes
            if 'application/json' in resp.headers.get('Content-Type', ''):
                return resp.json()
            else:
                return {'raw': resp.text, 'status_code': resp.status_code}
        except requests.exceptions.RequestException as e:
            raise ValueError(f'HTTP request failed: {str(e)}')
        except Exception as e:
            raise ValueError(f'Unexpected error: {str(e)}')

    mcp.run(transport="stdio")
